#include "GieseMultipole.hpp"
#include <cmath>
#include <iostream>
double const GlobalAlmC[] = {1.0000000000000000e+00,1.0000000000000000e+00,-2.0000000000000000e+00,-2.0000000000000000e+00,2.0000000000000000e+00,-3.4641016151377544e+00,-3.4641016151377544e+00,6.9282032302755088e+00,6.9282032302755088e+00,6.0000000000000000e+00,-9.7979589711327115e+00,-9.7979589711327115e+00,1.5491933384829668e+01,1.5491933384829668e+01,-3.7947331922020552e+01,-3.7947331922020552e+01,2.4000000000000000e+01,-3.7947331922020552e+01,-3.7947331922020552e+01,5.3665631459994955e+01,5.3665631459994955e+01,-1.0039920318408906e+02,-1.0039920318408906e+02,2.8397182958878159e+02,2.8397182958878159e+02,1.2000000000000000e+02,-1.8590320061795600e+02,-1.8590320061795600e+02,2.4592681838303037e+02,2.4592681838303037e+02,-4.0159681273635624e+02,-4.0159681273635624e+02,8.5191548876634477e+02,8.5191548876634477e+02,-2.6939933184772376e+03,-2.6939933184772376e+03,7.2000000000000000e+02,-1.0998181667894016e+03,-1.0998181667894016e+03,1.3911721676341861e+03,1.3911721676341861e+03,-2.0867582514512792e+03,-2.0867582514512792e+03,3.8098818879330106e+03,3.8098818879330106e+03,-8.9349650251134171e+03,-8.9349650251134171e+03,3.0951626774694734e+04,3.0951626774694734e+04,5.0400000000000000e+03,-7.6197637758660212e+03,-7.6197637758660212e+03,9.3322666057073184e+03,9.3322666057073184e+03,-1.3197818001472819e+04,-1.3197818001472819e+04,2.1886105181141756e+04,2.1886105181141756e+04,-4.3772210362283513e+04,-4.3772210362283513e+04,1.1159767739518596e+05,1.1159767739518596e+05,-4.1756027397251286e+05,-4.1756027397251286e+05,4.0320000000000000e+04,-6.0480000000000000e+04,-6.0480000000000000e+04,7.2287426292544129e+04,7.2287426292544129e+04,-9.7877637895486623e+04,-9.7877637895486623e+04,1.5163138461413587e+05,1.5163138461413587e+05,-2.7335736609793414e+05,-2.7335736609793414e+05,5.9051940256015293e+05,5.9051940256015293e+05,-1.6172039871333486e+06,-1.6172039871333486e+06,6.4688159485333944e+06,6.4688159485333944e+06,3.6288000000000000e+05,-5.4094956511674915e+05,-5.4094956511674915e+05,6.3431959137330763e+05,6.3431959137330763e+05,-8.3051929778903991e+05,-8.3051929778903991e+05,1.2224913054905543e+06,1.2224913054905543e+06,-2.0456192161788079e+06,-2.0456192161788079e+06,3.9613245784711963e+06,3.9613245784711963e+06,-9.1482872469113041e+06,-9.1482872469113041e+06,2.6671611428483281e+07,2.6671611428483281e+07,-1.1315806383751889e+08,-1.1315806383751889e+08,3.6288000000000000e+06,-5.3823802139945487e+06,-5.3823802139945487e+06,6.2150373308613356e+06,6.2150373308613356e+06,-7.9226491569423927e+06,-7.9226491569423927e+06,1.1204317887671700e+07,1.1204317887671700e+07,-1.7715582076804589e+07,-1.7715582076804589e+07,3.1690596627769571e+07,3.1690596627769571e+07,-6.5331838617568389e+07,-6.5331838617568389e+07,1.6002966857089970e+08,1.6002966857089970e+08,-4.9324456491446918e+08,-4.9324456491446918e+08,2.2058567533621216e+09,2.2058567533621216e+09};



void ccdl::SolidHarm_Rlm_F( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
}

void ccdl::SolidHarm_Rlm_G( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
}

void ccdl::SolidHarm_Rlm_H( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
}

void ccdl::SolidHarm_Rlm_I( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
   Y[36] = 2.7777777777777776e-02*( 11.0 * crd[2]*Y[25] - r2*Y[16]);
   a = 3.1428571428571428e-01 * crd[2];
   b = 2.8571428571428571e-02 * r2;
   Y[37] = a*Y[26] - b*Y[17];
   Y[38] = a*Y[27] - b*Y[18];
   a = 3.4375000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[39] = a*Y[28] - b*Y[19];
   Y[40] = a*Y[29] - b*Y[20];
   a = 4.0740740740740738e-01 * crd[2];
   b = 3.7037037037037035e-02 * r2;
   Y[41] = a*Y[30] - b*Y[21];
   Y[42] = a*Y[31] - b*Y[22];
   a = 5.5000000000000004e-01 * crd[2];
   b = 5.0000000000000003e-02 * r2;
   Y[43] = a*Y[32] - b*Y[23];
   Y[44] = a*Y[33] - b*Y[24];
   Y[45] = crd[2]*Y[34];
   Y[46] = crd[2]*Y[35];
   Y[47] = 8.3333333333333329e-02 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -8.3333333333333329e-02 * (crd[1]*Y[34]+crd[0]*Y[35]);
}

void ccdl::SolidHarm_Rlm_J( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
   Y[36] = 2.7777777777777776e-02*( 11.0 * crd[2]*Y[25] - r2*Y[16]);
   a = 3.1428571428571428e-01 * crd[2];
   b = 2.8571428571428571e-02 * r2;
   Y[37] = a*Y[26] - b*Y[17];
   Y[38] = a*Y[27] - b*Y[18];
   a = 3.4375000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[39] = a*Y[28] - b*Y[19];
   Y[40] = a*Y[29] - b*Y[20];
   a = 4.0740740740740738e-01 * crd[2];
   b = 3.7037037037037035e-02 * r2;
   Y[41] = a*Y[30] - b*Y[21];
   Y[42] = a*Y[31] - b*Y[22];
   a = 5.5000000000000004e-01 * crd[2];
   b = 5.0000000000000003e-02 * r2;
   Y[43] = a*Y[32] - b*Y[23];
   Y[44] = a*Y[33] - b*Y[24];
   Y[45] = crd[2]*Y[34];
   Y[46] = crd[2]*Y[35];
   Y[47] = 8.3333333333333329e-02 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -8.3333333333333329e-02 * (crd[1]*Y[34]+crd[0]*Y[35]);
   Y[49] = 2.0408163265306121e-02*( 13.0 * crd[2]*Y[36] - r2*Y[25]);
   a = 2.7083333333333331e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[50] = a*Y[37] - b*Y[26];
   Y[51] = a*Y[38] - b*Y[27];
   a = 2.8888888888888892e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[52] = a*Y[39] - b*Y[28];
   Y[53] = a*Y[40] - b*Y[29];
   a = 3.2500000000000001e-01 * crd[2];
   b = 2.5000000000000001e-02 * r2;
   Y[54] = a*Y[41] - b*Y[30];
   Y[55] = a*Y[42] - b*Y[31];
   a = 3.9393939393939392e-01 * crd[2];
   b = 3.0303030303030304e-02 * r2;
   Y[56] = a*Y[43] - b*Y[32];
   Y[57] = a*Y[44] - b*Y[33];
   a = 5.4166666666666663e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[58] = a*Y[45] - b*Y[34];
   Y[59] = a*Y[46] - b*Y[35];
   Y[60] = crd[2]*Y[47];
   Y[61] = crd[2]*Y[48];
   Y[62] = 7.1428571428571425e-02 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -7.1428571428571425e-02 * (crd[1]*Y[47]+crd[0]*Y[48]);
}

void ccdl::SolidHarm_Rlm_K( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
   Y[36] = 2.7777777777777776e-02*( 11.0 * crd[2]*Y[25] - r2*Y[16]);
   a = 3.1428571428571428e-01 * crd[2];
   b = 2.8571428571428571e-02 * r2;
   Y[37] = a*Y[26] - b*Y[17];
   Y[38] = a*Y[27] - b*Y[18];
   a = 3.4375000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[39] = a*Y[28] - b*Y[19];
   Y[40] = a*Y[29] - b*Y[20];
   a = 4.0740740740740738e-01 * crd[2];
   b = 3.7037037037037035e-02 * r2;
   Y[41] = a*Y[30] - b*Y[21];
   Y[42] = a*Y[31] - b*Y[22];
   a = 5.5000000000000004e-01 * crd[2];
   b = 5.0000000000000003e-02 * r2;
   Y[43] = a*Y[32] - b*Y[23];
   Y[44] = a*Y[33] - b*Y[24];
   Y[45] = crd[2]*Y[34];
   Y[46] = crd[2]*Y[35];
   Y[47] = 8.3333333333333329e-02 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -8.3333333333333329e-02 * (crd[1]*Y[34]+crd[0]*Y[35]);
   Y[49] = 2.0408163265306121e-02*( 13.0 * crd[2]*Y[36] - r2*Y[25]);
   a = 2.7083333333333331e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[50] = a*Y[37] - b*Y[26];
   Y[51] = a*Y[38] - b*Y[27];
   a = 2.8888888888888892e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[52] = a*Y[39] - b*Y[28];
   Y[53] = a*Y[40] - b*Y[29];
   a = 3.2500000000000001e-01 * crd[2];
   b = 2.5000000000000001e-02 * r2;
   Y[54] = a*Y[41] - b*Y[30];
   Y[55] = a*Y[42] - b*Y[31];
   a = 3.9393939393939392e-01 * crd[2];
   b = 3.0303030303030304e-02 * r2;
   Y[56] = a*Y[43] - b*Y[32];
   Y[57] = a*Y[44] - b*Y[33];
   a = 5.4166666666666663e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[58] = a*Y[45] - b*Y[34];
   Y[59] = a*Y[46] - b*Y[35];
   Y[60] = crd[2]*Y[47];
   Y[61] = crd[2]*Y[48];
   Y[62] = 7.1428571428571425e-02 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -7.1428571428571425e-02 * (crd[1]*Y[47]+crd[0]*Y[48]);
   Y[64] = 1.5625000000000000e-02*( 15.0 * crd[2]*Y[49] - r2*Y[36]);
   a = 2.3809523809523808e-01 * crd[2];
   b = 1.5873015873015872e-02 * r2;
   Y[65] = a*Y[50] - b*Y[37];
   Y[66] = a*Y[51] - b*Y[38];
   a = 2.5000000000000000e-01 * crd[2];
   b = 1.6666666666666666e-02 * r2;
   Y[67] = a*Y[52] - b*Y[39];
   Y[68] = a*Y[53] - b*Y[40];
   a = 2.7272727272727271e-01 * crd[2];
   b = 1.8181818181818181e-02 * r2;
   Y[69] = a*Y[54] - b*Y[41];
   Y[70] = a*Y[55] - b*Y[42];
   a = 3.1250000000000000e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[71] = a*Y[56] - b*Y[43];
   Y[72] = a*Y[57] - b*Y[44];
   a = 3.8461538461538458e-01 * crd[2];
   b = 2.5641025641025640e-02 * r2;
   Y[73] = a*Y[58] - b*Y[45];
   Y[74] = a*Y[59] - b*Y[46];
   a = 5.3571428571428570e-01 * crd[2];
   b = 3.5714285714285712e-02 * r2;
   Y[75] = a*Y[60] - b*Y[47];
   Y[76] = a*Y[61] - b*Y[48];
   Y[77] = crd[2]*Y[62];
   Y[78] = crd[2]*Y[63];
   Y[79] = 6.2500000000000000e-02 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -6.2500000000000000e-02 * (crd[1]*Y[62]+crd[0]*Y[63]);
}

void ccdl::SolidHarm_Rlm_L( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
   Y[36] = 2.7777777777777776e-02*( 11.0 * crd[2]*Y[25] - r2*Y[16]);
   a = 3.1428571428571428e-01 * crd[2];
   b = 2.8571428571428571e-02 * r2;
   Y[37] = a*Y[26] - b*Y[17];
   Y[38] = a*Y[27] - b*Y[18];
   a = 3.4375000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[39] = a*Y[28] - b*Y[19];
   Y[40] = a*Y[29] - b*Y[20];
   a = 4.0740740740740738e-01 * crd[2];
   b = 3.7037037037037035e-02 * r2;
   Y[41] = a*Y[30] - b*Y[21];
   Y[42] = a*Y[31] - b*Y[22];
   a = 5.5000000000000004e-01 * crd[2];
   b = 5.0000000000000003e-02 * r2;
   Y[43] = a*Y[32] - b*Y[23];
   Y[44] = a*Y[33] - b*Y[24];
   Y[45] = crd[2]*Y[34];
   Y[46] = crd[2]*Y[35];
   Y[47] = 8.3333333333333329e-02 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -8.3333333333333329e-02 * (crd[1]*Y[34]+crd[0]*Y[35]);
   Y[49] = 2.0408163265306121e-02*( 13.0 * crd[2]*Y[36] - r2*Y[25]);
   a = 2.7083333333333331e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[50] = a*Y[37] - b*Y[26];
   Y[51] = a*Y[38] - b*Y[27];
   a = 2.8888888888888892e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[52] = a*Y[39] - b*Y[28];
   Y[53] = a*Y[40] - b*Y[29];
   a = 3.2500000000000001e-01 * crd[2];
   b = 2.5000000000000001e-02 * r2;
   Y[54] = a*Y[41] - b*Y[30];
   Y[55] = a*Y[42] - b*Y[31];
   a = 3.9393939393939392e-01 * crd[2];
   b = 3.0303030303030304e-02 * r2;
   Y[56] = a*Y[43] - b*Y[32];
   Y[57] = a*Y[44] - b*Y[33];
   a = 5.4166666666666663e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[58] = a*Y[45] - b*Y[34];
   Y[59] = a*Y[46] - b*Y[35];
   Y[60] = crd[2]*Y[47];
   Y[61] = crd[2]*Y[48];
   Y[62] = 7.1428571428571425e-02 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -7.1428571428571425e-02 * (crd[1]*Y[47]+crd[0]*Y[48]);
   Y[64] = 1.5625000000000000e-02*( 15.0 * crd[2]*Y[49] - r2*Y[36]);
   a = 2.3809523809523808e-01 * crd[2];
   b = 1.5873015873015872e-02 * r2;
   Y[65] = a*Y[50] - b*Y[37];
   Y[66] = a*Y[51] - b*Y[38];
   a = 2.5000000000000000e-01 * crd[2];
   b = 1.6666666666666666e-02 * r2;
   Y[67] = a*Y[52] - b*Y[39];
   Y[68] = a*Y[53] - b*Y[40];
   a = 2.7272727272727271e-01 * crd[2];
   b = 1.8181818181818181e-02 * r2;
   Y[69] = a*Y[54] - b*Y[41];
   Y[70] = a*Y[55] - b*Y[42];
   a = 3.1250000000000000e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[71] = a*Y[56] - b*Y[43];
   Y[72] = a*Y[57] - b*Y[44];
   a = 3.8461538461538458e-01 * crd[2];
   b = 2.5641025641025640e-02 * r2;
   Y[73] = a*Y[58] - b*Y[45];
   Y[74] = a*Y[59] - b*Y[46];
   a = 5.3571428571428570e-01 * crd[2];
   b = 3.5714285714285712e-02 * r2;
   Y[75] = a*Y[60] - b*Y[47];
   Y[76] = a*Y[61] - b*Y[48];
   Y[77] = crd[2]*Y[62];
   Y[78] = crd[2]*Y[63];
   Y[79] = 6.2500000000000000e-02 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -6.2500000000000000e-02 * (crd[1]*Y[62]+crd[0]*Y[63]);
   Y[81] = 1.2345679012345678e-02*( 17.0 * crd[2]*Y[64] - r2*Y[49]);
   a = 2.1250000000000002e-01 * crd[2];
   b = 1.2500000000000001e-02 * r2;
   Y[82] = a*Y[65] - b*Y[50];
   Y[83] = a*Y[66] - b*Y[51];
   a = 2.2077922077922080e-01 * crd[2];
   b = 1.2987012987012988e-02 * r2;
   Y[84] = a*Y[67] - b*Y[52];
   Y[85] = a*Y[68] - b*Y[53];
   a = 2.3611111111111110e-01 * crd[2];
   b = 1.3888888888888888e-02 * r2;
   Y[86] = a*Y[69] - b*Y[54];
   Y[87] = a*Y[70] - b*Y[55];
   a = 2.6153846153846155e-01 * crd[2];
   b = 1.5384615384615385e-02 * r2;
   Y[88] = a*Y[71] - b*Y[56];
   Y[89] = a*Y[72] - b*Y[57];
   a = 3.0357142857142855e-01 * crd[2];
   b = 1.7857142857142856e-02 * r2;
   Y[90] = a*Y[73] - b*Y[58];
   Y[91] = a*Y[74] - b*Y[59];
   a = 3.7777777777777777e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[92] = a*Y[75] - b*Y[60];
   Y[93] = a*Y[76] - b*Y[61];
   a = 5.3125000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[94] = a*Y[77] - b*Y[62];
   Y[95] = a*Y[78] - b*Y[63];
   Y[96] = crd[2]*Y[79];
   Y[97] = crd[2]*Y[80];
   Y[98] = 5.5555555555555552e-02 * (crd[1]*Y[80]-crd[0]*Y[79]);
   Y[99] = -5.5555555555555552e-02 * (crd[1]*Y[79]+crd[0]*Y[80]);
}

void ccdl::SolidHarm_Rlm_M( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double a,b;
   Y[0] = 1.;
   Y[1] = crd[2];
   Y[2] = -0.50000000000000000000 * crd[0];
   Y[3] = -0.50000000000000000000 * crd[1];
   Y[4] = 0.25000000000000000000 * ( 3.0 * crd[2] * crd[2] - r2 );
   Y[5] = crd[2] * Y[2];
   Y[6] = crd[2] * Y[3];
   Y[7] = 0.25000000000000000000 * ( crd[1]*Y[3] - crd[0]*Y[2] );
   Y[8] = -0.25000000000000000000 * ( crd[1]*Y[2] + crd[0]*Y[3] );
   Y[9] = 1.1111111111111110e-01*( 5.0 * crd[2]*Y[4] - r2*Y[1]);
   a = 6.2500000000000000e-01 * crd[2];
   b = 1.2500000000000000e-01 * r2;
   Y[10] = a*Y[5] - b*Y[2];
   Y[11] = a*Y[6] - b*Y[3];
   Y[12] = crd[2]*Y[7];
   Y[13] = crd[2]*Y[8];
   Y[14] = 1.6666666666666666e-01 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -1.6666666666666666e-01 * (crd[1]*Y[7]+crd[0]*Y[8]);
   Y[16] = 6.2500000000000000e-02*( 7.0 * crd[2]*Y[9] - r2*Y[4]);
   a = 4.6666666666666667e-01 * crd[2];
   b = 6.6666666666666666e-02 * r2;
   Y[17] = a*Y[10] - b*Y[5];
   Y[18] = a*Y[11] - b*Y[6];
   a = 5.8333333333333326e-01 * crd[2];
   b = 8.3333333333333329e-02 * r2;
   Y[19] = a*Y[12] - b*Y[7];
   Y[20] = a*Y[13] - b*Y[8];
   Y[21] = crd[2]*Y[14];
   Y[22] = crd[2]*Y[15];
   Y[23] = 1.2500000000000000e-01 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -1.2500000000000000e-01 * (crd[1]*Y[14]+crd[0]*Y[15]);
   Y[25] = 4.0000000000000001e-02*( 9.0 * crd[2]*Y[16] - r2*Y[9]);
   a = 3.7500000000000000e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[26] = a*Y[17] - b*Y[10];
   Y[27] = a*Y[18] - b*Y[11];
   a = 4.2857142857142855e-01 * crd[2];
   b = 4.7619047619047616e-02 * r2;
   Y[28] = a*Y[19] - b*Y[12];
   Y[29] = a*Y[20] - b*Y[13];
   a = 5.6250000000000000e-01 * crd[2];
   b = 6.2500000000000000e-02 * r2;
   Y[30] = a*Y[21] - b*Y[14];
   Y[31] = a*Y[22] - b*Y[15];
   Y[32] = crd[2]*Y[23];
   Y[33] = crd[2]*Y[24];
   Y[34] = 1.0000000000000001e-01 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -1.0000000000000001e-01 * (crd[1]*Y[23]+crd[0]*Y[24]);
   Y[36] = 2.7777777777777776e-02*( 11.0 * crd[2]*Y[25] - r2*Y[16]);
   a = 3.1428571428571428e-01 * crd[2];
   b = 2.8571428571428571e-02 * r2;
   Y[37] = a*Y[26] - b*Y[17];
   Y[38] = a*Y[27] - b*Y[18];
   a = 3.4375000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[39] = a*Y[28] - b*Y[19];
   Y[40] = a*Y[29] - b*Y[20];
   a = 4.0740740740740738e-01 * crd[2];
   b = 3.7037037037037035e-02 * r2;
   Y[41] = a*Y[30] - b*Y[21];
   Y[42] = a*Y[31] - b*Y[22];
   a = 5.5000000000000004e-01 * crd[2];
   b = 5.0000000000000003e-02 * r2;
   Y[43] = a*Y[32] - b*Y[23];
   Y[44] = a*Y[33] - b*Y[24];
   Y[45] = crd[2]*Y[34];
   Y[46] = crd[2]*Y[35];
   Y[47] = 8.3333333333333329e-02 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -8.3333333333333329e-02 * (crd[1]*Y[34]+crd[0]*Y[35]);
   Y[49] = 2.0408163265306121e-02*( 13.0 * crd[2]*Y[36] - r2*Y[25]);
   a = 2.7083333333333331e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[50] = a*Y[37] - b*Y[26];
   Y[51] = a*Y[38] - b*Y[27];
   a = 2.8888888888888892e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[52] = a*Y[39] - b*Y[28];
   Y[53] = a*Y[40] - b*Y[29];
   a = 3.2500000000000001e-01 * crd[2];
   b = 2.5000000000000001e-02 * r2;
   Y[54] = a*Y[41] - b*Y[30];
   Y[55] = a*Y[42] - b*Y[31];
   a = 3.9393939393939392e-01 * crd[2];
   b = 3.0303030303030304e-02 * r2;
   Y[56] = a*Y[43] - b*Y[32];
   Y[57] = a*Y[44] - b*Y[33];
   a = 5.4166666666666663e-01 * crd[2];
   b = 4.1666666666666664e-02 * r2;
   Y[58] = a*Y[45] - b*Y[34];
   Y[59] = a*Y[46] - b*Y[35];
   Y[60] = crd[2]*Y[47];
   Y[61] = crd[2]*Y[48];
   Y[62] = 7.1428571428571425e-02 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -7.1428571428571425e-02 * (crd[1]*Y[47]+crd[0]*Y[48]);
   Y[64] = 1.5625000000000000e-02*( 15.0 * crd[2]*Y[49] - r2*Y[36]);
   a = 2.3809523809523808e-01 * crd[2];
   b = 1.5873015873015872e-02 * r2;
   Y[65] = a*Y[50] - b*Y[37];
   Y[66] = a*Y[51] - b*Y[38];
   a = 2.5000000000000000e-01 * crd[2];
   b = 1.6666666666666666e-02 * r2;
   Y[67] = a*Y[52] - b*Y[39];
   Y[68] = a*Y[53] - b*Y[40];
   a = 2.7272727272727271e-01 * crd[2];
   b = 1.8181818181818181e-02 * r2;
   Y[69] = a*Y[54] - b*Y[41];
   Y[70] = a*Y[55] - b*Y[42];
   a = 3.1250000000000000e-01 * crd[2];
   b = 2.0833333333333332e-02 * r2;
   Y[71] = a*Y[56] - b*Y[43];
   Y[72] = a*Y[57] - b*Y[44];
   a = 3.8461538461538458e-01 * crd[2];
   b = 2.5641025641025640e-02 * r2;
   Y[73] = a*Y[58] - b*Y[45];
   Y[74] = a*Y[59] - b*Y[46];
   a = 5.3571428571428570e-01 * crd[2];
   b = 3.5714285714285712e-02 * r2;
   Y[75] = a*Y[60] - b*Y[47];
   Y[76] = a*Y[61] - b*Y[48];
   Y[77] = crd[2]*Y[62];
   Y[78] = crd[2]*Y[63];
   Y[79] = 6.2500000000000000e-02 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -6.2500000000000000e-02 * (crd[1]*Y[62]+crd[0]*Y[63]);
   Y[81] = 1.2345679012345678e-02*( 17.0 * crd[2]*Y[64] - r2*Y[49]);
   a = 2.1250000000000002e-01 * crd[2];
   b = 1.2500000000000001e-02 * r2;
   Y[82] = a*Y[65] - b*Y[50];
   Y[83] = a*Y[66] - b*Y[51];
   a = 2.2077922077922080e-01 * crd[2];
   b = 1.2987012987012988e-02 * r2;
   Y[84] = a*Y[67] - b*Y[52];
   Y[85] = a*Y[68] - b*Y[53];
   a = 2.3611111111111110e-01 * crd[2];
   b = 1.3888888888888888e-02 * r2;
   Y[86] = a*Y[69] - b*Y[54];
   Y[87] = a*Y[70] - b*Y[55];
   a = 2.6153846153846155e-01 * crd[2];
   b = 1.5384615384615385e-02 * r2;
   Y[88] = a*Y[71] - b*Y[56];
   Y[89] = a*Y[72] - b*Y[57];
   a = 3.0357142857142855e-01 * crd[2];
   b = 1.7857142857142856e-02 * r2;
   Y[90] = a*Y[73] - b*Y[58];
   Y[91] = a*Y[74] - b*Y[59];
   a = 3.7777777777777777e-01 * crd[2];
   b = 2.2222222222222223e-02 * r2;
   Y[92] = a*Y[75] - b*Y[60];
   Y[93] = a*Y[76] - b*Y[61];
   a = 5.3125000000000000e-01 * crd[2];
   b = 3.1250000000000000e-02 * r2;
   Y[94] = a*Y[77] - b*Y[62];
   Y[95] = a*Y[78] - b*Y[63];
   Y[96] = crd[2]*Y[79];
   Y[97] = crd[2]*Y[80];
   Y[98] = 5.5555555555555552e-02 * (crd[1]*Y[80]-crd[0]*Y[79]);
   Y[99] = -5.5555555555555552e-02 * (crd[1]*Y[79]+crd[0]*Y[80]);
   Y[100] = 1.0000000000000000e-02*( 19.0 * crd[2]*Y[81] - r2*Y[64]);
   a = 1.9191919191919193e-01 * crd[2];
   b = 1.0101010101010102e-02 * r2;
   Y[101] = a*Y[82] - b*Y[65];
   Y[102] = a*Y[83] - b*Y[66];
   a = 1.9791666666666666e-01 * crd[2];
   b = 1.0416666666666666e-02 * r2;
   Y[103] = a*Y[84] - b*Y[67];
   Y[104] = a*Y[85] - b*Y[68];
   a = 2.0879120879120880e-01 * crd[2];
   b = 1.0989010989010990e-02 * r2;
   Y[105] = a*Y[86] - b*Y[69];
   Y[106] = a*Y[87] - b*Y[70];
   a = 2.2619047619047616e-01 * crd[2];
   b = 1.1904761904761904e-02 * r2;
   Y[107] = a*Y[88] - b*Y[71];
   Y[108] = a*Y[89] - b*Y[72];
   a = 2.5333333333333335e-01 * crd[2];
   b = 1.3333333333333334e-02 * r2;
   Y[109] = a*Y[90] - b*Y[73];
   Y[110] = a*Y[91] - b*Y[74];
   a = 2.9687500000000000e-01 * crd[2];
   b = 1.5625000000000000e-02 * r2;
   Y[111] = a*Y[92] - b*Y[75];
   Y[112] = a*Y[93] - b*Y[76];
   a = 3.7254901960784315e-01 * crd[2];
   b = 1.9607843137254902e-02 * r2;
   Y[113] = a*Y[94] - b*Y[77];
   Y[114] = a*Y[95] - b*Y[78];
   a = 5.2777777777777779e-01 * crd[2];
   b = 2.7777777777777776e-02 * r2;
   Y[115] = a*Y[96] - b*Y[79];
   Y[116] = a*Y[97] - b*Y[80];
   Y[117] = crd[2]*Y[98];
   Y[118] = crd[2]*Y[99];
   Y[119] = 5.0000000000000003e-02 * (crd[1]*Y[99]-crd[0]*Y[98]);
   Y[120] = -5.0000000000000003e-02 * (crd[1]*Y[98]+crd[0]*Y[99]);
}

inline void ClmWFromRlm_SS( double const *__restrict__ /* Y */, double *__restrict__ W )
{
   W[0] = 1.;
}

inline void ClmWFromRlm_PS( double const *__restrict__ Y, double *__restrict__ W )
{
   W[0] = 1.;
   W[1] = Y[1];
   W[2] = -2.0000000000000000e+00 * Y[2];
   W[3] = -2.0000000000000000e+00 * Y[3];
}

inline void ClmWFromRlm_PP( double const *__restrict__ /* Y */, double *__restrict__ W )
{
   W[5] = 1.;
   W[10] = 1.;
   W[15] = 1.;
}

inline void ClmWFromRlm_DS( double const *__restrict__ Y, double *__restrict__ W )
{
   W[0] = 1.;
   W[1] = Y[1];
   W[2] = -2.0000000000000000e+00 * Y[2];
   W[3] = -2.0000000000000000e+00 * Y[3];
   W[4] = 2.0000000000000000e+00 * Y[4];
   W[5] = -3.4641016151377544e+00 * Y[5];
   W[6] = -3.4641016151377544e+00 * Y[6];
   W[7] = 6.9282032302755088e+00 * Y[7];
   W[8] = 6.9282032302755088e+00 * Y[8];
}

inline void ClmWFromRlm_DP( double const *__restrict__ Y, double *__restrict__ W )
{
   W[10] = 1.;
   W[13] = 2.0000000000000000e+00 * Y[1];
   W[14] = -3.4641016151377544e+00 * Y[2];
   W[15] = -3.4641016151377544e+00 * Y[3];
   W[20] = 1.;
   W[22] = 2.0000000000000000e+00 * Y[2];
   W[23] = 1.7320508075688772e+00 * Y[1];
   W[25] = W[14];
   W[26] = W[15];
   W[30] = 1.;
   W[31] = 2.0000000000000000e+00 * Y[3];
   W[33] = W[23];
   W[34] = -W[15];
   W[35] = W[14];
}

inline void ClmWFromRlm_DD( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_DP(Y,W);
   W[40] = 1.;
   W[50] = 1.;
   W[60] = 1.;
   W[70] = 1.;
   W[80] = 1.;
}

inline void ClmWFromRlm_FS( double const *__restrict__ Y, double *__restrict__ W )
{
   W[0] = 1.;
   W[1] = Y[1];
   W[2] = -2.0000000000000000e+00 * Y[2];
   W[3] = -2.0000000000000000e+00 * Y[3];
   W[4] = 2.0000000000000000e+00 * Y[4];
   W[5] = -3.4641016151377544e+00 * Y[5];
   W[6] = -3.4641016151377544e+00 * Y[6];
   W[7] = 6.9282032302755088e+00 * Y[7];
   W[8] = 6.9282032302755088e+00 * Y[8];
   W[9] = 6.0000000000000000e+00 * Y[9];
   W[10] = -9.7979589711327115e+00 * Y[10];
   W[11] = -9.7979589711327115e+00 * Y[11];
   W[12] = 1.5491933384829668e+01 * Y[12];
   W[13] = 1.5491933384829668e+01 * Y[13];
   W[14] = -3.7947331922020552e+01 * Y[14];
   W[15] = -3.7947331922020552e+01 * Y[15];
}

inline void ClmWFromRlm_FP( double const *__restrict__ Y, double *__restrict__ W )
{
   W[17] = 1.;
   W[20] = 2.0000000000000000e+00 * Y[1];
   W[21] = -3.4641016151377544e+00 * Y[2];
   W[22] = -3.4641016151377544e+00 * Y[3];
   W[25] = 6.0000000000000000e+00 * Y[4];
   W[26] = -9.7979589711327115e+00 * Y[5];
   W[27] = -9.7979589711327115e+00 * Y[6];
   W[28] = 1.5491933384829668e+01 * Y[7];
   W[29] = 1.5491933384829668e+01 * Y[8];
   W[34] = 1.;
   W[36] = 2.0000000000000000e+00 * Y[2];
   W[37] = 1.7320508075688772e+00 * Y[1];
   W[39] = W[21];
   W[40] = W[22];
   W[41] = 6.0000000000000000e+00 * Y[5];
   W[42] = 4.8989794855663558e+00 * (Y[4]-Y[7]);
   W[43] = -4.8989794855663558e+00 * Y[8];
   W[44] = -7.7459666924148340e+00 * Y[5];
   W[45] = -7.7459666924148340e+00 * Y[6];
   W[46] = 1.8973665961010276e+01 * Y[7];
   W[47] = 1.8973665961010276e+01 * Y[8];
   W[51] = 1.;
   W[52] = 2.0000000000000000e+00 * Y[3];
   W[54] = W[37];
   W[55] = -W[22];
   W[56] = W[21];
   W[57] = 6.0000000000000000e+00 * Y[6];
   W[58] = W[43];
   W[59] = 4.8989794855663558e+00 * (Y[4]+Y[7]);
   W[60] = -W[45];
   W[61] = W[44];
   W[62] = -W[47];
   W[63] = W[46];
}

void ClmWFromRlm_FD( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_FP(Y,W);
   W[68] = 1.;
   W[73] = 3.0000000000000000e+00 * Y[1];
   W[74] = -4.8989794855663558e+00 * Y[2];
   W[75] = -4.8989794855663558e+00 * Y[3];
   W[85] = 1.;
   W[89] = 3.4641016151377548e+00 * Y[2];
   W[90] = 2.8284271247461898e+00 * Y[1];
   W[92] = -4.4721359549995796e+00 * Y[2];
   W[93] = -4.4721359549995796e+00 * Y[3];
   W[102] = 1.;
   W[105] = 3.4641016151377548e+00 * Y[3];
   W[107] = W[90];
   W[108] = -W[93];
   W[109] = W[92];
   W[119] = 1.;
   W[122] = 1.4142135623730949e+00 * Y[2];
   W[123] = -1.4142135623730949e+00 * Y[3];
   W[124] = 2.2360679774997898e+00 * Y[1];
   W[126] = -5.4772255750516612e+00 * Y[2];
   W[127] = -5.4772255750516612e+00 * Y[3];
   W[136] = 1.;
   W[138] = -W[123];
   W[139] = W[122];
   W[141] = W[124];
   W[142] = -W[127];
   W[143] = W[126];
}

void ClmWFromRlm_FF( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_FD(Y,W);
   W[153] = 1.;
   W[170] = 1.;
   W[187] = 1.;
   W[204] = 1.;
   W[221] = 1.;
   W[238] = 1.;
   W[255] = 1.;
}

inline void ClmWFromRlm_GS( double const *__restrict__ Y, double *__restrict__ W )
{
   W[0] = 1.;
   W[1] = Y[1];
   W[2] = -2.0000000000000000e+00 * Y[2];
   W[3] = -2.0000000000000000e+00 * Y[3];
   W[4] = 2.0000000000000000e+00 * Y[4];
   W[5] = -3.4641016151377544e+00 * Y[5];
   W[6] = -3.4641016151377544e+00 * Y[6];
   W[7] = 6.9282032302755088e+00 * Y[7];
   W[8] = 6.9282032302755088e+00 * Y[8];
   W[9] = 6.0000000000000000e+00 * Y[9];
   W[10] = -9.7979589711327115e+00 * Y[10];
   W[11] = -9.7979589711327115e+00 * Y[11];
   W[12] = 1.5491933384829668e+01 * Y[12];
   W[13] = 1.5491933384829668e+01 * Y[13];
   W[14] = -3.7947331922020552e+01 * Y[14];
   W[15] = -3.7947331922020552e+01 * Y[15];
   W[16] = 2.4000000000000000e+01 * Y[16];
   W[17] = -3.7947331922020552e+01 * Y[17];
   W[18] = -3.7947331922020552e+01 * Y[18];
   W[19] = 5.3665631459994955e+01 * Y[19];
   W[20] = 5.3665631459994955e+01 * Y[20];
   W[21] = -1.0039920318408906e+02 * Y[21];
   W[22] = -1.0039920318408906e+02 * Y[22];
   W[23] = 2.8397182958878159e+02 * Y[23];
   W[24] = 2.8397182958878159e+02 * Y[24];
}

void ClmWFromRlm_GP( double const *__restrict__ Y, double *__restrict__ W )
{
   W[26] = 1.;
   W[29] = 2.0000000000000000e+00 * Y[1];
   W[30] = -3.4641016151377544e+00 * Y[2];
   W[31] = -3.4641016151377544e+00 * Y[3];
   W[34] = 6.0000000000000000e+00 * Y[4];
   W[35] = -9.7979589711327115e+00 * Y[5];
   W[36] = -9.7979589711327115e+00 * Y[6];
   W[37] = 1.5491933384829668e+01 * Y[7];
   W[38] = 1.5491933384829668e+01 * Y[8];
   W[41] = 2.4000000000000000e+01 * Y[9];
   W[42] = -3.7947331922020552e+01 * Y[10];
   W[43] = -3.7947331922020552e+01 * Y[11];
   W[44] = 5.3665631459994955e+01 * Y[12];
   W[45] = 5.3665631459994955e+01 * Y[13];
   W[46] = -1.0039920318408906e+02 * Y[14];
   W[47] = -1.0039920318408906e+02 * Y[15];
   W[52] = 1.;
   W[54] = 2.0000000000000000e+00 * Y[2];
   W[55] = 1.7320508075688772e+00 * Y[1];
   W[57] = W[30];
   W[58] = W[31];
   W[59] = 6.0000000000000000e+00 * Y[5];
   W[60] = 4.8989794855663558e+00 * (Y[4]-Y[7]);
   W[61] = -4.8989794855663558e+00 * Y[8];
   W[62] = -7.7459666924148340e+00 * Y[5];
   W[63] = -7.7459666924148340e+00 * Y[6];
   W[64] = 1.8973665961010276e+01 * Y[7];
   W[65] = 1.8973665961010276e+01 * Y[8];
   W[66] = 2.4000000000000000e+01 * Y[10];
   W[67] = 1.8973665961010276e+01 * (Y[9]-Y[12]);
   W[68] = -1.8973665961010276e+01 * Y[13];
   W[69] = -2.6832815729997478e+01 * (Y[10]-Y[14]);
   W[70] = -2.6832815729997478e+01 * (Y[11]-Y[15]);
   W[71] = 5.0199601592044530e+01 * Y[12];
   W[72] = 5.0199601592044530e+01 * Y[13];
   W[73] = -1.4198591479439079e+02 * Y[14];
   W[74] = -1.4198591479439079e+02 * Y[15];
   W[78] = 1.;
   W[79] = 2.0000000000000000e+00 * Y[3];
   W[81] = W[55];
   W[82] = -W[31];
   W[83] = W[30];
   W[84] = 6.0000000000000000e+00 * Y[6];
   W[85] = W[61];
   W[86] = 4.8989794855663558e+00 * (Y[4]+Y[7]);
   W[87] = -W[63];
   W[88] = W[62];
   W[89] = -W[65];
   W[90] = W[64];
   W[91] = 2.4000000000000000e+01 * Y[11];
   W[92] = W[68];
   W[93] = 1.8973665961010276e+01 * (Y[9]+Y[12]);
   W[94] = 2.6832815729997478e+01 * (Y[11]+Y[15]);
   W[95] = -2.6832815729997478e+01 * (Y[10]+Y[14]);
   W[96] = -W[72];
   W[97] = W[71];
   W[98] = -W[74];
   W[99] = W[73];
}

void ClmWFromRlm_GD( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_GP(Y,W);
   W[104] = 1.;
   W[109] = 3.0000000000000000e+00 * Y[1];
   W[110] = -4.8989794855663558e+00 * Y[2];
   W[111] = -4.8989794855663558e+00 * Y[3];
   W[116] = 1.2000000000000000e+01 * Y[4];
   W[117] = -1.8973665961010276e+01 * Y[5];
   W[118] = -1.8973665961010276e+01 * Y[6];
   W[119] = 2.6832815729997478e+01 * Y[7];
   W[120] = 2.6832815729997478e+01 * Y[8];
   W[130] = 1.;
   W[134] = 3.4641016151377548e+00 * Y[2];
   W[135] = 2.8284271247461898e+00 * Y[1];
   W[137] = -4.4721359549995796e+00 * Y[2];
   W[138] = -4.4721359549995796e+00 * Y[3];
   W[141] = 1.3856406460551019e+01 * Y[5];
   W[142] = 1.0954451150103322e+01 * (Y[4]-Y[7]);
   W[143] = -1.0954451150103322e+01 * Y[8];
   W[144] = -1.5491933384829670e+01 * Y[5];
   W[145] = -1.5491933384829670e+01 * Y[6];
   W[146] = 2.8982753492378876e+01 * Y[7];
   W[147] = 2.8982753492378876e+01 * Y[8];
   W[156] = 1.;
   W[159] = 3.4641016151377548e+00 * Y[3];
   W[161] = W[135];
   W[162] = -W[138];
   W[163] = W[137];
   W[166] = 1.3856406460551019e+01 * Y[6];
   W[167] = W[143];
   W[168] = 1.0954451150103322e+01 * (Y[4]+Y[7]);
   W[169] = -W[145];
   W[170] = W[144];
   W[171] = -W[147];
   W[172] = W[146];
   W[182] = 1.;
   W[185] = 1.4142135623730949e+00 * Y[2];
   W[186] = -1.4142135623730949e+00 * Y[3];
   W[187] = 2.2360679774997898e+00 * Y[1];
   W[189] = -5.4772255750516612e+00 * Y[2];
   W[190] = -5.4772255750516612e+00 * Y[3];
   W[191] = 6.9282032302755097e+00 * Y[7];
   W[192] = 5.4772255750516612e+00 * Y[5];
   W[193] = -5.4772255750516612e+00 * Y[6];
   W[194] = 7.7459666924148349e+00 * Y[4];
   W[196] = -1.4491376746189438e+01 * Y[5];
   W[197] = -1.4491376746189438e+01 * Y[6];
   W[198] = 4.0987803063838399e+01 * Y[7];
   W[199] = 4.0987803063838399e+01 * Y[8];
   W[208] = 1.;
   W[210] = -W[186];
   W[211] = W[185];
   W[213] = W[187];
   W[214] = -W[190];
   W[215] = W[189];
   W[216] = 6.9282032302755097e+00 * Y[8];
   W[217] = -W[193];
   W[218] = W[192];
   W[220] = W[194];
   W[221] = -W[197];
   W[222] = W[196];
   W[223] = -W[199];
   W[224] = W[198];
}

void ClmWFromRlm_GF( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_GD(Y,W);
   W[234] = 1.;
   W[241] = 4.0000000000000000e+00 * Y[1];
   W[242] = -6.3245553203367590e+00 * Y[2];
   W[243] = -6.3245553203367590e+00 * Y[3];
   W[260] = 1.;
   W[266] = 4.8989794855663567e+00 * Y[2];
   W[267] = 3.8729833462074175e+00 * Y[1];
   W[269] = -5.4772255750516621e+00 * Y[2];
   W[270] = -5.4772255750516621e+00 * Y[3];
   W[286] = 1.;
   W[291] = 4.8989794855663567e+00 * Y[3];
   W[293] = W[267];
   W[294] = -W[270];
   W[295] = W[269];
   W[312] = 1.;
   W[317] = 2.4494897427831779e+00 * Y[2];
   W[318] = -2.4494897427831779e+00 * Y[3];
   W[319] = 3.4641016151377548e+00 * Y[1];
   W[321] = -6.4807406984078595e+00 * Y[2];
   W[322] = -6.4807406984078595e+00 * Y[3];
   W[338] = 1.;
   W[342] = -W[318];
   W[343] = W[317];
   W[345] = W[319];
   W[346] = -W[322];
   W[347] = W[321];
   W[364] = 1.;
   W[369] = 1.4142135623730951e+00 * Y[2];
   W[370] = -1.4142135623730951e+00 * Y[3];
   W[371] = 2.6457513110645903e+00 * Y[1];
   W[373] = -7.4833147735478835e+00 * Y[2];
   W[374] = -7.4833147735478835e+00 * Y[3];
   W[390] = 1.;
   W[394] = -W[370];
   W[395] = W[369];
   W[397] = W[371];
   W[398] = -W[374];
   W[399] = W[373];
}

void ClmWFromRlm_GG( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_GF(Y,W);
   W[416] = 1.;
   W[442] = 1.;
   W[468] = 1.;
   W[494] = 1.;
   W[520] = 1.;
   W[546] = 1.;
   W[572] = 1.;
   W[598] = 1.;
   W[624] = 1.;
}

void ClmWFromRlm_HS( double const *__restrict__ Y, double *__restrict__ W )
{
   W[0] = 1.;
   W[1] = Y[1];
   W[2] = -2.0000000000000000e+00 * Y[2];
   W[3] = -2.0000000000000000e+00 * Y[3];
   W[4] = 2.0000000000000000e+00 * Y[4];
   W[5] = -3.4641016151377544e+00 * Y[5];
   W[6] = -3.4641016151377544e+00 * Y[6];
   W[7] = 6.9282032302755088e+00 * Y[7];
   W[8] = 6.9282032302755088e+00 * Y[8];
   W[9] = 6.0000000000000000e+00 * Y[9];
   W[10] = -9.7979589711327115e+00 * Y[10];
   W[11] = -9.7979589711327115e+00 * Y[11];
   W[12] = 1.5491933384829668e+01 * Y[12];
   W[13] = 1.5491933384829668e+01 * Y[13];
   W[14] = -3.7947331922020552e+01 * Y[14];
   W[15] = -3.7947331922020552e+01 * Y[15];
   W[16] = 2.4000000000000000e+01 * Y[16];
   W[17] = -3.7947331922020552e+01 * Y[17];
   W[18] = -3.7947331922020552e+01 * Y[18];
   W[19] = 5.3665631459994955e+01 * Y[19];
   W[20] = 5.3665631459994955e+01 * Y[20];
   W[21] = -1.0039920318408906e+02 * Y[21];
   W[22] = -1.0039920318408906e+02 * Y[22];
   W[23] = 2.8397182958878159e+02 * Y[23];
   W[24] = 2.8397182958878159e+02 * Y[24];
   W[25] = 1.2000000000000000e+02 * Y[25];
   W[26] = -1.8590320061795600e+02 * Y[26];
   W[27] = -1.8590320061795600e+02 * Y[27];
   W[28] = 2.4592681838303037e+02 * Y[28];
   W[29] = 2.4592681838303037e+02 * Y[29];
   W[30] = -4.0159681273635624e+02 * Y[30];
   W[31] = -4.0159681273635624e+02 * Y[31];
   W[32] = 8.5191548876634477e+02 * Y[32];
   W[33] = 8.5191548876634477e+02 * Y[33];
   W[34] = -2.6939933184772376e+03 * Y[34];
   W[35] = -2.6939933184772376e+03 * Y[35];
}

void ClmWFromRlm_HP( double const *__restrict__ Y, double *__restrict__ W )
{
   W[37] = 1.;
   W[40] = 2.0000000000000000e+00 * Y[1];
   W[41] = -3.4641016151377544e+00 * Y[2];
   W[42] = -3.4641016151377544e+00 * Y[3];
   W[45] = 6.0000000000000000e+00 * Y[4];
   W[46] = -9.7979589711327115e+00 * Y[5];
   W[47] = -9.7979589711327115e+00 * Y[6];
   W[48] = 1.5491933384829668e+01 * Y[7];
   W[49] = 1.5491933384829668e+01 * Y[8];
   W[52] = 2.4000000000000000e+01 * Y[9];
   W[53] = -3.7947331922020552e+01 * Y[10];
   W[54] = -3.7947331922020552e+01 * Y[11];
   W[55] = 5.3665631459994955e+01 * Y[12];
   W[56] = 5.3665631459994955e+01 * Y[13];
   W[57] = -1.0039920318408906e+02 * Y[14];
   W[58] = -1.0039920318408906e+02 * Y[15];
   W[61] = 1.2000000000000000e+02 * Y[16];
   W[62] = -1.8590320061795600e+02 * Y[17];
   W[63] = -1.8590320061795600e+02 * Y[18];
   W[64] = 2.4592681838303037e+02 * Y[19];
   W[65] = 2.4592681838303037e+02 * Y[20];
   W[66] = -4.0159681273635624e+02 * Y[21];
   W[67] = -4.0159681273635624e+02 * Y[22];
   W[68] = 8.5191548876634477e+02 * Y[23];
   W[69] = 8.5191548876634477e+02 * Y[24];
   W[74] = 1.;
   W[76] = 2.0000000000000000e+00 * Y[2];
   W[77] = 1.7320508075688772e+00 * Y[1];
   W[79] = W[41];
   W[80] = W[42];
   W[81] = 6.0000000000000000e+00 * Y[5];
   W[82] = 4.8989794855663558e+00 * (Y[4]-Y[7]);
   W[83] = -4.8989794855663558e+00 * Y[8];
   W[84] = -7.7459666924148340e+00 * Y[5];
   W[85] = -7.7459666924148340e+00 * Y[6];
   W[86] = 1.8973665961010276e+01 * Y[7];
   W[87] = 1.8973665961010276e+01 * Y[8];
   W[88] = 2.4000000000000000e+01 * Y[10];
   W[89] = 1.8973665961010276e+01 * (Y[9]-Y[12]);
   W[90] = -1.8973665961010276e+01 * Y[13];
   W[91] = -2.6832815729997478e+01 * (Y[10]-Y[14]);
   W[92] = -2.6832815729997478e+01 * (Y[11]-Y[15]);
   W[93] = 5.0199601592044530e+01 * Y[12];
   W[94] = 5.0199601592044530e+01 * Y[13];
   W[95] = -1.4198591479439079e+02 * Y[14];
   W[96] = -1.4198591479439079e+02 * Y[15];
   W[97] = 1.2000000000000000e+02 * Y[17];
   W[98] = 9.2951600308978001e+01 * (Y[16]-Y[19]);
   W[99] = -9.2951600308978001e+01 * Y[20];
   W[100] = -1.2296340919151518e+02 * (Y[17]-Y[21]);
   W[101] = -1.2296340919151518e+02 * (Y[18]-Y[22]);
   W[102] = 2.0079840636817812e+02 * (Y[19]-Y[23]);
   W[103] = 2.0079840636817812e+02 * (Y[20]-Y[24]);
   W[104] = -4.2595774438317238e+02 * Y[21];
   W[105] = -4.2595774438317238e+02 * Y[22];
   W[106] = 1.3469966592386188e+03 * Y[23];
   W[107] = 1.3469966592386188e+03 * Y[24];
   W[111] = 1.;
   W[112] = 2.0000000000000000e+00 * Y[3];
   W[114] = W[77];
   W[115] = -W[42];
   W[116] = W[41];
   W[117] = 6.0000000000000000e+00 * Y[6];
   W[118] = W[83];
   W[119] = 4.8989794855663558e+00 * (Y[4]+Y[7]);
   W[120] = -W[85];
   W[121] = W[84];
   W[122] = -W[87];
   W[123] = W[86];
   W[124] = 2.4000000000000000e+01 * Y[11];
   W[125] = W[90];
   W[126] = 1.8973665961010276e+01 * (Y[9]+Y[12]);
   W[127] = 2.6832815729997478e+01 * (Y[11]+Y[15]);
   W[128] = -2.6832815729997478e+01 * (Y[10]+Y[14]);
   W[129] = -W[94];
   W[130] = W[93];
   W[131] = -W[96];
   W[132] = W[95];
   W[133] = 1.2000000000000000e+02 * Y[18];
   W[134] = W[99];
   W[135] = 9.2951600308978001e+01 * (Y[16]+Y[19]);
   W[136] = 1.2296340919151518e+02 * (Y[18]+Y[22]);
   W[137] = -1.2296340919151518e+02 * (Y[17]+Y[21]);
   W[138] = -2.0079840636817812e+02 * (Y[20]+Y[24]);
   W[139] = 2.0079840636817812e+02 * (Y[19]+Y[23]);
   W[140] = -W[105];
   W[141] = W[104];
   W[142] = -W[107];
   W[143] = W[106];
}

void ClmWFromRlm_HD( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_HP(Y,W);
   W[148] = 1.;
   W[153] = 3.0000000000000000e+00 * Y[1];
   W[154] = -4.8989794855663558e+00 * Y[2];
   W[155] = -4.8989794855663558e+00 * Y[3];
   W[160] = 1.2000000000000000e+01 * Y[4];
   W[161] = -1.8973665961010276e+01 * Y[5];
   W[162] = -1.8973665961010276e+01 * Y[6];
   W[163] = 2.6832815729997478e+01 * Y[7];
   W[164] = 2.6832815729997478e+01 * Y[8];
   W[169] = 6.0000000000000000e+01 * Y[9];
   W[170] = -9.2951600308978001e+01 * Y[10];
   W[171] = -9.2951600308978001e+01 * Y[11];
   W[172] = 1.2296340919151518e+02 * Y[12];
   W[173] = 1.2296340919151518e+02 * Y[13];
   W[174] = -2.0079840636817812e+02 * Y[14];
   W[175] = -2.0079840636817812e+02 * Y[15];
   W[185] = 1.;
   W[189] = 3.4641016151377548e+00 * Y[2];
   W[190] = 2.8284271247461898e+00 * Y[1];
   W[192] = -4.4721359549995796e+00 * Y[2];
   W[193] = -4.4721359549995796e+00 * Y[3];
   W[196] = 1.3856406460551019e+01 * Y[5];
   W[197] = 1.0954451150103322e+01 * (Y[4]-Y[7]);
   W[198] = -1.0954451150103322e+01 * Y[8];
   W[199] = -1.5491933384829670e+01 * Y[5];
   W[200] = -1.5491933384829670e+01 * Y[6];
   W[201] = 2.8982753492378876e+01 * Y[7];
   W[202] = 2.8982753492378876e+01 * Y[8];
   W[205] = 6.9282032302755098e+01 * Y[10];
   W[206] = 5.3665631459994955e+01 * (Y[9]-Y[12]);
   W[207] = -W[56];
   W[208] = -7.0992957397195397e+01 * (Y[10]-Y[14]);
   W[209] = -7.0992957397195397e+01 * (Y[11]-Y[15]);
   W[210] = 1.1593101396951550e+02 * Y[12];
   W[211] = 1.1593101396951550e+02 * Y[13];
   W[212] = -2.4592681838303039e+02 * Y[14];
   W[213] = -2.4592681838303039e+02 * Y[15];
   W[222] = 1.;
   W[225] = 3.4641016151377548e+00 * Y[3];
   W[227] = W[190];
   W[228] = -W[193];
   W[229] = W[192];
   W[232] = 1.3856406460551019e+01 * Y[6];
   W[233] = W[198];
   W[234] = 1.0954451150103322e+01 * (Y[4]+Y[7]);
   W[235] = -W[200];
   W[236] = W[199];
   W[237] = -W[202];
   W[238] = W[201];
   W[241] = 6.9282032302755098e+01 * Y[11];
   W[242] = -W[56];
   W[243] = 5.3665631459994955e+01 * (Y[9]+Y[12]);
   W[244] = 7.0992957397195397e+01 * (Y[11]+Y[15]);
   W[245] = -7.0992957397195397e+01 * (Y[10]+Y[14]);
   W[246] = -W[211];
   W[247] = W[210];
   W[248] = -W[213];
   W[249] = W[212];
   W[259] = 1.;
   W[262] = 1.4142135623730949e+00 * Y[2];
   W[263] = -1.4142135623730949e+00 * Y[3];
   W[264] = 2.2360679774997898e+00 * Y[1];
   W[266] = -5.4772255750516612e+00 * Y[2];
   W[267] = -5.4772255750516612e+00 * Y[3];
   W[268] = 6.9282032302755097e+00 * Y[7];
   W[269] = 5.4772255750516612e+00 * Y[5];
   W[270] = -5.4772255750516612e+00 * Y[6];
   W[271] = 7.7459666924148349e+00 * Y[4];
   W[273] = -1.4491376746189438e+01 * Y[5];
   W[274] = -1.4491376746189438e+01 * Y[6];
   W[275] = 4.0987803063838399e+01 * Y[7];
   W[276] = 4.0987803063838399e+01 * Y[8];
   W[277] = 3.4641016151377549e+01 * Y[12];
   W[278] = -2.6832815729997478e+01 * (Y[14]-Y[10]);
   W[279] = -W[127];
   W[280] = 3.5496478698597699e+01 * Y[9];
   W[282] = -5.7965506984757752e+01 * Y[10];
   W[283] = -5.7965506984757752e+01 * Y[11];
   W[284] = 1.2296340919151520e+02 * Y[12];
   W[285] = 1.2296340919151520e+02 * Y[13];
   W[286] = -3.8884444190447164e+02 * Y[14];
   W[287] = -3.8884444190447164e+02 * Y[15];
   W[296] = 1.;
   W[298] = -W[263];
   W[299] = W[262];
   W[301] = W[264];
   W[302] = -W[267];
   W[303] = W[266];
   W[304] = 6.9282032302755097e+00 * Y[8];
   W[305] = -W[270];
   W[306] = W[269];
   W[308] = W[271];
   W[309] = -W[274];
   W[310] = W[273];
   W[311] = -W[276];
   W[312] = W[275];
   W[313] = 3.4641016151377549e+01 * Y[13];
   W[314] = -2.6832815729997478e+01 * (Y[15]-Y[11]);
   W[315] = -W[128];
   W[317] = W[280];
   W[318] = -W[283];
   W[319] = W[282];
   W[320] = -W[285];
   W[321] = W[284];
   W[322] = -W[287];
   W[323] = W[286];
}

void ClmWFromRlm_HF( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_HD(Y,W);
   W[333] = 1.;
   W[340] = 4.0000000000000000e+00 * Y[1];
   W[341] = -6.3245553203367590e+00 * Y[2];
   W[342] = -6.3245553203367590e+00 * Y[3];
   W[349] = 2.0000000000000000e+01 * Y[4];
   W[350] = -3.0983866769659333e+01 * Y[5];
   W[351] = -3.0983866769659333e+01 * Y[6];
   W[352] = 4.0987803063838392e+01 * Y[7];
   W[353] = 4.0987803063838392e+01 * Y[8];
   W[370] = 1.;
   W[376] = 4.8989794855663567e+00 * Y[2];
   W[377] = 3.8729833462074175e+00 * Y[1];
   W[379] = -5.4772255750516621e+00 * Y[2];
   W[380] = -5.4772255750516621e+00 * Y[3];
   W[385] = 2.4494897427831784e+01 * Y[5];
   W[386] = 1.8973665961010276e+01 * (Y[4]-Y[7]);
   W[387] = -W[87];
   W[388] = -2.5099800796022269e+01 * Y[5];
   W[389] = -2.5099800796022269e+01 * Y[6];
   W[390] = W[352];
   W[391] = W[353];
   W[407] = 1.;
   W[412] = 4.8989794855663567e+00 * Y[3];
   W[414] = W[377];
   W[415] = -W[380];
   W[416] = W[379];
   W[421] = 2.4494897427831784e+01 * Y[6];
   W[422] = -W[87];
   W[423] = 1.8973665961010276e+01 * (Y[4]+Y[7]);
   W[424] = -W[389];
   W[425] = W[388];
   W[426] = -W[353];
   W[427] = W[352];
   W[444] = 1.;
   W[449] = 2.4494897427831779e+00 * Y[2];
   W[450] = -2.4494897427831779e+00 * Y[3];
   W[451] = 3.4641016151377548e+00 * Y[1];
   W[453] = -6.4807406984078595e+00 * Y[2];
   W[454] = -6.4807406984078595e+00 * Y[3];
   W[457] = 1.5491933384829666e+01 * Y[7];
   W[458] = 1.1999999999999998e+01 * Y[5];
   W[459] = -1.1999999999999998e+01 * Y[6];
   W[460] = 1.5874507866387543e+01 * Y[4];
   W[462] = -2.5922962793631438e+01 * Y[5];
   W[463] = -2.5922962793631438e+01 * Y[6];
   W[464] = 5.4990908339470082e+01 * Y[7];
   W[465] = 5.4990908339470082e+01 * Y[8];
   W[481] = 1.;
   W[485] = -W[450];
   W[486] = W[449];
   W[488] = W[451];
   W[489] = -W[454];
   W[490] = W[453];
   W[493] = 1.5491933384829666e+01 * Y[8];
   W[494] = -W[459];
   W[495] = W[458];
   W[497] = W[460];
   W[498] = -W[463];
   W[499] = W[462];
   W[500] = -W[465];
   W[501] = W[464];
   W[518] = 1.;
   W[523] = 1.4142135623730951e+00 * Y[2];
   W[524] = -1.4142135623730951e+00 * Y[3];
   W[525] = 2.6457513110645903e+00 * Y[1];
   W[527] = -7.4833147735478835e+00 * Y[2];
   W[528] = -7.4833147735478835e+00 * Y[3];
   W[530] = 4.8989794855663558e+00 * Y[7];
   W[531] = W[83];
   W[532] = 6.4807406984078604e+00 * Y[5];
   W[533] = -6.4807406984078604e+00 * Y[6];
   W[534] = 1.0583005244258361e+01 * Y[4];
   W[536] = -2.2449944320643649e+01 * Y[5];
   W[537] = -2.2449944320643649e+01 * Y[6];
   W[538] = 7.0992957397195383e+01 * Y[7];
   W[539] = 7.0992957397195383e+01 * Y[8];
   W[555] = 1.;
   W[559] = -W[524];
   W[560] = W[523];
   W[562] = W[525];
   W[563] = -W[528];
   W[564] = W[527];
   W[566] = -W[83];
   W[567] = W[530];
   W[568] = -W[533];
   W[569] = W[532];
   W[571] = W[534];
   W[572] = -W[537];
   W[573] = W[536];
   W[574] = -W[539];
   W[575] = W[538];
}

void ClmWFromRlm_HG( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_HF(Y,W);
   W[592] = 1.;
   W[601] = 5.0000000000000000e+00 * Y[1];
   W[602] = -7.7459666924148332e+00 * Y[2];
   W[603] = -7.7459666924148332e+00 * Y[3];
   W[629] = 1.;
   W[637] = 6.3245553203367582e+00 * Y[2];
   W[638] = 4.8989794855663558e+00 * Y[1];
   W[640] = -6.4807406984078604e+00 * Y[2];
   W[641] = -6.4807406984078604e+00 * Y[3];
   W[666] = 1.;
   W[673] = 6.3245553203367582e+00 * Y[3];
   W[675] = W[638];
   W[676] = -W[641];
   W[677] = W[640];
   W[703] = 1.;
   W[710] = -W[41];
   W[711] = W[42];
   W[712] = 4.5825756949558398e+00 * Y[1];
   W[714] = -7.4833147735478818e+00 * Y[2];
   W[715] = -7.4833147735478818e+00 * Y[3];
   W[740] = 1.;
   W[746] = -W[42];
   W[747] = -W[41];
   W[749] = W[712];
   W[750] = -W[715];
   W[751] = W[714];
   W[777] = 1.;
   W[784] = 2.4494897427831783e+00 * Y[2];
   W[785] = -2.4494897427831783e+00 * Y[3];
   W[786] = W[340];
   W[788] = -8.4852813742385713e+00 * Y[2];
   W[789] = -8.4852813742385713e+00 * Y[3];
   W[814] = 1.;
   W[820] = -W[785];
   W[821] = W[784];
   W[823] = W[340];
   W[824] = -W[789];
   W[825] = W[788];
   W[851] = 1.;
   W[858] = W[262];
   W[859] = W[263];
   W[860] = W[153];
   W[862] = -9.4868329805051363e+00 * Y[2];
   W[863] = -9.4868329805051363e+00 * Y[3];
   W[888] = 1.;
   W[894] = -W[263];
   W[895] = W[262];
   W[897] = W[153];
   W[898] = -W[863];
   W[899] = W[862];
}

void ClmWFromRlm_HH( double const *__restrict__ Y, double *__restrict__ W )
{
   ClmWFromRlm_HG(Y,W);
   W[925] = 1.;
   W[962] = 1.;
   W[999] = 1.;
   W[1036] = 1.;
   W[1073] = 1.;
   W[1110] = 1.;
   W[1147] = 1.;
   W[1184] = 1.;
   W[1221] = 1.;
   W[1258] = 1.;
   W[1295] = 1.;
}

void ccdl::ClmTranslation_SS( double const *__restrict__ /* crd */, double const /* r2 */, double *__restrict__ W )
{
   *W=1.;
}
void ccdl::ClmTranslation_PS( double const *__restrict__ crd, double const /* r2 */, double *__restrict__ W )
{

  W[0]=1.0;
  W[1]= crd[2];
  W[2]= crd[0];
  W[3]= crd[1];
}

void ccdl::ClmTranslation_PP( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_P(crd,r2,W);
   ClmWFromRlm_PP(W,W);
   for ( int i=2; i<4; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_DS( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{

  W[0]=1.0;
  W[1]= crd[2];
  W[2]= -5.000000000000000E-01*crd[0];
  W[3]= -5.000000000000000E-01*crd[1];
  W[4]= 2.500000000000000E-01*(3. * crd[2] * crd[2] - r2);
  W[5] = crd[2]*W[2];
  W[6] = crd[2]*W[3];
  W[7]= 2.500000000000000E-01*( crd[1]*W[3]-crd[0]*W[2] );
  W[8]= -2.500000000000000E-01*( crd[1]*W[2]+crd[0]*W[3] );
  W[2] *=    -2.0000000000000000e+00; // (3,1)
  W[3] *=    -2.0000000000000000e+00; // (4,1)
  W[4] *=     2.0000000000000000e+00; // (5,1)
  W[5] *=    -3.4641016151377544e+00; // (6,1)
  W[6] *=    -3.4641016151377544e+00; // (7,1)
  W[7] *=     6.9282032302755088e+00; // (8,1)
  W[8] *=     6.9282032302755088e+00; // (9,1)
}

void ccdl::ClmTranslation_DP( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_D(crd,r2,W);
   ClmWFromRlm_DP(W,W);
   for ( int i=2; i<9; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_DD( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{

  double Rlm[9];
  Rlm[0]=1.0;
  Rlm[1]= crd[2];
  Rlm[2]= -5.000000000000000E-01*crd[0];
  Rlm[3]= -5.000000000000000E-01*crd[1];
  Rlm[4]= 2.500000000000000E-01*(3. * crd[2] * crd[2] - r2);
  Rlm[5] = crd[2]*Rlm[2];
  Rlm[6] = crd[2]*Rlm[3];
  Rlm[7]= 2.500000000000000E-01*( crd[1]*Rlm[3]-crd[0]*Rlm[2] );
  Rlm[8]= -2.500000000000000E-01*( crd[1]*Rlm[2]+crd[0]*Rlm[3] );

  W[0] = 1.0; // (1,1)
  W[1] =     1.0000000000000000e+00 * Rlm[1]; // (2,1)
  W[2] =    -2.0000000000000000e+00 * Rlm[2]; // (3,1)
  W[3] =    -2.0000000000000000e+00 * Rlm[3]; // (4,1)
  W[4] =     2.0000000000000000e+00 * Rlm[4]; // (5,1)
  W[5] =    -3.4641016151377544e+00 * Rlm[5]; // (6,1)
  W[6] =    -3.4641016151377544e+00 * Rlm[6]; // (7,1)
  W[7] =     6.9282032302755088e+00 * Rlm[7]; // (8,1)
  W[8] =     6.9282032302755088e+00 * Rlm[8]; // (9,1)
  W[10] = 1.0; // (2,2)
  W[13] =     2.0000000000000000e+00 * Rlm[1]; // (5,2)
  W[14] =    -3.4641016151377544e+00 * Rlm[2]; // (6,2)
  W[15] =    -3.4641016151377544e+00 * Rlm[3]; // (7,2)
  W[20] = 1.0;     // (3,3)
  W[22] = -W[2];   // (5,3)
  W[23] =     1.7320508075688772e+00 * Rlm[1]; // (6,3)
  W[25] =  W[14];  // (8,3)
  W[26] =  W[15];  // (9,3)
  W[30] = 1.0;     // (4,4)
  W[31] = -W[3];   // (5,4)
  W[33] =  W[23];  // (7,4)
  W[34] = -W[26];  // (8,4)
  W[35] =  W[25];  // (9,4)
  W[40] = 1.0; // (5,5)
  W[50] = 1.0; // (6,6)
  W[60] = 1.0; // (7,7)
  W[70] = 1.0; // (8,8)
  W[80] = 1.0; // (9,9)
}

void ccdl::ClmTranslation_FS( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_F(crd,r2,W);
   for ( int i=2; i<16; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_FP( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_F(crd,r2,W);
   ClmWFromRlm_FP(W,W);
   for ( int i=2; i<16; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_FD( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_F(crd,r2,W);
   ClmWFromRlm_FD(W,W);
   for ( int i=2; i<16; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_FF( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_F(crd,r2,W);
   ClmWFromRlm_FF(W,W);
   for ( int i=2; i<16; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_GS( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_G(crd,r2,W);
   for ( int i=2; i<25; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_GP( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_G(crd,r2,W);
   ClmWFromRlm_GP(W,W);
   for ( int i=2; i<25; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_GD( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_G(crd,r2,W);
   ClmWFromRlm_GD(W,W);
   for ( int i=2; i<25; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_GF( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_G(crd,r2,W);
   ClmWFromRlm_GF(W,W);
   for ( int i=2; i<25; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_GG( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_G(crd,r2,W);
   ClmWFromRlm_GG(W,W);
   for ( int i=2; i<25; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HS( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HP( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   ClmWFromRlm_HP(W,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HD( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   ClmWFromRlm_HD(W,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HF( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   ClmWFromRlm_HF(W,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HG( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   ClmWFromRlm_HG(W,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

void ccdl::ClmTranslation_HH( double const *__restrict__ crd, double const r2, double *__restrict__ W )
{
   ccdl::SolidHarm_Rlm_H(crd,r2,W);
   ClmWFromRlm_HH(W,W);
   for ( int i=2; i<36; ++i ) W[i] *= GlobalAlmC[i];
}

template <int NA>
inline void ExpHobMatBlk_SS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[0] =  O[0];
}

template <int NA>
inline void ExpHobMatBlk_PS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[1] =  O[1]*W[1];
X[2] =  O[1]*W[2];
X[3] =  O[1]*W[3];
}

template <int NA>
inline void ExpHobMatBlk_PP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[NA] = -X[1];
X[1+NA] = -O[2]*W[1]*W[1]-O[1];
X[2+NA] = -O[2]*W[2]*W[1];
X[3+NA] = -O[2]*W[3]*W[1];
X[NA*2] = -X[2];
X[1+NA*2] =  X[2+NA];
X[2+NA*2] = -O[2]*W[2]*W[2]-O[1];
X[3+NA*2] = -O[2]*W[3]*W[2];
X[NA*3] = -X[3];
X[1+NA*3] =  X[3+NA];
X[2+NA*3] =  X[3+NA*2];
X[3+NA*3] = -O[2]*W[3]*W[3]-O[1];
}

template <int NA>
inline void ExpHobMatBlk_DS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[4] =  O[2]*W[4];
X[5] =  O[2]*W[5];
X[6] =  O[2]*W[6];
X[7] =  O[2]*W[7];
X[8] =  O[2]*W[8];
}

template <int NA>
inline void ExpHobMatBlk_DP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[4+NA] = -O[3]*W[4]*W[1]-O[2]*W[4+NA];
X[5+NA] = -O[3]*W[5]*W[1]-O[2]*W[5+NA];
X[6+NA] = -O[3]*W[6]*W[1]-O[2]*W[6+NA];
X[7+NA] = -O[3]*W[7]*W[1];
X[8+NA] = -O[3]*W[8]*W[1];
X[4+NA*2] = -O[3]*W[4]*W[2]-O[2]*W[4+NA*2];
X[5+NA*2] = -O[3]*W[5]*W[2]-O[2]*W[5+NA*2];
X[6+NA*2] = -O[3]*W[6]*W[2];
X[7+NA*2] = -O[3]*W[7]*W[2]-O[2]*W[7+NA*2];
X[8+NA*2] = -O[3]*W[8]*W[2]-O[2]*W[8+NA*2];
X[4+NA*3] = -O[3]*W[4]*W[3]-O[2]*W[4+NA*3];
X[5+NA*3] = -O[3]*W[5]*W[3];
X[6+NA*3] = -O[3]*W[6]*W[3]-O[2]*W[6+NA*3];
X[7+NA*3] = -O[3]*W[7]*W[3]-O[2]*W[7+NA*3];
X[8+NA*3] = -O[3]*W[8]*W[3]-O[2]*W[8+NA*3];
}

template <int NA>
inline void ExpHobMatBlk_DD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[NA*4] =  X[4];
X[1+NA*4] = -X[4+NA];
X[2+NA*4] = -X[4+NA*2];
X[3+NA*4] = -X[4+NA*3];
X[4+NA*4] =  O[4]*W[4]*W[4]+O[3]*(W[4+NA]*W[4+NA]+W[4+NA*2]*W[4+NA*2]+W[4+NA*3]*W[4+NA*3])+O[2];
X[5+NA*4] =  O[4]*W[5]*W[4]+O[3]*(W[5+NA]*W[4+NA]+W[5+NA*2]*W[4+NA*2]);
X[6+NA*4] =  O[4]*W[6]*W[4]+O[3]*(W[6+NA]*W[4+NA]+W[6+NA*3]*W[4+NA*3]);
X[7+NA*4] =  O[4]*W[7]*W[4]+O[3]*(W[7+NA*2]*W[4+NA*2]+W[7+NA*3]*W[4+NA*3]);
X[8+NA*4] =  O[4]*W[8]*W[4]+O[3]*(W[8+NA*2]*W[4+NA*2]+W[8+NA*3]*W[4+NA*3]);
X[NA*5] =  X[5];
X[1+NA*5] = -X[5+NA];
X[2+NA*5] = -X[5+NA*2];
X[3+NA*5] = -X[5+NA*3];
X[4+NA*5] =  X[5+NA*4];
X[5+NA*5] =  O[4]*W[5]*W[5]+O[3]*(W[5+NA]*W[5+NA]+W[5+NA*2]*W[5+NA*2])+O[2];
X[6+NA*5] =  O[4]*W[6]*W[5]+O[3]*W[6+NA]*W[5+NA];
X[7+NA*5] =  O[4]*W[7]*W[5]+O[3]*W[7+NA*2]*W[5+NA*2];
X[8+NA*5] =  O[4]*W[8]*W[5]+O[3]*W[8+NA*2]*W[5+NA*2];
X[NA*6] =  X[6];
X[1+NA*6] = -X[6+NA];
X[2+NA*6] = -X[6+NA*2];
X[3+NA*6] = -X[6+NA*3];
X[4+NA*6] =  X[6+NA*4];
X[5+NA*6] =  X[6+NA*5];
X[6+NA*6] =  O[4]*W[6]*W[6]+O[3]*(W[6+NA]*W[6+NA]+W[6+NA*3]*W[6+NA*3])+O[2];
X[7+NA*6] =  O[4]*W[7]*W[6]+O[3]*W[7+NA*3]*W[6+NA*3];
X[8+NA*6] =  O[4]*W[8]*W[6]+O[3]*W[8+NA*3]*W[6+NA*3];
X[NA*7] =  X[7];
X[1+NA*7] = -X[7+NA];
X[2+NA*7] = -X[7+NA*2];
X[3+NA*7] = -X[7+NA*3];
X[4+NA*7] =  X[7+NA*4];
X[5+NA*7] =  X[7+NA*5];
X[6+NA*7] =  X[7+NA*6];
X[7+NA*7] =  O[4]*W[7]*W[7]+O[3]*(W[7+NA*2]*W[7+NA*2]+W[7+NA*3]*W[7+NA*3])+O[2];
X[8+NA*7] =  O[4]*W[8]*W[7]+O[3]*(W[8+NA*2]*W[7+NA*2]+W[8+NA*3]*W[7+NA*3]);
X[NA*8] =  X[8];
X[1+NA*8] = -X[8+NA];
X[2+NA*8] = -X[8+NA*2];
X[3+NA*8] = -X[8+NA*3];
X[4+NA*8] =  X[8+NA*4];
X[5+NA*8] =  X[8+NA*5];
X[6+NA*8] =  X[8+NA*6];
X[7+NA*8] =  X[8+NA*7];
X[8+NA*8] =  O[4]*W[8]*W[8]+O[3]*(W[8+NA*2]*W[8+NA*2]+W[8+NA*3]*W[8+NA*3])+O[2];
}

template <int NA>
inline void ExpHobMatBlk_FS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[9] =  O[3]*W[9];
X[10] =  O[3]*W[10];
X[11] =  O[3]*W[11];
X[12] =  O[3]*W[12];
X[13] =  O[3]*W[13];
X[14] =  O[3]*W[14];
X[15] =  O[3]*W[15];
}

template <int NA>
inline void ExpHobMatBlk_FP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[9+NA] = -O[4]*W[9]*W[1]-O[3]*W[9+NA];
X[10+NA] = -O[4]*W[10]*W[1]-O[3]*W[10+NA];
X[11+NA] = -O[4]*W[11]*W[1]-O[3]*W[11+NA];
X[12+NA] = -O[4]*W[12]*W[1]-O[3]*W[12+NA];
X[13+NA] = -O[4]*W[13]*W[1]-O[3]*W[13+NA];
X[14+NA] = -O[4]*W[14]*W[1];
X[15+NA] = -O[4]*W[15]*W[1];
X[9+NA*2] = -O[4]*W[9]*W[2]-O[3]*W[9+NA*2];
X[10+NA*2] = -O[4]*W[10]*W[2]-O[3]*W[10+NA*2];
X[11+NA*2] = -O[4]*W[11]*W[2]-O[3]*W[11+NA*2];
X[12+NA*2] = -O[4]*W[12]*W[2]-O[3]*W[12+NA*2];
X[13+NA*2] = -O[4]*W[13]*W[2]-O[3]*W[13+NA*2];
X[14+NA*2] = -O[4]*W[14]*W[2]-O[3]*W[14+NA*2];
X[15+NA*2] = -O[4]*W[15]*W[2]-O[3]*W[15+NA*2];
X[9+NA*3] = -O[4]*W[9]*W[3]-O[3]*W[9+NA*3];
X[10+NA*3] = -O[4]*W[10]*W[3]-O[3]*W[10+NA*3];
X[11+NA*3] = -O[4]*W[11]*W[3]-O[3]*W[11+NA*3];
X[12+NA*3] = -O[4]*W[12]*W[3]-O[3]*W[12+NA*3];
X[13+NA*3] = -O[4]*W[13]*W[3]-O[3]*W[13+NA*3];
X[14+NA*3] = -O[4]*W[14]*W[3]-O[3]*W[14+NA*3];
X[15+NA*3] = -O[4]*W[15]*W[3]-O[3]*W[15+NA*3];
}

template <int NA>
inline void ExpHobMatBlk_FD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[9+NA*4] =  O[5]*W[9]*W[4]+O[4]*(W[9+NA]*W[4+NA]+W[9+NA*2]*W[4+NA*2]+W[9+NA*3]*W[4+NA*3])+O[3]*W[9+NA*4];
X[10+NA*4] =  O[5]*W[10]*W[4]+O[4]*(W[10+NA]*W[4+NA]+W[10+NA*2]*W[4+NA*2]+W[10+NA*3]*W[4+NA*3])+O[3]*W[10+NA*4];
X[11+NA*4] =  O[5]*W[11]*W[4]+O[4]*(W[11+NA]*W[4+NA]+W[11+NA*2]*W[4+NA*2]+W[11+NA*3]*W[4+NA*3])+O[3]*W[11+NA*4];
X[12+NA*4] =  O[5]*W[12]*W[4]+O[4]*(W[12+NA]*W[4+NA]+W[12+NA*2]*W[4+NA*2]+W[12+NA*3]*W[4+NA*3]);
X[13+NA*4] =  O[5]*W[13]*W[4]+O[4]*(W[13+NA]*W[4+NA]+W[13+NA*2]*W[4+NA*2]+W[13+NA*3]*W[4+NA*3]);
X[14+NA*4] =  O[5]*W[14]*W[4]+O[4]*(W[14+NA*2]*W[4+NA*2]+W[14+NA*3]*W[4+NA*3]);
X[15+NA*4] =  O[5]*W[15]*W[4]+O[4]*(W[15+NA*2]*W[4+NA*2]+W[15+NA*3]*W[4+NA*3]);
X[9+NA*5] =  O[5]*W[9]*W[5]+O[4]*(W[9+NA]*W[5+NA]+W[9+NA*2]*W[5+NA*2])+O[3]*W[9+NA*5];
X[10+NA*5] =  O[5]*W[10]*W[5]+O[4]*(W[10+NA]*W[5+NA]+W[10+NA*2]*W[5+NA*2])+O[3]*W[10+NA*5];
X[11+NA*5] =  O[5]*W[11]*W[5]+O[4]*(W[11+NA]*W[5+NA]+W[11+NA*2]*W[5+NA*2]);
X[12+NA*5] =  O[5]*W[12]*W[5]+O[4]*(W[12+NA]*W[5+NA]+W[12+NA*2]*W[5+NA*2])+O[3]*W[12+NA*5];
X[13+NA*5] =  O[5]*W[13]*W[5]+O[4]*(W[13+NA]*W[5+NA]+W[13+NA*2]*W[5+NA*2])+O[3]*W[13+NA*5];
X[14+NA*5] =  O[5]*W[14]*W[5]+O[4]*W[14+NA*2]*W[5+NA*2];
X[15+NA*5] =  O[5]*W[15]*W[5]+O[4]*W[15+NA*2]*W[5+NA*2];
X[9+NA*6] =  O[5]*W[9]*W[6]+O[4]*(W[9+NA]*W[6+NA]+W[9+NA*3]*W[6+NA*3])+O[3]*W[9+NA*6];
X[10+NA*6] =  O[5]*W[10]*W[6]+O[4]*(W[10+NA]*W[6+NA]+W[10+NA*3]*W[6+NA*3]);
X[11+NA*6] =  O[5]*W[11]*W[6]+O[4]*(W[11+NA]*W[6+NA]+W[11+NA*3]*W[6+NA*3])+O[3]*W[11+NA*6];
X[12+NA*6] =  O[5]*W[12]*W[6]+O[4]*(W[12+NA]*W[6+NA]+W[12+NA*3]*W[6+NA*3])+O[3]*W[12+NA*6];
X[13+NA*6] =  O[5]*W[13]*W[6]+O[4]*(W[13+NA]*W[6+NA]+W[13+NA*3]*W[6+NA*3])+O[3]*W[13+NA*6];
X[14+NA*6] =  O[5]*W[14]*W[6]+O[4]*W[14+NA*3]*W[6+NA*3];
X[15+NA*6] =  O[5]*W[15]*W[6]+O[4]*W[15+NA*3]*W[6+NA*3];
X[9+NA*7] =  O[5]*W[9]*W[7]+O[4]*(W[9+NA*2]*W[7+NA*2]+W[9+NA*3]*W[7+NA*3]);
X[10+NA*7] =  O[5]*W[10]*W[7]+O[4]*(W[10+NA*2]*W[7+NA*2]+W[10+NA*3]*W[7+NA*3])+O[3]*W[10+NA*7];
X[11+NA*7] =  O[5]*W[11]*W[7]+O[4]*(W[11+NA*2]*W[7+NA*2]+W[11+NA*3]*W[7+NA*3])+O[3]*W[11+NA*7];
X[12+NA*7] =  O[5]*W[12]*W[7]+O[4]*(W[12+NA*2]*W[7+NA*2]+W[12+NA*3]*W[7+NA*3])+O[3]*W[12+NA*7];
X[13+NA*7] =  O[5]*W[13]*W[7]+O[4]*(W[13+NA*2]*W[7+NA*2]+W[13+NA*3]*W[7+NA*3]);
X[14+NA*7] =  O[5]*W[14]*W[7]+O[4]*(W[14+NA*2]*W[7+NA*2]+W[14+NA*3]*W[7+NA*3])+O[3]*W[14+NA*7];
X[15+NA*7] =  O[5]*W[15]*W[7]+O[4]*(W[15+NA*2]*W[7+NA*2]+W[15+NA*3]*W[7+NA*3])+O[3]*W[15+NA*7];
X[9+NA*8] =  O[5]*W[9]*W[8]+O[4]*(W[9+NA*2]*W[8+NA*2]+W[9+NA*3]*W[8+NA*3]);
X[10+NA*8] =  O[5]*W[10]*W[8]+O[4]*(W[10+NA*2]*W[8+NA*2]+W[10+NA*3]*W[8+NA*3])+O[3]*W[10+NA*8];
X[11+NA*8] =  O[5]*W[11]*W[8]+O[4]*(W[11+NA*2]*W[8+NA*2]+W[11+NA*3]*W[8+NA*3])+O[3]*W[11+NA*8];
X[12+NA*8] =  O[5]*W[12]*W[8]+O[4]*(W[12+NA*2]*W[8+NA*2]+W[12+NA*3]*W[8+NA*3]);
X[13+NA*8] =  O[5]*W[13]*W[8]+O[4]*(W[13+NA*2]*W[8+NA*2]+W[13+NA*3]*W[8+NA*3])+O[3]*W[13+NA*8];
X[14+NA*8] =  O[5]*W[14]*W[8]+O[4]*(W[14+NA*2]*W[8+NA*2]+W[14+NA*3]*W[8+NA*3])+O[3]*W[14+NA*8];
X[15+NA*8] =  O[5]*W[15]*W[8]+O[4]*(W[15+NA*2]*W[8+NA*2]+W[15+NA*3]*W[8+NA*3])+O[3]*W[15+NA*8];
}

template <int NA>
void ExpHobMatBlk_FF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[NA*9] = -X[9];
X[1+NA*9] =  X[9+NA];
X[2+NA*9] =  X[9+NA*2];
X[3+NA*9] =  X[9+NA*3];
X[4+NA*9] = -X[9+NA*4];
X[5+NA*9] = -X[9+NA*5];
X[6+NA*9] = -X[9+NA*6];
X[7+NA*9] = -X[9+NA*7];
X[8+NA*9] = -X[9+NA*8];
X[9+NA*9] = -O[6]*W[9]*W[9]-O[5]*(W[9+NA]*W[9+NA]+W[9+NA*2]*W[9+NA*2]+W[9+NA*3]*W[9+NA*3])-O[4]*(W[9+NA*4]*W[9+NA*4]+W[9+NA*5]*W[9+NA*5]+W[9+NA*6]*W[9+NA*6])-O[3];
X[10+NA*9] = -O[6]*W[10]*W[9]-O[5]*(W[10+NA]*W[9+NA]+W[10+NA*2]*W[9+NA*2]+W[10+NA*3]*W[9+NA*3])-O[4]*(W[10+NA*4]*W[9+NA*4]+W[10+NA*5]*W[9+NA*5]);
X[11+NA*9] = -O[6]*W[11]*W[9]-O[5]*(W[11+NA]*W[9+NA]+W[11+NA*2]*W[9+NA*2]+W[11+NA*3]*W[9+NA*3])-O[4]*(W[11+NA*4]*W[9+NA*4]+W[11+NA*6]*W[9+NA*6]);
X[12+NA*9] = -O[6]*W[12]*W[9]-O[5]*(W[12+NA]*W[9+NA]+W[12+NA*2]*W[9+NA*2]+W[12+NA*3]*W[9+NA*3])-O[4]*(W[12+NA*5]*W[9+NA*5]+W[12+NA*6]*W[9+NA*6]);
X[13+NA*9] = -O[6]*W[13]*W[9]-O[5]*(W[13+NA]*W[9+NA]+W[13+NA*2]*W[9+NA*2]+W[13+NA*3]*W[9+NA*3])-O[4]*(W[13+NA*5]*W[9+NA*5]+W[13+NA*6]*W[9+NA*6]);
X[14+NA*9] = -O[6]*W[14]*W[9]-O[5]*(W[14+NA*2]*W[9+NA*2]+W[14+NA*3]*W[9+NA*3]);
X[15+NA*9] = -O[6]*W[15]*W[9]-O[5]*(W[15+NA*2]*W[9+NA*2]+W[15+NA*3]*W[9+NA*3]);
X[NA*10] = -X[10];
X[1+NA*10] =  X[10+NA];
X[2+NA*10] =  X[10+NA*2];
X[3+NA*10] =  X[10+NA*3];
X[4+NA*10] = -X[10+NA*4];
X[5+NA*10] = -X[10+NA*5];
X[6+NA*10] = -X[10+NA*6];
X[7+NA*10] = -X[10+NA*7];
X[8+NA*10] = -X[10+NA*8];
X[9+NA*10] =  X[10+NA*9];
X[10+NA*10] = -O[6]*W[10]*W[10]-O[5]*(W[10+NA]*W[10+NA]+W[10+NA*2]*W[10+NA*2]+W[10+NA*3]*W[10+NA*3])-O[4]*(W[10+NA*4]*W[10+NA*4]+W[10+NA*5]*W[10+NA*5]+W[10+NA*7]*W[10+NA*7]+W[10+NA*8]*W[10+NA*8])-O[3];
X[11+NA*10] = -O[6]*W[11]*W[10]-O[5]*(W[11+NA]*W[10+NA]+W[11+NA*2]*W[10+NA*2]+W[11+NA*3]*W[10+NA*3])-O[4]*(W[11+NA*4]*W[10+NA*4]+W[11+NA*7]*W[10+NA*7]+W[11+NA*8]*W[10+NA*8]);
X[12+NA*10] = -O[6]*W[12]*W[10]-O[5]*(W[12+NA]*W[10+NA]+W[12+NA*2]*W[10+NA*2]+W[12+NA*3]*W[10+NA*3])-O[4]*(W[12+NA*5]*W[10+NA*5]+W[12+NA*7]*W[10+NA*7]);
X[13+NA*10] = -O[6]*W[13]*W[10]-O[5]*(W[13+NA]*W[10+NA]+W[13+NA*2]*W[10+NA*2]+W[13+NA*3]*W[10+NA*3])-O[4]*(W[13+NA*5]*W[10+NA*5]+W[13+NA*8]*W[10+NA*8]);
X[14+NA*10] = -O[6]*W[14]*W[10]-O[5]*(W[14+NA*2]*W[10+NA*2]+W[14+NA*3]*W[10+NA*3])-O[4]*(W[14+NA*7]*W[10+NA*7]+W[14+NA*8]*W[10+NA*8]);
X[15+NA*10] = -O[6]*W[15]*W[10]-O[5]*(W[15+NA*2]*W[10+NA*2]+W[15+NA*3]*W[10+NA*3])-O[4]*(W[15+NA*7]*W[10+NA*7]+W[15+NA*8]*W[10+NA*8]);
X[NA*11] = -X[11];
X[1+NA*11] =  X[11+NA];
X[2+NA*11] =  X[11+NA*2];
X[3+NA*11] =  X[11+NA*3];
X[4+NA*11] = -X[11+NA*4];
X[5+NA*11] = -X[11+NA*5];
X[6+NA*11] = -X[11+NA*6];
X[7+NA*11] = -X[11+NA*7];
X[8+NA*11] = -X[11+NA*8];
X[9+NA*11] =  X[11+NA*9];
X[10+NA*11] =  X[11+NA*10];
X[11+NA*11] = -O[6]*W[11]*W[11]-O[5]*(W[11+NA]*W[11+NA]+W[11+NA*2]*W[11+NA*2]+W[11+NA*3]*W[11+NA*3])-O[4]*(W[11+NA*4]*W[11+NA*4]+W[11+NA*6]*W[11+NA*6]+W[11+NA*7]*W[11+NA*7]+W[11+NA*8]*W[11+NA*8])-O[3];
X[12+NA*11] = -O[6]*W[12]*W[11]-O[5]*(W[12+NA]*W[11+NA]+W[12+NA*2]*W[11+NA*2]+W[12+NA*3]*W[11+NA*3])-O[4]*(W[12+NA*6]*W[11+NA*6]+W[12+NA*7]*W[11+NA*7]);
X[13+NA*11] = -O[6]*W[13]*W[11]-O[5]*(W[13+NA]*W[11+NA]+W[13+NA*2]*W[11+NA*2]+W[13+NA*3]*W[11+NA*3])-O[4]*(W[13+NA*6]*W[11+NA*6]+W[13+NA*8]*W[11+NA*8]);
X[14+NA*11] = -O[6]*W[14]*W[11]-O[5]*(W[14+NA*2]*W[11+NA*2]+W[14+NA*3]*W[11+NA*3])-O[4]*(W[14+NA*7]*W[11+NA*7]+W[14+NA*8]*W[11+NA*8]);
X[15+NA*11] = -O[6]*W[15]*W[11]-O[5]*(W[15+NA*2]*W[11+NA*2]+W[15+NA*3]*W[11+NA*3])-O[4]*(W[15+NA*7]*W[11+NA*7]+W[15+NA*8]*W[11+NA*8]);
X[NA*12] = -X[12];
X[1+NA*12] =  X[12+NA];
X[2+NA*12] =  X[12+NA*2];
X[3+NA*12] =  X[12+NA*3];
X[4+NA*12] = -X[12+NA*4];
X[5+NA*12] = -X[12+NA*5];
X[6+NA*12] = -X[12+NA*6];
X[7+NA*12] = -X[12+NA*7];
X[8+NA*12] = -X[12+NA*8];
X[9+NA*12] =  X[12+NA*9];
X[10+NA*12] =  X[12+NA*10];
X[11+NA*12] =  X[12+NA*11];
X[12+NA*12] = -O[6]*W[12]*W[12]-O[5]*(W[12+NA]*W[12+NA]+W[12+NA*2]*W[12+NA*2]+W[12+NA*3]*W[12+NA*3])-O[4]*(W[12+NA*5]*W[12+NA*5]+W[12+NA*6]*W[12+NA*6]+W[12+NA*7]*W[12+NA*7])-O[3];
X[13+NA*12] = -O[6]*W[13]*W[12]-O[5]*(W[13+NA]*W[12+NA]+W[13+NA*2]*W[12+NA*2]+W[13+NA*3]*W[12+NA*3])-O[4]*(W[13+NA*5]*W[12+NA*5]+W[13+NA*6]*W[12+NA*6]);
X[14+NA*12] = -O[6]*W[14]*W[12]-O[5]*(W[14+NA*2]*W[12+NA*2]+W[14+NA*3]*W[12+NA*3])-O[4]*W[14+NA*7]*W[12+NA*7];
X[15+NA*12] = -O[6]*W[15]*W[12]-O[5]*(W[15+NA*2]*W[12+NA*2]+W[15+NA*3]*W[12+NA*3])-O[4]*W[15+NA*7]*W[12+NA*7];
X[NA*13] = -X[13];
X[1+NA*13] =  X[13+NA];
X[2+NA*13] =  X[13+NA*2];
X[3+NA*13] =  X[13+NA*3];
X[4+NA*13] = -X[13+NA*4];
X[5+NA*13] = -X[13+NA*5];
X[6+NA*13] = -X[13+NA*6];
X[7+NA*13] = -X[13+NA*7];
X[8+NA*13] = -X[13+NA*8];
X[9+NA*13] =  X[13+NA*9];
X[10+NA*13] =  X[13+NA*10];
X[11+NA*13] =  X[13+NA*11];
X[12+NA*13] =  X[13+NA*12];
X[13+NA*13] = -O[6]*W[13]*W[13]-O[5]*(W[13+NA]*W[13+NA]+W[13+NA*2]*W[13+NA*2]+W[13+NA*3]*W[13+NA*3])-O[4]*(W[13+NA*5]*W[13+NA*5]+W[13+NA*6]*W[13+NA*6]+W[13+NA*8]*W[13+NA*8])-O[3];
X[14+NA*13] = -O[6]*W[14]*W[13]-O[5]*(W[14+NA*2]*W[13+NA*2]+W[14+NA*3]*W[13+NA*3])-O[4]*W[14+NA*8]*W[13+NA*8];
X[15+NA*13] = -O[6]*W[15]*W[13]-O[5]*(W[15+NA*2]*W[13+NA*2]+W[15+NA*3]*W[13+NA*3])-O[4]*W[15+NA*8]*W[13+NA*8];
X[NA*14] = -X[14];
X[1+NA*14] =  X[14+NA];
X[2+NA*14] =  X[14+NA*2];
X[3+NA*14] =  X[14+NA*3];
X[4+NA*14] = -X[14+NA*4];
X[5+NA*14] = -X[14+NA*5];
X[6+NA*14] = -X[14+NA*6];
X[7+NA*14] = -X[14+NA*7];
X[8+NA*14] = -X[14+NA*8];
X[9+NA*14] =  X[14+NA*9];
X[10+NA*14] =  X[14+NA*10];
X[11+NA*14] =  X[14+NA*11];
X[12+NA*14] =  X[14+NA*12];
X[13+NA*14] =  X[14+NA*13];
X[14+NA*14] = -O[6]*W[14]*W[14]-O[5]*(W[14+NA*2]*W[14+NA*2]+W[14+NA*3]*W[14+NA*3])-O[4]*(W[14+NA*7]*W[14+NA*7]+W[14+NA*8]*W[14+NA*8])-O[3];
X[15+NA*14] = -O[6]*W[15]*W[14]-O[5]*(W[15+NA*2]*W[14+NA*2]+W[15+NA*3]*W[14+NA*3])-O[4]*(W[15+NA*7]*W[14+NA*7]+W[15+NA*8]*W[14+NA*8]);
X[NA*15] = -X[15];
X[1+NA*15] =  X[15+NA];
X[2+NA*15] =  X[15+NA*2];
X[3+NA*15] =  X[15+NA*3];
X[4+NA*15] = -X[15+NA*4];
X[5+NA*15] = -X[15+NA*5];
X[6+NA*15] = -X[15+NA*6];
X[7+NA*15] = -X[15+NA*7];
X[8+NA*15] = -X[15+NA*8];
X[9+NA*15] =  X[15+NA*9];
X[10+NA*15] =  X[15+NA*10];
X[11+NA*15] =  X[15+NA*11];
X[12+NA*15] =  X[15+NA*12];
X[13+NA*15] =  X[15+NA*13];
X[14+NA*15] =  X[15+NA*14];
X[15+NA*15] = -O[6]*W[15]*W[15]-O[5]*(W[15+NA*2]*W[15+NA*2]+W[15+NA*3]*W[15+NA*3])-O[4]*(W[15+NA*7]*W[15+NA*7]+W[15+NA*8]*W[15+NA*8])-O[3];
}

template <int NA>
inline void ExpHobMatBlk_GS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[16] =  O[4]*W[16];
X[17] =  O[4]*W[17];
X[18] =  O[4]*W[18];
X[19] =  O[4]*W[19];
X[20] =  O[4]*W[20];
X[21] =  O[4]*W[21];
X[22] =  O[4]*W[22];
X[23] =  O[4]*W[23];
X[24] =  O[4]*W[24];
}

template <int NA>
inline void ExpHobMatBlk_GP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[16+NA] = -O[5]*W[16]*W[1]-O[4]*W[16+NA];
X[17+NA] = -O[5]*W[17]*W[1]-O[4]*W[17+NA];
X[18+NA] = -O[5]*W[18]*W[1]-O[4]*W[18+NA];
X[19+NA] = -O[5]*W[19]*W[1]-O[4]*W[19+NA];
X[20+NA] = -O[5]*W[20]*W[1]-O[4]*W[20+NA];
X[21+NA] = -O[5]*W[21]*W[1]-O[4]*W[21+NA];
X[22+NA] = -O[5]*W[22]*W[1]-O[4]*W[22+NA];
X[23+NA] = -O[5]*W[23]*W[1];
X[24+NA] = -O[5]*W[24]*W[1];
X[16+NA*2] = -O[5]*W[16]*W[2]-O[4]*W[16+NA*2];
X[17+NA*2] = -O[5]*W[17]*W[2]-O[4]*W[17+NA*2];
X[18+NA*2] = -O[5]*W[18]*W[2]-O[4]*W[18+NA*2];
X[19+NA*2] = -O[5]*W[19]*W[2]-O[4]*W[19+NA*2];
X[20+NA*2] = -O[5]*W[20]*W[2]-O[4]*W[20+NA*2];
X[21+NA*2] = -O[5]*W[21]*W[2]-O[4]*W[21+NA*2];
X[22+NA*2] = -O[5]*W[22]*W[2]-O[4]*W[22+NA*2];
X[23+NA*2] = -O[5]*W[23]*W[2]-O[4]*W[23+NA*2];
X[24+NA*2] = -O[5]*W[24]*W[2]-O[4]*W[24+NA*2];
X[16+NA*3] = -O[5]*W[16]*W[3]-O[4]*W[16+NA*3];
X[17+NA*3] = -O[5]*W[17]*W[3]-O[4]*W[17+NA*3];
X[18+NA*3] = -O[5]*W[18]*W[3]-O[4]*W[18+NA*3];
X[19+NA*3] = -O[5]*W[19]*W[3]-O[4]*W[19+NA*3];
X[20+NA*3] = -O[5]*W[20]*W[3]-O[4]*W[20+NA*3];
X[21+NA*3] = -O[5]*W[21]*W[3]-O[4]*W[21+NA*3];
X[22+NA*3] = -O[5]*W[22]*W[3]-O[4]*W[22+NA*3];
X[23+NA*3] = -O[5]*W[23]*W[3]-O[4]*W[23+NA*3];
X[24+NA*3] = -O[5]*W[24]*W[3]-O[4]*W[24+NA*3];
}

template <int NA>
void ExpHobMatBlk_GD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[16+NA*4] =  O[6]*W[16]*W[4]+O[5]*(W[16+NA]*W[4+NA]+W[16+NA*2]*W[4+NA*2]+W[16+NA*3]*W[4+NA*3])+O[4]*W[16+NA*4];
X[17+NA*4] =  O[6]*W[17]*W[4]+O[5]*(W[17+NA]*W[4+NA]+W[17+NA*2]*W[4+NA*2]+W[17+NA*3]*W[4+NA*3])+O[4]*W[17+NA*4];
X[18+NA*4] =  O[6]*W[18]*W[4]+O[5]*(W[18+NA]*W[4+NA]+W[18+NA*2]*W[4+NA*2]+W[18+NA*3]*W[4+NA*3])+O[4]*W[18+NA*4];
X[19+NA*4] =  O[6]*W[19]*W[4]+O[5]*(W[19+NA]*W[4+NA]+W[19+NA*2]*W[4+NA*2]+W[19+NA*3]*W[4+NA*3])+O[4]*W[19+NA*4];
X[20+NA*4] =  O[6]*W[20]*W[4]+O[5]*(W[20+NA]*W[4+NA]+W[20+NA*2]*W[4+NA*2]+W[20+NA*3]*W[4+NA*3])+O[4]*W[20+NA*4];
X[21+NA*4] =  O[6]*W[21]*W[4]+O[5]*(W[21+NA]*W[4+NA]+W[21+NA*2]*W[4+NA*2]+W[21+NA*3]*W[4+NA*3]);
X[22+NA*4] =  O[6]*W[22]*W[4]+O[5]*(W[22+NA]*W[4+NA]+W[22+NA*2]*W[4+NA*2]+W[22+NA*3]*W[4+NA*3]);
X[23+NA*4] =  O[6]*W[23]*W[4]+O[5]*(W[23+NA*2]*W[4+NA*2]+W[23+NA*3]*W[4+NA*3]);
X[24+NA*4] =  O[6]*W[24]*W[4]+O[5]*(W[24+NA*2]*W[4+NA*2]+W[24+NA*3]*W[4+NA*3]);
X[16+NA*5] =  O[6]*W[16]*W[5]+O[5]*(W[16+NA]*W[5+NA]+W[16+NA*2]*W[5+NA*2])+O[4]*W[16+NA*5];
X[17+NA*5] =  O[6]*W[17]*W[5]+O[5]*(W[17+NA]*W[5+NA]+W[17+NA*2]*W[5+NA*2])+O[4]*W[17+NA*5];
X[18+NA*5] =  O[6]*W[18]*W[5]+O[5]*(W[18+NA]*W[5+NA]+W[18+NA*2]*W[5+NA*2])+O[4]*W[18+NA*5];
X[19+NA*5] =  O[6]*W[19]*W[5]+O[5]*(W[19+NA]*W[5+NA]+W[19+NA*2]*W[5+NA*2])+O[4]*W[19+NA*5];
X[20+NA*5] =  O[6]*W[20]*W[5]+O[5]*(W[20+NA]*W[5+NA]+W[20+NA*2]*W[5+NA*2])+O[4]*W[20+NA*5];
X[21+NA*5] =  O[6]*W[21]*W[5]+O[5]*(W[21+NA]*W[5+NA]+W[21+NA*2]*W[5+NA*2])+O[4]*W[21+NA*5];
X[22+NA*5] =  O[6]*W[22]*W[5]+O[5]*(W[22+NA]*W[5+NA]+W[22+NA*2]*W[5+NA*2])+O[4]*W[22+NA*5];
X[23+NA*5] =  O[6]*W[23]*W[5]+O[5]*W[23+NA*2]*W[5+NA*2];
X[24+NA*5] =  O[6]*W[24]*W[5]+O[5]*W[24+NA*2]*W[5+NA*2];
X[16+NA*6] =  O[6]*W[16]*W[6]+O[5]*(W[16+NA]*W[6+NA]+W[16+NA*3]*W[6+NA*3])+O[4]*W[16+NA*6];
X[17+NA*6] =  O[6]*W[17]*W[6]+O[5]*(W[17+NA]*W[6+NA]+W[17+NA*3]*W[6+NA*3])+O[4]*W[17+NA*6];
X[18+NA*6] =  O[6]*W[18]*W[6]+O[5]*(W[18+NA]*W[6+NA]+W[18+NA*3]*W[6+NA*3])+O[4]*W[18+NA*6];
X[19+NA*6] =  O[6]*W[19]*W[6]+O[5]*(W[19+NA]*W[6+NA]+W[19+NA*3]*W[6+NA*3])+O[4]*W[19+NA*6];
X[20+NA*6] =  O[6]*W[20]*W[6]+O[5]*(W[20+NA]*W[6+NA]+W[20+NA*3]*W[6+NA*3])+O[4]*W[20+NA*6];
X[21+NA*6] =  O[6]*W[21]*W[6]+O[5]*(W[21+NA]*W[6+NA]+W[21+NA*3]*W[6+NA*3])+O[4]*W[21+NA*6];
X[22+NA*6] =  O[6]*W[22]*W[6]+O[5]*(W[22+NA]*W[6+NA]+W[22+NA*3]*W[6+NA*3])+O[4]*W[22+NA*6];
X[23+NA*6] =  O[6]*W[23]*W[6]+O[5]*W[23+NA*3]*W[6+NA*3];
X[24+NA*6] =  O[6]*W[24]*W[6]+O[5]*W[24+NA*3]*W[6+NA*3];
X[16+NA*7] =  O[6]*W[16]*W[7]+O[5]*(W[16+NA*2]*W[7+NA*2]+W[16+NA*3]*W[7+NA*3])+O[4]*W[16+NA*7];
X[17+NA*7] =  O[6]*W[17]*W[7]+O[5]*(W[17+NA*2]*W[7+NA*2]+W[17+NA*3]*W[7+NA*3])+O[4]*W[17+NA*7];
X[18+NA*7] =  O[6]*W[18]*W[7]+O[5]*(W[18+NA*2]*W[7+NA*2]+W[18+NA*3]*W[7+NA*3])+O[4]*W[18+NA*7];
X[19+NA*7] =  O[6]*W[19]*W[7]+O[5]*(W[19+NA*2]*W[7+NA*2]+W[19+NA*3]*W[7+NA*3])+O[4]*W[19+NA*7];
X[20+NA*7] =  O[6]*W[20]*W[7]+O[5]*(W[20+NA*2]*W[7+NA*2]+W[20+NA*3]*W[7+NA*3]);
X[21+NA*7] =  O[6]*W[21]*W[7]+O[5]*(W[21+NA*2]*W[7+NA*2]+W[21+NA*3]*W[7+NA*3])+O[4]*W[21+NA*7];
X[22+NA*7] =  O[6]*W[22]*W[7]+O[5]*(W[22+NA*2]*W[7+NA*2]+W[22+NA*3]*W[7+NA*3])+O[4]*W[22+NA*7];
X[23+NA*7] =  O[6]*W[23]*W[7]+O[5]*(W[23+NA*2]*W[7+NA*2]+W[23+NA*3]*W[7+NA*3])+O[4]*W[23+NA*7];
X[24+NA*7] =  O[6]*W[24]*W[7]+O[5]*(W[24+NA*2]*W[7+NA*2]+W[24+NA*3]*W[7+NA*3])+O[4]*W[24+NA*7];
X[16+NA*8] =  O[6]*W[16]*W[8]+O[5]*(W[16+NA*2]*W[8+NA*2]+W[16+NA*3]*W[8+NA*3])+O[4]*W[16+NA*8];
X[17+NA*8] =  O[6]*W[17]*W[8]+O[5]*(W[17+NA*2]*W[8+NA*2]+W[17+NA*3]*W[8+NA*3])+O[4]*W[17+NA*8];
X[18+NA*8] =  O[6]*W[18]*W[8]+O[5]*(W[18+NA*2]*W[8+NA*2]+W[18+NA*3]*W[8+NA*3])+O[4]*W[18+NA*8];
X[19+NA*8] =  O[6]*W[19]*W[8]+O[5]*(W[19+NA*2]*W[8+NA*2]+W[19+NA*3]*W[8+NA*3]);
X[20+NA*8] =  O[6]*W[20]*W[8]+O[5]*(W[20+NA*2]*W[8+NA*2]+W[20+NA*3]*W[8+NA*3])+O[4]*W[20+NA*8];
X[21+NA*8] =  O[6]*W[21]*W[8]+O[5]*(W[21+NA*2]*W[8+NA*2]+W[21+NA*3]*W[8+NA*3])+O[4]*W[21+NA*8];
X[22+NA*8] =  O[6]*W[22]*W[8]+O[5]*(W[22+NA*2]*W[8+NA*2]+W[22+NA*3]*W[8+NA*3])+O[4]*W[22+NA*8];
X[23+NA*8] =  O[6]*W[23]*W[8]+O[5]*(W[23+NA*2]*W[8+NA*2]+W[23+NA*3]*W[8+NA*3])+O[4]*W[23+NA*8];
X[24+NA*8] =  O[6]*W[24]*W[8]+O[5]*(W[24+NA*2]*W[8+NA*2]+W[24+NA*3]*W[8+NA*3])+O[4]*W[24+NA*8];
}

template <int NA>
void ExpHobMatBlk_GF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[16+NA*9] = -O[7]*W[16]*W[9]-O[6]*(W[16+NA]*W[9+NA]+W[16+NA*2]*W[9+NA*2]+W[16+NA*3]*W[9+NA*3])-O[5]*(W[16+NA*4]*W[9+NA*4]+W[16+NA*5]*W[9+NA*5]+W[16+NA*6]*W[9+NA*6])-O[4]*W[16+NA*9];
X[17+NA*9] = -O[7]*W[17]*W[9]-O[6]*(W[17+NA]*W[9+NA]+W[17+NA*2]*W[9+NA*2]+W[17+NA*3]*W[9+NA*3])-O[5]*(W[17+NA*4]*W[9+NA*4]+W[17+NA*5]*W[9+NA*5]+W[17+NA*6]*W[9+NA*6])-O[4]*W[17+NA*9];
X[18+NA*9] = -O[7]*W[18]*W[9]-O[6]*(W[18+NA]*W[9+NA]+W[18+NA*2]*W[9+NA*2]+W[18+NA*3]*W[9+NA*3])-O[5]*(W[18+NA*4]*W[9+NA*4]+W[18+NA*5]*W[9+NA*5]+W[18+NA*6]*W[9+NA*6])-O[4]*W[18+NA*9];
X[19+NA*9] = -O[7]*W[19]*W[9]-O[6]*(W[19+NA]*W[9+NA]+W[19+NA*2]*W[9+NA*2]+W[19+NA*3]*W[9+NA*3])-O[5]*(W[19+NA*4]*W[9+NA*4]+W[19+NA*5]*W[9+NA*5]+W[19+NA*6]*W[9+NA*6]);
X[20+NA*9] = -O[7]*W[20]*W[9]-O[6]*(W[20+NA]*W[9+NA]+W[20+NA*2]*W[9+NA*2]+W[20+NA*3]*W[9+NA*3])-O[5]*(W[20+NA*4]*W[9+NA*4]+W[20+NA*5]*W[9+NA*5]+W[20+NA*6]*W[9+NA*6]);
X[21+NA*9] = -O[7]*W[21]*W[9]-O[6]*(W[21+NA]*W[9+NA]+W[21+NA*2]*W[9+NA*2]+W[21+NA*3]*W[9+NA*3])-O[5]*(W[21+NA*5]*W[9+NA*5]+W[21+NA*6]*W[9+NA*6]);
X[22+NA*9] = -O[7]*W[22]*W[9]-O[6]*(W[22+NA]*W[9+NA]+W[22+NA*2]*W[9+NA*2]+W[22+NA*3]*W[9+NA*3])-O[5]*(W[22+NA*5]*W[9+NA*5]+W[22+NA*6]*W[9+NA*6]);
X[23+NA*9] = -O[7]*W[23]*W[9]-O[6]*(W[23+NA*2]*W[9+NA*2]+W[23+NA*3]*W[9+NA*3]);
X[24+NA*9] = -O[7]*W[24]*W[9]-O[6]*(W[24+NA*2]*W[9+NA*2]+W[24+NA*3]*W[9+NA*3]);
X[16+NA*10] = -O[7]*W[16]*W[10]-O[6]*(W[16+NA]*W[10+NA]+W[16+NA*2]*W[10+NA*2]+W[16+NA*3]*W[10+NA*3])-O[5]*(W[16+NA*4]*W[10+NA*4]+W[16+NA*5]*W[10+NA*5]+W[16+NA*7]*W[10+NA*7]+W[16+NA*8]*W[10+NA*8])-O[4]*W[16+NA*10];
X[17+NA*10] = -O[7]*W[17]*W[10]-O[6]*(W[17+NA]*W[10+NA]+W[17+NA*2]*W[10+NA*2]+W[17+NA*3]*W[10+NA*3])-O[5]*(W[17+NA*4]*W[10+NA*4]+W[17+NA*5]*W[10+NA*5]+W[17+NA*7]*W[10+NA*7]+W[17+NA*8]*W[10+NA*8])-O[4]*W[17+NA*10];
X[18+NA*10] = -O[7]*W[18]*W[10]-O[6]*(W[18+NA]*W[10+NA]+W[18+NA*2]*W[10+NA*2]+W[18+NA*3]*W[10+NA*3])-O[5]*(W[18+NA*4]*W[10+NA*4]+W[18+NA*5]*W[10+NA*5]+W[18+NA*7]*W[10+NA*7]+W[18+NA*8]*W[10+NA*8]);
X[19+NA*10] = -O[7]*W[19]*W[10]-O[6]*(W[19+NA]*W[10+NA]+W[19+NA*2]*W[10+NA*2]+W[19+NA*3]*W[10+NA*3])-O[5]*(W[19+NA*4]*W[10+NA*4]+W[19+NA*5]*W[10+NA*5]+W[19+NA*7]*W[10+NA*7])-O[4]*W[19+NA*10];
X[20+NA*10] = -O[7]*W[20]*W[10]-O[6]*(W[20+NA]*W[10+NA]+W[20+NA*2]*W[10+NA*2]+W[20+NA*3]*W[10+NA*3])-O[5]*(W[20+NA*4]*W[10+NA*4]+W[20+NA*5]*W[10+NA*5]+W[20+NA*8]*W[10+NA*8])-O[4]*W[20+NA*10];
X[21+NA*10] = -O[7]*W[21]*W[10]-O[6]*(W[21+NA]*W[10+NA]+W[21+NA*2]*W[10+NA*2]+W[21+NA*3]*W[10+NA*3])-O[5]*(W[21+NA*5]*W[10+NA*5]+W[21+NA*7]*W[10+NA*7]+W[21+NA*8]*W[10+NA*8]);
X[22+NA*10] = -O[7]*W[22]*W[10]-O[6]*(W[22+NA]*W[10+NA]+W[22+NA*2]*W[10+NA*2]+W[22+NA*3]*W[10+NA*3])-O[5]*(W[22+NA*5]*W[10+NA*5]+W[22+NA*7]*W[10+NA*7]+W[22+NA*8]*W[10+NA*8]);
X[23+NA*10] = -O[7]*W[23]*W[10]-O[6]*(W[23+NA*2]*W[10+NA*2]+W[23+NA*3]*W[10+NA*3])-O[5]*(W[23+NA*7]*W[10+NA*7]+W[23+NA*8]*W[10+NA*8]);
X[24+NA*10] = -O[7]*W[24]*W[10]-O[6]*(W[24+NA*2]*W[10+NA*2]+W[24+NA*3]*W[10+NA*3])-O[5]*(W[24+NA*7]*W[10+NA*7]+W[24+NA*8]*W[10+NA*8]);
X[16+NA*11] = -O[7]*W[16]*W[11]-O[6]*(W[16+NA]*W[11+NA]+W[16+NA*2]*W[11+NA*2]+W[16+NA*3]*W[11+NA*3])-O[5]*(W[16+NA*4]*W[11+NA*4]+W[16+NA*6]*W[11+NA*6]+W[16+NA*7]*W[11+NA*7]+W[16+NA*8]*W[11+NA*8])-O[4]*W[16+NA*11];
X[17+NA*11] = -O[7]*W[17]*W[11]-O[6]*(W[17+NA]*W[11+NA]+W[17+NA*2]*W[11+NA*2]+W[17+NA*3]*W[11+NA*3])-O[5]*(W[17+NA*4]*W[11+NA*4]+W[17+NA*6]*W[11+NA*6]+W[17+NA*7]*W[11+NA*7]+W[17+NA*8]*W[11+NA*8]);
X[18+NA*11] = -O[7]*W[18]*W[11]-O[6]*(W[18+NA]*W[11+NA]+W[18+NA*2]*W[11+NA*2]+W[18+NA*3]*W[11+NA*3])-O[5]*(W[18+NA*4]*W[11+NA*4]+W[18+NA*6]*W[11+NA*6]+W[18+NA*7]*W[11+NA*7]+W[18+NA*8]*W[11+NA*8])-O[4]*W[18+NA*11];
X[19+NA*11] = -O[7]*W[19]*W[11]-O[6]*(W[19+NA]*W[11+NA]+W[19+NA*2]*W[11+NA*2]+W[19+NA*3]*W[11+NA*3])-O[5]*(W[19+NA*4]*W[11+NA*4]+W[19+NA*6]*W[11+NA*6]+W[19+NA*7]*W[11+NA*7])-O[4]*W[19+NA*11];
X[20+NA*11] = -O[7]*W[20]*W[11]-O[6]*(W[20+NA]*W[11+NA]+W[20+NA*2]*W[11+NA*2]+W[20+NA*3]*W[11+NA*3])-O[5]*(W[20+NA*4]*W[11+NA*4]+W[20+NA*6]*W[11+NA*6]+W[20+NA*8]*W[11+NA*8])-O[4]*W[20+NA*11];
X[21+NA*11] = -O[7]*W[21]*W[11]-O[6]*(W[21+NA]*W[11+NA]+W[21+NA*2]*W[11+NA*2]+W[21+NA*3]*W[11+NA*3])-O[5]*(W[21+NA*6]*W[11+NA*6]+W[21+NA*7]*W[11+NA*7]+W[21+NA*8]*W[11+NA*8]);
X[22+NA*11] = -O[7]*W[22]*W[11]-O[6]*(W[22+NA]*W[11+NA]+W[22+NA*2]*W[11+NA*2]+W[22+NA*3]*W[11+NA*3])-O[5]*(W[22+NA*6]*W[11+NA*6]+W[22+NA*7]*W[11+NA*7]+W[22+NA*8]*W[11+NA*8]);
X[23+NA*11] = -O[7]*W[23]*W[11]-O[6]*(W[23+NA*2]*W[11+NA*2]+W[23+NA*3]*W[11+NA*3])-O[5]*(W[23+NA*7]*W[11+NA*7]+W[23+NA*8]*W[11+NA*8]);
X[24+NA*11] = -O[7]*W[24]*W[11]-O[6]*(W[24+NA*2]*W[11+NA*2]+W[24+NA*3]*W[11+NA*3])-O[5]*(W[24+NA*7]*W[11+NA*7]+W[24+NA*8]*W[11+NA*8]);
X[16+NA*12] = -O[7]*W[16]*W[12]-O[6]*(W[16+NA]*W[12+NA]+W[16+NA*2]*W[12+NA*2]+W[16+NA*3]*W[12+NA*3])-O[5]*(W[16+NA*5]*W[12+NA*5]+W[16+NA*6]*W[12+NA*6]+W[16+NA*7]*W[12+NA*7]);
X[17+NA*12] = -O[7]*W[17]*W[12]-O[6]*(W[17+NA]*W[12+NA]+W[17+NA*2]*W[12+NA*2]+W[17+NA*3]*W[12+NA*3])-O[5]*(W[17+NA*5]*W[12+NA*5]+W[17+NA*6]*W[12+NA*6]+W[17+NA*7]*W[12+NA*7])-O[4]*W[17+NA*12];
X[18+NA*12] = -O[7]*W[18]*W[12]-O[6]*(W[18+NA]*W[12+NA]+W[18+NA*2]*W[12+NA*2]+W[18+NA*3]*W[12+NA*3])-O[5]*(W[18+NA*5]*W[12+NA*5]+W[18+NA*6]*W[12+NA*6]+W[18+NA*7]*W[12+NA*7])-O[4]*W[18+NA*12];
X[19+NA*12] = -O[7]*W[19]*W[12]-O[6]*(W[19+NA]*W[12+NA]+W[19+NA*2]*W[12+NA*2]+W[19+NA*3]*W[12+NA*3])-O[5]*(W[19+NA*5]*W[12+NA*5]+W[19+NA*6]*W[12+NA*6]+W[19+NA*7]*W[12+NA*7])-O[4]*W[19+NA*12];
X[20+NA*12] = -O[7]*W[20]*W[12]-O[6]*(W[20+NA]*W[12+NA]+W[20+NA*2]*W[12+NA*2]+W[20+NA*3]*W[12+NA*3])-O[5]*(W[20+NA*5]*W[12+NA*5]+W[20+NA*6]*W[12+NA*6]);
X[21+NA*12] = -O[7]*W[21]*W[12]-O[6]*(W[21+NA]*W[12+NA]+W[21+NA*2]*W[12+NA*2]+W[21+NA*3]*W[12+NA*3])-O[5]*(W[21+NA*5]*W[12+NA*5]+W[21+NA*6]*W[12+NA*6]+W[21+NA*7]*W[12+NA*7])-O[4]*W[21+NA*12];
X[22+NA*12] = -O[7]*W[22]*W[12]-O[6]*(W[22+NA]*W[12+NA]+W[22+NA*2]*W[12+NA*2]+W[22+NA*3]*W[12+NA*3])-O[5]*(W[22+NA*5]*W[12+NA*5]+W[22+NA*6]*W[12+NA*6]+W[22+NA*7]*W[12+NA*7])-O[4]*W[22+NA*12];
X[23+NA*12] = -O[7]*W[23]*W[12]-O[6]*(W[23+NA*2]*W[12+NA*2]+W[23+NA*3]*W[12+NA*3])-O[5]*W[23+NA*7]*W[12+NA*7];
X[24+NA*12] = -O[7]*W[24]*W[12]-O[6]*(W[24+NA*2]*W[12+NA*2]+W[24+NA*3]*W[12+NA*3])-O[5]*W[24+NA*7]*W[12+NA*7];
X[16+NA*13] = -O[7]*W[16]*W[13]-O[6]*(W[16+NA]*W[13+NA]+W[16+NA*2]*W[13+NA*2]+W[16+NA*3]*W[13+NA*3])-O[5]*(W[16+NA*5]*W[13+NA*5]+W[16+NA*6]*W[13+NA*6]+W[16+NA*8]*W[13+NA*8]);
X[17+NA*13] = -O[7]*W[17]*W[13]-O[6]*(W[17+NA]*W[13+NA]+W[17+NA*2]*W[13+NA*2]+W[17+NA*3]*W[13+NA*3])-O[5]*(W[17+NA*5]*W[13+NA*5]+W[17+NA*6]*W[13+NA*6]+W[17+NA*8]*W[13+NA*8])-O[4]*W[17+NA*13];
X[18+NA*13] = -O[7]*W[18]*W[13]-O[6]*(W[18+NA]*W[13+NA]+W[18+NA*2]*W[13+NA*2]+W[18+NA*3]*W[13+NA*3])-O[5]*(W[18+NA*5]*W[13+NA*5]+W[18+NA*6]*W[13+NA*6]+W[18+NA*8]*W[13+NA*8])-O[4]*W[18+NA*13];
X[19+NA*13] = -O[7]*W[19]*W[13]-O[6]*(W[19+NA]*W[13+NA]+W[19+NA*2]*W[13+NA*2]+W[19+NA*3]*W[13+NA*3])-O[5]*(W[19+NA*5]*W[13+NA*5]+W[19+NA*6]*W[13+NA*6]);
X[20+NA*13] = -O[7]*W[20]*W[13]-O[6]*(W[20+NA]*W[13+NA]+W[20+NA*2]*W[13+NA*2]+W[20+NA*3]*W[13+NA*3])-O[5]*(W[20+NA*5]*W[13+NA*5]+W[20+NA*6]*W[13+NA*6]+W[20+NA*8]*W[13+NA*8])-O[4]*W[20+NA*13];
X[21+NA*13] = -O[7]*W[21]*W[13]-O[6]*(W[21+NA]*W[13+NA]+W[21+NA*2]*W[13+NA*2]+W[21+NA*3]*W[13+NA*3])-O[5]*(W[21+NA*5]*W[13+NA*5]+W[21+NA*6]*W[13+NA*6]+W[21+NA*8]*W[13+NA*8])-O[4]*W[21+NA*13];
X[22+NA*13] = -O[7]*W[22]*W[13]-O[6]*(W[22+NA]*W[13+NA]+W[22+NA*2]*W[13+NA*2]+W[22+NA*3]*W[13+NA*3])-O[5]*(W[22+NA*5]*W[13+NA*5]+W[22+NA*6]*W[13+NA*6]+W[22+NA*8]*W[13+NA*8])-O[4]*W[22+NA*13];
X[23+NA*13] = -O[7]*W[23]*W[13]-O[6]*(W[23+NA*2]*W[13+NA*2]+W[23+NA*3]*W[13+NA*3])-O[5]*W[23+NA*8]*W[13+NA*8];
X[24+NA*13] = -O[7]*W[24]*W[13]-O[6]*(W[24+NA*2]*W[13+NA*2]+W[24+NA*3]*W[13+NA*3])-O[5]*W[24+NA*8]*W[13+NA*8];
X[16+NA*14] = -O[7]*W[16]*W[14]-O[6]*(W[16+NA*2]*W[14+NA*2]+W[16+NA*3]*W[14+NA*3])-O[5]*(W[16+NA*7]*W[14+NA*7]+W[16+NA*8]*W[14+NA*8]);
X[17+NA*14] = -O[7]*W[17]*W[14]-O[6]*(W[17+NA*2]*W[14+NA*2]+W[17+NA*3]*W[14+NA*3])-O[5]*(W[17+NA*7]*W[14+NA*7]+W[17+NA*8]*W[14+NA*8]);
X[18+NA*14] = -O[7]*W[18]*W[14]-O[6]*(W[18+NA*2]*W[14+NA*2]+W[18+NA*3]*W[14+NA*3])-O[5]*(W[18+NA*7]*W[14+NA*7]+W[18+NA*8]*W[14+NA*8]);
X[19+NA*14] = -O[7]*W[19]*W[14]-O[6]*(W[19+NA*2]*W[14+NA*2]+W[19+NA*3]*W[14+NA*3])-O[5]*W[19+NA*7]*W[14+NA*7]-O[4]*W[19+NA*14];
X[20+NA*14] = -O[7]*W[20]*W[14]-O[6]*(W[20+NA*2]*W[14+NA*2]+W[20+NA*3]*W[14+NA*3])-O[5]*W[20+NA*8]*W[14+NA*8]-O[4]*W[20+NA*14];
X[21+NA*14] = -O[7]*W[21]*W[14]-O[6]*(W[21+NA*2]*W[14+NA*2]+W[21+NA*3]*W[14+NA*3])-O[5]*(W[21+NA*7]*W[14+NA*7]+W[21+NA*8]*W[14+NA*8])-O[4]*W[21+NA*14];
X[22+NA*14] = -O[7]*W[22]*W[14]-O[6]*(W[22+NA*2]*W[14+NA*2]+W[22+NA*3]*W[14+NA*3])-O[5]*(W[22+NA*7]*W[14+NA*7]+W[22+NA*8]*W[14+NA*8]);
X[23+NA*14] = -O[7]*W[23]*W[14]-O[6]*(W[23+NA*2]*W[14+NA*2]+W[23+NA*3]*W[14+NA*3])-O[5]*(W[23+NA*7]*W[14+NA*7]+W[23+NA*8]*W[14+NA*8])-O[4]*W[23+NA*14];
X[24+NA*14] = -O[7]*W[24]*W[14]-O[6]*(W[24+NA*2]*W[14+NA*2]+W[24+NA*3]*W[14+NA*3])-O[5]*(W[24+NA*7]*W[14+NA*7]+W[24+NA*8]*W[14+NA*8])-O[4]*W[24+NA*14];
X[16+NA*15] = -O[7]*W[16]*W[15]-O[6]*(W[16+NA*2]*W[15+NA*2]+W[16+NA*3]*W[15+NA*3])-O[5]*(W[16+NA*7]*W[15+NA*7]+W[16+NA*8]*W[15+NA*8]);
X[17+NA*15] = -O[7]*W[17]*W[15]-O[6]*(W[17+NA*2]*W[15+NA*2]+W[17+NA*3]*W[15+NA*3])-O[5]*(W[17+NA*7]*W[15+NA*7]+W[17+NA*8]*W[15+NA*8]);
X[18+NA*15] = -O[7]*W[18]*W[15]-O[6]*(W[18+NA*2]*W[15+NA*2]+W[18+NA*3]*W[15+NA*3])-O[5]*(W[18+NA*7]*W[15+NA*7]+W[18+NA*8]*W[15+NA*8]);
X[19+NA*15] = -O[7]*W[19]*W[15]-O[6]*(W[19+NA*2]*W[15+NA*2]+W[19+NA*3]*W[15+NA*3])-O[5]*W[19+NA*7]*W[15+NA*7]-O[4]*W[19+NA*15];
X[20+NA*15] = -O[7]*W[20]*W[15]-O[6]*(W[20+NA*2]*W[15+NA*2]+W[20+NA*3]*W[15+NA*3])-O[5]*W[20+NA*8]*W[15+NA*8]-O[4]*W[20+NA*15];
X[21+NA*15] = -O[7]*W[21]*W[15]-O[6]*(W[21+NA*2]*W[15+NA*2]+W[21+NA*3]*W[15+NA*3])-O[5]*(W[21+NA*7]*W[15+NA*7]+W[21+NA*8]*W[15+NA*8]);
X[22+NA*15] = -O[7]*W[22]*W[15]-O[6]*(W[22+NA*2]*W[15+NA*2]+W[22+NA*3]*W[15+NA*3])-O[5]*(W[22+NA*7]*W[15+NA*7]+W[22+NA*8]*W[15+NA*8])-O[4]*W[22+NA*15];
X[23+NA*15] = -O[7]*W[23]*W[15]-O[6]*(W[23+NA*2]*W[15+NA*2]+W[23+NA*3]*W[15+NA*3])-O[5]*(W[23+NA*7]*W[15+NA*7]+W[23+NA*8]*W[15+NA*8])-O[4]*W[23+NA*15];
X[24+NA*15] = -O[7]*W[24]*W[15]-O[6]*(W[24+NA*2]*W[15+NA*2]+W[24+NA*3]*W[15+NA*3])-O[5]*(W[24+NA*7]*W[15+NA*7]+W[24+NA*8]*W[15+NA*8])-O[4]*W[24+NA*15];
}

template <int NA>
void ExpHobMatBlk_GG( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[NA*16] =  X[16];
X[1+NA*16] = -X[16+NA];
X[2+NA*16] = -X[16+NA*2];
X[3+NA*16] = -X[16+NA*3];
X[4+NA*16] =  X[16+NA*4];
X[5+NA*16] =  X[16+NA*5];
X[6+NA*16] =  X[16+NA*6];
X[7+NA*16] =  X[16+NA*7];
X[8+NA*16] =  X[16+NA*8];
X[9+NA*16] = -X[16+NA*9];
X[10+NA*16] = -X[16+NA*10];
X[11+NA*16] = -X[16+NA*11];
X[12+NA*16] = -X[16+NA*12];
X[13+NA*16] = -X[16+NA*13];
X[14+NA*16] = -X[16+NA*14];
X[15+NA*16] = -X[16+NA*15];
X[16+NA*16] =  O[8]*W[16]*W[16]+O[7]*(W[16+NA]*W[16+NA]+W[16+NA*2]*W[16+NA*2]+W[16+NA*3]*W[16+NA*3])+O[6]*(W[16+NA*4]*W[16+NA*4]+W[16+NA*5]*W[16+NA*5]+W[16+NA*6]*W[16+NA*6]+W[16+NA*7]*W[16+NA*7]+W[16+NA*8]*W[16+NA*8])+O[5]*(W[16+NA*9]*W[16+NA*9]+W[16+NA*10]*W[16+NA*10]+W[16+NA*11]*W[16+NA*11])+O[4];
X[17+NA*16] =  O[8]*W[17]*W[16]+O[7]*(W[17+NA]*W[16+NA]+W[17+NA*2]*W[16+NA*2]+W[17+NA*3]*W[16+NA*3])+O[6]*(W[17+NA*4]*W[16+NA*4]+W[17+NA*5]*W[16+NA*5]+W[17+NA*6]*W[16+NA*6]+W[17+NA*7]*W[16+NA*7]+W[17+NA*8]*W[16+NA*8])+O[5]*(W[17+NA*9]*W[16+NA*9]+W[17+NA*10]*W[16+NA*10]);
X[18+NA*16] =  O[8]*W[18]*W[16]+O[7]*(W[18+NA]*W[16+NA]+W[18+NA*2]*W[16+NA*2]+W[18+NA*3]*W[16+NA*3])+O[6]*(W[18+NA*4]*W[16+NA*4]+W[18+NA*5]*W[16+NA*5]+W[18+NA*6]*W[16+NA*6]+W[18+NA*7]*W[16+NA*7]+W[18+NA*8]*W[16+NA*8])+O[5]*(W[18+NA*9]*W[16+NA*9]+W[18+NA*11]*W[16+NA*11]);
X[19+NA*16] =  O[8]*W[19]*W[16]+O[7]*(W[19+NA]*W[16+NA]+W[19+NA*2]*W[16+NA*2]+W[19+NA*3]*W[16+NA*3])+O[6]*(W[19+NA*4]*W[16+NA*4]+W[19+NA*5]*W[16+NA*5]+W[19+NA*6]*W[16+NA*6]+W[19+NA*7]*W[16+NA*7])+O[5]*(W[19+NA*10]*W[16+NA*10]+W[19+NA*11]*W[16+NA*11]);
X[20+NA*16] =  O[8]*W[20]*W[16]+O[7]*(W[20+NA]*W[16+NA]+W[20+NA*2]*W[16+NA*2]+W[20+NA*3]*W[16+NA*3])+O[6]*(W[20+NA*4]*W[16+NA*4]+W[20+NA*5]*W[16+NA*5]+W[20+NA*6]*W[16+NA*6]+W[20+NA*8]*W[16+NA*8])+O[5]*(W[20+NA*10]*W[16+NA*10]+W[20+NA*11]*W[16+NA*11]);
X[21+NA*16] =  O[8]*W[21]*W[16]+O[7]*(W[21+NA]*W[16+NA]+W[21+NA*2]*W[16+NA*2]+W[21+NA*3]*W[16+NA*3])+O[6]*(W[21+NA*5]*W[16+NA*5]+W[21+NA*6]*W[16+NA*6]+W[21+NA*7]*W[16+NA*7]+W[21+NA*8]*W[16+NA*8]);
X[22+NA*16] =  O[8]*W[22]*W[16]+O[7]*(W[22+NA]*W[16+NA]+W[22+NA*2]*W[16+NA*2]+W[22+NA*3]*W[16+NA*3])+O[6]*(W[22+NA*5]*W[16+NA*5]+W[22+NA*6]*W[16+NA*6]+W[22+NA*7]*W[16+NA*7]+W[22+NA*8]*W[16+NA*8]);
X[23+NA*16] =  O[8]*W[23]*W[16]+O[7]*(W[23+NA*2]*W[16+NA*2]+W[23+NA*3]*W[16+NA*3])+O[6]*(W[23+NA*7]*W[16+NA*7]+W[23+NA*8]*W[16+NA*8]);
X[24+NA*16] =  O[8]*W[24]*W[16]+O[7]*(W[24+NA*2]*W[16+NA*2]+W[24+NA*3]*W[16+NA*3])+O[6]*(W[24+NA*7]*W[16+NA*7]+W[24+NA*8]*W[16+NA*8]);
X[NA*17] =  X[17];
X[1+NA*17] = -X[17+NA];
X[2+NA*17] = -X[17+NA*2];
X[3+NA*17] = -X[17+NA*3];
X[4+NA*17] =  X[17+NA*4];
X[5+NA*17] =  X[17+NA*5];
X[6+NA*17] =  X[17+NA*6];
X[7+NA*17] =  X[17+NA*7];
X[8+NA*17] =  X[17+NA*8];
X[9+NA*17] = -X[17+NA*9];
X[10+NA*17] = -X[17+NA*10];
X[11+NA*17] = -X[17+NA*11];
X[12+NA*17] = -X[17+NA*12];
X[13+NA*17] = -X[17+NA*13];
X[14+NA*17] = -X[17+NA*14];
X[15+NA*17] = -X[17+NA*15];
X[16+NA*17] =  X[17+NA*16];
X[17+NA*17] =  O[8]*W[17]*W[17]+O[7]*(W[17+NA]*W[17+NA]+W[17+NA*2]*W[17+NA*2]+W[17+NA*3]*W[17+NA*3])+O[6]*(W[17+NA*4]*W[17+NA*4]+W[17+NA*5]*W[17+NA*5]+W[17+NA*6]*W[17+NA*6]+W[17+NA*7]*W[17+NA*7]+W[17+NA*8]*W[17+NA*8])+O[5]*(W[17+NA*9]*W[17+NA*9]+W[17+NA*10]*W[17+NA*10]+W[17+NA*12]*W[17+NA*12]+W[17+NA*13]*W[17+NA*13])+O[4];
X[18+NA*17] =  O[8]*W[18]*W[17]+O[7]*(W[18+NA]*W[17+NA]+W[18+NA*2]*W[17+NA*2]+W[18+NA*3]*W[17+NA*3])+O[6]*(W[18+NA*4]*W[17+NA*4]+W[18+NA*5]*W[17+NA*5]+W[18+NA*6]*W[17+NA*6]+W[18+NA*7]*W[17+NA*7]+W[18+NA*8]*W[17+NA*8])+O[5]*(W[18+NA*9]*W[17+NA*9]+W[18+NA*12]*W[17+NA*12]+W[18+NA*13]*W[17+NA*13]);
X[19+NA*17] =  O[8]*W[19]*W[17]+O[7]*(W[19+NA]*W[17+NA]+W[19+NA*2]*W[17+NA*2]+W[19+NA*3]*W[17+NA*3])+O[6]*(W[19+NA*4]*W[17+NA*4]+W[19+NA*5]*W[17+NA*5]+W[19+NA*6]*W[17+NA*6]+W[19+NA*7]*W[17+NA*7])+O[5]*(W[19+NA*10]*W[17+NA*10]+W[19+NA*12]*W[17+NA*12]);
X[20+NA*17] =  O[8]*W[20]*W[17]+O[7]*(W[20+NA]*W[17+NA]+W[20+NA*2]*W[17+NA*2]+W[20+NA*3]*W[17+NA*3])+O[6]*(W[20+NA*4]*W[17+NA*4]+W[20+NA*5]*W[17+NA*5]+W[20+NA*6]*W[17+NA*6]+W[20+NA*8]*W[17+NA*8])+O[5]*(W[20+NA*10]*W[17+NA*10]+W[20+NA*13]*W[17+NA*13]);
X[21+NA*17] =  O[8]*W[21]*W[17]+O[7]*(W[21+NA]*W[17+NA]+W[21+NA*2]*W[17+NA*2]+W[21+NA*3]*W[17+NA*3])+O[6]*(W[21+NA*5]*W[17+NA*5]+W[21+NA*6]*W[17+NA*6]+W[21+NA*7]*W[17+NA*7]+W[21+NA*8]*W[17+NA*8])+O[5]*(W[21+NA*12]*W[17+NA*12]+W[21+NA*13]*W[17+NA*13]);
X[22+NA*17] =  O[8]*W[22]*W[17]+O[7]*(W[22+NA]*W[17+NA]+W[22+NA*2]*W[17+NA*2]+W[22+NA*3]*W[17+NA*3])+O[6]*(W[22+NA*5]*W[17+NA*5]+W[22+NA*6]*W[17+NA*6]+W[22+NA*7]*W[17+NA*7]+W[22+NA*8]*W[17+NA*8])+O[5]*(W[22+NA*12]*W[17+NA*12]+W[22+NA*13]*W[17+NA*13]);
X[23+NA*17] =  O[8]*W[23]*W[17]+O[7]*(W[23+NA*2]*W[17+NA*2]+W[23+NA*3]*W[17+NA*3])+O[6]*(W[23+NA*7]*W[17+NA*7]+W[23+NA*8]*W[17+NA*8]);
X[24+NA*17] =  O[8]*W[24]*W[17]+O[7]*(W[24+NA*2]*W[17+NA*2]+W[24+NA*3]*W[17+NA*3])+O[6]*(W[24+NA*7]*W[17+NA*7]+W[24+NA*8]*W[17+NA*8]);
X[NA*18] =  X[18];
X[1+NA*18] = -X[18+NA];
X[2+NA*18] = -X[18+NA*2];
X[3+NA*18] = -X[18+NA*3];
X[4+NA*18] =  X[18+NA*4];
X[5+NA*18] =  X[18+NA*5];
X[6+NA*18] =  X[18+NA*6];
X[7+NA*18] =  X[18+NA*7];
X[8+NA*18] =  X[18+NA*8];
X[9+NA*18] = -X[18+NA*9];
X[10+NA*18] = -X[18+NA*10];
X[11+NA*18] = -X[18+NA*11];
X[12+NA*18] = -X[18+NA*12];
X[13+NA*18] = -X[18+NA*13];
X[14+NA*18] = -X[18+NA*14];
X[15+NA*18] = -X[18+NA*15];
X[16+NA*18] =  X[18+NA*16];
X[17+NA*18] =  X[18+NA*17];
X[18+NA*18] =  O[8]*W[18]*W[18]+O[7]*(W[18+NA]*W[18+NA]+W[18+NA*2]*W[18+NA*2]+W[18+NA*3]*W[18+NA*3])+O[6]*(W[18+NA*4]*W[18+NA*4]+W[18+NA*5]*W[18+NA*5]+W[18+NA*6]*W[18+NA*6]+W[18+NA*7]*W[18+NA*7]+W[18+NA*8]*W[18+NA*8])+O[5]*(W[18+NA*9]*W[18+NA*9]+W[18+NA*11]*W[18+NA*11]+W[18+NA*12]*W[18+NA*12]+W[18+NA*13]*W[18+NA*13])+O[4];
X[19+NA*18] =  O[8]*W[19]*W[18]+O[7]*(W[19+NA]*W[18+NA]+W[19+NA*2]*W[18+NA*2]+W[19+NA*3]*W[18+NA*3])+O[6]*(W[19+NA*4]*W[18+NA*4]+W[19+NA*5]*W[18+NA*5]+W[19+NA*6]*W[18+NA*6]+W[19+NA*7]*W[18+NA*7])+O[5]*(W[19+NA*11]*W[18+NA*11]+W[19+NA*12]*W[18+NA*12]);
X[20+NA*18] =  O[8]*W[20]*W[18]+O[7]*(W[20+NA]*W[18+NA]+W[20+NA*2]*W[18+NA*2]+W[20+NA*3]*W[18+NA*3])+O[6]*(W[20+NA*4]*W[18+NA*4]+W[20+NA*5]*W[18+NA*5]+W[20+NA*6]*W[18+NA*6]+W[20+NA*8]*W[18+NA*8])+O[5]*(W[20+NA*11]*W[18+NA*11]+W[20+NA*13]*W[18+NA*13]);
X[21+NA*18] =  O[8]*W[21]*W[18]+O[7]*(W[21+NA]*W[18+NA]+W[21+NA*2]*W[18+NA*2]+W[21+NA*3]*W[18+NA*3])+O[6]*(W[21+NA*5]*W[18+NA*5]+W[21+NA*6]*W[18+NA*6]+W[21+NA*7]*W[18+NA*7]+W[21+NA*8]*W[18+NA*8])+O[5]*(W[21+NA*12]*W[18+NA*12]+W[21+NA*13]*W[18+NA*13]);
X[22+NA*18] =  O[8]*W[22]*W[18]+O[7]*(W[22+NA]*W[18+NA]+W[22+NA*2]*W[18+NA*2]+W[22+NA*3]*W[18+NA*3])+O[6]*(W[22+NA*5]*W[18+NA*5]+W[22+NA*6]*W[18+NA*6]+W[22+NA*7]*W[18+NA*7]+W[22+NA*8]*W[18+NA*8])+O[5]*(W[22+NA*12]*W[18+NA*12]+W[22+NA*13]*W[18+NA*13]);
X[23+NA*18] =  O[8]*W[23]*W[18]+O[7]*(W[23+NA*2]*W[18+NA*2]+W[23+NA*3]*W[18+NA*3])+O[6]*(W[23+NA*7]*W[18+NA*7]+W[23+NA*8]*W[18+NA*8]);
X[24+NA*18] =  O[8]*W[24]*W[18]+O[7]*(W[24+NA*2]*W[18+NA*2]+W[24+NA*3]*W[18+NA*3])+O[6]*(W[24+NA*7]*W[18+NA*7]+W[24+NA*8]*W[18+NA*8]);
X[NA*19] =  X[19];
X[1+NA*19] = -X[19+NA];
X[2+NA*19] = -X[19+NA*2];
X[3+NA*19] = -X[19+NA*3];
X[4+NA*19] =  X[19+NA*4];
X[5+NA*19] =  X[19+NA*5];
X[6+NA*19] =  X[19+NA*6];
X[7+NA*19] =  X[19+NA*7];
X[8+NA*19] =  X[19+NA*8];
X[9+NA*19] = -X[19+NA*9];
X[10+NA*19] = -X[19+NA*10];
X[11+NA*19] = -X[19+NA*11];
X[12+NA*19] = -X[19+NA*12];
X[13+NA*19] = -X[19+NA*13];
X[14+NA*19] = -X[19+NA*14];
X[15+NA*19] = -X[19+NA*15];
X[16+NA*19] =  X[19+NA*16];
X[17+NA*19] =  X[19+NA*17];
X[18+NA*19] =  X[19+NA*18];
X[19+NA*19] =  O[8]*W[19]*W[19]+O[7]*(W[19+NA]*W[19+NA]+W[19+NA*2]*W[19+NA*2]+W[19+NA*3]*W[19+NA*3])+O[6]*(W[19+NA*4]*W[19+NA*4]+W[19+NA*5]*W[19+NA*5]+W[19+NA*6]*W[19+NA*6]+W[19+NA*7]*W[19+NA*7])+O[5]*(W[19+NA*10]*W[19+NA*10]+W[19+NA*11]*W[19+NA*11]+W[19+NA*12]*W[19+NA*12]+W[19+NA*14]*W[19+NA*14]+W[19+NA*15]*W[19+NA*15])+O[4];
X[20+NA*19] =  O[8]*W[20]*W[19]+O[7]*(W[20+NA]*W[19+NA]+W[20+NA*2]*W[19+NA*2]+W[20+NA*3]*W[19+NA*3])+O[6]*(W[20+NA*4]*W[19+NA*4]+W[20+NA*5]*W[19+NA*5]+W[20+NA*6]*W[19+NA*6])+O[5]*(W[20+NA*10]*W[19+NA*10]+W[20+NA*11]*W[19+NA*11]+W[20+NA*14]*W[19+NA*14]+W[20+NA*15]*W[19+NA*15]);
X[21+NA*19] =  O[8]*W[21]*W[19]+O[7]*(W[21+NA]*W[19+NA]+W[21+NA*2]*W[19+NA*2]+W[21+NA*3]*W[19+NA*3])+O[6]*(W[21+NA*5]*W[19+NA*5]+W[21+NA*6]*W[19+NA*6]+W[21+NA*7]*W[19+NA*7])+O[5]*(W[21+NA*12]*W[19+NA*12]+W[21+NA*14]*W[19+NA*14]);
X[22+NA*19] =  O[8]*W[22]*W[19]+O[7]*(W[22+NA]*W[19+NA]+W[22+NA*2]*W[19+NA*2]+W[22+NA*3]*W[19+NA*3])+O[6]*(W[22+NA*5]*W[19+NA*5]+W[22+NA*6]*W[19+NA*6]+W[22+NA*7]*W[19+NA*7])+O[5]*(W[22+NA*12]*W[19+NA*12]+W[22+NA*15]*W[19+NA*15]);
X[23+NA*19] =  O[8]*W[23]*W[19]+O[7]*(W[23+NA*2]*W[19+NA*2]+W[23+NA*3]*W[19+NA*3])+O[6]*W[23+NA*7]*W[19+NA*7]+O[5]*(W[23+NA*14]*W[19+NA*14]+W[23+NA*15]*W[19+NA*15]);
X[24+NA*19] =  O[8]*W[24]*W[19]+O[7]*(W[24+NA*2]*W[19+NA*2]+W[24+NA*3]*W[19+NA*3])+O[6]*W[24+NA*7]*W[19+NA*7]+O[5]*(W[24+NA*14]*W[19+NA*14]+W[24+NA*15]*W[19+NA*15]);
X[NA*20] =  X[20];
X[1+NA*20] = -X[20+NA];
X[2+NA*20] = -X[20+NA*2];
X[3+NA*20] = -X[20+NA*3];
X[4+NA*20] =  X[20+NA*4];
X[5+NA*20] =  X[20+NA*5];
X[6+NA*20] =  X[20+NA*6];
X[7+NA*20] =  X[20+NA*7];
X[8+NA*20] =  X[20+NA*8];
X[9+NA*20] = -X[20+NA*9];
X[10+NA*20] = -X[20+NA*10];
X[11+NA*20] = -X[20+NA*11];
X[12+NA*20] = -X[20+NA*12];
X[13+NA*20] = -X[20+NA*13];
X[14+NA*20] = -X[20+NA*14];
X[15+NA*20] = -X[20+NA*15];
X[16+NA*20] =  X[20+NA*16];
X[17+NA*20] =  X[20+NA*17];
X[18+NA*20] =  X[20+NA*18];
X[19+NA*20] =  X[20+NA*19];
X[20+NA*20] =  O[8]*W[20]*W[20]+O[7]*(W[20+NA]*W[20+NA]+W[20+NA*2]*W[20+NA*2]+W[20+NA*3]*W[20+NA*3])+O[6]*(W[20+NA*4]*W[20+NA*4]+W[20+NA*5]*W[20+NA*5]+W[20+NA*6]*W[20+NA*6]+W[20+NA*8]*W[20+NA*8])+O[5]*(W[20+NA*10]*W[20+NA*10]+W[20+NA*11]*W[20+NA*11]+W[20+NA*13]*W[20+NA*13]+W[20+NA*14]*W[20+NA*14]+W[20+NA*15]*W[20+NA*15])+O[4];
X[21+NA*20] =  O[8]*W[21]*W[20]+O[7]*(W[21+NA]*W[20+NA]+W[21+NA*2]*W[20+NA*2]+W[21+NA*3]*W[20+NA*3])+O[6]*(W[21+NA*5]*W[20+NA*5]+W[21+NA*6]*W[20+NA*6]+W[21+NA*8]*W[20+NA*8])+O[5]*(W[21+NA*13]*W[20+NA*13]+W[21+NA*14]*W[20+NA*14]);
X[22+NA*20] =  O[8]*W[22]*W[20]+O[7]*(W[22+NA]*W[20+NA]+W[22+NA*2]*W[20+NA*2]+W[22+NA*3]*W[20+NA*3])+O[6]*(W[22+NA*5]*W[20+NA*5]+W[22+NA*6]*W[20+NA*6]+W[22+NA*8]*W[20+NA*8])+O[5]*(W[22+NA*13]*W[20+NA*13]+W[22+NA*15]*W[20+NA*15]);
X[23+NA*20] =  O[8]*W[23]*W[20]+O[7]*(W[23+NA*2]*W[20+NA*2]+W[23+NA*3]*W[20+NA*3])+O[6]*W[23+NA*8]*W[20+NA*8]+O[5]*(W[23+NA*14]*W[20+NA*14]+W[23+NA*15]*W[20+NA*15]);
X[24+NA*20] =  O[8]*W[24]*W[20]+O[7]*(W[24+NA*2]*W[20+NA*2]+W[24+NA*3]*W[20+NA*3])+O[6]*W[24+NA*8]*W[20+NA*8]+O[5]*(W[24+NA*14]*W[20+NA*14]+W[24+NA*15]*W[20+NA*15]);
X[NA*21] =  X[21];
X[1+NA*21] = -X[21+NA];
X[2+NA*21] = -X[21+NA*2];
X[3+NA*21] = -X[21+NA*3];
X[4+NA*21] =  X[21+NA*4];
X[5+NA*21] =  X[21+NA*5];
X[6+NA*21] =  X[21+NA*6];
X[7+NA*21] =  X[21+NA*7];
X[8+NA*21] =  X[21+NA*8];
X[9+NA*21] = -X[21+NA*9];
X[10+NA*21] = -X[21+NA*10];
X[11+NA*21] = -X[21+NA*11];
X[12+NA*21] = -X[21+NA*12];
X[13+NA*21] = -X[21+NA*13];
X[14+NA*21] = -X[21+NA*14];
X[15+NA*21] = -X[21+NA*15];
X[16+NA*21] =  X[21+NA*16];
X[17+NA*21] =  X[21+NA*17];
X[18+NA*21] =  X[21+NA*18];
X[19+NA*21] =  X[21+NA*19];
X[20+NA*21] =  X[21+NA*20];
X[21+NA*21] =  O[8]*W[21]*W[21]+O[7]*(W[21+NA]*W[21+NA]+W[21+NA*2]*W[21+NA*2]+W[21+NA*3]*W[21+NA*3])+O[6]*(W[21+NA*5]*W[21+NA*5]+W[21+NA*6]*W[21+NA*6]+W[21+NA*7]*W[21+NA*7]+W[21+NA*8]*W[21+NA*8])+O[5]*(W[21+NA*12]*W[21+NA*12]+W[21+NA*13]*W[21+NA*13]+W[21+NA*14]*W[21+NA*14])+O[4];
X[22+NA*21] =  O[8]*W[22]*W[21]+O[7]*(W[22+NA]*W[21+NA]+W[22+NA*2]*W[21+NA*2]+W[22+NA*3]*W[21+NA*3])+O[6]*(W[22+NA*5]*W[21+NA*5]+W[22+NA*6]*W[21+NA*6]+W[22+NA*7]*W[21+NA*7]+W[22+NA*8]*W[21+NA*8])+O[5]*(W[22+NA*12]*W[21+NA*12]+W[22+NA*13]*W[21+NA*13]);
X[23+NA*21] =  O[8]*W[23]*W[21]+O[7]*(W[23+NA*2]*W[21+NA*2]+W[23+NA*3]*W[21+NA*3])+O[6]*(W[23+NA*7]*W[21+NA*7]+W[23+NA*8]*W[21+NA*8])+O[5]*W[23+NA*14]*W[21+NA*14];
X[24+NA*21] =  O[8]*W[24]*W[21]+O[7]*(W[24+NA*2]*W[21+NA*2]+W[24+NA*3]*W[21+NA*3])+O[6]*(W[24+NA*7]*W[21+NA*7]+W[24+NA*8]*W[21+NA*8])+O[5]*W[24+NA*14]*W[21+NA*14];
X[NA*22] =  X[22];
X[1+NA*22] = -X[22+NA];
X[2+NA*22] = -X[22+NA*2];
X[3+NA*22] = -X[22+NA*3];
X[4+NA*22] =  X[22+NA*4];
X[5+NA*22] =  X[22+NA*5];
X[6+NA*22] =  X[22+NA*6];
X[7+NA*22] =  X[22+NA*7];
X[8+NA*22] =  X[22+NA*8];
X[9+NA*22] = -X[22+NA*9];
X[10+NA*22] = -X[22+NA*10];
X[11+NA*22] = -X[22+NA*11];
X[12+NA*22] = -X[22+NA*12];
X[13+NA*22] = -X[22+NA*13];
X[14+NA*22] = -X[22+NA*14];
X[15+NA*22] = -X[22+NA*15];
X[16+NA*22] =  X[22+NA*16];
X[17+NA*22] =  X[22+NA*17];
X[18+NA*22] =  X[22+NA*18];
X[19+NA*22] =  X[22+NA*19];
X[20+NA*22] =  X[22+NA*20];
X[21+NA*22] =  X[22+NA*21];
X[22+NA*22] =  O[8]*W[22]*W[22]+O[7]*(W[22+NA]*W[22+NA]+W[22+NA*2]*W[22+NA*2]+W[22+NA*3]*W[22+NA*3])+O[6]*(W[22+NA*5]*W[22+NA*5]+W[22+NA*6]*W[22+NA*6]+W[22+NA*7]*W[22+NA*7]+W[22+NA*8]*W[22+NA*8])+O[5]*(W[22+NA*12]*W[22+NA*12]+W[22+NA*13]*W[22+NA*13]+W[22+NA*15]*W[22+NA*15])+O[4];
X[23+NA*22] =  O[8]*W[23]*W[22]+O[7]*(W[23+NA*2]*W[22+NA*2]+W[23+NA*3]*W[22+NA*3])+O[6]*(W[23+NA*7]*W[22+NA*7]+W[23+NA*8]*W[22+NA*8])+O[5]*W[23+NA*15]*W[22+NA*15];
X[24+NA*22] =  O[8]*W[24]*W[22]+O[7]*(W[24+NA*2]*W[22+NA*2]+W[24+NA*3]*W[22+NA*3])+O[6]*(W[24+NA*7]*W[22+NA*7]+W[24+NA*8]*W[22+NA*8])+O[5]*W[24+NA*15]*W[22+NA*15];
X[NA*23] =  X[23];
X[1+NA*23] = -X[23+NA];
X[2+NA*23] = -X[23+NA*2];
X[3+NA*23] = -X[23+NA*3];
X[4+NA*23] =  X[23+NA*4];
X[5+NA*23] =  X[23+NA*5];
X[6+NA*23] =  X[23+NA*6];
X[7+NA*23] =  X[23+NA*7];
X[8+NA*23] =  X[23+NA*8];
X[9+NA*23] = -X[23+NA*9];
X[10+NA*23] = -X[23+NA*10];
X[11+NA*23] = -X[23+NA*11];
X[12+NA*23] = -X[23+NA*12];
X[13+NA*23] = -X[23+NA*13];
X[14+NA*23] = -X[23+NA*14];
X[15+NA*23] = -X[23+NA*15];
X[16+NA*23] =  X[23+NA*16];
X[17+NA*23] =  X[23+NA*17];
X[18+NA*23] =  X[23+NA*18];
X[19+NA*23] =  X[23+NA*19];
X[20+NA*23] =  X[23+NA*20];
X[21+NA*23] =  X[23+NA*21];
X[22+NA*23] =  X[23+NA*22];
X[23+NA*23] =  O[8]*W[23]*W[23]+O[7]*(W[23+NA*2]*W[23+NA*2]+W[23+NA*3]*W[23+NA*3])+O[6]*(W[23+NA*7]*W[23+NA*7]+W[23+NA*8]*W[23+NA*8])+O[5]*(W[23+NA*14]*W[23+NA*14]+W[23+NA*15]*W[23+NA*15])+O[4];
X[24+NA*23] =  O[8]*W[24]*W[23]+O[7]*(W[24+NA*2]*W[23+NA*2]+W[24+NA*3]*W[23+NA*3])+O[6]*(W[24+NA*7]*W[23+NA*7]+W[24+NA*8]*W[23+NA*8])+O[5]*(W[24+NA*14]*W[23+NA*14]+W[24+NA*15]*W[23+NA*15]);
X[NA*24] =  X[24];
X[1+NA*24] = -X[24+NA];
X[2+NA*24] = -X[24+NA*2];
X[3+NA*24] = -X[24+NA*3];
X[4+NA*24] =  X[24+NA*4];
X[5+NA*24] =  X[24+NA*5];
X[6+NA*24] =  X[24+NA*6];
X[7+NA*24] =  X[24+NA*7];
X[8+NA*24] =  X[24+NA*8];
X[9+NA*24] = -X[24+NA*9];
X[10+NA*24] = -X[24+NA*10];
X[11+NA*24] = -X[24+NA*11];
X[12+NA*24] = -X[24+NA*12];
X[13+NA*24] = -X[24+NA*13];
X[14+NA*24] = -X[24+NA*14];
X[15+NA*24] = -X[24+NA*15];
X[16+NA*24] =  X[24+NA*16];
X[17+NA*24] =  X[24+NA*17];
X[18+NA*24] =  X[24+NA*18];
X[19+NA*24] =  X[24+NA*19];
X[20+NA*24] =  X[24+NA*20];
X[21+NA*24] =  X[24+NA*21];
X[22+NA*24] =  X[24+NA*22];
X[23+NA*24] =  X[24+NA*23];
X[24+NA*24] =  O[8]*W[24]*W[24]+O[7]*(W[24+NA*2]*W[24+NA*2]+W[24+NA*3]*W[24+NA*3])+O[6]*(W[24+NA*7]*W[24+NA*7]+W[24+NA*8]*W[24+NA*8])+O[5]*(W[24+NA*14]*W[24+NA*14]+W[24+NA*15]*W[24+NA*15])+O[4];
}

template <int NA>
inline void ExpHobMatBlk_HS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[25] =  O[5]*W[25];
X[26] =  O[5]*W[26];
X[27] =  O[5]*W[27];
X[28] =  O[5]*W[28];
X[29] =  O[5]*W[29];
X[30] =  O[5]*W[30];
X[31] =  O[5]*W[31];
X[32] =  O[5]*W[32];
X[33] =  O[5]*W[33];
X[34] =  O[5]*W[34];
X[35] =  O[5]*W[35];
}

template <int NA>
void ExpHobMatBlk_HP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[25+NA] = -O[6]*W[25]*W[1]-O[5]*W[25+NA];
X[26+NA] = -O[6]*W[26]*W[1]-O[5]*W[26+NA];
X[27+NA] = -O[6]*W[27]*W[1]-O[5]*W[27+NA];
X[28+NA] = -O[6]*W[28]*W[1]-O[5]*W[28+NA];
X[29+NA] = -O[6]*W[29]*W[1]-O[5]*W[29+NA];
X[30+NA] = -O[6]*W[30]*W[1]-O[5]*W[30+NA];
X[31+NA] = -O[6]*W[31]*W[1]-O[5]*W[31+NA];
X[32+NA] = -O[6]*W[32]*W[1]-O[5]*W[32+NA];
X[33+NA] = -O[6]*W[33]*W[1]-O[5]*W[33+NA];
X[34+NA] = -O[6]*W[34]*W[1];
X[35+NA] = -O[6]*W[35]*W[1];
X[25+NA*2] = -O[6]*W[25]*W[2]-O[5]*W[25+NA*2];
X[26+NA*2] = -O[6]*W[26]*W[2]-O[5]*W[26+NA*2];
X[27+NA*2] = -O[6]*W[27]*W[2]-O[5]*W[27+NA*2];
X[28+NA*2] = -O[6]*W[28]*W[2]-O[5]*W[28+NA*2];
X[29+NA*2] = -O[6]*W[29]*W[2]-O[5]*W[29+NA*2];
X[30+NA*2] = -O[6]*W[30]*W[2]-O[5]*W[30+NA*2];
X[31+NA*2] = -O[6]*W[31]*W[2]-O[5]*W[31+NA*2];
X[32+NA*2] = -O[6]*W[32]*W[2]-O[5]*W[32+NA*2];
X[33+NA*2] = -O[6]*W[33]*W[2]-O[5]*W[33+NA*2];
X[34+NA*2] = -O[6]*W[34]*W[2]-O[5]*W[34+NA*2];
X[35+NA*2] = -O[6]*W[35]*W[2]-O[5]*W[35+NA*2];
X[25+NA*3] = -O[6]*W[25]*W[3]-O[5]*W[25+NA*3];
X[26+NA*3] = -O[6]*W[26]*W[3]-O[5]*W[26+NA*3];
X[27+NA*3] = -O[6]*W[27]*W[3]-O[5]*W[27+NA*3];
X[28+NA*3] = -O[6]*W[28]*W[3]-O[5]*W[28+NA*3];
X[29+NA*3] = -O[6]*W[29]*W[3]-O[5]*W[29+NA*3];
X[30+NA*3] = -O[6]*W[30]*W[3]-O[5]*W[30+NA*3];
X[31+NA*3] = -O[6]*W[31]*W[3]-O[5]*W[31+NA*3];
X[32+NA*3] = -O[6]*W[32]*W[3]-O[5]*W[32+NA*3];
X[33+NA*3] = -O[6]*W[33]*W[3]-O[5]*W[33+NA*3];
X[34+NA*3] = -O[6]*W[34]*W[3]-O[5]*W[34+NA*3];
X[35+NA*3] = -O[6]*W[35]*W[3]-O[5]*W[35+NA*3];
}

template <int NA>
void ExpHobMatBlk_HD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[25+NA*4] =  O[7]*W[25]*W[4]+O[6]*(W[25+NA]*W[4+NA]+W[25+NA*2]*W[4+NA*2]+W[25+NA*3]*W[4+NA*3])+O[5]*W[25+NA*4];
X[26+NA*4] =  O[7]*W[26]*W[4]+O[6]*(W[26+NA]*W[4+NA]+W[26+NA*2]*W[4+NA*2]+W[26+NA*3]*W[4+NA*3])+O[5]*W[26+NA*4];
X[27+NA*4] =  O[7]*W[27]*W[4]+O[6]*(W[27+NA]*W[4+NA]+W[27+NA*2]*W[4+NA*2]+W[27+NA*3]*W[4+NA*3])+O[5]*W[27+NA*4];
X[28+NA*4] =  O[7]*W[28]*W[4]+O[6]*(W[28+NA]*W[4+NA]+W[28+NA*2]*W[4+NA*2]+W[28+NA*3]*W[4+NA*3])+O[5]*W[28+NA*4];
X[29+NA*4] =  O[7]*W[29]*W[4]+O[6]*(W[29+NA]*W[4+NA]+W[29+NA*2]*W[4+NA*2]+W[29+NA*3]*W[4+NA*3])+O[5]*W[29+NA*4];
X[30+NA*4] =  O[7]*W[30]*W[4]+O[6]*(W[30+NA]*W[4+NA]+W[30+NA*2]*W[4+NA*2]+W[30+NA*3]*W[4+NA*3])+O[5]*W[30+NA*4];
X[31+NA*4] =  O[7]*W[31]*W[4]+O[6]*(W[31+NA]*W[4+NA]+W[31+NA*2]*W[4+NA*2]+W[31+NA*3]*W[4+NA*3])+O[5]*W[31+NA*4];
X[32+NA*4] =  O[7]*W[32]*W[4]+O[6]*(W[32+NA]*W[4+NA]+W[32+NA*2]*W[4+NA*2]+W[32+NA*3]*W[4+NA*3]);
X[33+NA*4] =  O[7]*W[33]*W[4]+O[6]*(W[33+NA]*W[4+NA]+W[33+NA*2]*W[4+NA*2]+W[33+NA*3]*W[4+NA*3]);
X[34+NA*4] =  O[7]*W[34]*W[4]+O[6]*(W[34+NA*2]*W[4+NA*2]+W[34+NA*3]*W[4+NA*3]);
X[35+NA*4] =  O[7]*W[35]*W[4]+O[6]*(W[35+NA*2]*W[4+NA*2]+W[35+NA*3]*W[4+NA*3]);
X[25+NA*5] =  O[7]*W[25]*W[5]+O[6]*(W[25+NA]*W[5+NA]+W[25+NA*2]*W[5+NA*2])+O[5]*W[25+NA*5];
X[26+NA*5] =  O[7]*W[26]*W[5]+O[6]*(W[26+NA]*W[5+NA]+W[26+NA*2]*W[5+NA*2])+O[5]*W[26+NA*5];
X[27+NA*5] =  O[7]*W[27]*W[5]+O[6]*(W[27+NA]*W[5+NA]+W[27+NA*2]*W[5+NA*2])+O[5]*W[27+NA*5];
X[28+NA*5] =  O[7]*W[28]*W[5]+O[6]*(W[28+NA]*W[5+NA]+W[28+NA*2]*W[5+NA*2])+O[5]*W[28+NA*5];
X[29+NA*5] =  O[7]*W[29]*W[5]+O[6]*(W[29+NA]*W[5+NA]+W[29+NA*2]*W[5+NA*2])+O[5]*W[29+NA*5];
X[30+NA*5] =  O[7]*W[30]*W[5]+O[6]*(W[30+NA]*W[5+NA]+W[30+NA*2]*W[5+NA*2])+O[5]*W[30+NA*5];
X[31+NA*5] =  O[7]*W[31]*W[5]+O[6]*(W[31+NA]*W[5+NA]+W[31+NA*2]*W[5+NA*2])+O[5]*W[31+NA*5];
X[32+NA*5] =  O[7]*W[32]*W[5]+O[6]*(W[32+NA]*W[5+NA]+W[32+NA*2]*W[5+NA*2])+O[5]*W[32+NA*5];
X[33+NA*5] =  O[7]*W[33]*W[5]+O[6]*(W[33+NA]*W[5+NA]+W[33+NA*2]*W[5+NA*2])+O[5]*W[33+NA*5];
X[34+NA*5] =  O[7]*W[34]*W[5]+O[6]*W[34+NA*2]*W[5+NA*2];
X[35+NA*5] =  O[7]*W[35]*W[5]+O[6]*W[35+NA*2]*W[5+NA*2];
X[25+NA*6] =  O[7]*W[25]*W[6]+O[6]*(W[25+NA]*W[6+NA]+W[25+NA*3]*W[6+NA*3])+O[5]*W[25+NA*6];
X[26+NA*6] =  O[7]*W[26]*W[6]+O[6]*(W[26+NA]*W[6+NA]+W[26+NA*3]*W[6+NA*3])+O[5]*W[26+NA*6];
X[27+NA*6] =  O[7]*W[27]*W[6]+O[6]*(W[27+NA]*W[6+NA]+W[27+NA*3]*W[6+NA*3])+O[5]*W[27+NA*6];
X[28+NA*6] =  O[7]*W[28]*W[6]+O[6]*(W[28+NA]*W[6+NA]+W[28+NA*3]*W[6+NA*3])+O[5]*W[28+NA*6];
X[29+NA*6] =  O[7]*W[29]*W[6]+O[6]*(W[29+NA]*W[6+NA]+W[29+NA*3]*W[6+NA*3])+O[5]*W[29+NA*6];
X[30+NA*6] =  O[7]*W[30]*W[6]+O[6]*(W[30+NA]*W[6+NA]+W[30+NA*3]*W[6+NA*3])+O[5]*W[30+NA*6];
X[31+NA*6] =  O[7]*W[31]*W[6]+O[6]*(W[31+NA]*W[6+NA]+W[31+NA*3]*W[6+NA*3])+O[5]*W[31+NA*6];
X[32+NA*6] =  O[7]*W[32]*W[6]+O[6]*(W[32+NA]*W[6+NA]+W[32+NA*3]*W[6+NA*3])+O[5]*W[32+NA*6];
X[33+NA*6] =  O[7]*W[33]*W[6]+O[6]*(W[33+NA]*W[6+NA]+W[33+NA*3]*W[6+NA*3])+O[5]*W[33+NA*6];
X[34+NA*6] =  O[7]*W[34]*W[6]+O[6]*W[34+NA*3]*W[6+NA*3];
X[35+NA*6] =  O[7]*W[35]*W[6]+O[6]*W[35+NA*3]*W[6+NA*3];
X[25+NA*7] =  O[7]*W[25]*W[7]+O[6]*(W[25+NA*2]*W[7+NA*2]+W[25+NA*3]*W[7+NA*3])+O[5]*W[25+NA*7];
X[26+NA*7] =  O[7]*W[26]*W[7]+O[6]*(W[26+NA*2]*W[7+NA*2]+W[26+NA*3]*W[7+NA*3])+O[5]*W[26+NA*7];
X[27+NA*7] =  O[7]*W[27]*W[7]+O[6]*(W[27+NA*2]*W[7+NA*2]+W[27+NA*3]*W[7+NA*3])+O[5]*W[27+NA*7];
X[28+NA*7] =  O[7]*W[28]*W[7]+O[6]*(W[28+NA*2]*W[7+NA*2]+W[28+NA*3]*W[7+NA*3])+O[5]*W[28+NA*7];
X[29+NA*7] =  O[7]*W[29]*W[7]+O[6]*(W[29+NA*2]*W[7+NA*2]+W[29+NA*3]*W[7+NA*3]);
X[30+NA*7] =  O[7]*W[30]*W[7]+O[6]*(W[30+NA*2]*W[7+NA*2]+W[30+NA*3]*W[7+NA*3])+O[5]*W[30+NA*7];
X[31+NA*7] =  O[7]*W[31]*W[7]+O[6]*(W[31+NA*2]*W[7+NA*2]+W[31+NA*3]*W[7+NA*3])+O[5]*W[31+NA*7];
X[32+NA*7] =  O[7]*W[32]*W[7]+O[6]*(W[32+NA*2]*W[7+NA*2]+W[32+NA*3]*W[7+NA*3])+O[5]*W[32+NA*7];
X[33+NA*7] =  O[7]*W[33]*W[7]+O[6]*(W[33+NA*2]*W[7+NA*2]+W[33+NA*3]*W[7+NA*3])+O[5]*W[33+NA*7];
X[34+NA*7] =  O[7]*W[34]*W[7]+O[6]*(W[34+NA*2]*W[7+NA*2]+W[34+NA*3]*W[7+NA*3])+O[5]*W[34+NA*7];
X[35+NA*7] =  O[7]*W[35]*W[7]+O[6]*(W[35+NA*2]*W[7+NA*2]+W[35+NA*3]*W[7+NA*3])+O[5]*W[35+NA*7];
X[25+NA*8] =  O[7]*W[25]*W[8]+O[6]*(W[25+NA*2]*W[8+NA*2]+W[25+NA*3]*W[8+NA*3])+O[5]*W[25+NA*8];
X[26+NA*8] =  O[7]*W[26]*W[8]+O[6]*(W[26+NA*2]*W[8+NA*2]+W[26+NA*3]*W[8+NA*3])+O[5]*W[26+NA*8];
X[27+NA*8] =  O[7]*W[27]*W[8]+O[6]*(W[27+NA*2]*W[8+NA*2]+W[27+NA*3]*W[8+NA*3])+O[5]*W[27+NA*8];
X[28+NA*8] =  O[7]*W[28]*W[8]+O[6]*(W[28+NA*2]*W[8+NA*2]+W[28+NA*3]*W[8+NA*3]);
X[29+NA*8] =  O[7]*W[29]*W[8]+O[6]*(W[29+NA*2]*W[8+NA*2]+W[29+NA*3]*W[8+NA*3])+O[5]*W[29+NA*8];
X[30+NA*8] =  O[7]*W[30]*W[8]+O[6]*(W[30+NA*2]*W[8+NA*2]+W[30+NA*3]*W[8+NA*3])+O[5]*W[30+NA*8];
X[31+NA*8] =  O[7]*W[31]*W[8]+O[6]*(W[31+NA*2]*W[8+NA*2]+W[31+NA*3]*W[8+NA*3])+O[5]*W[31+NA*8];
X[32+NA*8] =  O[7]*W[32]*W[8]+O[6]*(W[32+NA*2]*W[8+NA*2]+W[32+NA*3]*W[8+NA*3])+O[5]*W[32+NA*8];
X[33+NA*8] =  O[7]*W[33]*W[8]+O[6]*(W[33+NA*2]*W[8+NA*2]+W[33+NA*3]*W[8+NA*3])+O[5]*W[33+NA*8];
X[34+NA*8] =  O[7]*W[34]*W[8]+O[6]*(W[34+NA*2]*W[8+NA*2]+W[34+NA*3]*W[8+NA*3])+O[5]*W[34+NA*8];
X[35+NA*8] =  O[7]*W[35]*W[8]+O[6]*(W[35+NA*2]*W[8+NA*2]+W[35+NA*3]*W[8+NA*3])+O[5]*W[35+NA*8];
}

template <int NA>
void ExpHobMatBlk_HF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[25+NA*9] = -O[8]*W[25]*W[9]-O[7]*(W[25+NA]*W[9+NA]+W[25+NA*2]*W[9+NA*2]+W[25+NA*3]*W[9+NA*3])-O[6]*(W[25+NA*4]*W[9+NA*4]+W[25+NA*5]*W[9+NA*5]+W[25+NA*6]*W[9+NA*6])-O[5]*W[25+NA*9];
X[26+NA*9] = -O[8]*W[26]*W[9]-O[7]*(W[26+NA]*W[9+NA]+W[26+NA*2]*W[9+NA*2]+W[26+NA*3]*W[9+NA*3])-O[6]*(W[26+NA*4]*W[9+NA*4]+W[26+NA*5]*W[9+NA*5]+W[26+NA*6]*W[9+NA*6])-O[5]*W[26+NA*9];
X[27+NA*9] = -O[8]*W[27]*W[9]-O[7]*(W[27+NA]*W[9+NA]+W[27+NA*2]*W[9+NA*2]+W[27+NA*3]*W[9+NA*3])-O[6]*(W[27+NA*4]*W[9+NA*4]+W[27+NA*5]*W[9+NA*5]+W[27+NA*6]*W[9+NA*6])-O[5]*W[27+NA*9];
X[28+NA*9] = -O[8]*W[28]*W[9]-O[7]*(W[28+NA]*W[9+NA]+W[28+NA*2]*W[9+NA*2]+W[28+NA*3]*W[9+NA*3])-O[6]*(W[28+NA*4]*W[9+NA*4]+W[28+NA*5]*W[9+NA*5]+W[28+NA*6]*W[9+NA*6])-O[5]*W[28+NA*9];
X[29+NA*9] = -O[8]*W[29]*W[9]-O[7]*(W[29+NA]*W[9+NA]+W[29+NA*2]*W[9+NA*2]+W[29+NA*3]*W[9+NA*3])-O[6]*(W[29+NA*4]*W[9+NA*4]+W[29+NA*5]*W[9+NA*5]+W[29+NA*6]*W[9+NA*6])-O[5]*W[29+NA*9];
X[30+NA*9] = -O[8]*W[30]*W[9]-O[7]*(W[30+NA]*W[9+NA]+W[30+NA*2]*W[9+NA*2]+W[30+NA*3]*W[9+NA*3])-O[6]*(W[30+NA*4]*W[9+NA*4]+W[30+NA*5]*W[9+NA*5]+W[30+NA*6]*W[9+NA*6]);
X[31+NA*9] = -O[8]*W[31]*W[9]-O[7]*(W[31+NA]*W[9+NA]+W[31+NA*2]*W[9+NA*2]+W[31+NA*3]*W[9+NA*3])-O[6]*(W[31+NA*4]*W[9+NA*4]+W[31+NA*5]*W[9+NA*5]+W[31+NA*6]*W[9+NA*6]);
X[32+NA*9] = -O[8]*W[32]*W[9]-O[7]*(W[32+NA]*W[9+NA]+W[32+NA*2]*W[9+NA*2]+W[32+NA*3]*W[9+NA*3])-O[6]*(W[32+NA*5]*W[9+NA*5]+W[32+NA*6]*W[9+NA*6]);
X[33+NA*9] = -O[8]*W[33]*W[9]-O[7]*(W[33+NA]*W[9+NA]+W[33+NA*2]*W[9+NA*2]+W[33+NA*3]*W[9+NA*3])-O[6]*(W[33+NA*5]*W[9+NA*5]+W[33+NA*6]*W[9+NA*6]);
X[34+NA*9] = -O[8]*W[34]*W[9]-O[7]*(W[34+NA*2]*W[9+NA*2]+W[34+NA*3]*W[9+NA*3]);
X[35+NA*9] = -O[8]*W[35]*W[9]-O[7]*(W[35+NA*2]*W[9+NA*2]+W[35+NA*3]*W[9+NA*3]);
X[25+NA*10] = -O[8]*W[25]*W[10]-O[7]*(W[25+NA]*W[10+NA]+W[25+NA*2]*W[10+NA*2]+W[25+NA*3]*W[10+NA*3])-O[6]*(W[25+NA*4]*W[10+NA*4]+W[25+NA*5]*W[10+NA*5]+W[25+NA*7]*W[10+NA*7]+W[25+NA*8]*W[10+NA*8])-O[5]*W[25+NA*10];
X[26+NA*10] = -O[8]*W[26]*W[10]-O[7]*(W[26+NA]*W[10+NA]+W[26+NA*2]*W[10+NA*2]+W[26+NA*3]*W[10+NA*3])-O[6]*(W[26+NA*4]*W[10+NA*4]+W[26+NA*5]*W[10+NA*5]+W[26+NA*7]*W[10+NA*7]+W[26+NA*8]*W[10+NA*8])-O[5]*W[26+NA*10];
X[27+NA*10] = -O[8]*W[27]*W[10]-O[7]*(W[27+NA]*W[10+NA]+W[27+NA*2]*W[10+NA*2]+W[27+NA*3]*W[10+NA*3])-O[6]*(W[27+NA*4]*W[10+NA*4]+W[27+NA*5]*W[10+NA*5]+W[27+NA*7]*W[10+NA*7]+W[27+NA*8]*W[10+NA*8])-O[5]*W[27+NA*10];
X[28+NA*10] = -O[8]*W[28]*W[10]-O[7]*(W[28+NA]*W[10+NA]+W[28+NA*2]*W[10+NA*2]+W[28+NA*3]*W[10+NA*3])-O[6]*(W[28+NA*4]*W[10+NA*4]+W[28+NA*5]*W[10+NA*5]+W[28+NA*7]*W[10+NA*7])-O[5]*W[28+NA*10];
X[29+NA*10] = -O[8]*W[29]*W[10]-O[7]*(W[29+NA]*W[10+NA]+W[29+NA*2]*W[10+NA*2]+W[29+NA*3]*W[10+NA*3])-O[6]*(W[29+NA*4]*W[10+NA*4]+W[29+NA*5]*W[10+NA*5]+W[29+NA*8]*W[10+NA*8])-O[5]*W[29+NA*10];
X[30+NA*10] = -O[8]*W[30]*W[10]-O[7]*(W[30+NA]*W[10+NA]+W[30+NA*2]*W[10+NA*2]+W[30+NA*3]*W[10+NA*3])-O[6]*(W[30+NA*4]*W[10+NA*4]+W[30+NA*5]*W[10+NA*5]+W[30+NA*7]*W[10+NA*7]+W[30+NA*8]*W[10+NA*8])-O[5]*W[30+NA*10];
X[31+NA*10] = -O[8]*W[31]*W[10]-O[7]*(W[31+NA]*W[10+NA]+W[31+NA*2]*W[10+NA*2]+W[31+NA*3]*W[10+NA*3])-O[6]*(W[31+NA*4]*W[10+NA*4]+W[31+NA*5]*W[10+NA*5]+W[31+NA*7]*W[10+NA*7]+W[31+NA*8]*W[10+NA*8])-O[5]*W[31+NA*10];
X[32+NA*10] = -O[8]*W[32]*W[10]-O[7]*(W[32+NA]*W[10+NA]+W[32+NA*2]*W[10+NA*2]+W[32+NA*3]*W[10+NA*3])-O[6]*(W[32+NA*5]*W[10+NA*5]+W[32+NA*7]*W[10+NA*7]+W[32+NA*8]*W[10+NA*8]);
X[33+NA*10] = -O[8]*W[33]*W[10]-O[7]*(W[33+NA]*W[10+NA]+W[33+NA*2]*W[10+NA*2]+W[33+NA*3]*W[10+NA*3])-O[6]*(W[33+NA*5]*W[10+NA*5]+W[33+NA*7]*W[10+NA*7]+W[33+NA*8]*W[10+NA*8]);
X[34+NA*10] = -O[8]*W[34]*W[10]-O[7]*(W[34+NA*2]*W[10+NA*2]+W[34+NA*3]*W[10+NA*3])-O[6]*(W[34+NA*7]*W[10+NA*7]+W[34+NA*8]*W[10+NA*8]);
X[35+NA*10] = -O[8]*W[35]*W[10]-O[7]*(W[35+NA*2]*W[10+NA*2]+W[35+NA*3]*W[10+NA*3])-O[6]*(W[35+NA*7]*W[10+NA*7]+W[35+NA*8]*W[10+NA*8]);
X[25+NA*11] = -O[8]*W[25]*W[11]-O[7]*(W[25+NA]*W[11+NA]+W[25+NA*2]*W[11+NA*2]+W[25+NA*3]*W[11+NA*3])-O[6]*(W[25+NA*4]*W[11+NA*4]+W[25+NA*6]*W[11+NA*6]+W[25+NA*7]*W[11+NA*7]+W[25+NA*8]*W[11+NA*8])-O[5]*W[25+NA*11];
X[26+NA*11] = -O[8]*W[26]*W[11]-O[7]*(W[26+NA]*W[11+NA]+W[26+NA*2]*W[11+NA*2]+W[26+NA*3]*W[11+NA*3])-O[6]*(W[26+NA*4]*W[11+NA*4]+W[26+NA*6]*W[11+NA*6]+W[26+NA*7]*W[11+NA*7]+W[26+NA*8]*W[11+NA*8])-O[5]*W[26+NA*11];
X[27+NA*11] = -O[8]*W[27]*W[11]-O[7]*(W[27+NA]*W[11+NA]+W[27+NA*2]*W[11+NA*2]+W[27+NA*3]*W[11+NA*3])-O[6]*(W[27+NA*4]*W[11+NA*4]+W[27+NA*6]*W[11+NA*6]+W[27+NA*7]*W[11+NA*7]+W[27+NA*8]*W[11+NA*8])-O[5]*W[27+NA*11];
X[28+NA*11] = -O[8]*W[28]*W[11]-O[7]*(W[28+NA]*W[11+NA]+W[28+NA*2]*W[11+NA*2]+W[28+NA*3]*W[11+NA*3])-O[6]*(W[28+NA*4]*W[11+NA*4]+W[28+NA*6]*W[11+NA*6]+W[28+NA*7]*W[11+NA*7])-O[5]*W[28+NA*11];
X[29+NA*11] = -O[8]*W[29]*W[11]-O[7]*(W[29+NA]*W[11+NA]+W[29+NA*2]*W[11+NA*2]+W[29+NA*3]*W[11+NA*3])-O[6]*(W[29+NA*4]*W[11+NA*4]+W[29+NA*6]*W[11+NA*6]+W[29+NA*8]*W[11+NA*8])-O[5]*W[29+NA*11];
X[30+NA*11] = -O[8]*W[30]*W[11]-O[7]*(W[30+NA]*W[11+NA]+W[30+NA*2]*W[11+NA*2]+W[30+NA*3]*W[11+NA*3])-O[6]*(W[30+NA*4]*W[11+NA*4]+W[30+NA*6]*W[11+NA*6]+W[30+NA*7]*W[11+NA*7]+W[30+NA*8]*W[11+NA*8])-O[5]*W[30+NA*11];
X[31+NA*11] = -O[8]*W[31]*W[11]-O[7]*(W[31+NA]*W[11+NA]+W[31+NA*2]*W[11+NA*2]+W[31+NA*3]*W[11+NA*3])-O[6]*(W[31+NA*4]*W[11+NA*4]+W[31+NA*6]*W[11+NA*6]+W[31+NA*7]*W[11+NA*7]+W[31+NA*8]*W[11+NA*8])-O[5]*W[31+NA*11];
X[32+NA*11] = -O[8]*W[32]*W[11]-O[7]*(W[32+NA]*W[11+NA]+W[32+NA*2]*W[11+NA*2]+W[32+NA*3]*W[11+NA*3])-O[6]*(W[32+NA*6]*W[11+NA*6]+W[32+NA*7]*W[11+NA*7]+W[32+NA*8]*W[11+NA*8]);
X[33+NA*11] = -O[8]*W[33]*W[11]-O[7]*(W[33+NA]*W[11+NA]+W[33+NA*2]*W[11+NA*2]+W[33+NA*3]*W[11+NA*3])-O[6]*(W[33+NA*6]*W[11+NA*6]+W[33+NA*7]*W[11+NA*7]+W[33+NA*8]*W[11+NA*8]);
X[34+NA*11] = -O[8]*W[34]*W[11]-O[7]*(W[34+NA*2]*W[11+NA*2]+W[34+NA*3]*W[11+NA*3])-O[6]*(W[34+NA*7]*W[11+NA*7]+W[34+NA*8]*W[11+NA*8]);
X[35+NA*11] = -O[8]*W[35]*W[11]-O[7]*(W[35+NA*2]*W[11+NA*2]+W[35+NA*3]*W[11+NA*3])-O[6]*(W[35+NA*7]*W[11+NA*7]+W[35+NA*8]*W[11+NA*8]);
X[25+NA*12] = -O[8]*W[25]*W[12]-O[7]*(W[25+NA]*W[12+NA]+W[25+NA*2]*W[12+NA*2]+W[25+NA*3]*W[12+NA*3])-O[6]*(W[25+NA*5]*W[12+NA*5]+W[25+NA*6]*W[12+NA*6]+W[25+NA*7]*W[12+NA*7])-O[5]*W[25+NA*12];
X[26+NA*12] = -O[8]*W[26]*W[12]-O[7]*(W[26+NA]*W[12+NA]+W[26+NA*2]*W[12+NA*2]+W[26+NA*3]*W[12+NA*3])-O[6]*(W[26+NA*5]*W[12+NA*5]+W[26+NA*6]*W[12+NA*6]+W[26+NA*7]*W[12+NA*7])-O[5]*W[26+NA*12];
X[27+NA*12] = -O[8]*W[27]*W[12]-O[7]*(W[27+NA]*W[12+NA]+W[27+NA*2]*W[12+NA*2]+W[27+NA*3]*W[12+NA*3])-O[6]*(W[27+NA*5]*W[12+NA*5]+W[27+NA*6]*W[12+NA*6]+W[27+NA*7]*W[12+NA*7])-O[5]*W[27+NA*12];
X[28+NA*12] = -O[8]*W[28]*W[12]-O[7]*(W[28+NA]*W[12+NA]+W[28+NA*2]*W[12+NA*2]+W[28+NA*3]*W[12+NA*3])-O[6]*(W[28+NA*5]*W[12+NA*5]+W[28+NA*6]*W[12+NA*6]+W[28+NA*7]*W[12+NA*7])-O[5]*W[28+NA*12];
X[29+NA*12] = -O[8]*W[29]*W[12]-O[7]*(W[29+NA]*W[12+NA]+W[29+NA*2]*W[12+NA*2]+W[29+NA*3]*W[12+NA*3])-O[6]*(W[29+NA*5]*W[12+NA*5]+W[29+NA*6]*W[12+NA*6]);
X[30+NA*12] = -O[8]*W[30]*W[12]-O[7]*(W[30+NA]*W[12+NA]+W[30+NA*2]*W[12+NA*2]+W[30+NA*3]*W[12+NA*3])-O[6]*(W[30+NA*5]*W[12+NA*5]+W[30+NA*6]*W[12+NA*6]+W[30+NA*7]*W[12+NA*7])-O[5]*W[30+NA*12];
X[31+NA*12] = -O[8]*W[31]*W[12]-O[7]*(W[31+NA]*W[12+NA]+W[31+NA*2]*W[12+NA*2]+W[31+NA*3]*W[12+NA*3])-O[6]*(W[31+NA*5]*W[12+NA*5]+W[31+NA*6]*W[12+NA*6]+W[31+NA*7]*W[12+NA*7])-O[5]*W[31+NA*12];
X[32+NA*12] = -O[8]*W[32]*W[12]-O[7]*(W[32+NA]*W[12+NA]+W[32+NA*2]*W[12+NA*2]+W[32+NA*3]*W[12+NA*3])-O[6]*(W[32+NA*5]*W[12+NA*5]+W[32+NA*6]*W[12+NA*6]+W[32+NA*7]*W[12+NA*7])-O[5]*W[32+NA*12];
X[33+NA*12] = -O[8]*W[33]*W[12]-O[7]*(W[33+NA]*W[12+NA]+W[33+NA*2]*W[12+NA*2]+W[33+NA*3]*W[12+NA*3])-O[6]*(W[33+NA*5]*W[12+NA*5]+W[33+NA*6]*W[12+NA*6]+W[33+NA*7]*W[12+NA*7])-O[5]*W[33+NA*12];
X[34+NA*12] = -O[8]*W[34]*W[12]-O[7]*(W[34+NA*2]*W[12+NA*2]+W[34+NA*3]*W[12+NA*3])-O[6]*W[34+NA*7]*W[12+NA*7];
X[35+NA*12] = -O[8]*W[35]*W[12]-O[7]*(W[35+NA*2]*W[12+NA*2]+W[35+NA*3]*W[12+NA*3])-O[6]*W[35+NA*7]*W[12+NA*7];
X[25+NA*13] = -O[8]*W[25]*W[13]-O[7]*(W[25+NA]*W[13+NA]+W[25+NA*2]*W[13+NA*2]+W[25+NA*3]*W[13+NA*3])-O[6]*(W[25+NA*5]*W[13+NA*5]+W[25+NA*6]*W[13+NA*6]+W[25+NA*8]*W[13+NA*8])-O[5]*W[25+NA*13];
X[26+NA*13] = -O[8]*W[26]*W[13]-O[7]*(W[26+NA]*W[13+NA]+W[26+NA*2]*W[13+NA*2]+W[26+NA*3]*W[13+NA*3])-O[6]*(W[26+NA*5]*W[13+NA*5]+W[26+NA*6]*W[13+NA*6]+W[26+NA*8]*W[13+NA*8])-O[5]*W[26+NA*13];
X[27+NA*13] = -O[8]*W[27]*W[13]-O[7]*(W[27+NA]*W[13+NA]+W[27+NA*2]*W[13+NA*2]+W[27+NA*3]*W[13+NA*3])-O[6]*(W[27+NA*5]*W[13+NA*5]+W[27+NA*6]*W[13+NA*6]+W[27+NA*8]*W[13+NA*8])-O[5]*W[27+NA*13];
X[28+NA*13] = -O[8]*W[28]*W[13]-O[7]*(W[28+NA]*W[13+NA]+W[28+NA*2]*W[13+NA*2]+W[28+NA*3]*W[13+NA*3])-O[6]*(W[28+NA*5]*W[13+NA*5]+W[28+NA*6]*W[13+NA*6]);
X[29+NA*13] = -O[8]*W[29]*W[13]-O[7]*(W[29+NA]*W[13+NA]+W[29+NA*2]*W[13+NA*2]+W[29+NA*3]*W[13+NA*3])-O[6]*(W[29+NA*5]*W[13+NA*5]+W[29+NA*6]*W[13+NA*6]+W[29+NA*8]*W[13+NA*8])-O[5]*W[29+NA*13];
X[30+NA*13] = -O[8]*W[30]*W[13]-O[7]*(W[30+NA]*W[13+NA]+W[30+NA*2]*W[13+NA*2]+W[30+NA*3]*W[13+NA*3])-O[6]*(W[30+NA*5]*W[13+NA*5]+W[30+NA*6]*W[13+NA*6]+W[30+NA*8]*W[13+NA*8])-O[5]*W[30+NA*13];
X[31+NA*13] = -O[8]*W[31]*W[13]-O[7]*(W[31+NA]*W[13+NA]+W[31+NA*2]*W[13+NA*2]+W[31+NA*3]*W[13+NA*3])-O[6]*(W[31+NA*5]*W[13+NA*5]+W[31+NA*6]*W[13+NA*6]+W[31+NA*8]*W[13+NA*8])-O[5]*W[31+NA*13];
X[32+NA*13] = -O[8]*W[32]*W[13]-O[7]*(W[32+NA]*W[13+NA]+W[32+NA*2]*W[13+NA*2]+W[32+NA*3]*W[13+NA*3])-O[6]*(W[32+NA*5]*W[13+NA*5]+W[32+NA*6]*W[13+NA*6]+W[32+NA*8]*W[13+NA*8])-O[5]*W[32+NA*13];
X[33+NA*13] = -O[8]*W[33]*W[13]-O[7]*(W[33+NA]*W[13+NA]+W[33+NA*2]*W[13+NA*2]+W[33+NA*3]*W[13+NA*3])-O[6]*(W[33+NA*5]*W[13+NA*5]+W[33+NA*6]*W[13+NA*6]+W[33+NA*8]*W[13+NA*8])-O[5]*W[33+NA*13];
X[34+NA*13] = -O[8]*W[34]*W[13]-O[7]*(W[34+NA*2]*W[13+NA*2]+W[34+NA*3]*W[13+NA*3])-O[6]*W[34+NA*8]*W[13+NA*8];
X[35+NA*13] = -O[8]*W[35]*W[13]-O[7]*(W[35+NA*2]*W[13+NA*2]+W[35+NA*3]*W[13+NA*3])-O[6]*W[35+NA*8]*W[13+NA*8];
X[25+NA*14] = -O[8]*W[25]*W[14]-O[7]*(W[25+NA*2]*W[14+NA*2]+W[25+NA*3]*W[14+NA*3])-O[6]*(W[25+NA*7]*W[14+NA*7]+W[25+NA*8]*W[14+NA*8]);
X[26+NA*14] = -O[8]*W[26]*W[14]-O[7]*(W[26+NA*2]*W[14+NA*2]+W[26+NA*3]*W[14+NA*3])-O[6]*(W[26+NA*7]*W[14+NA*7]+W[26+NA*8]*W[14+NA*8])-O[5]*W[26+NA*14];
X[27+NA*14] = -O[8]*W[27]*W[14]-O[7]*(W[27+NA*2]*W[14+NA*2]+W[27+NA*3]*W[14+NA*3])-O[6]*(W[27+NA*7]*W[14+NA*7]+W[27+NA*8]*W[14+NA*8])-O[5]*W[27+NA*14];
X[28+NA*14] = -O[8]*W[28]*W[14]-O[7]*(W[28+NA*2]*W[14+NA*2]+W[28+NA*3]*W[14+NA*3])-O[6]*W[28+NA*7]*W[14+NA*7]-O[5]*W[28+NA*14];
X[29+NA*14] = -O[8]*W[29]*W[14]-O[7]*(W[29+NA*2]*W[14+NA*2]+W[29+NA*3]*W[14+NA*3])-O[6]*W[29+NA*8]*W[14+NA*8]-O[5]*W[29+NA*14];
X[30+NA*14] = -O[8]*W[30]*W[14]-O[7]*(W[30+NA*2]*W[14+NA*2]+W[30+NA*3]*W[14+NA*3])-O[6]*(W[30+NA*7]*W[14+NA*7]+W[30+NA*8]*W[14+NA*8])-O[5]*W[30+NA*14];
X[31+NA*14] = -O[8]*W[31]*W[14]-O[7]*(W[31+NA*2]*W[14+NA*2]+W[31+NA*3]*W[14+NA*3])-O[6]*(W[31+NA*7]*W[14+NA*7]+W[31+NA*8]*W[14+NA*8]);
X[32+NA*14] = -O[8]*W[32]*W[14]-O[7]*(W[32+NA*2]*W[14+NA*2]+W[32+NA*3]*W[14+NA*3])-O[6]*(W[32+NA*7]*W[14+NA*7]+W[32+NA*8]*W[14+NA*8])-O[5]*W[32+NA*14];
X[33+NA*14] = -O[8]*W[33]*W[14]-O[7]*(W[33+NA*2]*W[14+NA*2]+W[33+NA*3]*W[14+NA*3])-O[6]*(W[33+NA*7]*W[14+NA*7]+W[33+NA*8]*W[14+NA*8])-O[5]*W[33+NA*14];
X[34+NA*14] = -O[8]*W[34]*W[14]-O[7]*(W[34+NA*2]*W[14+NA*2]+W[34+NA*3]*W[14+NA*3])-O[6]*(W[34+NA*7]*W[14+NA*7]+W[34+NA*8]*W[14+NA*8])-O[5]*W[34+NA*14];
X[35+NA*14] = -O[8]*W[35]*W[14]-O[7]*(W[35+NA*2]*W[14+NA*2]+W[35+NA*3]*W[14+NA*3])-O[6]*(W[35+NA*7]*W[14+NA*7]+W[35+NA*8]*W[14+NA*8])-O[5]*W[35+NA*14];
X[25+NA*15] = -O[8]*W[25]*W[15]-O[7]*(W[25+NA*2]*W[15+NA*2]+W[25+NA*3]*W[15+NA*3])-O[6]*(W[25+NA*7]*W[15+NA*7]+W[25+NA*8]*W[15+NA*8]);
X[26+NA*15] = -O[8]*W[26]*W[15]-O[7]*(W[26+NA*2]*W[15+NA*2]+W[26+NA*3]*W[15+NA*3])-O[6]*(W[26+NA*7]*W[15+NA*7]+W[26+NA*8]*W[15+NA*8])-O[5]*W[26+NA*15];
X[27+NA*15] = -O[8]*W[27]*W[15]-O[7]*(W[27+NA*2]*W[15+NA*2]+W[27+NA*3]*W[15+NA*3])-O[6]*(W[27+NA*7]*W[15+NA*7]+W[27+NA*8]*W[15+NA*8])-O[5]*W[27+NA*15];
X[28+NA*15] = -O[8]*W[28]*W[15]-O[7]*(W[28+NA*2]*W[15+NA*2]+W[28+NA*3]*W[15+NA*3])-O[6]*W[28+NA*7]*W[15+NA*7]-O[5]*W[28+NA*15];
X[29+NA*15] = -O[8]*W[29]*W[15]-O[7]*(W[29+NA*2]*W[15+NA*2]+W[29+NA*3]*W[15+NA*3])-O[6]*W[29+NA*8]*W[15+NA*8]-O[5]*W[29+NA*15];
X[30+NA*15] = -O[8]*W[30]*W[15]-O[7]*(W[30+NA*2]*W[15+NA*2]+W[30+NA*3]*W[15+NA*3])-O[6]*(W[30+NA*7]*W[15+NA*7]+W[30+NA*8]*W[15+NA*8]);
X[31+NA*15] = -O[8]*W[31]*W[15]-O[7]*(W[31+NA*2]*W[15+NA*2]+W[31+NA*3]*W[15+NA*3])-O[6]*(W[31+NA*7]*W[15+NA*7]+W[31+NA*8]*W[15+NA*8])-O[5]*W[31+NA*15];
X[32+NA*15] = -O[8]*W[32]*W[15]-O[7]*(W[32+NA*2]*W[15+NA*2]+W[32+NA*3]*W[15+NA*3])-O[6]*(W[32+NA*7]*W[15+NA*7]+W[32+NA*8]*W[15+NA*8])-O[5]*W[32+NA*15];
X[33+NA*15] = -O[8]*W[33]*W[15]-O[7]*(W[33+NA*2]*W[15+NA*2]+W[33+NA*3]*W[15+NA*3])-O[6]*(W[33+NA*7]*W[15+NA*7]+W[33+NA*8]*W[15+NA*8])-O[5]*W[33+NA*15];
X[34+NA*15] = -O[8]*W[34]*W[15]-O[7]*(W[34+NA*2]*W[15+NA*2]+W[34+NA*3]*W[15+NA*3])-O[6]*(W[34+NA*7]*W[15+NA*7]+W[34+NA*8]*W[15+NA*8])-O[5]*W[34+NA*15];
X[35+NA*15] = -O[8]*W[35]*W[15]-O[7]*(W[35+NA*2]*W[15+NA*2]+W[35+NA*3]*W[15+NA*3])-O[6]*(W[35+NA*7]*W[15+NA*7]+W[35+NA*8]*W[15+NA*8])-O[5]*W[35+NA*15];
}

template <int NA>
void ExpHobMatBlk_HG( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[25+NA*16] =  O[9]*W[25]*W[16]+O[8]*(W[25+NA]*W[16+NA]+W[25+NA*2]*W[16+NA*2]+W[25+NA*3]*W[16+NA*3])+O[7]*(W[25+NA*4]*W[16+NA*4]+W[25+NA*5]*W[16+NA*5]+W[25+NA*6]*W[16+NA*6]+W[25+NA*7]*W[16+NA*7]+W[25+NA*8]*W[16+NA*8])+O[6]*(W[25+NA*9]*W[16+NA*9]+W[25+NA*10]*W[16+NA*10]+W[25+NA*11]*W[16+NA*11])+O[5]*W[25+NA*16];
X[26+NA*16] =  O[9]*W[26]*W[16]+O[8]*(W[26+NA]*W[16+NA]+W[26+NA*2]*W[16+NA*2]+W[26+NA*3]*W[16+NA*3])+O[7]*(W[26+NA*4]*W[16+NA*4]+W[26+NA*5]*W[16+NA*5]+W[26+NA*6]*W[16+NA*6]+W[26+NA*7]*W[16+NA*7]+W[26+NA*8]*W[16+NA*8])+O[6]*(W[26+NA*9]*W[16+NA*9]+W[26+NA*10]*W[16+NA*10]+W[26+NA*11]*W[16+NA*11])+O[5]*W[26+NA*16];
X[27+NA*16] =  O[9]*W[27]*W[16]+O[8]*(W[27+NA]*W[16+NA]+W[27+NA*2]*W[16+NA*2]+W[27+NA*3]*W[16+NA*3])+O[7]*(W[27+NA*4]*W[16+NA*4]+W[27+NA*5]*W[16+NA*5]+W[27+NA*6]*W[16+NA*6]+W[27+NA*7]*W[16+NA*7]+W[27+NA*8]*W[16+NA*8])+O[6]*(W[27+NA*9]*W[16+NA*9]+W[27+NA*10]*W[16+NA*10]+W[27+NA*11]*W[16+NA*11])+O[5]*W[27+NA*16];
X[28+NA*16] =  O[9]*W[28]*W[16]+O[8]*(W[28+NA]*W[16+NA]+W[28+NA*2]*W[16+NA*2]+W[28+NA*3]*W[16+NA*3])+O[7]*(W[28+NA*4]*W[16+NA*4]+W[28+NA*5]*W[16+NA*5]+W[28+NA*6]*W[16+NA*6]+W[28+NA*7]*W[16+NA*7])+O[6]*(W[28+NA*9]*W[16+NA*9]+W[28+NA*10]*W[16+NA*10]+W[28+NA*11]*W[16+NA*11]);
X[29+NA*16] =  O[9]*W[29]*W[16]+O[8]*(W[29+NA]*W[16+NA]+W[29+NA*2]*W[16+NA*2]+W[29+NA*3]*W[16+NA*3])+O[7]*(W[29+NA*4]*W[16+NA*4]+W[29+NA*5]*W[16+NA*5]+W[29+NA*6]*W[16+NA*6]+W[29+NA*8]*W[16+NA*8])+O[6]*(W[29+NA*9]*W[16+NA*9]+W[29+NA*10]*W[16+NA*10]+W[29+NA*11]*W[16+NA*11]);
X[30+NA*16] =  O[9]*W[30]*W[16]+O[8]*(W[30+NA]*W[16+NA]+W[30+NA*2]*W[16+NA*2]+W[30+NA*3]*W[16+NA*3])+O[7]*(W[30+NA*4]*W[16+NA*4]+W[30+NA*5]*W[16+NA*5]+W[30+NA*6]*W[16+NA*6]+W[30+NA*7]*W[16+NA*7]+W[30+NA*8]*W[16+NA*8])+O[6]*(W[30+NA*10]*W[16+NA*10]+W[30+NA*11]*W[16+NA*11]);
X[31+NA*16] =  O[9]*W[31]*W[16]+O[8]*(W[31+NA]*W[16+NA]+W[31+NA*2]*W[16+NA*2]+W[31+NA*3]*W[16+NA*3])+O[7]*(W[31+NA*4]*W[16+NA*4]+W[31+NA*5]*W[16+NA*5]+W[31+NA*6]*W[16+NA*6]+W[31+NA*7]*W[16+NA*7]+W[31+NA*8]*W[16+NA*8])+O[6]*(W[31+NA*10]*W[16+NA*10]+W[31+NA*11]*W[16+NA*11]);
X[32+NA*16] =  O[9]*W[32]*W[16]+O[8]*(W[32+NA]*W[16+NA]+W[32+NA*2]*W[16+NA*2]+W[32+NA*3]*W[16+NA*3])+O[7]*(W[32+NA*5]*W[16+NA*5]+W[32+NA*6]*W[16+NA*6]+W[32+NA*7]*W[16+NA*7]+W[32+NA*8]*W[16+NA*8]);
X[33+NA*16] =  O[9]*W[33]*W[16]+O[8]*(W[33+NA]*W[16+NA]+W[33+NA*2]*W[16+NA*2]+W[33+NA*3]*W[16+NA*3])+O[7]*(W[33+NA*5]*W[16+NA*5]+W[33+NA*6]*W[16+NA*6]+W[33+NA*7]*W[16+NA*7]+W[33+NA*8]*W[16+NA*8]);
X[34+NA*16] =  O[9]*W[34]*W[16]+O[8]*(W[34+NA*2]*W[16+NA*2]+W[34+NA*3]*W[16+NA*3])+O[7]*(W[34+NA*7]*W[16+NA*7]+W[34+NA*8]*W[16+NA*8]);
X[35+NA*16] =  O[9]*W[35]*W[16]+O[8]*(W[35+NA*2]*W[16+NA*2]+W[35+NA*3]*W[16+NA*3])+O[7]*(W[35+NA*7]*W[16+NA*7]+W[35+NA*8]*W[16+NA*8]);
X[25+NA*17] =  O[9]*W[25]*W[17]+O[8]*(W[25+NA]*W[17+NA]+W[25+NA*2]*W[17+NA*2]+W[25+NA*3]*W[17+NA*3])+O[7]*(W[25+NA*4]*W[17+NA*4]+W[25+NA*5]*W[17+NA*5]+W[25+NA*6]*W[17+NA*6]+W[25+NA*7]*W[17+NA*7]+W[25+NA*8]*W[17+NA*8])+O[6]*(W[25+NA*9]*W[17+NA*9]+W[25+NA*10]*W[17+NA*10]+W[25+NA*12]*W[17+NA*12]+W[25+NA*13]*W[17+NA*13])+O[5]*W[25+NA*17];
X[26+NA*17] =  O[9]*W[26]*W[17]+O[8]*(W[26+NA]*W[17+NA]+W[26+NA*2]*W[17+NA*2]+W[26+NA*3]*W[17+NA*3])+O[7]*(W[26+NA*4]*W[17+NA*4]+W[26+NA*5]*W[17+NA*5]+W[26+NA*6]*W[17+NA*6]+W[26+NA*7]*W[17+NA*7]+W[26+NA*8]*W[17+NA*8])+O[6]*(W[26+NA*9]*W[17+NA*9]+W[26+NA*10]*W[17+NA*10]+W[26+NA*12]*W[17+NA*12]+W[26+NA*13]*W[17+NA*13])+O[5]*W[26+NA*17];
X[27+NA*17] =  O[9]*W[27]*W[17]+O[8]*(W[27+NA]*W[17+NA]+W[27+NA*2]*W[17+NA*2]+W[27+NA*3]*W[17+NA*3])+O[7]*(W[27+NA*4]*W[17+NA*4]+W[27+NA*5]*W[17+NA*5]+W[27+NA*6]*W[17+NA*6]+W[27+NA*7]*W[17+NA*7]+W[27+NA*8]*W[17+NA*8])+O[6]*(W[27+NA*9]*W[17+NA*9]+W[27+NA*10]*W[17+NA*10]+W[27+NA*12]*W[17+NA*12]+W[27+NA*13]*W[17+NA*13]);
X[28+NA*17] =  O[9]*W[28]*W[17]+O[8]*(W[28+NA]*W[17+NA]+W[28+NA*2]*W[17+NA*2]+W[28+NA*3]*W[17+NA*3])+O[7]*(W[28+NA*4]*W[17+NA*4]+W[28+NA*5]*W[17+NA*5]+W[28+NA*6]*W[17+NA*6]+W[28+NA*7]*W[17+NA*7])+O[6]*(W[28+NA*9]*W[17+NA*9]+W[28+NA*10]*W[17+NA*10]+W[28+NA*12]*W[17+NA*12])+O[5]*W[28+NA*17];
X[29+NA*17] =  O[9]*W[29]*W[17]+O[8]*(W[29+NA]*W[17+NA]+W[29+NA*2]*W[17+NA*2]+W[29+NA*3]*W[17+NA*3])+O[7]*(W[29+NA*4]*W[17+NA*4]+W[29+NA*5]*W[17+NA*5]+W[29+NA*6]*W[17+NA*6]+W[29+NA*8]*W[17+NA*8])+O[6]*(W[29+NA*9]*W[17+NA*9]+W[29+NA*10]*W[17+NA*10]+W[29+NA*13]*W[17+NA*13])+O[5]*W[29+NA*17];
X[30+NA*17] =  O[9]*W[30]*W[17]+O[8]*(W[30+NA]*W[17+NA]+W[30+NA*2]*W[17+NA*2]+W[30+NA*3]*W[17+NA*3])+O[7]*(W[30+NA*4]*W[17+NA*4]+W[30+NA*5]*W[17+NA*5]+W[30+NA*6]*W[17+NA*6]+W[30+NA*7]*W[17+NA*7]+W[30+NA*8]*W[17+NA*8])+O[6]*(W[30+NA*10]*W[17+NA*10]+W[30+NA*12]*W[17+NA*12]+W[30+NA*13]*W[17+NA*13]);
X[31+NA*17] =  O[9]*W[31]*W[17]+O[8]*(W[31+NA]*W[17+NA]+W[31+NA*2]*W[17+NA*2]+W[31+NA*3]*W[17+NA*3])+O[7]*(W[31+NA*4]*W[17+NA*4]+W[31+NA*5]*W[17+NA*5]+W[31+NA*6]*W[17+NA*6]+W[31+NA*7]*W[17+NA*7]+W[31+NA*8]*W[17+NA*8])+O[6]*(W[31+NA*10]*W[17+NA*10]+W[31+NA*12]*W[17+NA*12]+W[31+NA*13]*W[17+NA*13]);
X[32+NA*17] =  O[9]*W[32]*W[17]+O[8]*(W[32+NA]*W[17+NA]+W[32+NA*2]*W[17+NA*2]+W[32+NA*3]*W[17+NA*3])+O[7]*(W[32+NA*5]*W[17+NA*5]+W[32+NA*6]*W[17+NA*6]+W[32+NA*7]*W[17+NA*7]+W[32+NA*8]*W[17+NA*8])+O[6]*(W[32+NA*12]*W[17+NA*12]+W[32+NA*13]*W[17+NA*13]);
X[33+NA*17] =  O[9]*W[33]*W[17]+O[8]*(W[33+NA]*W[17+NA]+W[33+NA*2]*W[17+NA*2]+W[33+NA*3]*W[17+NA*3])+O[7]*(W[33+NA*5]*W[17+NA*5]+W[33+NA*6]*W[17+NA*6]+W[33+NA*7]*W[17+NA*7]+W[33+NA*8]*W[17+NA*8])+O[6]*(W[33+NA*12]*W[17+NA*12]+W[33+NA*13]*W[17+NA*13]);
X[34+NA*17] =  O[9]*W[34]*W[17]+O[8]*(W[34+NA*2]*W[17+NA*2]+W[34+NA*3]*W[17+NA*3])+O[7]*(W[34+NA*7]*W[17+NA*7]+W[34+NA*8]*W[17+NA*8]);
X[35+NA*17] =  O[9]*W[35]*W[17]+O[8]*(W[35+NA*2]*W[17+NA*2]+W[35+NA*3]*W[17+NA*3])+O[7]*(W[35+NA*7]*W[17+NA*7]+W[35+NA*8]*W[17+NA*8]);
X[25+NA*18] =  O[9]*W[25]*W[18]+O[8]*(W[25+NA]*W[18+NA]+W[25+NA*2]*W[18+NA*2]+W[25+NA*3]*W[18+NA*3])+O[7]*(W[25+NA*4]*W[18+NA*4]+W[25+NA*5]*W[18+NA*5]+W[25+NA*6]*W[18+NA*6]+W[25+NA*7]*W[18+NA*7]+W[25+NA*8]*W[18+NA*8])+O[6]*(W[25+NA*9]*W[18+NA*9]+W[25+NA*11]*W[18+NA*11]+W[25+NA*12]*W[18+NA*12]+W[25+NA*13]*W[18+NA*13])+O[5]*W[25+NA*18];
X[26+NA*18] =  O[9]*W[26]*W[18]+O[8]*(W[26+NA]*W[18+NA]+W[26+NA*2]*W[18+NA*2]+W[26+NA*3]*W[18+NA*3])+O[7]*(W[26+NA*4]*W[18+NA*4]+W[26+NA*5]*W[18+NA*5]+W[26+NA*6]*W[18+NA*6]+W[26+NA*7]*W[18+NA*7]+W[26+NA*8]*W[18+NA*8])+O[6]*(W[26+NA*9]*W[18+NA*9]+W[26+NA*11]*W[18+NA*11]+W[26+NA*12]*W[18+NA*12]+W[26+NA*13]*W[18+NA*13]);
X[27+NA*18] =  O[9]*W[27]*W[18]+O[8]*(W[27+NA]*W[18+NA]+W[27+NA*2]*W[18+NA*2]+W[27+NA*3]*W[18+NA*3])+O[7]*(W[27+NA*4]*W[18+NA*4]+W[27+NA*5]*W[18+NA*5]+W[27+NA*6]*W[18+NA*6]+W[27+NA*7]*W[18+NA*7]+W[27+NA*8]*W[18+NA*8])+O[6]*(W[27+NA*9]*W[18+NA*9]+W[27+NA*11]*W[18+NA*11]+W[27+NA*12]*W[18+NA*12]+W[27+NA*13]*W[18+NA*13])+O[5]*W[27+NA*18];
X[28+NA*18] =  O[9]*W[28]*W[18]+O[8]*(W[28+NA]*W[18+NA]+W[28+NA*2]*W[18+NA*2]+W[28+NA*3]*W[18+NA*3])+O[7]*(W[28+NA*4]*W[18+NA*4]+W[28+NA*5]*W[18+NA*5]+W[28+NA*6]*W[18+NA*6]+W[28+NA*7]*W[18+NA*7])+O[6]*(W[28+NA*9]*W[18+NA*9]+W[28+NA*11]*W[18+NA*11]+W[28+NA*12]*W[18+NA*12])+O[5]*W[28+NA*18];
X[29+NA*18] =  O[9]*W[29]*W[18]+O[8]*(W[29+NA]*W[18+NA]+W[29+NA*2]*W[18+NA*2]+W[29+NA*3]*W[18+NA*3])+O[7]*(W[29+NA*4]*W[18+NA*4]+W[29+NA*5]*W[18+NA*5]+W[29+NA*6]*W[18+NA*6]+W[29+NA*8]*W[18+NA*8])+O[6]*(W[29+NA*9]*W[18+NA*9]+W[29+NA*11]*W[18+NA*11]+W[29+NA*13]*W[18+NA*13])+O[5]*W[29+NA*18];
X[30+NA*18] =  O[9]*W[30]*W[18]+O[8]*(W[30+NA]*W[18+NA]+W[30+NA*2]*W[18+NA*2]+W[30+NA*3]*W[18+NA*3])+O[7]*(W[30+NA*4]*W[18+NA*4]+W[30+NA*5]*W[18+NA*5]+W[30+NA*6]*W[18+NA*6]+W[30+NA*7]*W[18+NA*7]+W[30+NA*8]*W[18+NA*8])+O[6]*(W[30+NA*11]*W[18+NA*11]+W[30+NA*12]*W[18+NA*12]+W[30+NA*13]*W[18+NA*13]);
X[31+NA*18] =  O[9]*W[31]*W[18]+O[8]*(W[31+NA]*W[18+NA]+W[31+NA*2]*W[18+NA*2]+W[31+NA*3]*W[18+NA*3])+O[7]*(W[31+NA*4]*W[18+NA*4]+W[31+NA*5]*W[18+NA*5]+W[31+NA*6]*W[18+NA*6]+W[31+NA*7]*W[18+NA*7]+W[31+NA*8]*W[18+NA*8])+O[6]*(W[31+NA*11]*W[18+NA*11]+W[31+NA*12]*W[18+NA*12]+W[31+NA*13]*W[18+NA*13]);
X[32+NA*18] =  O[9]*W[32]*W[18]+O[8]*(W[32+NA]*W[18+NA]+W[32+NA*2]*W[18+NA*2]+W[32+NA*3]*W[18+NA*3])+O[7]*(W[32+NA*5]*W[18+NA*5]+W[32+NA*6]*W[18+NA*6]+W[32+NA*7]*W[18+NA*7]+W[32+NA*8]*W[18+NA*8])+O[6]*(W[32+NA*12]*W[18+NA*12]+W[32+NA*13]*W[18+NA*13]);
X[33+NA*18] =  O[9]*W[33]*W[18]+O[8]*(W[33+NA]*W[18+NA]+W[33+NA*2]*W[18+NA*2]+W[33+NA*3]*W[18+NA*3])+O[7]*(W[33+NA*5]*W[18+NA*5]+W[33+NA*6]*W[18+NA*6]+W[33+NA*7]*W[18+NA*7]+W[33+NA*8]*W[18+NA*8])+O[6]*(W[33+NA*12]*W[18+NA*12]+W[33+NA*13]*W[18+NA*13]);
X[34+NA*18] =  O[9]*W[34]*W[18]+O[8]*(W[34+NA*2]*W[18+NA*2]+W[34+NA*3]*W[18+NA*3])+O[7]*(W[34+NA*7]*W[18+NA*7]+W[34+NA*8]*W[18+NA*8]);
X[35+NA*18] =  O[9]*W[35]*W[18]+O[8]*(W[35+NA*2]*W[18+NA*2]+W[35+NA*3]*W[18+NA*3])+O[7]*(W[35+NA*7]*W[18+NA*7]+W[35+NA*8]*W[18+NA*8]);
X[25+NA*19] =  O[9]*W[25]*W[19]+O[8]*(W[25+NA]*W[19+NA]+W[25+NA*2]*W[19+NA*2]+W[25+NA*3]*W[19+NA*3])+O[7]*(W[25+NA*4]*W[19+NA*4]+W[25+NA*5]*W[19+NA*5]+W[25+NA*6]*W[19+NA*6]+W[25+NA*7]*W[19+NA*7])+O[6]*(W[25+NA*10]*W[19+NA*10]+W[25+NA*11]*W[19+NA*11]+W[25+NA*12]*W[19+NA*12]);
X[26+NA*19] =  O[9]*W[26]*W[19]+O[8]*(W[26+NA]*W[19+NA]+W[26+NA*2]*W[19+NA*2]+W[26+NA*3]*W[19+NA*3])+O[7]*(W[26+NA*4]*W[19+NA*4]+W[26+NA*5]*W[19+NA*5]+W[26+NA*6]*W[19+NA*6]+W[26+NA*7]*W[19+NA*7])+O[6]*(W[26+NA*10]*W[19+NA*10]+W[26+NA*11]*W[19+NA*11]+W[26+NA*12]*W[19+NA*12]+W[26+NA*14]*W[19+NA*14]+W[26+NA*15]*W[19+NA*15])+O[5]*W[26+NA*19];
X[27+NA*19] =  O[9]*W[27]*W[19]+O[8]*(W[27+NA]*W[19+NA]+W[27+NA*2]*W[19+NA*2]+W[27+NA*3]*W[19+NA*3])+O[7]*(W[27+NA*4]*W[19+NA*4]+W[27+NA*5]*W[19+NA*5]+W[27+NA*6]*W[19+NA*6]+W[27+NA*7]*W[19+NA*7])+O[6]*(W[27+NA*10]*W[19+NA*10]+W[27+NA*11]*W[19+NA*11]+W[27+NA*12]*W[19+NA*12]+W[27+NA*14]*W[19+NA*14]+W[27+NA*15]*W[19+NA*15])+O[5]*W[27+NA*19];
X[28+NA*19] =  O[9]*W[28]*W[19]+O[8]*(W[28+NA]*W[19+NA]+W[28+NA*2]*W[19+NA*2]+W[28+NA*3]*W[19+NA*3])+O[7]*(W[28+NA*4]*W[19+NA*4]+W[28+NA*5]*W[19+NA*5]+W[28+NA*6]*W[19+NA*6]+W[28+NA*7]*W[19+NA*7])+O[6]*(W[28+NA*10]*W[19+NA*10]+W[28+NA*11]*W[19+NA*11]+W[28+NA*12]*W[19+NA*12]+W[28+NA*14]*W[19+NA*14]+W[28+NA*15]*W[19+NA*15])+O[5]*W[28+NA*19];
X[29+NA*19] =  O[9]*W[29]*W[19]+O[8]*(W[29+NA]*W[19+NA]+W[29+NA*2]*W[19+NA*2]+W[29+NA*3]*W[19+NA*3])+O[7]*(W[29+NA*4]*W[19+NA*4]+W[29+NA*5]*W[19+NA*5]+W[29+NA*6]*W[19+NA*6])+O[6]*(W[29+NA*10]*W[19+NA*10]+W[29+NA*11]*W[19+NA*11]+W[29+NA*14]*W[19+NA*14]+W[29+NA*15]*W[19+NA*15]);
X[30+NA*19] =  O[9]*W[30]*W[19]+O[8]*(W[30+NA]*W[19+NA]+W[30+NA*2]*W[19+NA*2]+W[30+NA*3]*W[19+NA*3])+O[7]*(W[30+NA*4]*W[19+NA*4]+W[30+NA*5]*W[19+NA*5]+W[30+NA*6]*W[19+NA*6]+W[30+NA*7]*W[19+NA*7])+O[6]*(W[30+NA*10]*W[19+NA*10]+W[30+NA*11]*W[19+NA*11]+W[30+NA*12]*W[19+NA*12]+W[30+NA*14]*W[19+NA*14])+O[5]*W[30+NA*19];
X[31+NA*19] =  O[9]*W[31]*W[19]+O[8]*(W[31+NA]*W[19+NA]+W[31+NA*2]*W[19+NA*2]+W[31+NA*3]*W[19+NA*3])+O[7]*(W[31+NA*4]*W[19+NA*4]+W[31+NA*5]*W[19+NA*5]+W[31+NA*6]*W[19+NA*6]+W[31+NA*7]*W[19+NA*7])+O[6]*(W[31+NA*10]*W[19+NA*10]+W[31+NA*11]*W[19+NA*11]+W[31+NA*12]*W[19+NA*12]+W[31+NA*15]*W[19+NA*15])+O[5]*W[31+NA*19];
X[32+NA*19] =  O[9]*W[32]*W[19]+O[8]*(W[32+NA]*W[19+NA]+W[32+NA*2]*W[19+NA*2]+W[32+NA*3]*W[19+NA*3])+O[7]*(W[32+NA*5]*W[19+NA*5]+W[32+NA*6]*W[19+NA*6]+W[32+NA*7]*W[19+NA*7])+O[6]*(W[32+NA*12]*W[19+NA*12]+W[32+NA*14]*W[19+NA*14]+W[32+NA*15]*W[19+NA*15]);
X[33+NA*19] =  O[9]*W[33]*W[19]+O[8]*(W[33+NA]*W[19+NA]+W[33+NA*2]*W[19+NA*2]+W[33+NA*3]*W[19+NA*3])+O[7]*(W[33+NA*5]*W[19+NA*5]+W[33+NA*6]*W[19+NA*6]+W[33+NA*7]*W[19+NA*7])+O[6]*(W[33+NA*12]*W[19+NA*12]+W[33+NA*14]*W[19+NA*14]+W[33+NA*15]*W[19+NA*15]);
X[34+NA*19] =  O[9]*W[34]*W[19]+O[8]*(W[34+NA*2]*W[19+NA*2]+W[34+NA*3]*W[19+NA*3])+O[7]*W[34+NA*7]*W[19+NA*7]+O[6]*(W[34+NA*14]*W[19+NA*14]+W[34+NA*15]*W[19+NA*15]);
X[35+NA*19] =  O[9]*W[35]*W[19]+O[8]*(W[35+NA*2]*W[19+NA*2]+W[35+NA*3]*W[19+NA*3])+O[7]*W[35+NA*7]*W[19+NA*7]+O[6]*(W[35+NA*14]*W[19+NA*14]+W[35+NA*15]*W[19+NA*15]);
X[25+NA*20] =  O[9]*W[25]*W[20]+O[8]*(W[25+NA]*W[20+NA]+W[25+NA*2]*W[20+NA*2]+W[25+NA*3]*W[20+NA*3])+O[7]*(W[25+NA*4]*W[20+NA*4]+W[25+NA*5]*W[20+NA*5]+W[25+NA*6]*W[20+NA*6]+W[25+NA*8]*W[20+NA*8])+O[6]*(W[25+NA*10]*W[20+NA*10]+W[25+NA*11]*W[20+NA*11]+W[25+NA*13]*W[20+NA*13]);
X[26+NA*20] =  O[9]*W[26]*W[20]+O[8]*(W[26+NA]*W[20+NA]+W[26+NA*2]*W[20+NA*2]+W[26+NA*3]*W[20+NA*3])+O[7]*(W[26+NA*4]*W[20+NA*4]+W[26+NA*5]*W[20+NA*5]+W[26+NA*6]*W[20+NA*6]+W[26+NA*8]*W[20+NA*8])+O[6]*(W[26+NA*10]*W[20+NA*10]+W[26+NA*11]*W[20+NA*11]+W[26+NA*13]*W[20+NA*13]+W[26+NA*14]*W[20+NA*14]+W[26+NA*15]*W[20+NA*15])+O[5]*W[26+NA*20];
X[27+NA*20] =  O[9]*W[27]*W[20]+O[8]*(W[27+NA]*W[20+NA]+W[27+NA*2]*W[20+NA*2]+W[27+NA*3]*W[20+NA*3])+O[7]*(W[27+NA*4]*W[20+NA*4]+W[27+NA*5]*W[20+NA*5]+W[27+NA*6]*W[20+NA*6]+W[27+NA*8]*W[20+NA*8])+O[6]*(W[27+NA*10]*W[20+NA*10]+W[27+NA*11]*W[20+NA*11]+W[27+NA*13]*W[20+NA*13]+W[27+NA*14]*W[20+NA*14]+W[27+NA*15]*W[20+NA*15])+O[5]*W[27+NA*20];
X[28+NA*20] =  O[9]*W[28]*W[20]+O[8]*(W[28+NA]*W[20+NA]+W[28+NA*2]*W[20+NA*2]+W[28+NA*3]*W[20+NA*3])+O[7]*(W[28+NA*4]*W[20+NA*4]+W[28+NA*5]*W[20+NA*5]+W[28+NA*6]*W[20+NA*6])+O[6]*(W[28+NA*10]*W[20+NA*10]+W[28+NA*11]*W[20+NA*11]+W[28+NA*14]*W[20+NA*14]+W[28+NA*15]*W[20+NA*15]);
X[29+NA*20] =  O[9]*W[29]*W[20]+O[8]*(W[29+NA]*W[20+NA]+W[29+NA*2]*W[20+NA*2]+W[29+NA*3]*W[20+NA*3])+O[7]*(W[29+NA*4]*W[20+NA*4]+W[29+NA*5]*W[20+NA*5]+W[29+NA*6]*W[20+NA*6]+W[29+NA*8]*W[20+NA*8])+O[6]*(W[29+NA*10]*W[20+NA*10]+W[29+NA*11]*W[20+NA*11]+W[29+NA*13]*W[20+NA*13]+W[29+NA*14]*W[20+NA*14]+W[29+NA*15]*W[20+NA*15])+O[5]*W[29+NA*20];
X[30+NA*20] =  O[9]*W[30]*W[20]+O[8]*(W[30+NA]*W[20+NA]+W[30+NA*2]*W[20+NA*2]+W[30+NA*3]*W[20+NA*3])+O[7]*(W[30+NA*4]*W[20+NA*4]+W[30+NA*5]*W[20+NA*5]+W[30+NA*6]*W[20+NA*6]+W[30+NA*8]*W[20+NA*8])+O[6]*(W[30+NA*10]*W[20+NA*10]+W[30+NA*11]*W[20+NA*11]+W[30+NA*13]*W[20+NA*13]+W[30+NA*14]*W[20+NA*14])+O[5]*W[30+NA*20];
X[31+NA*20] =  O[9]*W[31]*W[20]+O[8]*(W[31+NA]*W[20+NA]+W[31+NA*2]*W[20+NA*2]+W[31+NA*3]*W[20+NA*3])+O[7]*(W[31+NA*4]*W[20+NA*4]+W[31+NA*5]*W[20+NA*5]+W[31+NA*6]*W[20+NA*6]+W[31+NA*8]*W[20+NA*8])+O[6]*(W[31+NA*10]*W[20+NA*10]+W[31+NA*11]*W[20+NA*11]+W[31+NA*13]*W[20+NA*13]+W[31+NA*15]*W[20+NA*15])+O[5]*W[31+NA*20];
X[32+NA*20] =  O[9]*W[32]*W[20]+O[8]*(W[32+NA]*W[20+NA]+W[32+NA*2]*W[20+NA*2]+W[32+NA*3]*W[20+NA*3])+O[7]*(W[32+NA*5]*W[20+NA*5]+W[32+NA*6]*W[20+NA*6]+W[32+NA*8]*W[20+NA*8])+O[6]*(W[32+NA*13]*W[20+NA*13]+W[32+NA*14]*W[20+NA*14]+W[32+NA*15]*W[20+NA*15]);
X[33+NA*20] =  O[9]*W[33]*W[20]+O[8]*(W[33+NA]*W[20+NA]+W[33+NA*2]*W[20+NA*2]+W[33+NA*3]*W[20+NA*3])+O[7]*(W[33+NA*5]*W[20+NA*5]+W[33+NA*6]*W[20+NA*6]+W[33+NA*8]*W[20+NA*8])+O[6]*(W[33+NA*13]*W[20+NA*13]+W[33+NA*14]*W[20+NA*14]+W[33+NA*15]*W[20+NA*15]);
X[34+NA*20] =  O[9]*W[34]*W[20]+O[8]*(W[34+NA*2]*W[20+NA*2]+W[34+NA*3]*W[20+NA*3])+O[7]*W[34+NA*8]*W[20+NA*8]+O[6]*(W[34+NA*14]*W[20+NA*14]+W[34+NA*15]*W[20+NA*15]);
X[35+NA*20] =  O[9]*W[35]*W[20]+O[8]*(W[35+NA*2]*W[20+NA*2]+W[35+NA*3]*W[20+NA*3])+O[7]*W[35+NA*8]*W[20+NA*8]+O[6]*(W[35+NA*14]*W[20+NA*14]+W[35+NA*15]*W[20+NA*15]);
X[25+NA*21] =  O[9]*W[25]*W[21]+O[8]*(W[25+NA]*W[21+NA]+W[25+NA*2]*W[21+NA*2]+W[25+NA*3]*W[21+NA*3])+O[7]*(W[25+NA*5]*W[21+NA*5]+W[25+NA*6]*W[21+NA*6]+W[25+NA*7]*W[21+NA*7]+W[25+NA*8]*W[21+NA*8])+O[6]*(W[25+NA*12]*W[21+NA*12]+W[25+NA*13]*W[21+NA*13]);
X[26+NA*21] =  O[9]*W[26]*W[21]+O[8]*(W[26+NA]*W[21+NA]+W[26+NA*2]*W[21+NA*2]+W[26+NA*3]*W[21+NA*3])+O[7]*(W[26+NA*5]*W[21+NA*5]+W[26+NA*6]*W[21+NA*6]+W[26+NA*7]*W[21+NA*7]+W[26+NA*8]*W[21+NA*8])+O[6]*(W[26+NA*12]*W[21+NA*12]+W[26+NA*13]*W[21+NA*13]+W[26+NA*14]*W[21+NA*14]);
X[27+NA*21] =  O[9]*W[27]*W[21]+O[8]*(W[27+NA]*W[21+NA]+W[27+NA*2]*W[21+NA*2]+W[27+NA*3]*W[21+NA*3])+O[7]*(W[27+NA*5]*W[21+NA*5]+W[27+NA*6]*W[21+NA*6]+W[27+NA*7]*W[21+NA*7]+W[27+NA*8]*W[21+NA*8])+O[6]*(W[27+NA*12]*W[21+NA*12]+W[27+NA*13]*W[21+NA*13]+W[27+NA*14]*W[21+NA*14]);
X[28+NA*21] =  O[9]*W[28]*W[21]+O[8]*(W[28+NA]*W[21+NA]+W[28+NA*2]*W[21+NA*2]+W[28+NA*3]*W[21+NA*3])+O[7]*(W[28+NA*5]*W[21+NA*5]+W[28+NA*6]*W[21+NA*6]+W[28+NA*7]*W[21+NA*7])+O[6]*(W[28+NA*12]*W[21+NA*12]+W[28+NA*14]*W[21+NA*14])+O[5]*W[28+NA*21];
X[29+NA*21] =  O[9]*W[29]*W[21]+O[8]*(W[29+NA]*W[21+NA]+W[29+NA*2]*W[21+NA*2]+W[29+NA*3]*W[21+NA*3])+O[7]*(W[29+NA*5]*W[21+NA*5]+W[29+NA*6]*W[21+NA*6]+W[29+NA*8]*W[21+NA*8])+O[6]*(W[29+NA*13]*W[21+NA*13]+W[29+NA*14]*W[21+NA*14])+O[5]*W[29+NA*21];
X[30+NA*21] =  O[9]*W[30]*W[21]+O[8]*(W[30+NA]*W[21+NA]+W[30+NA*2]*W[21+NA*2]+W[30+NA*3]*W[21+NA*3])+O[7]*(W[30+NA*5]*W[21+NA*5]+W[30+NA*6]*W[21+NA*6]+W[30+NA*7]*W[21+NA*7]+W[30+NA*8]*W[21+NA*8])+O[6]*(W[30+NA*12]*W[21+NA*12]+W[30+NA*13]*W[21+NA*13]+W[30+NA*14]*W[21+NA*14])+O[5]*W[30+NA*21];
X[31+NA*21] =  O[9]*W[31]*W[21]+O[8]*(W[31+NA]*W[21+NA]+W[31+NA*2]*W[21+NA*2]+W[31+NA*3]*W[21+NA*3])+O[7]*(W[31+NA*5]*W[21+NA*5]+W[31+NA*6]*W[21+NA*6]+W[31+NA*7]*W[21+NA*7]+W[31+NA*8]*W[21+NA*8])+O[6]*(W[31+NA*12]*W[21+NA*12]+W[31+NA*13]*W[21+NA*13]);
X[32+NA*21] =  O[9]*W[32]*W[21]+O[8]*(W[32+NA]*W[21+NA]+W[32+NA*2]*W[21+NA*2]+W[32+NA*3]*W[21+NA*3])+O[7]*(W[32+NA*5]*W[21+NA*5]+W[32+NA*6]*W[21+NA*6]+W[32+NA*7]*W[21+NA*7]+W[32+NA*8]*W[21+NA*8])+O[6]*(W[32+NA*12]*W[21+NA*12]+W[32+NA*13]*W[21+NA*13]+W[32+NA*14]*W[21+NA*14])+O[5]*W[32+NA*21];
X[33+NA*21] =  O[9]*W[33]*W[21]+O[8]*(W[33+NA]*W[21+NA]+W[33+NA*2]*W[21+NA*2]+W[33+NA*3]*W[21+NA*3])+O[7]*(W[33+NA*5]*W[21+NA*5]+W[33+NA*6]*W[21+NA*6]+W[33+NA*7]*W[21+NA*7]+W[33+NA*8]*W[21+NA*8])+O[6]*(W[33+NA*12]*W[21+NA*12]+W[33+NA*13]*W[21+NA*13]+W[33+NA*14]*W[21+NA*14])+O[5]*W[33+NA*21];
X[34+NA*21] =  O[9]*W[34]*W[21]+O[8]*(W[34+NA*2]*W[21+NA*2]+W[34+NA*3]*W[21+NA*3])+O[7]*(W[34+NA*7]*W[21+NA*7]+W[34+NA*8]*W[21+NA*8])+O[6]*W[34+NA*14]*W[21+NA*14];
X[35+NA*21] =  O[9]*W[35]*W[21]+O[8]*(W[35+NA*2]*W[21+NA*2]+W[35+NA*3]*W[21+NA*3])+O[7]*(W[35+NA*7]*W[21+NA*7]+W[35+NA*8]*W[21+NA*8])+O[6]*W[35+NA*14]*W[21+NA*14];
X[25+NA*22] =  O[9]*W[25]*W[22]+O[8]*(W[25+NA]*W[22+NA]+W[25+NA*2]*W[22+NA*2]+W[25+NA*3]*W[22+NA*3])+O[7]*(W[25+NA*5]*W[22+NA*5]+W[25+NA*6]*W[22+NA*6]+W[25+NA*7]*W[22+NA*7]+W[25+NA*8]*W[22+NA*8])+O[6]*(W[25+NA*12]*W[22+NA*12]+W[25+NA*13]*W[22+NA*13]);
X[26+NA*22] =  O[9]*W[26]*W[22]+O[8]*(W[26+NA]*W[22+NA]+W[26+NA*2]*W[22+NA*2]+W[26+NA*3]*W[22+NA*3])+O[7]*(W[26+NA*5]*W[22+NA*5]+W[26+NA*6]*W[22+NA*6]+W[26+NA*7]*W[22+NA*7]+W[26+NA*8]*W[22+NA*8])+O[6]*(W[26+NA*12]*W[22+NA*12]+W[26+NA*13]*W[22+NA*13]+W[26+NA*15]*W[22+NA*15]);
X[27+NA*22] =  O[9]*W[27]*W[22]+O[8]*(W[27+NA]*W[22+NA]+W[27+NA*2]*W[22+NA*2]+W[27+NA*3]*W[22+NA*3])+O[7]*(W[27+NA*5]*W[22+NA*5]+W[27+NA*6]*W[22+NA*6]+W[27+NA*7]*W[22+NA*7]+W[27+NA*8]*W[22+NA*8])+O[6]*(W[27+NA*12]*W[22+NA*12]+W[27+NA*13]*W[22+NA*13]+W[27+NA*15]*W[22+NA*15]);
X[28+NA*22] =  O[9]*W[28]*W[22]+O[8]*(W[28+NA]*W[22+NA]+W[28+NA*2]*W[22+NA*2]+W[28+NA*3]*W[22+NA*3])+O[7]*(W[28+NA*5]*W[22+NA*5]+W[28+NA*6]*W[22+NA*6]+W[28+NA*7]*W[22+NA*7])+O[6]*(W[28+NA*12]*W[22+NA*12]+W[28+NA*15]*W[22+NA*15])+O[5]*W[28+NA*22];
X[29+NA*22] =  O[9]*W[29]*W[22]+O[8]*(W[29+NA]*W[22+NA]+W[29+NA*2]*W[22+NA*2]+W[29+NA*3]*W[22+NA*3])+O[7]*(W[29+NA*5]*W[22+NA*5]+W[29+NA*6]*W[22+NA*6]+W[29+NA*8]*W[22+NA*8])+O[6]*(W[29+NA*13]*W[22+NA*13]+W[29+NA*15]*W[22+NA*15])+O[5]*W[29+NA*22];
X[30+NA*22] =  O[9]*W[30]*W[22]+O[8]*(W[30+NA]*W[22+NA]+W[30+NA*2]*W[22+NA*2]+W[30+NA*3]*W[22+NA*3])+O[7]*(W[30+NA*5]*W[22+NA*5]+W[30+NA*6]*W[22+NA*6]+W[30+NA*7]*W[22+NA*7]+W[30+NA*8]*W[22+NA*8])+O[6]*(W[30+NA*12]*W[22+NA*12]+W[30+NA*13]*W[22+NA*13]);
X[31+NA*22] =  O[9]*W[31]*W[22]+O[8]*(W[31+NA]*W[22+NA]+W[31+NA*2]*W[22+NA*2]+W[31+NA*3]*W[22+NA*3])+O[7]*(W[31+NA*5]*W[22+NA*5]+W[31+NA*6]*W[22+NA*6]+W[31+NA*7]*W[22+NA*7]+W[31+NA*8]*W[22+NA*8])+O[6]*(W[31+NA*12]*W[22+NA*12]+W[31+NA*13]*W[22+NA*13]+W[31+NA*15]*W[22+NA*15])+O[5]*W[31+NA*22];
X[32+NA*22] =  O[9]*W[32]*W[22]+O[8]*(W[32+NA]*W[22+NA]+W[32+NA*2]*W[22+NA*2]+W[32+NA*3]*W[22+NA*3])+O[7]*(W[32+NA*5]*W[22+NA*5]+W[32+NA*6]*W[22+NA*6]+W[32+NA*7]*W[22+NA*7]+W[32+NA*8]*W[22+NA*8])+O[6]*(W[32+NA*12]*W[22+NA*12]+W[32+NA*13]*W[22+NA*13]+W[32+NA*15]*W[22+NA*15])+O[5]*W[32+NA*22];
X[33+NA*22] =  O[9]*W[33]*W[22]+O[8]*(W[33+NA]*W[22+NA]+W[33+NA*2]*W[22+NA*2]+W[33+NA*3]*W[22+NA*3])+O[7]*(W[33+NA*5]*W[22+NA*5]+W[33+NA*6]*W[22+NA*6]+W[33+NA*7]*W[22+NA*7]+W[33+NA*8]*W[22+NA*8])+O[6]*(W[33+NA*12]*W[22+NA*12]+W[33+NA*13]*W[22+NA*13]+W[33+NA*15]*W[22+NA*15])+O[5]*W[33+NA*22];
X[34+NA*22] =  O[9]*W[34]*W[22]+O[8]*(W[34+NA*2]*W[22+NA*2]+W[34+NA*3]*W[22+NA*3])+O[7]*(W[34+NA*7]*W[22+NA*7]+W[34+NA*8]*W[22+NA*8])+O[6]*W[34+NA*15]*W[22+NA*15];
X[35+NA*22] =  O[9]*W[35]*W[22]+O[8]*(W[35+NA*2]*W[22+NA*2]+W[35+NA*3]*W[22+NA*3])+O[7]*(W[35+NA*7]*W[22+NA*7]+W[35+NA*8]*W[22+NA*8])+O[6]*W[35+NA*15]*W[22+NA*15];
X[25+NA*23] =  O[9]*W[25]*W[23]+O[8]*(W[25+NA*2]*W[23+NA*2]+W[25+NA*3]*W[23+NA*3])+O[7]*(W[25+NA*7]*W[23+NA*7]+W[25+NA*8]*W[23+NA*8]);
X[26+NA*23] =  O[9]*W[26]*W[23]+O[8]*(W[26+NA*2]*W[23+NA*2]+W[26+NA*3]*W[23+NA*3])+O[7]*(W[26+NA*7]*W[23+NA*7]+W[26+NA*8]*W[23+NA*8])+O[6]*(W[26+NA*14]*W[23+NA*14]+W[26+NA*15]*W[23+NA*15]);
X[27+NA*23] =  O[9]*W[27]*W[23]+O[8]*(W[27+NA*2]*W[23+NA*2]+W[27+NA*3]*W[23+NA*3])+O[7]*(W[27+NA*7]*W[23+NA*7]+W[27+NA*8]*W[23+NA*8])+O[6]*(W[27+NA*14]*W[23+NA*14]+W[27+NA*15]*W[23+NA*15]);
X[28+NA*23] =  O[9]*W[28]*W[23]+O[8]*(W[28+NA*2]*W[23+NA*2]+W[28+NA*3]*W[23+NA*3])+O[7]*W[28+NA*7]*W[23+NA*7]+O[6]*(W[28+NA*14]*W[23+NA*14]+W[28+NA*15]*W[23+NA*15]);
X[29+NA*23] =  O[9]*W[29]*W[23]+O[8]*(W[29+NA*2]*W[23+NA*2]+W[29+NA*3]*W[23+NA*3])+O[7]*W[29+NA*8]*W[23+NA*8]+O[6]*(W[29+NA*14]*W[23+NA*14]+W[29+NA*15]*W[23+NA*15]);
X[30+NA*23] =  O[9]*W[30]*W[23]+O[8]*(W[30+NA*2]*W[23+NA*2]+W[30+NA*3]*W[23+NA*3])+O[7]*(W[30+NA*7]*W[23+NA*7]+W[30+NA*8]*W[23+NA*8])+O[6]*W[30+NA*14]*W[23+NA*14]+O[5]*W[30+NA*23];
X[31+NA*23] =  O[9]*W[31]*W[23]+O[8]*(W[31+NA*2]*W[23+NA*2]+W[31+NA*3]*W[23+NA*3])+O[7]*(W[31+NA*7]*W[23+NA*7]+W[31+NA*8]*W[23+NA*8])+O[6]*W[31+NA*15]*W[23+NA*15]+O[5]*W[31+NA*23];
X[32+NA*23] =  O[9]*W[32]*W[23]+O[8]*(W[32+NA*2]*W[23+NA*2]+W[32+NA*3]*W[23+NA*3])+O[7]*(W[32+NA*7]*W[23+NA*7]+W[32+NA*8]*W[23+NA*8])+O[6]*(W[32+NA*14]*W[23+NA*14]+W[32+NA*15]*W[23+NA*15])+O[5]*W[32+NA*23];
X[33+NA*23] =  O[9]*W[33]*W[23]+O[8]*(W[33+NA*2]*W[23+NA*2]+W[33+NA*3]*W[23+NA*3])+O[7]*(W[33+NA*7]*W[23+NA*7]+W[33+NA*8]*W[23+NA*8])+O[6]*(W[33+NA*14]*W[23+NA*14]+W[33+NA*15]*W[23+NA*15]);
X[34+NA*23] =  O[9]*W[34]*W[23]+O[8]*(W[34+NA*2]*W[23+NA*2]+W[34+NA*3]*W[23+NA*3])+O[7]*(W[34+NA*7]*W[23+NA*7]+W[34+NA*8]*W[23+NA*8])+O[6]*(W[34+NA*14]*W[23+NA*14]+W[34+NA*15]*W[23+NA*15])+O[5]*W[34+NA*23];
X[35+NA*23] =  O[9]*W[35]*W[23]+O[8]*(W[35+NA*2]*W[23+NA*2]+W[35+NA*3]*W[23+NA*3])+O[7]*(W[35+NA*7]*W[23+NA*7]+W[35+NA*8]*W[23+NA*8])+O[6]*(W[35+NA*14]*W[23+NA*14]+W[35+NA*15]*W[23+NA*15])+O[5]*W[35+NA*23];
X[25+NA*24] =  O[9]*W[25]*W[24]+O[8]*(W[25+NA*2]*W[24+NA*2]+W[25+NA*3]*W[24+NA*3])+O[7]*(W[25+NA*7]*W[24+NA*7]+W[25+NA*8]*W[24+NA*8]);
X[26+NA*24] =  O[9]*W[26]*W[24]+O[8]*(W[26+NA*2]*W[24+NA*2]+W[26+NA*3]*W[24+NA*3])+O[7]*(W[26+NA*7]*W[24+NA*7]+W[26+NA*8]*W[24+NA*8])+O[6]*(W[26+NA*14]*W[24+NA*14]+W[26+NA*15]*W[24+NA*15]);
X[27+NA*24] =  O[9]*W[27]*W[24]+O[8]*(W[27+NA*2]*W[24+NA*2]+W[27+NA*3]*W[24+NA*3])+O[7]*(W[27+NA*7]*W[24+NA*7]+W[27+NA*8]*W[24+NA*8])+O[6]*(W[27+NA*14]*W[24+NA*14]+W[27+NA*15]*W[24+NA*15]);
X[28+NA*24] =  O[9]*W[28]*W[24]+O[8]*(W[28+NA*2]*W[24+NA*2]+W[28+NA*3]*W[24+NA*3])+O[7]*W[28+NA*7]*W[24+NA*7]+O[6]*(W[28+NA*14]*W[24+NA*14]+W[28+NA*15]*W[24+NA*15]);
X[29+NA*24] =  O[9]*W[29]*W[24]+O[8]*(W[29+NA*2]*W[24+NA*2]+W[29+NA*3]*W[24+NA*3])+O[7]*W[29+NA*8]*W[24+NA*8]+O[6]*(W[29+NA*14]*W[24+NA*14]+W[29+NA*15]*W[24+NA*15]);
X[30+NA*24] =  O[9]*W[30]*W[24]+O[8]*(W[30+NA*2]*W[24+NA*2]+W[30+NA*3]*W[24+NA*3])+O[7]*(W[30+NA*7]*W[24+NA*7]+W[30+NA*8]*W[24+NA*8])+O[6]*W[30+NA*14]*W[24+NA*14]+O[5]*W[30+NA*24];
X[31+NA*24] =  O[9]*W[31]*W[24]+O[8]*(W[31+NA*2]*W[24+NA*2]+W[31+NA*3]*W[24+NA*3])+O[7]*(W[31+NA*7]*W[24+NA*7]+W[31+NA*8]*W[24+NA*8])+O[6]*W[31+NA*15]*W[24+NA*15]+O[5]*W[31+NA*24];
X[32+NA*24] =  O[9]*W[32]*W[24]+O[8]*(W[32+NA*2]*W[24+NA*2]+W[32+NA*3]*W[24+NA*3])+O[7]*(W[32+NA*7]*W[24+NA*7]+W[32+NA*8]*W[24+NA*8])+O[6]*(W[32+NA*14]*W[24+NA*14]+W[32+NA*15]*W[24+NA*15]);
X[33+NA*24] =  O[9]*W[33]*W[24]+O[8]*(W[33+NA*2]*W[24+NA*2]+W[33+NA*3]*W[24+NA*3])+O[7]*(W[33+NA*7]*W[24+NA*7]+W[33+NA*8]*W[24+NA*8])+O[6]*(W[33+NA*14]*W[24+NA*14]+W[33+NA*15]*W[24+NA*15])+O[5]*W[33+NA*24];
X[34+NA*24] =  O[9]*W[34]*W[24]+O[8]*(W[34+NA*2]*W[24+NA*2]+W[34+NA*3]*W[24+NA*3])+O[7]*(W[34+NA*7]*W[24+NA*7]+W[34+NA*8]*W[24+NA*8])+O[6]*(W[34+NA*14]*W[24+NA*14]+W[34+NA*15]*W[24+NA*15])+O[5]*W[34+NA*24];
X[35+NA*24] =  O[9]*W[35]*W[24]+O[8]*(W[35+NA*2]*W[24+NA*2]+W[35+NA*3]*W[24+NA*3])+O[7]*(W[35+NA*7]*W[24+NA*7]+W[35+NA*8]*W[24+NA*8])+O[6]*(W[35+NA*14]*W[24+NA*14]+W[35+NA*15]*W[24+NA*15])+O[5]*W[35+NA*24];
}

template <int NA>
void ExpHobMatBlk_HH( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X )
{
X[NA*25] = -X[25];
X[1+NA*25] =  X[25+NA];
X[2+NA*25] =  X[25+NA*2];
X[3+NA*25] =  X[25+NA*3];
X[4+NA*25] = -X[25+NA*4];
X[5+NA*25] = -X[25+NA*5];
X[6+NA*25] = -X[25+NA*6];
X[7+NA*25] = -X[25+NA*7];
X[8+NA*25] = -X[25+NA*8];
X[9+NA*25] =  X[25+NA*9];
X[10+NA*25] =  X[25+NA*10];
X[11+NA*25] =  X[25+NA*11];
X[12+NA*25] =  X[25+NA*12];
X[13+NA*25] =  X[25+NA*13];
X[14+NA*25] =  X[25+NA*14];
X[15+NA*25] =  X[25+NA*15];
X[16+NA*25] = -X[25+NA*16];
X[17+NA*25] = -X[25+NA*17];
X[18+NA*25] = -X[25+NA*18];
X[19+NA*25] = -X[25+NA*19];
X[20+NA*25] = -X[25+NA*20];
X[21+NA*25] = -X[25+NA*21];
X[22+NA*25] = -X[25+NA*22];
X[23+NA*25] = -X[25+NA*23];
X[24+NA*25] = -X[25+NA*24];
X[25+NA*25] = -O[10]*W[25]*W[25]-O[9]*(W[25+NA]*W[25+NA]+W[25+NA*2]*W[25+NA*2]+W[25+NA*3]*W[25+NA*3])-O[8]*(W[25+NA*4]*W[25+NA*4]+W[25+NA*5]*W[25+NA*5]+W[25+NA*6]*W[25+NA*6]+W[25+NA*7]*W[25+NA*7]+W[25+NA*8]*W[25+NA*8])-O[7]*(W[25+NA*9]*W[25+NA*9]+W[25+NA*10]*W[25+NA*10]+W[25+NA*11]*W[25+NA*11]+W[25+NA*12]*W[25+NA*12]+W[25+NA*13]*W[25+NA*13])-O[6]*(W[25+NA*16]*W[25+NA*16]+W[25+NA*17]*W[25+NA*17]+W[25+NA*18]*W[25+NA*18])-O[5];
X[26+NA*25] = -O[10]*W[26]*W[25]-O[9]*(W[26+NA]*W[25+NA]+W[26+NA*2]*W[25+NA*2]+W[26+NA*3]*W[25+NA*3])-O[8]*(W[26+NA*4]*W[25+NA*4]+W[26+NA*5]*W[25+NA*5]+W[26+NA*6]*W[25+NA*6]+W[26+NA*7]*W[25+NA*7]+W[26+NA*8]*W[25+NA*8])-O[7]*(W[26+NA*9]*W[25+NA*9]+W[26+NA*10]*W[25+NA*10]+W[26+NA*11]*W[25+NA*11]+W[26+NA*12]*W[25+NA*12]+W[26+NA*13]*W[25+NA*13])-O[6]*(W[26+NA*16]*W[25+NA*16]+W[26+NA*17]*W[25+NA*17]);
X[27+NA*25] = -O[10]*W[27]*W[25]-O[9]*(W[27+NA]*W[25+NA]+W[27+NA*2]*W[25+NA*2]+W[27+NA*3]*W[25+NA*3])-O[8]*(W[27+NA*4]*W[25+NA*4]+W[27+NA*5]*W[25+NA*5]+W[27+NA*6]*W[25+NA*6]+W[27+NA*7]*W[25+NA*7]+W[27+NA*8]*W[25+NA*8])-O[7]*(W[27+NA*9]*W[25+NA*9]+W[27+NA*10]*W[25+NA*10]+W[27+NA*11]*W[25+NA*11]+W[27+NA*12]*W[25+NA*12]+W[27+NA*13]*W[25+NA*13])-O[6]*(W[27+NA*16]*W[25+NA*16]+W[27+NA*18]*W[25+NA*18]);
X[28+NA*25] = -O[10]*W[28]*W[25]-O[9]*(W[28+NA]*W[25+NA]+W[28+NA*2]*W[25+NA*2]+W[28+NA*3]*W[25+NA*3])-O[8]*(W[28+NA*4]*W[25+NA*4]+W[28+NA*5]*W[25+NA*5]+W[28+NA*6]*W[25+NA*6]+W[28+NA*7]*W[25+NA*7])-O[7]*(W[28+NA*9]*W[25+NA*9]+W[28+NA*10]*W[25+NA*10]+W[28+NA*11]*W[25+NA*11]+W[28+NA*12]*W[25+NA*12])-O[6]*(W[28+NA*17]*W[25+NA*17]+W[28+NA*18]*W[25+NA*18]);
X[29+NA*25] = -O[10]*W[29]*W[25]-O[9]*(W[29+NA]*W[25+NA]+W[29+NA*2]*W[25+NA*2]+W[29+NA*3]*W[25+NA*3])-O[8]*(W[29+NA*4]*W[25+NA*4]+W[29+NA*5]*W[25+NA*5]+W[29+NA*6]*W[25+NA*6]+W[29+NA*8]*W[25+NA*8])-O[7]*(W[29+NA*9]*W[25+NA*9]+W[29+NA*10]*W[25+NA*10]+W[29+NA*11]*W[25+NA*11]+W[29+NA*13]*W[25+NA*13])-O[6]*(W[29+NA*17]*W[25+NA*17]+W[29+NA*18]*W[25+NA*18]);
X[30+NA*25] = -O[10]*W[30]*W[25]-O[9]*(W[30+NA]*W[25+NA]+W[30+NA*2]*W[25+NA*2]+W[30+NA*3]*W[25+NA*3])-O[8]*(W[30+NA*4]*W[25+NA*4]+W[30+NA*5]*W[25+NA*5]+W[30+NA*6]*W[25+NA*6]+W[30+NA*7]*W[25+NA*7]+W[30+NA*8]*W[25+NA*8])-O[7]*(W[30+NA*10]*W[25+NA*10]+W[30+NA*11]*W[25+NA*11]+W[30+NA*12]*W[25+NA*12]+W[30+NA*13]*W[25+NA*13]);
X[31+NA*25] = -O[10]*W[31]*W[25]-O[9]*(W[31+NA]*W[25+NA]+W[31+NA*2]*W[25+NA*2]+W[31+NA*3]*W[25+NA*3])-O[8]*(W[31+NA*4]*W[25+NA*4]+W[31+NA*5]*W[25+NA*5]+W[31+NA*6]*W[25+NA*6]+W[31+NA*7]*W[25+NA*7]+W[31+NA*8]*W[25+NA*8])-O[7]*(W[31+NA*10]*W[25+NA*10]+W[31+NA*11]*W[25+NA*11]+W[31+NA*12]*W[25+NA*12]+W[31+NA*13]*W[25+NA*13]);
X[32+NA*25] = -O[10]*W[32]*W[25]-O[9]*(W[32+NA]*W[25+NA]+W[32+NA*2]*W[25+NA*2]+W[32+NA*3]*W[25+NA*3])-O[8]*(W[32+NA*5]*W[25+NA*5]+W[32+NA*6]*W[25+NA*6]+W[32+NA*7]*W[25+NA*7]+W[32+NA*8]*W[25+NA*8])-O[7]*(W[32+NA*12]*W[25+NA*12]+W[32+NA*13]*W[25+NA*13]);
X[33+NA*25] = -O[10]*W[33]*W[25]-O[9]*(W[33+NA]*W[25+NA]+W[33+NA*2]*W[25+NA*2]+W[33+NA*3]*W[25+NA*3])-O[8]*(W[33+NA*5]*W[25+NA*5]+W[33+NA*6]*W[25+NA*6]+W[33+NA*7]*W[25+NA*7]+W[33+NA*8]*W[25+NA*8])-O[7]*(W[33+NA*12]*W[25+NA*12]+W[33+NA*13]*W[25+NA*13]);
X[34+NA*25] = -O[10]*W[34]*W[25]-O[9]*(W[34+NA*2]*W[25+NA*2]+W[34+NA*3]*W[25+NA*3])-O[8]*(W[34+NA*7]*W[25+NA*7]+W[34+NA*8]*W[25+NA*8]);
X[35+NA*25] = -O[10]*W[35]*W[25]-O[9]*(W[35+NA*2]*W[25+NA*2]+W[35+NA*3]*W[25+NA*3])-O[8]*(W[35+NA*7]*W[25+NA*7]+W[35+NA*8]*W[25+NA*8]);
X[NA*26] = -X[26];
X[1+NA*26] =  X[26+NA];
X[2+NA*26] =  X[26+NA*2];
X[3+NA*26] =  X[26+NA*3];
X[4+NA*26] = -X[26+NA*4];
X[5+NA*26] = -X[26+NA*5];
X[6+NA*26] = -X[26+NA*6];
X[7+NA*26] = -X[26+NA*7];
X[8+NA*26] = -X[26+NA*8];
X[9+NA*26] =  X[26+NA*9];
X[10+NA*26] =  X[26+NA*10];
X[11+NA*26] =  X[26+NA*11];
X[12+NA*26] =  X[26+NA*12];
X[13+NA*26] =  X[26+NA*13];
X[14+NA*26] =  X[26+NA*14];
X[15+NA*26] =  X[26+NA*15];
X[16+NA*26] = -X[26+NA*16];
X[17+NA*26] = -X[26+NA*17];
X[18+NA*26] = -X[26+NA*18];
X[19+NA*26] = -X[26+NA*19];
X[20+NA*26] = -X[26+NA*20];
X[21+NA*26] = -X[26+NA*21];
X[22+NA*26] = -X[26+NA*22];
X[23+NA*26] = -X[26+NA*23];
X[24+NA*26] = -X[26+NA*24];
X[25+NA*26] =  X[26+NA*25];
X[26+NA*26] = -O[10]*W[26]*W[26]-O[9]*(W[26+NA]*W[26+NA]+W[26+NA*2]*W[26+NA*2]+W[26+NA*3]*W[26+NA*3])-O[8]*(W[26+NA*4]*W[26+NA*4]+W[26+NA*5]*W[26+NA*5]+W[26+NA*6]*W[26+NA*6]+W[26+NA*7]*W[26+NA*7]+W[26+NA*8]*W[26+NA*8])-O[7]*(W[26+NA*9]*W[26+NA*9]+W[26+NA*10]*W[26+NA*10]+W[26+NA*11]*W[26+NA*11]+W[26+NA*12]*W[26+NA*12]+W[26+NA*13]*W[26+NA*13]+W[26+NA*14]*W[26+NA*14]+W[26+NA*15]*W[26+NA*15])-O[6]*(W[26+NA*16]*W[26+NA*16]+W[26+NA*17]*W[26+NA*17]+W[26+NA*19]*W[26+NA*19]+W[26+NA*20]*W[26+NA*20])-O[5];
X[27+NA*26] = -O[10]*W[27]*W[26]-O[9]*(W[27+NA]*W[26+NA]+W[27+NA*2]*W[26+NA*2]+W[27+NA*3]*W[26+NA*3])-O[8]*(W[27+NA*4]*W[26+NA*4]+W[27+NA*5]*W[26+NA*5]+W[27+NA*6]*W[26+NA*6]+W[27+NA*7]*W[26+NA*7]+W[27+NA*8]*W[26+NA*8])-O[7]*(W[27+NA*9]*W[26+NA*9]+W[27+NA*10]*W[26+NA*10]+W[27+NA*11]*W[26+NA*11]+W[27+NA*12]*W[26+NA*12]+W[27+NA*13]*W[26+NA*13]+W[27+NA*14]*W[26+NA*14]+W[27+NA*15]*W[26+NA*15])-O[6]*(W[27+NA*16]*W[26+NA*16]+W[27+NA*19]*W[26+NA*19]+W[27+NA*20]*W[26+NA*20]);
X[28+NA*26] = -O[10]*W[28]*W[26]-O[9]*(W[28+NA]*W[26+NA]+W[28+NA*2]*W[26+NA*2]+W[28+NA*3]*W[26+NA*3])-O[8]*(W[28+NA*4]*W[26+NA*4]+W[28+NA*5]*W[26+NA*5]+W[28+NA*6]*W[26+NA*6]+W[28+NA*7]*W[26+NA*7])-O[7]*(W[28+NA*9]*W[26+NA*9]+W[28+NA*10]*W[26+NA*10]+W[28+NA*11]*W[26+NA*11]+W[28+NA*12]*W[26+NA*12]+W[28+NA*14]*W[26+NA*14]+W[28+NA*15]*W[26+NA*15])-O[6]*(W[28+NA*17]*W[26+NA*17]+W[28+NA*19]*W[26+NA*19]);
X[29+NA*26] = -O[10]*W[29]*W[26]-O[9]*(W[29+NA]*W[26+NA]+W[29+NA*2]*W[26+NA*2]+W[29+NA*3]*W[26+NA*3])-O[8]*(W[29+NA*4]*W[26+NA*4]+W[29+NA*5]*W[26+NA*5]+W[29+NA*6]*W[26+NA*6]+W[29+NA*8]*W[26+NA*8])-O[7]*(W[29+NA*9]*W[26+NA*9]+W[29+NA*10]*W[26+NA*10]+W[29+NA*11]*W[26+NA*11]+W[29+NA*13]*W[26+NA*13]+W[29+NA*14]*W[26+NA*14]+W[29+NA*15]*W[26+NA*15])-O[6]*(W[29+NA*17]*W[26+NA*17]+W[29+NA*20]*W[26+NA*20]);
X[30+NA*26] = -O[10]*W[30]*W[26]-O[9]*(W[30+NA]*W[26+NA]+W[30+NA*2]*W[26+NA*2]+W[30+NA*3]*W[26+NA*3])-O[8]*(W[30+NA*4]*W[26+NA*4]+W[30+NA*5]*W[26+NA*5]+W[30+NA*6]*W[26+NA*6]+W[30+NA*7]*W[26+NA*7]+W[30+NA*8]*W[26+NA*8])-O[7]*(W[30+NA*10]*W[26+NA*10]+W[30+NA*11]*W[26+NA*11]+W[30+NA*12]*W[26+NA*12]+W[30+NA*13]*W[26+NA*13]+W[30+NA*14]*W[26+NA*14])-O[6]*(W[30+NA*19]*W[26+NA*19]+W[30+NA*20]*W[26+NA*20]);
X[31+NA*26] = -O[10]*W[31]*W[26]-O[9]*(W[31+NA]*W[26+NA]+W[31+NA*2]*W[26+NA*2]+W[31+NA*3]*W[26+NA*3])-O[8]*(W[31+NA*4]*W[26+NA*4]+W[31+NA*5]*W[26+NA*5]+W[31+NA*6]*W[26+NA*6]+W[31+NA*7]*W[26+NA*7]+W[31+NA*8]*W[26+NA*8])-O[7]*(W[31+NA*10]*W[26+NA*10]+W[31+NA*11]*W[26+NA*11]+W[31+NA*12]*W[26+NA*12]+W[31+NA*13]*W[26+NA*13]+W[31+NA*15]*W[26+NA*15])-O[6]*(W[31+NA*19]*W[26+NA*19]+W[31+NA*20]*W[26+NA*20]);
X[32+NA*26] = -O[10]*W[32]*W[26]-O[9]*(W[32+NA]*W[26+NA]+W[32+NA*2]*W[26+NA*2]+W[32+NA*3]*W[26+NA*3])-O[8]*(W[32+NA*5]*W[26+NA*5]+W[32+NA*6]*W[26+NA*6]+W[32+NA*7]*W[26+NA*7]+W[32+NA*8]*W[26+NA*8])-O[7]*(W[32+NA*12]*W[26+NA*12]+W[32+NA*13]*W[26+NA*13]+W[32+NA*14]*W[26+NA*14]+W[32+NA*15]*W[26+NA*15]);
X[33+NA*26] = -O[10]*W[33]*W[26]-O[9]*(W[33+NA]*W[26+NA]+W[33+NA*2]*W[26+NA*2]+W[33+NA*3]*W[26+NA*3])-O[8]*(W[33+NA*5]*W[26+NA*5]+W[33+NA*6]*W[26+NA*6]+W[33+NA*7]*W[26+NA*7]+W[33+NA*8]*W[26+NA*8])-O[7]*(W[33+NA*12]*W[26+NA*12]+W[33+NA*13]*W[26+NA*13]+W[33+NA*14]*W[26+NA*14]+W[33+NA*15]*W[26+NA*15]);
X[34+NA*26] = -O[10]*W[34]*W[26]-O[9]*(W[34+NA*2]*W[26+NA*2]+W[34+NA*3]*W[26+NA*3])-O[8]*(W[34+NA*7]*W[26+NA*7]+W[34+NA*8]*W[26+NA*8])-O[7]*(W[34+NA*14]*W[26+NA*14]+W[34+NA*15]*W[26+NA*15]);
X[35+NA*26] = -O[10]*W[35]*W[26]-O[9]*(W[35+NA*2]*W[26+NA*2]+W[35+NA*3]*W[26+NA*3])-O[8]*(W[35+NA*7]*W[26+NA*7]+W[35+NA*8]*W[26+NA*8])-O[7]*(W[35+NA*14]*W[26+NA*14]+W[35+NA*15]*W[26+NA*15]);
X[NA*27] = -X[27];
X[1+NA*27] =  X[27+NA];
X[2+NA*27] =  X[27+NA*2];
X[3+NA*27] =  X[27+NA*3];
X[4+NA*27] = -X[27+NA*4];
X[5+NA*27] = -X[27+NA*5];
X[6+NA*27] = -X[27+NA*6];
X[7+NA*27] = -X[27+NA*7];
X[8+NA*27] = -X[27+NA*8];
X[9+NA*27] =  X[27+NA*9];
X[10+NA*27] =  X[27+NA*10];
X[11+NA*27] =  X[27+NA*11];
X[12+NA*27] =  X[27+NA*12];
X[13+NA*27] =  X[27+NA*13];
X[14+NA*27] =  X[27+NA*14];
X[15+NA*27] =  X[27+NA*15];
X[16+NA*27] = -X[27+NA*16];
X[17+NA*27] = -X[27+NA*17];
X[18+NA*27] = -X[27+NA*18];
X[19+NA*27] = -X[27+NA*19];
X[20+NA*27] = -X[27+NA*20];
X[21+NA*27] = -X[27+NA*21];
X[22+NA*27] = -X[27+NA*22];
X[23+NA*27] = -X[27+NA*23];
X[24+NA*27] = -X[27+NA*24];
X[25+NA*27] =  X[27+NA*25];
X[26+NA*27] =  X[27+NA*26];
X[27+NA*27] = -O[10]*W[27]*W[27]-O[9]*(W[27+NA]*W[27+NA]+W[27+NA*2]*W[27+NA*2]+W[27+NA*3]*W[27+NA*3])-O[8]*(W[27+NA*4]*W[27+NA*4]+W[27+NA*5]*W[27+NA*5]+W[27+NA*6]*W[27+NA*6]+W[27+NA*7]*W[27+NA*7]+W[27+NA*8]*W[27+NA*8])-O[7]*(W[27+NA*9]*W[27+NA*9]+W[27+NA*10]*W[27+NA*10]+W[27+NA*11]*W[27+NA*11]+W[27+NA*12]*W[27+NA*12]+W[27+NA*13]*W[27+NA*13]+W[27+NA*14]*W[27+NA*14]+W[27+NA*15]*W[27+NA*15])-O[6]*(W[27+NA*16]*W[27+NA*16]+W[27+NA*18]*W[27+NA*18]+W[27+NA*19]*W[27+NA*19]+W[27+NA*20]*W[27+NA*20])-O[5];
X[28+NA*27] = -O[10]*W[28]*W[27]-O[9]*(W[28+NA]*W[27+NA]+W[28+NA*2]*W[27+NA*2]+W[28+NA*3]*W[27+NA*3])-O[8]*(W[28+NA*4]*W[27+NA*4]+W[28+NA*5]*W[27+NA*5]+W[28+NA*6]*W[27+NA*6]+W[28+NA*7]*W[27+NA*7])-O[7]*(W[28+NA*9]*W[27+NA*9]+W[28+NA*10]*W[27+NA*10]+W[28+NA*11]*W[27+NA*11]+W[28+NA*12]*W[27+NA*12]+W[28+NA*14]*W[27+NA*14]+W[28+NA*15]*W[27+NA*15])-O[6]*(W[28+NA*18]*W[27+NA*18]+W[28+NA*19]*W[27+NA*19]);
X[29+NA*27] = -O[10]*W[29]*W[27]-O[9]*(W[29+NA]*W[27+NA]+W[29+NA*2]*W[27+NA*2]+W[29+NA*3]*W[27+NA*3])-O[8]*(W[29+NA*4]*W[27+NA*4]+W[29+NA*5]*W[27+NA*5]+W[29+NA*6]*W[27+NA*6]+W[29+NA*8]*W[27+NA*8])-O[7]*(W[29+NA*9]*W[27+NA*9]+W[29+NA*10]*W[27+NA*10]+W[29+NA*11]*W[27+NA*11]+W[29+NA*13]*W[27+NA*13]+W[29+NA*14]*W[27+NA*14]+W[29+NA*15]*W[27+NA*15])-O[6]*(W[29+NA*18]*W[27+NA*18]+W[29+NA*20]*W[27+NA*20]);
X[30+NA*27] = -O[10]*W[30]*W[27]-O[9]*(W[30+NA]*W[27+NA]+W[30+NA*2]*W[27+NA*2]+W[30+NA*3]*W[27+NA*3])-O[8]*(W[30+NA*4]*W[27+NA*4]+W[30+NA*5]*W[27+NA*5]+W[30+NA*6]*W[27+NA*6]+W[30+NA*7]*W[27+NA*7]+W[30+NA*8]*W[27+NA*8])-O[7]*(W[30+NA*10]*W[27+NA*10]+W[30+NA*11]*W[27+NA*11]+W[30+NA*12]*W[27+NA*12]+W[30+NA*13]*W[27+NA*13]+W[30+NA*14]*W[27+NA*14])-O[6]*(W[30+NA*19]*W[27+NA*19]+W[30+NA*20]*W[27+NA*20]);
X[31+NA*27] = -O[10]*W[31]*W[27]-O[9]*(W[31+NA]*W[27+NA]+W[31+NA*2]*W[27+NA*2]+W[31+NA*3]*W[27+NA*3])-O[8]*(W[31+NA*4]*W[27+NA*4]+W[31+NA*5]*W[27+NA*5]+W[31+NA*6]*W[27+NA*6]+W[31+NA*7]*W[27+NA*7]+W[31+NA*8]*W[27+NA*8])-O[7]*(W[31+NA*10]*W[27+NA*10]+W[31+NA*11]*W[27+NA*11]+W[31+NA*12]*W[27+NA*12]+W[31+NA*13]*W[27+NA*13]+W[31+NA*15]*W[27+NA*15])-O[6]*(W[31+NA*19]*W[27+NA*19]+W[31+NA*20]*W[27+NA*20]);
X[32+NA*27] = -O[10]*W[32]*W[27]-O[9]*(W[32+NA]*W[27+NA]+W[32+NA*2]*W[27+NA*2]+W[32+NA*3]*W[27+NA*3])-O[8]*(W[32+NA*5]*W[27+NA*5]+W[32+NA*6]*W[27+NA*6]+W[32+NA*7]*W[27+NA*7]+W[32+NA*8]*W[27+NA*8])-O[7]*(W[32+NA*12]*W[27+NA*12]+W[32+NA*13]*W[27+NA*13]+W[32+NA*14]*W[27+NA*14]+W[32+NA*15]*W[27+NA*15]);
X[33+NA*27] = -O[10]*W[33]*W[27]-O[9]*(W[33+NA]*W[27+NA]+W[33+NA*2]*W[27+NA*2]+W[33+NA*3]*W[27+NA*3])-O[8]*(W[33+NA*5]*W[27+NA*5]+W[33+NA*6]*W[27+NA*6]+W[33+NA*7]*W[27+NA*7]+W[33+NA*8]*W[27+NA*8])-O[7]*(W[33+NA*12]*W[27+NA*12]+W[33+NA*13]*W[27+NA*13]+W[33+NA*14]*W[27+NA*14]+W[33+NA*15]*W[27+NA*15]);
X[34+NA*27] = -O[10]*W[34]*W[27]-O[9]*(W[34+NA*2]*W[27+NA*2]+W[34+NA*3]*W[27+NA*3])-O[8]*(W[34+NA*7]*W[27+NA*7]+W[34+NA*8]*W[27+NA*8])-O[7]*(W[34+NA*14]*W[27+NA*14]+W[34+NA*15]*W[27+NA*15]);
X[35+NA*27] = -O[10]*W[35]*W[27]-O[9]*(W[35+NA*2]*W[27+NA*2]+W[35+NA*3]*W[27+NA*3])-O[8]*(W[35+NA*7]*W[27+NA*7]+W[35+NA*8]*W[27+NA*8])-O[7]*(W[35+NA*14]*W[27+NA*14]+W[35+NA*15]*W[27+NA*15]);
X[NA*28] = -X[28];
X[1+NA*28] =  X[28+NA];
X[2+NA*28] =  X[28+NA*2];
X[3+NA*28] =  X[28+NA*3];
X[4+NA*28] = -X[28+NA*4];
X[5+NA*28] = -X[28+NA*5];
X[6+NA*28] = -X[28+NA*6];
X[7+NA*28] = -X[28+NA*7];
X[8+NA*28] = -X[28+NA*8];
X[9+NA*28] =  X[28+NA*9];
X[10+NA*28] =  X[28+NA*10];
X[11+NA*28] =  X[28+NA*11];
X[12+NA*28] =  X[28+NA*12];
X[13+NA*28] =  X[28+NA*13];
X[14+NA*28] =  X[28+NA*14];
X[15+NA*28] =  X[28+NA*15];
X[16+NA*28] = -X[28+NA*16];
X[17+NA*28] = -X[28+NA*17];
X[18+NA*28] = -X[28+NA*18];
X[19+NA*28] = -X[28+NA*19];
X[20+NA*28] = -X[28+NA*20];
X[21+NA*28] = -X[28+NA*21];
X[22+NA*28] = -X[28+NA*22];
X[23+NA*28] = -X[28+NA*23];
X[24+NA*28] = -X[28+NA*24];
X[25+NA*28] =  X[28+NA*25];
X[26+NA*28] =  X[28+NA*26];
X[27+NA*28] =  X[28+NA*27];
X[28+NA*28] = -O[10]*W[28]*W[28]-O[9]*(W[28+NA]*W[28+NA]+W[28+NA*2]*W[28+NA*2]+W[28+NA*3]*W[28+NA*3])-O[8]*(W[28+NA*4]*W[28+NA*4]+W[28+NA*5]*W[28+NA*5]+W[28+NA*6]*W[28+NA*6]+W[28+NA*7]*W[28+NA*7])-O[7]*(W[28+NA*9]*W[28+NA*9]+W[28+NA*10]*W[28+NA*10]+W[28+NA*11]*W[28+NA*11]+W[28+NA*12]*W[28+NA*12]+W[28+NA*14]*W[28+NA*14]+W[28+NA*15]*W[28+NA*15])-O[6]*(W[28+NA*17]*W[28+NA*17]+W[28+NA*18]*W[28+NA*18]+W[28+NA*19]*W[28+NA*19]+W[28+NA*21]*W[28+NA*21]+W[28+NA*22]*W[28+NA*22])-O[5];
X[29+NA*28] = -O[10]*W[29]*W[28]-O[9]*(W[29+NA]*W[28+NA]+W[29+NA*2]*W[28+NA*2]+W[29+NA*3]*W[28+NA*3])-O[8]*(W[29+NA*4]*W[28+NA*4]+W[29+NA*5]*W[28+NA*5]+W[29+NA*6]*W[28+NA*6])-O[7]*(W[29+NA*9]*W[28+NA*9]+W[29+NA*10]*W[28+NA*10]+W[29+NA*11]*W[28+NA*11]+W[29+NA*14]*W[28+NA*14]+W[29+NA*15]*W[28+NA*15])-O[6]*(W[29+NA*17]*W[28+NA*17]+W[29+NA*18]*W[28+NA*18]+W[29+NA*21]*W[28+NA*21]+W[29+NA*22]*W[28+NA*22]);
X[30+NA*28] = -O[10]*W[30]*W[28]-O[9]*(W[30+NA]*W[28+NA]+W[30+NA*2]*W[28+NA*2]+W[30+NA*3]*W[28+NA*3])-O[8]*(W[30+NA*4]*W[28+NA*4]+W[30+NA*5]*W[28+NA*5]+W[30+NA*6]*W[28+NA*6]+W[30+NA*7]*W[28+NA*7])-O[7]*(W[30+NA*10]*W[28+NA*10]+W[30+NA*11]*W[28+NA*11]+W[30+NA*12]*W[28+NA*12]+W[30+NA*14]*W[28+NA*14])-O[6]*(W[30+NA*19]*W[28+NA*19]+W[30+NA*21]*W[28+NA*21]);
X[31+NA*28] = -O[10]*W[31]*W[28]-O[9]*(W[31+NA]*W[28+NA]+W[31+NA*2]*W[28+NA*2]+W[31+NA*3]*W[28+NA*3])-O[8]*(W[31+NA*4]*W[28+NA*4]+W[31+NA*5]*W[28+NA*5]+W[31+NA*6]*W[28+NA*6]+W[31+NA*7]*W[28+NA*7])-O[7]*(W[31+NA*10]*W[28+NA*10]+W[31+NA*11]*W[28+NA*11]+W[31+NA*12]*W[28+NA*12]+W[31+NA*15]*W[28+NA*15])-O[6]*(W[31+NA*19]*W[28+NA*19]+W[31+NA*22]*W[28+NA*22]);
X[32+NA*28] = -O[10]*W[32]*W[28]-O[9]*(W[32+NA]*W[28+NA]+W[32+NA*2]*W[28+NA*2]+W[32+NA*3]*W[28+NA*3])-O[8]*(W[32+NA*5]*W[28+NA*5]+W[32+NA*6]*W[28+NA*6]+W[32+NA*7]*W[28+NA*7])-O[7]*(W[32+NA*12]*W[28+NA*12]+W[32+NA*14]*W[28+NA*14]+W[32+NA*15]*W[28+NA*15])-O[6]*(W[32+NA*21]*W[28+NA*21]+W[32+NA*22]*W[28+NA*22]);
X[33+NA*28] = -O[10]*W[33]*W[28]-O[9]*(W[33+NA]*W[28+NA]+W[33+NA*2]*W[28+NA*2]+W[33+NA*3]*W[28+NA*3])-O[8]*(W[33+NA*5]*W[28+NA*5]+W[33+NA*6]*W[28+NA*6]+W[33+NA*7]*W[28+NA*7])-O[7]*(W[33+NA*12]*W[28+NA*12]+W[33+NA*14]*W[28+NA*14]+W[33+NA*15]*W[28+NA*15])-O[6]*(W[33+NA*21]*W[28+NA*21]+W[33+NA*22]*W[28+NA*22]);
X[34+NA*28] = -O[10]*W[34]*W[28]-O[9]*(W[34+NA*2]*W[28+NA*2]+W[34+NA*3]*W[28+NA*3])-O[8]*W[34+NA*7]*W[28+NA*7]-O[7]*(W[34+NA*14]*W[28+NA*14]+W[34+NA*15]*W[28+NA*15]);
X[35+NA*28] = -O[10]*W[35]*W[28]-O[9]*(W[35+NA*2]*W[28+NA*2]+W[35+NA*3]*W[28+NA*3])-O[8]*W[35+NA*7]*W[28+NA*7]-O[7]*(W[35+NA*14]*W[28+NA*14]+W[35+NA*15]*W[28+NA*15]);
X[NA*29] = -X[29];
X[1+NA*29] =  X[29+NA];
X[2+NA*29] =  X[29+NA*2];
X[3+NA*29] =  X[29+NA*3];
X[4+NA*29] = -X[29+NA*4];
X[5+NA*29] = -X[29+NA*5];
X[6+NA*29] = -X[29+NA*6];
X[7+NA*29] = -X[29+NA*7];
X[8+NA*29] = -X[29+NA*8];
X[9+NA*29] =  X[29+NA*9];
X[10+NA*29] =  X[29+NA*10];
X[11+NA*29] =  X[29+NA*11];
X[12+NA*29] =  X[29+NA*12];
X[13+NA*29] =  X[29+NA*13];
X[14+NA*29] =  X[29+NA*14];
X[15+NA*29] =  X[29+NA*15];
X[16+NA*29] = -X[29+NA*16];
X[17+NA*29] = -X[29+NA*17];
X[18+NA*29] = -X[29+NA*18];
X[19+NA*29] = -X[29+NA*19];
X[20+NA*29] = -X[29+NA*20];
X[21+NA*29] = -X[29+NA*21];
X[22+NA*29] = -X[29+NA*22];
X[23+NA*29] = -X[29+NA*23];
X[24+NA*29] = -X[29+NA*24];
X[25+NA*29] =  X[29+NA*25];
X[26+NA*29] =  X[29+NA*26];
X[27+NA*29] =  X[29+NA*27];
X[28+NA*29] =  X[29+NA*28];
X[29+NA*29] = -O[10]*W[29]*W[29]-O[9]*(W[29+NA]*W[29+NA]+W[29+NA*2]*W[29+NA*2]+W[29+NA*3]*W[29+NA*3])-O[8]*(W[29+NA*4]*W[29+NA*4]+W[29+NA*5]*W[29+NA*5]+W[29+NA*6]*W[29+NA*6]+W[29+NA*8]*W[29+NA*8])-O[7]*(W[29+NA*9]*W[29+NA*9]+W[29+NA*10]*W[29+NA*10]+W[29+NA*11]*W[29+NA*11]+W[29+NA*13]*W[29+NA*13]+W[29+NA*14]*W[29+NA*14]+W[29+NA*15]*W[29+NA*15])-O[6]*(W[29+NA*17]*W[29+NA*17]+W[29+NA*18]*W[29+NA*18]+W[29+NA*20]*W[29+NA*20]+W[29+NA*21]*W[29+NA*21]+W[29+NA*22]*W[29+NA*22])-O[5];
X[30+NA*29] = -O[10]*W[30]*W[29]-O[9]*(W[30+NA]*W[29+NA]+W[30+NA*2]*W[29+NA*2]+W[30+NA*3]*W[29+NA*3])-O[8]*(W[30+NA*4]*W[29+NA*4]+W[30+NA*5]*W[29+NA*5]+W[30+NA*6]*W[29+NA*6]+W[30+NA*8]*W[29+NA*8])-O[7]*(W[30+NA*10]*W[29+NA*10]+W[30+NA*11]*W[29+NA*11]+W[30+NA*13]*W[29+NA*13]+W[30+NA*14]*W[29+NA*14])-O[6]*(W[30+NA*20]*W[29+NA*20]+W[30+NA*21]*W[29+NA*21]);
X[31+NA*29] = -O[10]*W[31]*W[29]-O[9]*(W[31+NA]*W[29+NA]+W[31+NA*2]*W[29+NA*2]+W[31+NA*3]*W[29+NA*3])-O[8]*(W[31+NA*4]*W[29+NA*4]+W[31+NA*5]*W[29+NA*5]+W[31+NA*6]*W[29+NA*6]+W[31+NA*8]*W[29+NA*8])-O[7]*(W[31+NA*10]*W[29+NA*10]+W[31+NA*11]*W[29+NA*11]+W[31+NA*13]*W[29+NA*13]+W[31+NA*15]*W[29+NA*15])-O[6]*(W[31+NA*20]*W[29+NA*20]+W[31+NA*22]*W[29+NA*22]);
X[32+NA*29] = -O[10]*W[32]*W[29]-O[9]*(W[32+NA]*W[29+NA]+W[32+NA*2]*W[29+NA*2]+W[32+NA*3]*W[29+NA*3])-O[8]*(W[32+NA*5]*W[29+NA*5]+W[32+NA*6]*W[29+NA*6]+W[32+NA*8]*W[29+NA*8])-O[7]*(W[32+NA*13]*W[29+NA*13]+W[32+NA*14]*W[29+NA*14]+W[32+NA*15]*W[29+NA*15])-O[6]*(W[32+NA*21]*W[29+NA*21]+W[32+NA*22]*W[29+NA*22]);
X[33+NA*29] = -O[10]*W[33]*W[29]-O[9]*(W[33+NA]*W[29+NA]+W[33+NA*2]*W[29+NA*2]+W[33+NA*3]*W[29+NA*3])-O[8]*(W[33+NA*5]*W[29+NA*5]+W[33+NA*6]*W[29+NA*6]+W[33+NA*8]*W[29+NA*8])-O[7]*(W[33+NA*13]*W[29+NA*13]+W[33+NA*14]*W[29+NA*14]+W[33+NA*15]*W[29+NA*15])-O[6]*(W[33+NA*21]*W[29+NA*21]+W[33+NA*22]*W[29+NA*22]);
X[34+NA*29] = -O[10]*W[34]*W[29]-O[9]*(W[34+NA*2]*W[29+NA*2]+W[34+NA*3]*W[29+NA*3])-O[8]*W[34+NA*8]*W[29+NA*8]-O[7]*(W[34+NA*14]*W[29+NA*14]+W[34+NA*15]*W[29+NA*15]);
X[35+NA*29] = -O[10]*W[35]*W[29]-O[9]*(W[35+NA*2]*W[29+NA*2]+W[35+NA*3]*W[29+NA*3])-O[8]*W[35+NA*8]*W[29+NA*8]-O[7]*(W[35+NA*14]*W[29+NA*14]+W[35+NA*15]*W[29+NA*15]);
X[NA*30] = -X[30];
X[1+NA*30] =  X[30+NA];
X[2+NA*30] =  X[30+NA*2];
X[3+NA*30] =  X[30+NA*3];
X[4+NA*30] = -X[30+NA*4];
X[5+NA*30] = -X[30+NA*5];
X[6+NA*30] = -X[30+NA*6];
X[7+NA*30] = -X[30+NA*7];
X[8+NA*30] = -X[30+NA*8];
X[9+NA*30] =  X[30+NA*9];
X[10+NA*30] =  X[30+NA*10];
X[11+NA*30] =  X[30+NA*11];
X[12+NA*30] =  X[30+NA*12];
X[13+NA*30] =  X[30+NA*13];
X[14+NA*30] =  X[30+NA*14];
X[15+NA*30] =  X[30+NA*15];
X[16+NA*30] = -X[30+NA*16];
X[17+NA*30] = -X[30+NA*17];
X[18+NA*30] = -X[30+NA*18];
X[19+NA*30] = -X[30+NA*19];
X[20+NA*30] = -X[30+NA*20];
X[21+NA*30] = -X[30+NA*21];
X[22+NA*30] = -X[30+NA*22];
X[23+NA*30] = -X[30+NA*23];
X[24+NA*30] = -X[30+NA*24];
X[25+NA*30] =  X[30+NA*25];
X[26+NA*30] =  X[30+NA*26];
X[27+NA*30] =  X[30+NA*27];
X[28+NA*30] =  X[30+NA*28];
X[29+NA*30] =  X[30+NA*29];
X[30+NA*30] = -O[10]*W[30]*W[30]-O[9]*(W[30+NA]*W[30+NA]+W[30+NA*2]*W[30+NA*2]+W[30+NA*3]*W[30+NA*3])-O[8]*(W[30+NA*4]*W[30+NA*4]+W[30+NA*5]*W[30+NA*5]+W[30+NA*6]*W[30+NA*6]+W[30+NA*7]*W[30+NA*7]+W[30+NA*8]*W[30+NA*8])-O[7]*(W[30+NA*10]*W[30+NA*10]+W[30+NA*11]*W[30+NA*11]+W[30+NA*12]*W[30+NA*12]+W[30+NA*13]*W[30+NA*13]+W[30+NA*14]*W[30+NA*14])-O[6]*(W[30+NA*19]*W[30+NA*19]+W[30+NA*20]*W[30+NA*20]+W[30+NA*21]*W[30+NA*21]+W[30+NA*23]*W[30+NA*23]+W[30+NA*24]*W[30+NA*24])-O[5];
X[31+NA*30] = -O[10]*W[31]*W[30]-O[9]*(W[31+NA]*W[30+NA]+W[31+NA*2]*W[30+NA*2]+W[31+NA*3]*W[30+NA*3])-O[8]*(W[31+NA*4]*W[30+NA*4]+W[31+NA*5]*W[30+NA*5]+W[31+NA*6]*W[30+NA*6]+W[31+NA*7]*W[30+NA*7]+W[31+NA*8]*W[30+NA*8])-O[7]*(W[31+NA*10]*W[30+NA*10]+W[31+NA*11]*W[30+NA*11]+W[31+NA*12]*W[30+NA*12]+W[31+NA*13]*W[30+NA*13])-O[6]*(W[31+NA*19]*W[30+NA*19]+W[31+NA*20]*W[30+NA*20]+W[31+NA*23]*W[30+NA*23]+W[31+NA*24]*W[30+NA*24]);
X[32+NA*30] = -O[10]*W[32]*W[30]-O[9]*(W[32+NA]*W[30+NA]+W[32+NA*2]*W[30+NA*2]+W[32+NA*3]*W[30+NA*3])-O[8]*(W[32+NA*5]*W[30+NA*5]+W[32+NA*6]*W[30+NA*6]+W[32+NA*7]*W[30+NA*7]+W[32+NA*8]*W[30+NA*8])-O[7]*(W[32+NA*12]*W[30+NA*12]+W[32+NA*13]*W[30+NA*13]+W[32+NA*14]*W[30+NA*14])-O[6]*(W[32+NA*21]*W[30+NA*21]+W[32+NA*23]*W[30+NA*23]);
X[33+NA*30] = -O[10]*W[33]*W[30]-O[9]*(W[33+NA]*W[30+NA]+W[33+NA*2]*W[30+NA*2]+W[33+NA*3]*W[30+NA*3])-O[8]*(W[33+NA*5]*W[30+NA*5]+W[33+NA*6]*W[30+NA*6]+W[33+NA*7]*W[30+NA*7]+W[33+NA*8]*W[30+NA*8])-O[7]*(W[33+NA*12]*W[30+NA*12]+W[33+NA*13]*W[30+NA*13]+W[33+NA*14]*W[30+NA*14])-O[6]*(W[33+NA*21]*W[30+NA*21]+W[33+NA*24]*W[30+NA*24]);
X[34+NA*30] = -O[10]*W[34]*W[30]-O[9]*(W[34+NA*2]*W[30+NA*2]+W[34+NA*3]*W[30+NA*3])-O[8]*(W[34+NA*7]*W[30+NA*7]+W[34+NA*8]*W[30+NA*8])-O[7]*W[34+NA*14]*W[30+NA*14]-O[6]*(W[34+NA*23]*W[30+NA*23]+W[34+NA*24]*W[30+NA*24]);
X[35+NA*30] = -O[10]*W[35]*W[30]-O[9]*(W[35+NA*2]*W[30+NA*2]+W[35+NA*3]*W[30+NA*3])-O[8]*(W[35+NA*7]*W[30+NA*7]+W[35+NA*8]*W[30+NA*8])-O[7]*W[35+NA*14]*W[30+NA*14]-O[6]*(W[35+NA*23]*W[30+NA*23]+W[35+NA*24]*W[30+NA*24]);
X[NA*31] = -X[31];
X[1+NA*31] =  X[31+NA];
X[2+NA*31] =  X[31+NA*2];
X[3+NA*31] =  X[31+NA*3];
X[4+NA*31] = -X[31+NA*4];
X[5+NA*31] = -X[31+NA*5];
X[6+NA*31] = -X[31+NA*6];
X[7+NA*31] = -X[31+NA*7];
X[8+NA*31] = -X[31+NA*8];
X[9+NA*31] =  X[31+NA*9];
X[10+NA*31] =  X[31+NA*10];
X[11+NA*31] =  X[31+NA*11];
X[12+NA*31] =  X[31+NA*12];
X[13+NA*31] =  X[31+NA*13];
X[14+NA*31] =  X[31+NA*14];
X[15+NA*31] =  X[31+NA*15];
X[16+NA*31] = -X[31+NA*16];
X[17+NA*31] = -X[31+NA*17];
X[18+NA*31] = -X[31+NA*18];
X[19+NA*31] = -X[31+NA*19];
X[20+NA*31] = -X[31+NA*20];
X[21+NA*31] = -X[31+NA*21];
X[22+NA*31] = -X[31+NA*22];
X[23+NA*31] = -X[31+NA*23];
X[24+NA*31] = -X[31+NA*24];
X[25+NA*31] =  X[31+NA*25];
X[26+NA*31] =  X[31+NA*26];
X[27+NA*31] =  X[31+NA*27];
X[28+NA*31] =  X[31+NA*28];
X[29+NA*31] =  X[31+NA*29];
X[30+NA*31] =  X[31+NA*30];
X[31+NA*31] = -O[10]*W[31]*W[31]-O[9]*(W[31+NA]*W[31+NA]+W[31+NA*2]*W[31+NA*2]+W[31+NA*3]*W[31+NA*3])-O[8]*(W[31+NA*4]*W[31+NA*4]+W[31+NA*5]*W[31+NA*5]+W[31+NA*6]*W[31+NA*6]+W[31+NA*7]*W[31+NA*7]+W[31+NA*8]*W[31+NA*8])-O[7]*(W[31+NA*10]*W[31+NA*10]+W[31+NA*11]*W[31+NA*11]+W[31+NA*12]*W[31+NA*12]+W[31+NA*13]*W[31+NA*13]+W[31+NA*15]*W[31+NA*15])-O[6]*(W[31+NA*19]*W[31+NA*19]+W[31+NA*20]*W[31+NA*20]+W[31+NA*22]*W[31+NA*22]+W[31+NA*23]*W[31+NA*23]+W[31+NA*24]*W[31+NA*24])-O[5];
X[32+NA*31] = -O[10]*W[32]*W[31]-O[9]*(W[32+NA]*W[31+NA]+W[32+NA*2]*W[31+NA*2]+W[32+NA*3]*W[31+NA*3])-O[8]*(W[32+NA*5]*W[31+NA*5]+W[32+NA*6]*W[31+NA*6]+W[32+NA*7]*W[31+NA*7]+W[32+NA*8]*W[31+NA*8])-O[7]*(W[32+NA*12]*W[31+NA*12]+W[32+NA*13]*W[31+NA*13]+W[32+NA*15]*W[31+NA*15])-O[6]*(W[32+NA*22]*W[31+NA*22]+W[32+NA*23]*W[31+NA*23]);
X[33+NA*31] = -O[10]*W[33]*W[31]-O[9]*(W[33+NA]*W[31+NA]+W[33+NA*2]*W[31+NA*2]+W[33+NA*3]*W[31+NA*3])-O[8]*(W[33+NA*5]*W[31+NA*5]+W[33+NA*6]*W[31+NA*6]+W[33+NA*7]*W[31+NA*7]+W[33+NA*8]*W[31+NA*8])-O[7]*(W[33+NA*12]*W[31+NA*12]+W[33+NA*13]*W[31+NA*13]+W[33+NA*15]*W[31+NA*15])-O[6]*(W[33+NA*22]*W[31+NA*22]+W[33+NA*24]*W[31+NA*24]);
X[34+NA*31] = -O[10]*W[34]*W[31]-O[9]*(W[34+NA*2]*W[31+NA*2]+W[34+NA*3]*W[31+NA*3])-O[8]*(W[34+NA*7]*W[31+NA*7]+W[34+NA*8]*W[31+NA*8])-O[7]*W[34+NA*15]*W[31+NA*15]-O[6]*(W[34+NA*23]*W[31+NA*23]+W[34+NA*24]*W[31+NA*24]);
X[35+NA*31] = -O[10]*W[35]*W[31]-O[9]*(W[35+NA*2]*W[31+NA*2]+W[35+NA*3]*W[31+NA*3])-O[8]*(W[35+NA*7]*W[31+NA*7]+W[35+NA*8]*W[31+NA*8])-O[7]*W[35+NA*15]*W[31+NA*15]-O[6]*(W[35+NA*23]*W[31+NA*23]+W[35+NA*24]*W[31+NA*24]);
X[NA*32] = -X[32];
X[1+NA*32] =  X[32+NA];
X[2+NA*32] =  X[32+NA*2];
X[3+NA*32] =  X[32+NA*3];
X[4+NA*32] = -X[32+NA*4];
X[5+NA*32] = -X[32+NA*5];
X[6+NA*32] = -X[32+NA*6];
X[7+NA*32] = -X[32+NA*7];
X[8+NA*32] = -X[32+NA*8];
X[9+NA*32] =  X[32+NA*9];
X[10+NA*32] =  X[32+NA*10];
X[11+NA*32] =  X[32+NA*11];
X[12+NA*32] =  X[32+NA*12];
X[13+NA*32] =  X[32+NA*13];
X[14+NA*32] =  X[32+NA*14];
X[15+NA*32] =  X[32+NA*15];
X[16+NA*32] = -X[32+NA*16];
X[17+NA*32] = -X[32+NA*17];
X[18+NA*32] = -X[32+NA*18];
X[19+NA*32] = -X[32+NA*19];
X[20+NA*32] = -X[32+NA*20];
X[21+NA*32] = -X[32+NA*21];
X[22+NA*32] = -X[32+NA*22];
X[23+NA*32] = -X[32+NA*23];
X[24+NA*32] = -X[32+NA*24];
X[25+NA*32] =  X[32+NA*25];
X[26+NA*32] =  X[32+NA*26];
X[27+NA*32] =  X[32+NA*27];
X[28+NA*32] =  X[32+NA*28];
X[29+NA*32] =  X[32+NA*29];
X[30+NA*32] =  X[32+NA*30];
X[31+NA*32] =  X[32+NA*31];
X[32+NA*32] = -O[10]*W[32]*W[32]-O[9]*(W[32+NA]*W[32+NA]+W[32+NA*2]*W[32+NA*2]+W[32+NA*3]*W[32+NA*3])-O[8]*(W[32+NA*5]*W[32+NA*5]+W[32+NA*6]*W[32+NA*6]+W[32+NA*7]*W[32+NA*7]+W[32+NA*8]*W[32+NA*8])-O[7]*(W[32+NA*12]*W[32+NA*12]+W[32+NA*13]*W[32+NA*13]+W[32+NA*14]*W[32+NA*14]+W[32+NA*15]*W[32+NA*15])-O[6]*(W[32+NA*21]*W[32+NA*21]+W[32+NA*22]*W[32+NA*22]+W[32+NA*23]*W[32+NA*23])-O[5];
X[33+NA*32] = -O[10]*W[33]*W[32]-O[9]*(W[33+NA]*W[32+NA]+W[33+NA*2]*W[32+NA*2]+W[33+NA*3]*W[32+NA*3])-O[8]*(W[33+NA*5]*W[32+NA*5]+W[33+NA*6]*W[32+NA*6]+W[33+NA*7]*W[32+NA*7]+W[33+NA*8]*W[32+NA*8])-O[7]*(W[33+NA*12]*W[32+NA*12]+W[33+NA*13]*W[32+NA*13]+W[33+NA*14]*W[32+NA*14]+W[33+NA*15]*W[32+NA*15])-O[6]*(W[33+NA*21]*W[32+NA*21]+W[33+NA*22]*W[32+NA*22]);
X[34+NA*32] = -O[10]*W[34]*W[32]-O[9]*(W[34+NA*2]*W[32+NA*2]+W[34+NA*3]*W[32+NA*3])-O[8]*(W[34+NA*7]*W[32+NA*7]+W[34+NA*8]*W[32+NA*8])-O[7]*(W[34+NA*14]*W[32+NA*14]+W[34+NA*15]*W[32+NA*15])-O[6]*W[34+NA*23]*W[32+NA*23];
X[35+NA*32] = -O[10]*W[35]*W[32]-O[9]*(W[35+NA*2]*W[32+NA*2]+W[35+NA*3]*W[32+NA*3])-O[8]*(W[35+NA*7]*W[32+NA*7]+W[35+NA*8]*W[32+NA*8])-O[7]*(W[35+NA*14]*W[32+NA*14]+W[35+NA*15]*W[32+NA*15])-O[6]*W[35+NA*23]*W[32+NA*23];
X[NA*33] = -X[33];
X[1+NA*33] =  X[33+NA];
X[2+NA*33] =  X[33+NA*2];
X[3+NA*33] =  X[33+NA*3];
X[4+NA*33] = -X[33+NA*4];
X[5+NA*33] = -X[33+NA*5];
X[6+NA*33] = -X[33+NA*6];
X[7+NA*33] = -X[33+NA*7];
X[8+NA*33] = -X[33+NA*8];
X[9+NA*33] =  X[33+NA*9];
X[10+NA*33] =  X[33+NA*10];
X[11+NA*33] =  X[33+NA*11];
X[12+NA*33] =  X[33+NA*12];
X[13+NA*33] =  X[33+NA*13];
X[14+NA*33] =  X[33+NA*14];
X[15+NA*33] =  X[33+NA*15];
X[16+NA*33] = -X[33+NA*16];
X[17+NA*33] = -X[33+NA*17];
X[18+NA*33] = -X[33+NA*18];
X[19+NA*33] = -X[33+NA*19];
X[20+NA*33] = -X[33+NA*20];
X[21+NA*33] = -X[33+NA*21];
X[22+NA*33] = -X[33+NA*22];
X[23+NA*33] = -X[33+NA*23];
X[24+NA*33] = -X[33+NA*24];
X[25+NA*33] =  X[33+NA*25];
X[26+NA*33] =  X[33+NA*26];
X[27+NA*33] =  X[33+NA*27];
X[28+NA*33] =  X[33+NA*28];
X[29+NA*33] =  X[33+NA*29];
X[30+NA*33] =  X[33+NA*30];
X[31+NA*33] =  X[33+NA*31];
X[32+NA*33] =  X[33+NA*32];
X[33+NA*33] = -O[10]*W[33]*W[33]-O[9]*(W[33+NA]*W[33+NA]+W[33+NA*2]*W[33+NA*2]+W[33+NA*3]*W[33+NA*3])-O[8]*(W[33+NA*5]*W[33+NA*5]+W[33+NA*6]*W[33+NA*6]+W[33+NA*7]*W[33+NA*7]+W[33+NA*8]*W[33+NA*8])-O[7]*(W[33+NA*12]*W[33+NA*12]+W[33+NA*13]*W[33+NA*13]+W[33+NA*14]*W[33+NA*14]+W[33+NA*15]*W[33+NA*15])-O[6]*(W[33+NA*21]*W[33+NA*21]+W[33+NA*22]*W[33+NA*22]+W[33+NA*24]*W[33+NA*24])-O[5];
X[34+NA*33] = -O[10]*W[34]*W[33]-O[9]*(W[34+NA*2]*W[33+NA*2]+W[34+NA*3]*W[33+NA*3])-O[8]*(W[34+NA*7]*W[33+NA*7]+W[34+NA*8]*W[33+NA*8])-O[7]*(W[34+NA*14]*W[33+NA*14]+W[34+NA*15]*W[33+NA*15])-O[6]*W[34+NA*24]*W[33+NA*24];
X[35+NA*33] = -O[10]*W[35]*W[33]-O[9]*(W[35+NA*2]*W[33+NA*2]+W[35+NA*3]*W[33+NA*3])-O[8]*(W[35+NA*7]*W[33+NA*7]+W[35+NA*8]*W[33+NA*8])-O[7]*(W[35+NA*14]*W[33+NA*14]+W[35+NA*15]*W[33+NA*15])-O[6]*W[35+NA*24]*W[33+NA*24];
X[NA*34] = -X[34];
X[1+NA*34] =  X[34+NA];
X[2+NA*34] =  X[34+NA*2];
X[3+NA*34] =  X[34+NA*3];
X[4+NA*34] = -X[34+NA*4];
X[5+NA*34] = -X[34+NA*5];
X[6+NA*34] = -X[34+NA*6];
X[7+NA*34] = -X[34+NA*7];
X[8+NA*34] = -X[34+NA*8];
X[9+NA*34] =  X[34+NA*9];
X[10+NA*34] =  X[34+NA*10];
X[11+NA*34] =  X[34+NA*11];
X[12+NA*34] =  X[34+NA*12];
X[13+NA*34] =  X[34+NA*13];
X[14+NA*34] =  X[34+NA*14];
X[15+NA*34] =  X[34+NA*15];
X[16+NA*34] = -X[34+NA*16];
X[17+NA*34] = -X[34+NA*17];
X[18+NA*34] = -X[34+NA*18];
X[19+NA*34] = -X[34+NA*19];
X[20+NA*34] = -X[34+NA*20];
X[21+NA*34] = -X[34+NA*21];
X[22+NA*34] = -X[34+NA*22];
X[23+NA*34] = -X[34+NA*23];
X[24+NA*34] = -X[34+NA*24];
X[25+NA*34] =  X[34+NA*25];
X[26+NA*34] =  X[34+NA*26];
X[27+NA*34] =  X[34+NA*27];
X[28+NA*34] =  X[34+NA*28];
X[29+NA*34] =  X[34+NA*29];
X[30+NA*34] =  X[34+NA*30];
X[31+NA*34] =  X[34+NA*31];
X[32+NA*34] =  X[34+NA*32];
X[33+NA*34] =  X[34+NA*33];
X[34+NA*34] = -O[10]*W[34]*W[34]-O[9]*(W[34+NA*2]*W[34+NA*2]+W[34+NA*3]*W[34+NA*3])-O[8]*(W[34+NA*7]*W[34+NA*7]+W[34+NA*8]*W[34+NA*8])-O[7]*(W[34+NA*14]*W[34+NA*14]+W[34+NA*15]*W[34+NA*15])-O[6]*(W[34+NA*23]*W[34+NA*23]+W[34+NA*24]*W[34+NA*24])-O[5];
X[35+NA*34] = -O[10]*W[35]*W[34]-O[9]*(W[35+NA*2]*W[34+NA*2]+W[35+NA*3]*W[34+NA*3])-O[8]*(W[35+NA*7]*W[34+NA*7]+W[35+NA*8]*W[34+NA*8])-O[7]*(W[35+NA*14]*W[34+NA*14]+W[35+NA*15]*W[34+NA*15])-O[6]*(W[35+NA*23]*W[34+NA*23]+W[35+NA*24]*W[34+NA*24]);
X[NA*35] = -X[35];
X[1+NA*35] =  X[35+NA];
X[2+NA*35] =  X[35+NA*2];
X[3+NA*35] =  X[35+NA*3];
X[4+NA*35] = -X[35+NA*4];
X[5+NA*35] = -X[35+NA*5];
X[6+NA*35] = -X[35+NA*6];
X[7+NA*35] = -X[35+NA*7];
X[8+NA*35] = -X[35+NA*8];
X[9+NA*35] =  X[35+NA*9];
X[10+NA*35] =  X[35+NA*10];
X[11+NA*35] =  X[35+NA*11];
X[12+NA*35] =  X[35+NA*12];
X[13+NA*35] =  X[35+NA*13];
X[14+NA*35] =  X[35+NA*14];
X[15+NA*35] =  X[35+NA*15];
X[16+NA*35] = -X[35+NA*16];
X[17+NA*35] = -X[35+NA*17];
X[18+NA*35] = -X[35+NA*18];
X[19+NA*35] = -X[35+NA*19];
X[20+NA*35] = -X[35+NA*20];
X[21+NA*35] = -X[35+NA*21];
X[22+NA*35] = -X[35+NA*22];
X[23+NA*35] = -X[35+NA*23];
X[24+NA*35] = -X[35+NA*24];
X[25+NA*35] =  X[35+NA*25];
X[26+NA*35] =  X[35+NA*26];
X[27+NA*35] =  X[35+NA*27];
X[28+NA*35] =  X[35+NA*28];
X[29+NA*35] =  X[35+NA*29];
X[30+NA*35] =  X[35+NA*30];
X[31+NA*35] =  X[35+NA*31];
X[32+NA*35] =  X[35+NA*32];
X[33+NA*35] =  X[35+NA*33];
X[34+NA*35] =  X[35+NA*34];
X[35+NA*35] = -O[10]*W[35]*W[35]-O[9]*(W[35+NA*2]*W[35+NA*2]+W[35+NA*3]*W[35+NA*3])-O[8]*(W[35+NA*7]*W[35+NA*7]+W[35+NA*8]*W[35+NA*8])-O[7]*(W[35+NA*14]*W[35+NA*14]+W[35+NA*15]*W[35+NA*15])-O[6]*(W[35+NA*23]*W[35+NA*23]+W[35+NA*24]*W[35+NA*24])-O[5];
}

inline void ExpHobMat_SS( double const *__restrict__ /* W */, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
}

inline void ExpHobMat_PS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
}

inline void ExpHobMat_PP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[3];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<4>(W,o,X);
}

inline void ExpHobMat_DS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
}

inline void ExpHobMat_DP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[4];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<9>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<9>(W,o,X);
}

inline void ExpHobMat_DD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[5];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<9>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<9>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<9>(W,o,X);
}

inline void ExpHobMat_FS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
}

inline void ExpHobMat_FP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[5];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<16>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<16>(W,o,X);
}

void ExpHobMat_FD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[6];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<16>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<16>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<16>(W,o,X);
}

void ExpHobMat_FF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[7];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<16>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<16>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<16>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<16>(W,o,X);
}

inline void ExpHobMat_GS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
}

void ExpHobMat_GP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[6];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<25>(W,o,X);
}

void ExpHobMat_GD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[7];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<25>(W,o,X);
}

void ExpHobMat_GF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[8];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 6.095238095238095e-02*O[5];
   o[6] = 4.063492063492063e-02*O[6];
   o[7] = 8.126984126984127e-02*O[7];
   ExpHobMatBlk_GF<25>(W,o,X);
}

void ExpHobMat_GG( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[9];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<25>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<25>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 6.095238095238095e-02*O[5];
   o[6] = 4.063492063492063e-02*O[6];
   o[7] = 8.126984126984127e-02*O[7];
   ExpHobMatBlk_GF<25>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 4.353741496598639e-02*O[5];
   o[6] = 1.741496598639456e-02*O[6];
   o[7] = 1.160997732426304e-02*O[7];
   o[8] = 2.321995464852608e-02*O[8];
   ExpHobMatBlk_GG<25>(W,o,X);
}

void ExpHobMat_HS( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
}

void ExpHobMat_HP( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[7];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 6.772486772486773e-02*O[6];
   ExpHobMatBlk_HP<36>(W,o,X);
}

void ExpHobMat_HD( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[8];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 6.772486772486773e-02*O[6];
   ExpHobMatBlk_HP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 2.257495590828924e-02*O[6];
   o[7] = 4.514991181657849e-02*O[7];
   ExpHobMatBlk_HD<36>(W,o,X);
}

void ExpHobMat_HF( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[9];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 6.772486772486773e-02*O[6];
   ExpHobMatBlk_HP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 2.257495590828924e-02*O[6];
   o[7] = 4.514991181657849e-02*O[7];
   ExpHobMatBlk_HD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 6.095238095238095e-02*O[5];
   o[6] = 4.063492063492063e-02*O[6];
   o[7] = 8.126984126984127e-02*O[7];
   ExpHobMatBlk_GF<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 1.354497354497355e-02*O[6];
   o[7] = 9.029982363315696e-03*O[7];
   o[8] = 1.805996472663139e-02*O[8];
   ExpHobMatBlk_HF<36>(W,o,X);
}

void ExpHobMat_HG( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[10];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 6.772486772486773e-02*O[6];
   ExpHobMatBlk_HP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 2.257495590828924e-02*O[6];
   o[7] = 4.514991181657849e-02*O[7];
   ExpHobMatBlk_HD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 6.095238095238095e-02*O[5];
   o[6] = 4.063492063492063e-02*O[6];
   o[7] = 8.126984126984127e-02*O[7];
   ExpHobMatBlk_GF<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 1.354497354497355e-02*O[6];
   o[7] = 9.029982363315696e-03*O[7];
   o[8] = 1.805996472663139e-02*O[8];
   ExpHobMatBlk_HF<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 4.353741496598639e-02*O[5];
   o[6] = 1.741496598639456e-02*O[6];
   o[7] = 1.160997732426304e-02*O[7];
   o[8] = 2.321995464852608e-02*O[8];
   ExpHobMatBlk_GG<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 9.674981103552532e-03*O[6];
   o[7] = 3.869992441421013e-03*O[7];
   o[8] = 2.579994960947342e-03*O[8];
   o[9] = 5.159989921894684e-03*O[9];
   ExpHobMatBlk_HG<36>(W,o,X);
}

void ExpHobMat_HH( double const *__restrict__ W, double const *__restrict__ O, double *__restrict__ X)
{
   double o[11];
   X[0] = O[0];
   double t = 2.000000000000000e+00*O[1];
   X[1] = t*W[1];
   X[2] = t*W[2];
   X[3] = t*W[3];
   t = 1.333333333333333e+00*O[2];
   X[4] = t*W[4];
   X[5] = t*W[5];
   X[6] = t*W[6];
   X[7] = t*W[7];
   X[8] = t*W[8];
   t = 5.333333333333333e-01*O[3];
   X[9] = t*W[9];
   X[10] = t*W[10];
   X[11] = t*W[11];
   X[12] = t*W[12];
   X[13] = t*W[13];
   X[14] = t*W[14];
   X[15] = t*W[15];
   t = 1.523809523809524e-01*O[4];
   X[16] = t*W[16];
   X[17] = t*W[17];
   X[18] = t*W[18];
   X[19] = t*W[19];
   X[20] = t*W[20];
   X[21] = t*W[21];
   X[22] = t*W[22];
   X[23] = t*W[23];
   X[24] = t*W[24];
   t = 3.386243386243386e-02*O[5];
   X[25] = t*W[25];
   X[26] = t*W[26];
   X[27] = t*W[27];
   X[28] = t*W[28];
   X[29] = t*W[29];
   X[30] = t*W[30];
   X[31] = t*W[31];
   X[32] = t*W[32];
   X[33] = t*W[33];
   X[34] = t*W[34];
   X[35] = t*W[35];
   o[1] = 2.000000000000000e+00*O[1];
   o[2] = 4.000000000000000e+00*O[2];
   ExpHobMatBlk_PP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 2.666666666666667e+00*O[3];
   ExpHobMatBlk_DP<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 1.066666666666667e+00*O[4];
   ExpHobMatBlk_FP<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 3.047619047619048e-01*O[5];
   ExpHobMatBlk_GP<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 6.772486772486773e-02*O[6];
   ExpHobMatBlk_HP<36>(W,o,X);
   o[2] = 1.333333333333333e+00*O[2];
   o[3] = 8.888888888888888e-01*O[3];
   o[4] = 1.777777777777778e+00*O[4];
   ExpHobMatBlk_DD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 3.555555555555556e-01*O[4];
   o[5] = 7.111111111111111e-01*O[5];
   ExpHobMatBlk_FD<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 1.015873015873016e-01*O[5];
   o[6] = 2.031746031746032e-01*O[6];
   ExpHobMatBlk_GD<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 2.257495590828924e-02*O[6];
   o[7] = 4.514991181657849e-02*O[7];
   ExpHobMatBlk_HD<36>(W,o,X);
   o[3] = 5.333333333333333e-01*O[3];
   o[4] = 2.133333333333333e-01*O[4];
   o[5] = 1.422222222222222e-01*O[5];
   o[6] = 2.844444444444444e-01*O[6];
   ExpHobMatBlk_FF<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 6.095238095238095e-02*O[5];
   o[6] = 4.063492063492063e-02*O[6];
   o[7] = 8.126984126984127e-02*O[7];
   ExpHobMatBlk_GF<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 1.354497354497355e-02*O[6];
   o[7] = 9.029982363315696e-03*O[7];
   o[8] = 1.805996472663139e-02*O[8];
   ExpHobMatBlk_HF<36>(W,o,X);
   o[4] = 1.523809523809524e-01*O[4];
   o[5] = 4.353741496598639e-02*O[5];
   o[6] = 1.741496598639456e-02*O[6];
   o[7] = 1.160997732426304e-02*O[7];
   o[8] = 2.321995464852608e-02*O[8];
   ExpHobMatBlk_GG<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 9.674981103552532e-03*O[6];
   o[7] = 3.869992441421013e-03*O[7];
   o[8] = 2.579994960947342e-03*O[8];
   o[9] = 5.159989921894684e-03*O[9];
   ExpHobMatBlk_HG<36>(W,o,X);
   o[5] = 3.386243386243386e-02*O[5];
   o[6] = 7.524985302763081e-03*O[6];
   o[7] = 2.149995800789452e-03*O[7];
   o[8] = 8.599983203157807e-04*O[8];
   o[9] = 5.733322135438538e-04*O[9];
   o[10] = 1.146664427087708e-03*O[10];
   ExpHobMatBlk_HH<36>(W,o,X);
}

template <int NA>
inline void ExpHobGrdBlk_SS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0] = tcrd[0]*X[0];
G[1] = tcrd[1]*X[0];
G[2] = tcrd[2]*X[0];
}

template <int NA>
inline void ExpHobGrdBlk_PS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[3] = tcrd[0]*X[1];
G[4] = tcrd[1]*X[1];
G[5] = tcrd[2]*X[1] + (2.000000000000000e+00*X[0]);
G[6] = tcrd[0]*X[2] + (2.000000000000000e+00*X[0]);
G[7] = tcrd[1]*X[2];
G[8] = tcrd[2]*X[2];
G[9] = tcrd[0]*X[3];
G[10] = tcrd[1]*X[3] + (2.000000000000000e+00*X[0]);
G[11] = tcrd[2]*X[3];
}

template <int NA>
inline void ExpHobGrdBlk_PP( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0+NA*3] = -G[3];
G[1+NA*3] = -G[4];
G[2+NA*3] = -G[5];
G[3+NA*3] = tcrd[0]*X[1+NA];
G[4+NA*3] = tcrd[1]*X[1+NA];
G[5+NA*3] = tcrd[2]*X[1+NA] + (-4.000000000000000e+00*X[1]);
G[6+NA*3] = tcrd[0]*X[2+NA] + (-2.000000000000000e+00*X[1]);
G[7+NA*3] = tcrd[1]*X[2+NA];
G[8+NA*3] = tcrd[2]*X[2+NA] + (-2.000000000000000e+00*X[2]);
G[9+NA*3] = tcrd[0]*X[3+NA];
G[10+NA*3] = tcrd[1]*X[3+NA] + (-2.000000000000000e+00*X[1]);
G[11+NA*3] = tcrd[2]*X[3+NA] + (-2.000000000000000e+00*X[3]);
G[0+NA*6] = -G[6];
G[1+NA*6] = -G[7];
G[2+NA*6] = -G[8];
G[3+NA*6] =  G[6+NA*3];
G[4+NA*6] =  G[7+NA*3];
G[5+NA*6] =  G[8+NA*3];
G[3+NA*6] =  G[6+NA*3];
G[4+NA*6] =  G[7+NA*3];
G[5+NA*6] =  G[8+NA*3];
G[6+NA*6] = tcrd[0]*X[2+NA*2] + (-4.000000000000000e+00*X[2]);
G[7+NA*6] = tcrd[1]*X[2+NA*2];
G[8+NA*6] = tcrd[2]*X[2+NA*2];
G[9+NA*6] = tcrd[0]*X[3+NA*2] + (-2.000000000000000e+00*X[3]);
G[10+NA*6] = tcrd[1]*X[3+NA*2] + (-2.000000000000000e+00*X[2]);
G[11+NA*6] = tcrd[2]*X[3+NA*2];
G[0+NA*9] = -G[9];
G[1+NA*9] = -G[10];
G[2+NA*9] = -G[11];
G[3+NA*9] =  G[9+NA*3];
G[4+NA*9] =  G[10+NA*3];
G[5+NA*9] =  G[11+NA*3];
G[3+NA*9] =  G[9+NA*3];
G[4+NA*9] =  G[10+NA*3];
G[5+NA*9] =  G[11+NA*3];
G[6+NA*9] =  G[9+NA*6];
G[7+NA*9] =  G[10+NA*6];
G[8+NA*9] =  G[11+NA*6];
G[6+NA*9] =  G[9+NA*6];
G[7+NA*9] =  G[10+NA*6];
G[8+NA*9] =  G[11+NA*6];
G[9+NA*9] = tcrd[0]*X[3+NA*3];
G[10+NA*9] = tcrd[1]*X[3+NA*3] + (-4.000000000000000e+00*X[3]);
G[11+NA*9] = tcrd[2]*X[3+NA*3];
}

template <int NA>
inline void ExpHobGrdBlk_DS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[12] = tcrd[0]*X[4] + (-6.666666666666666e-01*X[2]);
G[13] = tcrd[1]*X[4] + (-6.666666666666666e-01*X[3]);
G[14] = tcrd[2]*X[4] + (1.333333333333333e+00*X[1]);
G[15] = tcrd[0]*X[5] + (1.154700538379251e+00*X[1]);
G[16] = tcrd[1]*X[5];
G[17] = tcrd[2]*X[5] + (1.154700538379251e+00*X[2]);
G[18] = tcrd[0]*X[6];
G[19] = tcrd[1]*X[6] + (1.154700538379251e+00*X[1]);
G[20] = tcrd[2]*X[6] + (1.154700538379251e+00*X[3]);
G[21] = tcrd[0]*X[7] + (1.154700538379251e+00*X[2]);
G[22] = tcrd[1]*X[7] + (-1.154700538379251e+00*X[3]);
G[23] = tcrd[2]*X[7];
G[24] = tcrd[0]*X[8] + (1.154700538379251e+00*X[3]);
G[25] = tcrd[1]*X[8] + (1.154700538379251e+00*X[2]);
G[26] = tcrd[2]*X[8];
}

template <int NA>
inline void ExpHobGrdBlk_DP( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[12+NA*3] = tcrd[0]*X[4+NA] + (-6.666666666666666e-01*X[2+NA]);
G[13+NA*3] = tcrd[1]*X[4+NA] + (-6.666666666666666e-01*X[3+NA]);
G[14+NA*3] = tcrd[2]*X[4+NA] + (1.333333333333333e+00*X[1+NA])+(-2.000000000000000e+00*X[4]);
G[15+NA*3] = tcrd[0]*X[5+NA] + (1.154700538379251e+00*X[1+NA]);
G[16+NA*3] = tcrd[1]*X[5+NA];
G[17+NA*3] = tcrd[2]*X[5+NA] + (1.154700538379251e+00*X[2+NA])+(-2.000000000000000e+00*X[5]);
G[18+NA*3] = tcrd[0]*X[6+NA];
G[19+NA*3] = tcrd[1]*X[6+NA] + (1.154700538379251e+00*X[1+NA]);
G[20+NA*3] = tcrd[2]*X[6+NA] + (1.154700538379251e+00*X[3+NA])+(-2.000000000000000e+00*X[6]);
G[21+NA*3] = tcrd[0]*X[7+NA] + (1.154700538379251e+00*X[2+NA]);
G[22+NA*3] = tcrd[1]*X[7+NA] + (-1.154700538379251e+00*X[3+NA]);
G[23+NA*3] = tcrd[2]*X[7+NA] + (-2.000000000000000e+00*X[7]);
G[24+NA*3] = tcrd[0]*X[8+NA] + (1.154700538379251e+00*X[3+NA]);
G[25+NA*3] = tcrd[1]*X[8+NA] + (1.154700538379251e+00*X[2+NA]);
G[26+NA*3] = tcrd[2]*X[8+NA] + (-2.000000000000000e+00*X[8]);
G[12+NA*6] = tcrd[0]*X[4+NA*2] + (-6.666666666666666e-01*X[2+NA*2])+(-2.000000000000000e+00*X[4]);
G[13+NA*6] = tcrd[1]*X[4+NA*2] + (-6.666666666666666e-01*X[3+NA*2]);
G[14+NA*6] = tcrd[2]*X[4+NA*2] + (1.333333333333333e+00*X[2+NA]);
G[15+NA*6] = tcrd[0]*X[5+NA*2] + (1.154700538379251e+00*X[2+NA])+(-2.000000000000000e+00*X[5]);
G[16+NA*6] = tcrd[1]*X[5+NA*2];
G[17+NA*6] = tcrd[2]*X[5+NA*2] + (1.154700538379251e+00*X[2+NA*2]);
G[18+NA*6] = tcrd[0]*X[6+NA*2] + (-2.000000000000000e+00*X[6]);
G[19+NA*6] = tcrd[1]*X[6+NA*2] + (1.154700538379251e+00*X[2+NA]);
G[20+NA*6] = tcrd[2]*X[6+NA*2] + (1.154700538379251e+00*X[3+NA*2]);
G[21+NA*6] = tcrd[0]*X[7+NA*2] + (1.154700538379251e+00*X[2+NA*2])+(-2.000000000000000e+00*X[7]);
G[22+NA*6] = tcrd[1]*X[7+NA*2] + (-1.154700538379251e+00*X[3+NA*2]);
G[23+NA*6] = tcrd[2]*X[7+NA*2];
G[24+NA*6] = tcrd[0]*X[8+NA*2] + (1.154700538379251e+00*X[3+NA*2])+(-2.000000000000000e+00*X[8]);
G[25+NA*6] = tcrd[1]*X[8+NA*2] + (1.154700538379251e+00*X[2+NA*2]);
G[26+NA*6] = tcrd[2]*X[8+NA*2];
G[12+NA*9] = tcrd[0]*X[4+NA*3] + (-6.666666666666666e-01*X[3+NA*2]);
G[13+NA*9] = tcrd[1]*X[4+NA*3] + (-6.666666666666666e-01*X[3+NA*3])+(-2.000000000000000e+00*X[4]);
G[14+NA*9] = tcrd[2]*X[4+NA*3] + (1.333333333333333e+00*X[3+NA]);
G[15+NA*9] = tcrd[0]*X[5+NA*3] + (1.154700538379251e+00*X[3+NA]);
G[16+NA*9] = tcrd[1]*X[5+NA*3] + (-2.000000000000000e+00*X[5]);
G[17+NA*9] = tcrd[2]*X[5+NA*3] + (1.154700538379251e+00*X[3+NA*2]);
G[18+NA*9] = tcrd[0]*X[6+NA*3];
G[19+NA*9] = tcrd[1]*X[6+NA*3] + (1.154700538379251e+00*X[3+NA])+(-2.000000000000000e+00*X[6]);
G[20+NA*9] = tcrd[2]*X[6+NA*3] + (1.154700538379251e+00*X[3+NA*3]);
G[21+NA*9] = tcrd[0]*X[7+NA*3] + (1.154700538379251e+00*X[3+NA*2]);
G[22+NA*9] = tcrd[1]*X[7+NA*3] + (-1.154700538379251e+00*X[3+NA*3])+(-2.000000000000000e+00*X[7]);
G[23+NA*9] = tcrd[2]*X[7+NA*3];
G[24+NA*9] = tcrd[0]*X[8+NA*3] + (1.154700538379251e+00*X[3+NA*3]);
G[25+NA*9] = tcrd[1]*X[8+NA*3] + (1.154700538379251e+00*X[3+NA*2])+(-2.000000000000000e+00*X[8]);
G[26+NA*9] = tcrd[2]*X[8+NA*3];
}

template <int NA>
inline void ExpHobGrdBlk_DD( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0+NA*12] =  G[12];
G[1+NA*12] =  G[13];
G[2+NA*12] =  G[14];
G[3+NA*12] = -G[12+NA*3];
G[4+NA*12] = -G[13+NA*3];
G[5+NA*12] = -G[14+NA*3];
G[6+NA*12] = -G[12+NA*6];
G[7+NA*12] = -G[13+NA*6];
G[8+NA*12] = -G[14+NA*6];
G[9+NA*12] = -G[12+NA*9];
G[10+NA*12] = -G[13+NA*9];
G[11+NA*12] = -G[14+NA*9];
G[12+NA*12] = tcrd[0]*X[4+NA*4] + (1.333333333333333e+00*X[4+NA*2]);
G[13+NA*12] = tcrd[1]*X[4+NA*4] + (1.333333333333333e+00*X[4+NA*3]);
G[14+NA*12] = tcrd[2]*X[4+NA*4] + (-2.666666666666667e+00*X[4+NA]);
G[15+NA*12] = tcrd[0]*X[5+NA*4] + (-1.154700538379251e+00*X[4+NA])+(6.666666666666666e-01*X[5+NA*2]);
G[16+NA*12] = tcrd[1]*X[5+NA*4] + (6.666666666666666e-01*X[5+NA*3]);
G[17+NA*12] = tcrd[2]*X[5+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(-1.333333333333333e+00*X[5+NA]);
G[18+NA*12] = tcrd[0]*X[6+NA*4] + (6.666666666666666e-01*X[6+NA*2]);
G[19+NA*12] = tcrd[1]*X[6+NA*4] + (-1.154700538379251e+00*X[4+NA])+(6.666666666666666e-01*X[6+NA*3]);
G[20+NA*12] = tcrd[2]*X[6+NA*4] + (-1.154700538379251e+00*X[4+NA*3])+(-1.333333333333333e+00*X[6+NA]);
G[21+NA*12] = tcrd[0]*X[7+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(6.666666666666666e-01*X[7+NA*2]);
G[22+NA*12] = tcrd[1]*X[7+NA*4] + (1.154700538379251e+00*X[4+NA*3])+(6.666666666666666e-01*X[7+NA*3]);
G[23+NA*12] = tcrd[2]*X[7+NA*4] + (-1.333333333333333e+00*X[7+NA]);
G[24+NA*12] = tcrd[0]*X[8+NA*4] + (-1.154700538379251e+00*X[4+NA*3])+(6.666666666666666e-01*X[8+NA*2]);
G[25+NA*12] = tcrd[1]*X[8+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(6.666666666666666e-01*X[8+NA*3]);
G[26+NA*12] = tcrd[2]*X[8+NA*4] + (-1.333333333333333e+00*X[8+NA]);
G[0+NA*15] =  G[15];
G[1+NA*15] =  G[16];
G[2+NA*15] =  G[17];
G[3+NA*15] = -G[15+NA*3];
G[4+NA*15] = -G[16+NA*3];
G[5+NA*15] = -G[17+NA*3];
G[6+NA*15] = -G[15+NA*6];
G[7+NA*15] = -G[16+NA*6];
G[8+NA*15] = -G[17+NA*6];
G[9+NA*15] = -G[15+NA*9];
G[10+NA*15] = -G[16+NA*9];
G[11+NA*15] = -G[17+NA*9];
G[12+NA*15] =  G[15+NA*12];
G[13+NA*15] =  G[16+NA*12];
G[14+NA*15] =  G[17+NA*12];
G[12+NA*15] =  G[15+NA*12];
G[13+NA*15] =  G[16+NA*12];
G[14+NA*15] =  G[17+NA*12];
G[15+NA*15] = tcrd[0]*X[5+NA*5] + (-2.309401076758503e+00*X[5+NA]);
G[16+NA*15] = tcrd[1]*X[5+NA*5];
G[17+NA*15] = tcrd[2]*X[5+NA*5] + (-2.309401076758503e+00*X[5+NA*2]);
G[18+NA*15] = tcrd[0]*X[6+NA*5] + (-1.154700538379251e+00*X[6+NA]);
G[19+NA*15] = tcrd[1]*X[6+NA*5] + (-1.154700538379251e+00*X[5+NA]);
G[20+NA*15] = tcrd[2]*X[6+NA*5] + (-1.154700538379251e+00*X[5+NA*3])+(-1.154700538379251e+00*X[6+NA*2]);
G[21+NA*15] = tcrd[0]*X[7+NA*5] + (-1.154700538379251e+00*X[5+NA*2])+(-1.154700538379251e+00*X[7+NA]);
G[22+NA*15] = tcrd[1]*X[7+NA*5] + (1.154700538379251e+00*X[5+NA*3]);
G[23+NA*15] = tcrd[2]*X[7+NA*5] + (-1.154700538379251e+00*X[7+NA*2]);
G[24+NA*15] = tcrd[0]*X[8+NA*5] + (-1.154700538379251e+00*X[5+NA*3])+(-1.154700538379251e+00*X[8+NA]);
G[25+NA*15] = tcrd[1]*X[8+NA*5] + (-1.154700538379251e+00*X[5+NA*2]);
G[26+NA*15] = tcrd[2]*X[8+NA*5] + (-1.154700538379251e+00*X[8+NA*2]);
G[0+NA*18] =  G[18];
G[1+NA*18] =  G[19];
G[2+NA*18] =  G[20];
G[3+NA*18] = -G[18+NA*3];
G[4+NA*18] = -G[19+NA*3];
G[5+NA*18] = -G[20+NA*3];
G[6+NA*18] = -G[18+NA*6];
G[7+NA*18] = -G[19+NA*6];
G[8+NA*18] = -G[20+NA*6];
G[9+NA*18] = -G[18+NA*9];
G[10+NA*18] = -G[19+NA*9];
G[11+NA*18] = -G[20+NA*9];
G[12+NA*18] =  G[18+NA*12];
G[13+NA*18] =  G[19+NA*12];
G[14+NA*18] =  G[20+NA*12];
G[12+NA*18] =  G[18+NA*12];
G[13+NA*18] =  G[19+NA*12];
G[14+NA*18] =  G[20+NA*12];
G[15+NA*18] =  G[18+NA*15];
G[16+NA*18] =  G[19+NA*15];
G[17+NA*18] =  G[20+NA*15];
G[15+NA*18] =  G[18+NA*15];
G[16+NA*18] =  G[19+NA*15];
G[17+NA*18] =  G[20+NA*15];
G[18+NA*18] = tcrd[0]*X[6+NA*6];
G[19+NA*18] = tcrd[1]*X[6+NA*6] + (-2.309401076758503e+00*X[6+NA]);
G[20+NA*18] = tcrd[2]*X[6+NA*6] + (-2.309401076758503e+00*X[6+NA*3]);
G[21+NA*18] = tcrd[0]*X[7+NA*6] + (-1.154700538379251e+00*X[6+NA*2]);
G[22+NA*18] = tcrd[1]*X[7+NA*6] + (1.154700538379251e+00*X[6+NA*3])+(-1.154700538379251e+00*X[7+NA]);
G[23+NA*18] = tcrd[2]*X[7+NA*6] + (-1.154700538379251e+00*X[7+NA*3]);
G[24+NA*18] = tcrd[0]*X[8+NA*6] + (-1.154700538379251e+00*X[6+NA*3]);
G[25+NA*18] = tcrd[1]*X[8+NA*6] + (-1.154700538379251e+00*X[6+NA*2])+(-1.154700538379251e+00*X[8+NA]);
G[26+NA*18] = tcrd[2]*X[8+NA*6] + (-1.154700538379251e+00*X[8+NA*3]);
G[0+NA*21] =  G[21];
G[1+NA*21] =  G[22];
G[2+NA*21] =  G[23];
G[3+NA*21] = -G[21+NA*3];
G[4+NA*21] = -G[22+NA*3];
G[5+NA*21] = -G[23+NA*3];
G[6+NA*21] = -G[21+NA*6];
G[7+NA*21] = -G[22+NA*6];
G[8+NA*21] = -G[23+NA*6];
G[9+NA*21] = -G[21+NA*9];
G[10+NA*21] = -G[22+NA*9];
G[11+NA*21] = -G[23+NA*9];
G[12+NA*21] =  G[21+NA*12];
G[13+NA*21] =  G[22+NA*12];
G[14+NA*21] =  G[23+NA*12];
G[12+NA*21] =  G[21+NA*12];
G[13+NA*21] =  G[22+NA*12];
G[14+NA*21] =  G[23+NA*12];
G[15+NA*21] =  G[21+NA*15];
G[16+NA*21] =  G[22+NA*15];
G[17+NA*21] =  G[23+NA*15];
G[15+NA*21] =  G[21+NA*15];
G[16+NA*21] =  G[22+NA*15];
G[17+NA*21] =  G[23+NA*15];
G[18+NA*21] =  G[21+NA*18];
G[19+NA*21] =  G[22+NA*18];
G[20+NA*21] =  G[23+NA*18];
G[18+NA*21] =  G[21+NA*18];
G[19+NA*21] =  G[22+NA*18];
G[20+NA*21] =  G[23+NA*18];
G[21+NA*21] = tcrd[0]*X[7+NA*7] + (-2.309401076758503e+00*X[7+NA*2]);
G[22+NA*21] = tcrd[1]*X[7+NA*7] + (2.309401076758503e+00*X[7+NA*3]);
G[23+NA*21] = tcrd[2]*X[7+NA*7];
G[24+NA*21] = tcrd[0]*X[8+NA*7] + (-1.154700538379251e+00*X[7+NA*3])+(-1.154700538379251e+00*X[8+NA*2]);
G[25+NA*21] = tcrd[1]*X[8+NA*7] + (-1.154700538379251e+00*X[7+NA*2])+(1.154700538379251e+00*X[8+NA*3]);
G[26+NA*21] = tcrd[2]*X[8+NA*7];
G[0+NA*24] =  G[24];
G[1+NA*24] =  G[25];
G[2+NA*24] =  G[26];
G[3+NA*24] = -G[24+NA*3];
G[4+NA*24] = -G[25+NA*3];
G[5+NA*24] = -G[26+NA*3];
G[6+NA*24] = -G[24+NA*6];
G[7+NA*24] = -G[25+NA*6];
G[8+NA*24] = -G[26+NA*6];
G[9+NA*24] = -G[24+NA*9];
G[10+NA*24] = -G[25+NA*9];
G[11+NA*24] = -G[26+NA*9];
G[12+NA*24] =  G[24+NA*12];
G[13+NA*24] =  G[25+NA*12];
G[14+NA*24] =  G[26+NA*12];
G[12+NA*24] =  G[24+NA*12];
G[13+NA*24] =  G[25+NA*12];
G[14+NA*24] =  G[26+NA*12];
G[15+NA*24] =  G[24+NA*15];
G[16+NA*24] =  G[25+NA*15];
G[17+NA*24] =  G[26+NA*15];
G[15+NA*24] =  G[24+NA*15];
G[16+NA*24] =  G[25+NA*15];
G[17+NA*24] =  G[26+NA*15];
G[18+NA*24] =  G[24+NA*18];
G[19+NA*24] =  G[25+NA*18];
G[20+NA*24] =  G[26+NA*18];
G[18+NA*24] =  G[24+NA*18];
G[19+NA*24] =  G[25+NA*18];
G[20+NA*24] =  G[26+NA*18];
G[21+NA*24] =  G[24+NA*21];
G[22+NA*24] =  G[25+NA*21];
G[23+NA*24] =  G[26+NA*21];
G[21+NA*24] =  G[24+NA*21];
G[22+NA*24] =  G[25+NA*21];
G[23+NA*24] =  G[26+NA*21];
G[24+NA*24] = tcrd[0]*X[8+NA*8] + (-2.309401076758503e+00*X[8+NA*3]);
G[25+NA*24] = tcrd[1]*X[8+NA*8] + (-2.309401076758503e+00*X[8+NA*2]);
G[26+NA*24] = tcrd[2]*X[8+NA*8];
}

template <int NA>
inline void ExpHobGrdBlk_FS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[27] = tcrd[0]*X[9] + (-6.928203230275510e-01*X[5]);
G[28] = tcrd[1]*X[9] + (-6.928203230275510e-01*X[6]);
G[29] = tcrd[2]*X[9] + (1.200000000000000e+00*X[4]);
G[30] = tcrd[0]*X[10] + (9.797958971132712e-01*X[4])+(-2.828427124746190e-01*X[7]);
G[31] = tcrd[1]*X[10] + (-2.828427124746190e-01*X[8]);
G[32] = tcrd[2]*X[10] + (1.131370849898476e+00*X[5]);
G[33] = tcrd[0]*X[11] + (-2.828427124746190e-01*X[8]);
G[34] = tcrd[1]*X[11] + (9.797958971132712e-01*X[4])+(2.828427124746190e-01*X[7]);
G[35] = tcrd[2]*X[11] + (1.131370849898476e+00*X[6]);
G[36] = tcrd[0]*X[12] + (8.944271909999160e-01*X[5]);
G[37] = tcrd[1]*X[12] + (-8.944271909999160e-01*X[6]);
G[38] = tcrd[2]*X[12] + (8.944271909999160e-01*X[7]);
G[39] = tcrd[0]*X[13] + (8.944271909999160e-01*X[6]);
G[40] = tcrd[1]*X[13] + (8.944271909999160e-01*X[5]);
G[41] = tcrd[2]*X[13] + (8.944271909999160e-01*X[8]);
G[42] = tcrd[0]*X[14] + (1.095445115010332e+00*X[7]);
G[43] = tcrd[1]*X[14] + (-1.095445115010332e+00*X[8]);
G[44] = tcrd[2]*X[14];
G[45] = tcrd[0]*X[15] + (1.095445115010332e+00*X[8]);
G[46] = tcrd[1]*X[15] + (1.095445115010332e+00*X[7]);
G[47] = tcrd[2]*X[15];
}

template <int NA>
inline void ExpHobGrdBlk_FP( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[27+NA*3] = tcrd[0]*X[9+NA] + (-6.928203230275510e-01*X[5+NA]);
G[28+NA*3] = tcrd[1]*X[9+NA] + (-6.928203230275510e-01*X[6+NA]);
G[29+NA*3] = tcrd[2]*X[9+NA] + (1.200000000000000e+00*X[4+NA])+(-2.000000000000000e+00*X[9]);
G[30+NA*3] = tcrd[0]*X[10+NA] + (9.797958971132712e-01*X[4+NA])+(-2.828427124746190e-01*X[7+NA]);
G[31+NA*3] = tcrd[1]*X[10+NA] + (-2.828427124746190e-01*X[8+NA]);
G[32+NA*3] = tcrd[2]*X[10+NA] + (1.131370849898476e+00*X[5+NA])+(-2.000000000000000e+00*X[10]);
G[33+NA*3] = tcrd[0]*X[11+NA] + (-2.828427124746190e-01*X[8+NA]);
G[34+NA*3] = tcrd[1]*X[11+NA] + (9.797958971132712e-01*X[4+NA])+(2.828427124746190e-01*X[7+NA]);
G[35+NA*3] = tcrd[2]*X[11+NA] + (1.131370849898476e+00*X[6+NA])+(-2.000000000000000e+00*X[11]);
G[36+NA*3] = tcrd[0]*X[12+NA] + (8.944271909999160e-01*X[5+NA]);
G[37+NA*3] = tcrd[1]*X[12+NA] + (-8.944271909999160e-01*X[6+NA]);
G[38+NA*3] = tcrd[2]*X[12+NA] + (8.944271909999160e-01*X[7+NA])+(-2.000000000000000e+00*X[12]);
G[39+NA*3] = tcrd[0]*X[13+NA] + (8.944271909999160e-01*X[6+NA]);
G[40+NA*3] = tcrd[1]*X[13+NA] + (8.944271909999160e-01*X[5+NA]);
G[41+NA*3] = tcrd[2]*X[13+NA] + (8.944271909999160e-01*X[8+NA])+(-2.000000000000000e+00*X[13]);
G[42+NA*3] = tcrd[0]*X[14+NA] + (1.095445115010332e+00*X[7+NA]);
G[43+NA*3] = tcrd[1]*X[14+NA] + (-1.095445115010332e+00*X[8+NA]);
G[44+NA*3] = tcrd[2]*X[14+NA] + (-2.000000000000000e+00*X[14]);
G[45+NA*3] = tcrd[0]*X[15+NA] + (1.095445115010332e+00*X[8+NA]);
G[46+NA*3] = tcrd[1]*X[15+NA] + (1.095445115010332e+00*X[7+NA]);
G[47+NA*3] = tcrd[2]*X[15+NA] + (-2.000000000000000e+00*X[15]);
G[27+NA*6] = tcrd[0]*X[9+NA*2] + (-6.928203230275510e-01*X[5+NA*2])+(-2.000000000000000e+00*X[9]);
G[28+NA*6] = tcrd[1]*X[9+NA*2] + (-6.928203230275510e-01*X[6+NA*2]);
G[29+NA*6] = tcrd[2]*X[9+NA*2] + (1.200000000000000e+00*X[4+NA*2]);
G[30+NA*6] = tcrd[0]*X[10+NA*2] + (9.797958971132712e-01*X[4+NA*2])+(-2.828427124746190e-01*X[7+NA*2])+(-2.000000000000000e+00*X[10]);
G[31+NA*6] = tcrd[1]*X[10+NA*2] + (-2.828427124746190e-01*X[8+NA*2]);
G[32+NA*6] = tcrd[2]*X[10+NA*2] + (1.131370849898476e+00*X[5+NA*2]);
G[33+NA*6] = tcrd[0]*X[11+NA*2] + (-2.828427124746190e-01*X[8+NA*2])+(-2.000000000000000e+00*X[11]);
G[34+NA*6] = tcrd[1]*X[11+NA*2] + (9.797958971132712e-01*X[4+NA*2])+(2.828427124746190e-01*X[7+NA*2]);
G[35+NA*6] = tcrd[2]*X[11+NA*2] + (1.131370849898476e+00*X[6+NA*2]);
G[36+NA*6] = tcrd[0]*X[12+NA*2] + (8.944271909999160e-01*X[5+NA*2])+(-2.000000000000000e+00*X[12]);
G[37+NA*6] = tcrd[1]*X[12+NA*2] + (-8.944271909999160e-01*X[6+NA*2]);
G[38+NA*6] = tcrd[2]*X[12+NA*2] + (8.944271909999160e-01*X[7+NA*2]);
G[39+NA*6] = tcrd[0]*X[13+NA*2] + (8.944271909999160e-01*X[6+NA*2])+(-2.000000000000000e+00*X[13]);
G[40+NA*6] = tcrd[1]*X[13+NA*2] + (8.944271909999160e-01*X[5+NA*2]);
G[41+NA*6] = tcrd[2]*X[13+NA*2] + (8.944271909999160e-01*X[8+NA*2]);
G[42+NA*6] = tcrd[0]*X[14+NA*2] + (1.095445115010332e+00*X[7+NA*2])+(-2.000000000000000e+00*X[14]);
G[43+NA*6] = tcrd[1]*X[14+NA*2] + (-1.095445115010332e+00*X[8+NA*2]);
G[44+NA*6] = tcrd[2]*X[14+NA*2];
G[45+NA*6] = tcrd[0]*X[15+NA*2] + (1.095445115010332e+00*X[8+NA*2])+(-2.000000000000000e+00*X[15]);
G[46+NA*6] = tcrd[1]*X[15+NA*2] + (1.095445115010332e+00*X[7+NA*2]);
G[47+NA*6] = tcrd[2]*X[15+NA*2];
G[27+NA*9] = tcrd[0]*X[9+NA*3] + (-6.928203230275510e-01*X[5+NA*3]);
G[28+NA*9] = tcrd[1]*X[9+NA*3] + (-6.928203230275510e-01*X[6+NA*3])+(-2.000000000000000e+00*X[9]);
G[29+NA*9] = tcrd[2]*X[9+NA*3] + (1.200000000000000e+00*X[4+NA*3]);
G[30+NA*9] = tcrd[0]*X[10+NA*3] + (9.797958971132712e-01*X[4+NA*3])+(-2.828427124746190e-01*X[7+NA*3]);
G[31+NA*9] = tcrd[1]*X[10+NA*3] + (-2.828427124746190e-01*X[8+NA*3])+(-2.000000000000000e+00*X[10]);
G[32+NA*9] = tcrd[2]*X[10+NA*3] + (1.131370849898476e+00*X[5+NA*3]);
G[33+NA*9] = tcrd[0]*X[11+NA*3] + (-2.828427124746190e-01*X[8+NA*3]);
G[34+NA*9] = tcrd[1]*X[11+NA*3] + (9.797958971132712e-01*X[4+NA*3])+(2.828427124746190e-01*X[7+NA*3])+(-2.000000000000000e+00*X[11]);
G[35+NA*9] = tcrd[2]*X[11+NA*3] + (1.131370849898476e+00*X[6+NA*3]);
G[36+NA*9] = tcrd[0]*X[12+NA*3] + (8.944271909999160e-01*X[5+NA*3]);
G[37+NA*9] = tcrd[1]*X[12+NA*3] + (-8.944271909999160e-01*X[6+NA*3])+(-2.000000000000000e+00*X[12]);
G[38+NA*9] = tcrd[2]*X[12+NA*3] + (8.944271909999160e-01*X[7+NA*3]);
G[39+NA*9] = tcrd[0]*X[13+NA*3] + (8.944271909999160e-01*X[6+NA*3]);
G[40+NA*9] = tcrd[1]*X[13+NA*3] + (8.944271909999160e-01*X[5+NA*3])+(-2.000000000000000e+00*X[13]);
G[41+NA*9] = tcrd[2]*X[13+NA*3] + (8.944271909999160e-01*X[8+NA*3]);
G[42+NA*9] = tcrd[0]*X[14+NA*3] + (1.095445115010332e+00*X[7+NA*3]);
G[43+NA*9] = tcrd[1]*X[14+NA*3] + (-1.095445115010332e+00*X[8+NA*3])+(-2.000000000000000e+00*X[14]);
G[44+NA*9] = tcrd[2]*X[14+NA*3];
G[45+NA*9] = tcrd[0]*X[15+NA*3] + (1.095445115010332e+00*X[8+NA*3]);
G[46+NA*9] = tcrd[1]*X[15+NA*3] + (1.095445115010332e+00*X[7+NA*3])+(-2.000000000000000e+00*X[15]);
G[47+NA*9] = tcrd[2]*X[15+NA*3];
}

template <int NA>
void ExpHobGrdBlk_FD( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[27+NA*12] = tcrd[0]*X[9+NA*4] + (-6.928203230275510e-01*X[5+NA*4])+(6.666666666666666e-01*X[9+NA*2]);
G[28+NA*12] = tcrd[1]*X[9+NA*4] + (-6.928203230275510e-01*X[6+NA*4])+(6.666666666666666e-01*X[9+NA*3]);
G[29+NA*12] = tcrd[2]*X[9+NA*4] + (1.200000000000000e+00*X[4+NA*4])+(-1.333333333333333e+00*X[9+NA]);
G[30+NA*12] = tcrd[0]*X[10+NA*4] + (9.797958971132712e-01*X[4+NA*4])+(-2.828427124746190e-01*X[7+NA*4])+(6.666666666666666e-01*X[10+NA*2]);
G[31+NA*12] = tcrd[1]*X[10+NA*4] + (-2.828427124746190e-01*X[8+NA*4])+(6.666666666666666e-01*X[10+NA*3]);
G[32+NA*12] = tcrd[2]*X[10+NA*4] + (1.131370849898476e+00*X[5+NA*4])+(-1.333333333333333e+00*X[10+NA]);
G[33+NA*12] = tcrd[0]*X[11+NA*4] + (-2.828427124746190e-01*X[8+NA*4])+(6.666666666666666e-01*X[11+NA*2]);
G[34+NA*12] = tcrd[1]*X[11+NA*4] + (9.797958971132712e-01*X[4+NA*4])+(2.828427124746190e-01*X[7+NA*4])+(6.666666666666666e-01*X[11+NA*3]);
G[35+NA*12] = tcrd[2]*X[11+NA*4] + (1.131370849898476e+00*X[6+NA*4])+(-1.333333333333333e+00*X[11+NA]);
G[36+NA*12] = tcrd[0]*X[12+NA*4] + (8.944271909999160e-01*X[5+NA*4])+(6.666666666666666e-01*X[12+NA*2]);
G[37+NA*12] = tcrd[1]*X[12+NA*4] + (-8.944271909999160e-01*X[6+NA*4])+(6.666666666666666e-01*X[12+NA*3]);
G[38+NA*12] = tcrd[2]*X[12+NA*4] + (8.944271909999160e-01*X[7+NA*4])+(-1.333333333333333e+00*X[12+NA]);
G[39+NA*12] = tcrd[0]*X[13+NA*4] + (8.944271909999160e-01*X[6+NA*4])+(6.666666666666666e-01*X[13+NA*2]);
G[40+NA*12] = tcrd[1]*X[13+NA*4] + (8.944271909999160e-01*X[5+NA*4])+(6.666666666666666e-01*X[13+NA*3]);
G[41+NA*12] = tcrd[2]*X[13+NA*4] + (8.944271909999160e-01*X[8+NA*4])+(-1.333333333333333e+00*X[13+NA]);
G[42+NA*12] = tcrd[0]*X[14+NA*4] + (1.095445115010332e+00*X[7+NA*4])+(6.666666666666666e-01*X[14+NA*2]);
G[43+NA*12] = tcrd[1]*X[14+NA*4] + (-1.095445115010332e+00*X[8+NA*4])+(6.666666666666666e-01*X[14+NA*3]);
G[44+NA*12] = tcrd[2]*X[14+NA*4] + (-1.333333333333333e+00*X[14+NA]);
G[45+NA*12] = tcrd[0]*X[15+NA*4] + (1.095445115010332e+00*X[8+NA*4])+(6.666666666666666e-01*X[15+NA*2]);
G[46+NA*12] = tcrd[1]*X[15+NA*4] + (1.095445115010332e+00*X[7+NA*4])+(6.666666666666666e-01*X[15+NA*3]);
G[47+NA*12] = tcrd[2]*X[15+NA*4] + (-1.333333333333333e+00*X[15+NA]);
G[27+NA*15] = tcrd[0]*X[9+NA*5] + (-6.928203230275510e-01*X[5+NA*5])+(-1.154700538379251e+00*X[9+NA]);
G[28+NA*15] = tcrd[1]*X[9+NA*5] + (-6.928203230275510e-01*X[6+NA*5]);
G[29+NA*15] = tcrd[2]*X[9+NA*5] + (1.200000000000000e+00*X[5+NA*4])+(-1.154700538379251e+00*X[9+NA*2]);
G[30+NA*15] = tcrd[0]*X[10+NA*5] + (9.797958971132712e-01*X[5+NA*4])+(-2.828427124746190e-01*X[7+NA*5])+(-1.154700538379251e+00*X[10+NA]);
G[31+NA*15] = tcrd[1]*X[10+NA*5] + (-2.828427124746190e-01*X[8+NA*5]);
G[32+NA*15] = tcrd[2]*X[10+NA*5] + (1.131370849898476e+00*X[5+NA*5])+(-1.154700538379251e+00*X[10+NA*2]);
G[33+NA*15] = tcrd[0]*X[11+NA*5] + (-2.828427124746190e-01*X[8+NA*5])+(-1.154700538379251e+00*X[11+NA]);
G[34+NA*15] = tcrd[1]*X[11+NA*5] + (9.797958971132712e-01*X[5+NA*4])+(2.828427124746190e-01*X[7+NA*5]);
G[35+NA*15] = tcrd[2]*X[11+NA*5] + (1.131370849898476e+00*X[6+NA*5])+(-1.154700538379251e+00*X[11+NA*2]);
G[36+NA*15] = tcrd[0]*X[12+NA*5] + (8.944271909999160e-01*X[5+NA*5])+(-1.154700538379251e+00*X[12+NA]);
G[37+NA*15] = tcrd[1]*X[12+NA*5] + (-8.944271909999160e-01*X[6+NA*5]);
G[38+NA*15] = tcrd[2]*X[12+NA*5] + (8.944271909999160e-01*X[7+NA*5])+(-1.154700538379251e+00*X[12+NA*2]);
G[39+NA*15] = tcrd[0]*X[13+NA*5] + (8.944271909999160e-01*X[6+NA*5])+(-1.154700538379251e+00*X[13+NA]);
G[40+NA*15] = tcrd[1]*X[13+NA*5] + (8.944271909999160e-01*X[5+NA*5]);
G[41+NA*15] = tcrd[2]*X[13+NA*5] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[13+NA*2]);
G[42+NA*15] = tcrd[0]*X[14+NA*5] + (1.095445115010332e+00*X[7+NA*5])+(-1.154700538379251e+00*X[14+NA]);
G[43+NA*15] = tcrd[1]*X[14+NA*5] + (-1.095445115010332e+00*X[8+NA*5]);
G[44+NA*15] = tcrd[2]*X[14+NA*5] + (-1.154700538379251e+00*X[14+NA*2]);
G[45+NA*15] = tcrd[0]*X[15+NA*5] + (1.095445115010332e+00*X[8+NA*5])+(-1.154700538379251e+00*X[15+NA]);
G[46+NA*15] = tcrd[1]*X[15+NA*5] + (1.095445115010332e+00*X[7+NA*5]);
G[47+NA*15] = tcrd[2]*X[15+NA*5] + (-1.154700538379251e+00*X[15+NA*2]);
G[27+NA*18] = tcrd[0]*X[9+NA*6] + (-6.928203230275510e-01*X[6+NA*5]);
G[28+NA*18] = tcrd[1]*X[9+NA*6] + (-6.928203230275510e-01*X[6+NA*6])+(-1.154700538379251e+00*X[9+NA]);
G[29+NA*18] = tcrd[2]*X[9+NA*6] + (1.200000000000000e+00*X[6+NA*4])+(-1.154700538379251e+00*X[9+NA*3]);
G[30+NA*18] = tcrd[0]*X[10+NA*6] + (9.797958971132712e-01*X[6+NA*4])+(-2.828427124746190e-01*X[7+NA*6]);
G[31+NA*18] = tcrd[1]*X[10+NA*6] + (-2.828427124746190e-01*X[8+NA*6])+(-1.154700538379251e+00*X[10+NA]);
G[32+NA*18] = tcrd[2]*X[10+NA*6] + (1.131370849898476e+00*X[6+NA*5])+(-1.154700538379251e+00*X[10+NA*3]);
G[33+NA*18] = tcrd[0]*X[11+NA*6] + (-2.828427124746190e-01*X[8+NA*6]);
G[34+NA*18] = tcrd[1]*X[11+NA*6] + (9.797958971132712e-01*X[6+NA*4])+(2.828427124746190e-01*X[7+NA*6])+(-1.154700538379251e+00*X[11+NA]);
G[35+NA*18] = tcrd[2]*X[11+NA*6] + (1.131370849898476e+00*X[6+NA*6])+(-1.154700538379251e+00*X[11+NA*3]);
G[36+NA*18] = tcrd[0]*X[12+NA*6] + (8.944271909999160e-01*X[6+NA*5]);
G[37+NA*18] = tcrd[1]*X[12+NA*6] + (-8.944271909999160e-01*X[6+NA*6])+(-1.154700538379251e+00*X[12+NA]);
G[38+NA*18] = tcrd[2]*X[12+NA*6] + (8.944271909999160e-01*X[7+NA*6])+(-1.154700538379251e+00*X[12+NA*3]);
G[39+NA*18] = tcrd[0]*X[13+NA*6] + (8.944271909999160e-01*X[6+NA*6]);
G[40+NA*18] = tcrd[1]*X[13+NA*6] + (8.944271909999160e-01*X[6+NA*5])+(-1.154700538379251e+00*X[13+NA]);
G[41+NA*18] = tcrd[2]*X[13+NA*6] + (8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[13+NA*3]);
G[42+NA*18] = tcrd[0]*X[14+NA*6] + (1.095445115010332e+00*X[7+NA*6]);
G[43+NA*18] = tcrd[1]*X[14+NA*6] + (-1.095445115010332e+00*X[8+NA*6])+(-1.154700538379251e+00*X[14+NA]);
G[44+NA*18] = tcrd[2]*X[14+NA*6] + (-1.154700538379251e+00*X[14+NA*3]);
G[45+NA*18] = tcrd[0]*X[15+NA*6] + (1.095445115010332e+00*X[8+NA*6]);
G[46+NA*18] = tcrd[1]*X[15+NA*6] + (1.095445115010332e+00*X[7+NA*6])+(-1.154700538379251e+00*X[15+NA]);
G[47+NA*18] = tcrd[2]*X[15+NA*6] + (-1.154700538379251e+00*X[15+NA*3]);
G[27+NA*21] = tcrd[0]*X[9+NA*7] + (-6.928203230275510e-01*X[7+NA*5])+(-1.154700538379251e+00*X[9+NA*2]);
G[28+NA*21] = tcrd[1]*X[9+NA*7] + (-6.928203230275510e-01*X[7+NA*6])+(1.154700538379251e+00*X[9+NA*3]);
G[29+NA*21] = tcrd[2]*X[9+NA*7] + (1.200000000000000e+00*X[7+NA*4]);
G[30+NA*21] = tcrd[0]*X[10+NA*7] + (9.797958971132712e-01*X[7+NA*4])+(-2.828427124746190e-01*X[7+NA*7])+(-1.154700538379251e+00*X[10+NA*2]);
G[31+NA*21] = tcrd[1]*X[10+NA*7] + (-2.828427124746190e-01*X[8+NA*7])+(1.154700538379251e+00*X[10+NA*3]);
G[32+NA*21] = tcrd[2]*X[10+NA*7] + (1.131370849898476e+00*X[7+NA*5]);
G[33+NA*21] = tcrd[0]*X[11+NA*7] + (-2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[11+NA*2]);
G[34+NA*21] = tcrd[1]*X[11+NA*7] + (9.797958971132712e-01*X[7+NA*4])+(2.828427124746190e-01*X[7+NA*7])+(1.154700538379251e+00*X[11+NA*3]);
G[35+NA*21] = tcrd[2]*X[11+NA*7] + (1.131370849898476e+00*X[7+NA*6]);
G[36+NA*21] = tcrd[0]*X[12+NA*7] + (8.944271909999160e-01*X[7+NA*5])+(-1.154700538379251e+00*X[12+NA*2]);
G[37+NA*21] = tcrd[1]*X[12+NA*7] + (-8.944271909999160e-01*X[7+NA*6])+(1.154700538379251e+00*X[12+NA*3]);
G[38+NA*21] = tcrd[2]*X[12+NA*7] + (8.944271909999160e-01*X[7+NA*7]);
G[39+NA*21] = tcrd[0]*X[13+NA*7] + (8.944271909999160e-01*X[7+NA*6])+(-1.154700538379251e+00*X[13+NA*2]);
G[40+NA*21] = tcrd[1]*X[13+NA*7] + (8.944271909999160e-01*X[7+NA*5])+(1.154700538379251e+00*X[13+NA*3]);
G[41+NA*21] = tcrd[2]*X[13+NA*7] + (8.944271909999160e-01*X[8+NA*7]);
G[42+NA*21] = tcrd[0]*X[14+NA*7] + (1.095445115010332e+00*X[7+NA*7])+(-1.154700538379251e+00*X[14+NA*2]);
G[43+NA*21] = tcrd[1]*X[14+NA*7] + (-1.095445115010332e+00*X[8+NA*7])+(1.154700538379251e+00*X[14+NA*3]);
G[44+NA*21] = tcrd[2]*X[14+NA*7];
G[45+NA*21] = tcrd[0]*X[15+NA*7] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[15+NA*2]);
G[46+NA*21] = tcrd[1]*X[15+NA*7] + (1.095445115010332e+00*X[7+NA*7])+(1.154700538379251e+00*X[15+NA*3]);
G[47+NA*21] = tcrd[2]*X[15+NA*7];
G[27+NA*24] = tcrd[0]*X[9+NA*8] + (-6.928203230275510e-01*X[8+NA*5])+(-1.154700538379251e+00*X[9+NA*3]);
G[28+NA*24] = tcrd[1]*X[9+NA*8] + (-6.928203230275510e-01*X[8+NA*6])+(-1.154700538379251e+00*X[9+NA*2]);
G[29+NA*24] = tcrd[2]*X[9+NA*8] + (1.200000000000000e+00*X[8+NA*4]);
G[30+NA*24] = tcrd[0]*X[10+NA*8] + (9.797958971132712e-01*X[8+NA*4])+(-2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[10+NA*3]);
G[31+NA*24] = tcrd[1]*X[10+NA*8] + (-2.828427124746190e-01*X[8+NA*8])+(-1.154700538379251e+00*X[10+NA*2]);
G[32+NA*24] = tcrd[2]*X[10+NA*8] + (1.131370849898476e+00*X[8+NA*5]);
G[33+NA*24] = tcrd[0]*X[11+NA*8] + (-2.828427124746190e-01*X[8+NA*8])+(-1.154700538379251e+00*X[11+NA*3]);
G[34+NA*24] = tcrd[1]*X[11+NA*8] + (9.797958971132712e-01*X[8+NA*4])+(2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[11+NA*2]);
G[35+NA*24] = tcrd[2]*X[11+NA*8] + (1.131370849898476e+00*X[8+NA*6]);
G[36+NA*24] = tcrd[0]*X[12+NA*8] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[12+NA*3]);
G[37+NA*24] = tcrd[1]*X[12+NA*8] + (-8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[12+NA*2]);
G[38+NA*24] = tcrd[2]*X[12+NA*8] + (8.944271909999160e-01*X[8+NA*7]);
G[39+NA*24] = tcrd[0]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[13+NA*3]);
G[40+NA*24] = tcrd[1]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[13+NA*2]);
G[41+NA*24] = tcrd[2]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*8]);
G[42+NA*24] = tcrd[0]*X[14+NA*8] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[14+NA*3]);
G[43+NA*24] = tcrd[1]*X[14+NA*8] + (-1.095445115010332e+00*X[8+NA*8])+(-1.154700538379251e+00*X[14+NA*2]);
G[44+NA*24] = tcrd[2]*X[14+NA*8];
G[45+NA*24] = tcrd[0]*X[15+NA*8] + (1.095445115010332e+00*X[8+NA*8])+(-1.154700538379251e+00*X[15+NA*3]);
G[46+NA*24] = tcrd[1]*X[15+NA*8] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[15+NA*2]);
G[47+NA*24] = tcrd[2]*X[15+NA*8];
}

template <int NA>
void ExpHobGrdBlk_FF( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0+NA*27] = -G[27];
G[1+NA*27] = -G[28];
G[2+NA*27] = -G[29];
G[3+NA*27] =  G[27+NA*3];
G[4+NA*27] =  G[28+NA*3];
G[5+NA*27] =  G[29+NA*3];
G[6+NA*27] =  G[27+NA*6];
G[7+NA*27] =  G[28+NA*6];
G[8+NA*27] =  G[29+NA*6];
G[9+NA*27] =  G[27+NA*9];
G[10+NA*27] =  G[28+NA*9];
G[11+NA*27] =  G[29+NA*9];
G[12+NA*27] = -G[27+NA*12];
G[13+NA*27] = -G[28+NA*12];
G[14+NA*27] = -G[29+NA*12];
G[15+NA*27] = -G[27+NA*15];
G[16+NA*27] = -G[28+NA*15];
G[17+NA*27] = -G[29+NA*15];
G[18+NA*27] = -G[27+NA*18];
G[19+NA*27] = -G[28+NA*18];
G[20+NA*27] = -G[29+NA*18];
G[21+NA*27] = -G[27+NA*21];
G[22+NA*27] = -G[28+NA*21];
G[23+NA*27] = -G[29+NA*21];
G[24+NA*27] = -G[27+NA*24];
G[25+NA*27] = -G[28+NA*24];
G[26+NA*27] = -G[29+NA*24];
G[27+NA*27] = tcrd[0]*X[9+NA*9] + (1.385640646055102e+00*X[9+NA*5]);
G[28+NA*27] = tcrd[1]*X[9+NA*9] + (1.385640646055102e+00*X[9+NA*6]);
G[29+NA*27] = tcrd[2]*X[9+NA*9] + (-2.400000000000000e+00*X[9+NA*4]);
G[30+NA*27] = tcrd[0]*X[10+NA*9] + (-9.797958971132712e-01*X[9+NA*4])+(2.828427124746190e-01*X[9+NA*7])+(6.928203230275510e-01*X[10+NA*5]);
G[31+NA*27] = tcrd[1]*X[10+NA*9] + (2.828427124746190e-01*X[9+NA*8])+(6.928203230275510e-01*X[10+NA*6]);
G[32+NA*27] = tcrd[2]*X[10+NA*9] + (-1.131370849898476e+00*X[9+NA*5])+(-1.200000000000000e+00*X[10+NA*4]);
G[33+NA*27] = tcrd[0]*X[11+NA*9] + (2.828427124746190e-01*X[9+NA*8])+(6.928203230275510e-01*X[11+NA*5]);
G[34+NA*27] = tcrd[1]*X[11+NA*9] + (-9.797958971132712e-01*X[9+NA*4])+(-2.828427124746190e-01*X[9+NA*7])+(6.928203230275510e-01*X[11+NA*6]);
G[35+NA*27] = tcrd[2]*X[11+NA*9] + (-1.131370849898476e+00*X[9+NA*6])+(-1.200000000000000e+00*X[11+NA*4]);
G[36+NA*27] = tcrd[0]*X[12+NA*9] + (-8.944271909999160e-01*X[9+NA*5])+(6.928203230275510e-01*X[12+NA*5]);
G[37+NA*27] = tcrd[1]*X[12+NA*9] + (8.944271909999160e-01*X[9+NA*6])+(6.928203230275510e-01*X[12+NA*6]);
G[38+NA*27] = tcrd[2]*X[12+NA*9] + (-8.944271909999160e-01*X[9+NA*7])+(-1.200000000000000e+00*X[12+NA*4]);
G[39+NA*27] = tcrd[0]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*6])+(6.928203230275510e-01*X[13+NA*5]);
G[40+NA*27] = tcrd[1]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*5])+(6.928203230275510e-01*X[13+NA*6]);
G[41+NA*27] = tcrd[2]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*8])+(-1.200000000000000e+00*X[13+NA*4]);
G[42+NA*27] = tcrd[0]*X[14+NA*9] + (-1.095445115010332e+00*X[9+NA*7])+(6.928203230275510e-01*X[14+NA*5]);
G[43+NA*27] = tcrd[1]*X[14+NA*9] + (1.095445115010332e+00*X[9+NA*8])+(6.928203230275510e-01*X[14+NA*6]);
G[44+NA*27] = tcrd[2]*X[14+NA*9] + (-1.200000000000000e+00*X[14+NA*4]);
G[45+NA*27] = tcrd[0]*X[15+NA*9] + (-1.095445115010332e+00*X[9+NA*8])+(6.928203230275510e-01*X[15+NA*5]);
G[46+NA*27] = tcrd[1]*X[15+NA*9] + (-1.095445115010332e+00*X[9+NA*7])+(6.928203230275510e-01*X[15+NA*6]);
G[47+NA*27] = tcrd[2]*X[15+NA*9] + (-1.200000000000000e+00*X[15+NA*4]);
G[0+NA*30] = -G[30];
G[1+NA*30] = -G[31];
G[2+NA*30] = -G[32];
G[3+NA*30] =  G[30+NA*3];
G[4+NA*30] =  G[31+NA*3];
G[5+NA*30] =  G[32+NA*3];
G[6+NA*30] =  G[30+NA*6];
G[7+NA*30] =  G[31+NA*6];
G[8+NA*30] =  G[32+NA*6];
G[9+NA*30] =  G[30+NA*9];
G[10+NA*30] =  G[31+NA*9];
G[11+NA*30] =  G[32+NA*9];
G[12+NA*30] = -G[30+NA*12];
G[13+NA*30] = -G[31+NA*12];
G[14+NA*30] = -G[32+NA*12];
G[15+NA*30] = -G[30+NA*15];
G[16+NA*30] = -G[31+NA*15];
G[17+NA*30] = -G[32+NA*15];
G[18+NA*30] = -G[30+NA*18];
G[19+NA*30] = -G[31+NA*18];
G[20+NA*30] = -G[32+NA*18];
G[21+NA*30] = -G[30+NA*21];
G[22+NA*30] = -G[31+NA*21];
G[23+NA*30] = -G[32+NA*21];
G[24+NA*30] = -G[30+NA*24];
G[25+NA*30] = -G[31+NA*24];
G[26+NA*30] = -G[32+NA*24];
G[27+NA*30] =  G[30+NA*27];
G[28+NA*30] =  G[31+NA*27];
G[29+NA*30] =  G[32+NA*27];
G[27+NA*30] =  G[30+NA*27];
G[28+NA*30] =  G[31+NA*27];
G[29+NA*30] =  G[32+NA*27];
G[30+NA*30] = tcrd[0]*X[10+NA*10] + (-1.959591794226542e+00*X[10+NA*4])+(5.656854249492380e-01*X[10+NA*7]);
G[31+NA*30] = tcrd[1]*X[10+NA*10] + (5.656854249492380e-01*X[10+NA*8]);
G[32+NA*30] = tcrd[2]*X[10+NA*10] + (-2.262741699796952e+00*X[10+NA*5]);
G[33+NA*30] = tcrd[0]*X[11+NA*10] + (2.828427124746190e-01*X[10+NA*8])+(-9.797958971132712e-01*X[11+NA*4])+(2.828427124746190e-01*X[11+NA*7]);
G[34+NA*30] = tcrd[1]*X[11+NA*10] + (-9.797958971132712e-01*X[10+NA*4])+(-2.828427124746190e-01*X[10+NA*7])+(2.828427124746190e-01*X[11+NA*8]);
G[35+NA*30] = tcrd[2]*X[11+NA*10] + (-1.131370849898476e+00*X[10+NA*6])+(-1.131370849898476e+00*X[11+NA*5]);
G[36+NA*30] = tcrd[0]*X[12+NA*10] + (-8.944271909999160e-01*X[10+NA*5])+(-9.797958971132712e-01*X[12+NA*4])+(2.828427124746190e-01*X[12+NA*7]);
G[37+NA*30] = tcrd[1]*X[12+NA*10] + (8.944271909999160e-01*X[10+NA*6])+(2.828427124746190e-01*X[12+NA*8]);
G[38+NA*30] = tcrd[2]*X[12+NA*10] + (-8.944271909999160e-01*X[10+NA*7])+(-1.131370849898476e+00*X[12+NA*5]);
G[39+NA*30] = tcrd[0]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*6])+(-9.797958971132712e-01*X[13+NA*4])+(2.828427124746190e-01*X[13+NA*7]);
G[40+NA*30] = tcrd[1]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*5])+(2.828427124746190e-01*X[13+NA*8]);
G[41+NA*30] = tcrd[2]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*8])+(-1.131370849898476e+00*X[13+NA*5]);
G[42+NA*30] = tcrd[0]*X[14+NA*10] + (-1.095445115010332e+00*X[10+NA*7])+(-9.797958971132712e-01*X[14+NA*4])+(2.828427124746190e-01*X[14+NA*7]);
G[43+NA*30] = tcrd[1]*X[14+NA*10] + (1.095445115010332e+00*X[10+NA*8])+(2.828427124746190e-01*X[14+NA*8]);
G[44+NA*30] = tcrd[2]*X[14+NA*10] + (-1.131370849898476e+00*X[14+NA*5]);
G[45+NA*30] = tcrd[0]*X[15+NA*10] + (-1.095445115010332e+00*X[10+NA*8])+(-9.797958971132712e-01*X[15+NA*4])+(2.828427124746190e-01*X[15+NA*7]);
G[46+NA*30] = tcrd[1]*X[15+NA*10] + (-1.095445115010332e+00*X[10+NA*7])+(2.828427124746190e-01*X[15+NA*8]);
G[47+NA*30] = tcrd[2]*X[15+NA*10] + (-1.131370849898476e+00*X[15+NA*5]);
G[0+NA*33] = -G[33];
G[1+NA*33] = -G[34];
G[2+NA*33] = -G[35];
G[3+NA*33] =  G[33+NA*3];
G[4+NA*33] =  G[34+NA*3];
G[5+NA*33] =  G[35+NA*3];
G[6+NA*33] =  G[33+NA*6];
G[7+NA*33] =  G[34+NA*6];
G[8+NA*33] =  G[35+NA*6];
G[9+NA*33] =  G[33+NA*9];
G[10+NA*33] =  G[34+NA*9];
G[11+NA*33] =  G[35+NA*9];
G[12+NA*33] = -G[33+NA*12];
G[13+NA*33] = -G[34+NA*12];
G[14+NA*33] = -G[35+NA*12];
G[15+NA*33] = -G[33+NA*15];
G[16+NA*33] = -G[34+NA*15];
G[17+NA*33] = -G[35+NA*15];
G[18+NA*33] = -G[33+NA*18];
G[19+NA*33] = -G[34+NA*18];
G[20+NA*33] = -G[35+NA*18];
G[21+NA*33] = -G[33+NA*21];
G[22+NA*33] = -G[34+NA*21];
G[23+NA*33] = -G[35+NA*21];
G[24+NA*33] = -G[33+NA*24];
G[25+NA*33] = -G[34+NA*24];
G[26+NA*33] = -G[35+NA*24];
G[27+NA*33] =  G[33+NA*27];
G[28+NA*33] =  G[34+NA*27];
G[29+NA*33] =  G[35+NA*27];
G[27+NA*33] =  G[33+NA*27];
G[28+NA*33] =  G[34+NA*27];
G[29+NA*33] =  G[35+NA*27];
G[30+NA*33] =  G[33+NA*30];
G[31+NA*33] =  G[34+NA*30];
G[32+NA*33] =  G[35+NA*30];
G[30+NA*33] =  G[33+NA*30];
G[31+NA*33] =  G[34+NA*30];
G[32+NA*33] =  G[35+NA*30];
G[33+NA*33] = tcrd[0]*X[11+NA*11] + (5.656854249492380e-01*X[11+NA*8]);
G[34+NA*33] = tcrd[1]*X[11+NA*11] + (-1.959591794226542e+00*X[11+NA*4])+(-5.656854249492380e-01*X[11+NA*7]);
G[35+NA*33] = tcrd[2]*X[11+NA*11] + (-2.262741699796952e+00*X[11+NA*6]);
G[36+NA*33] = tcrd[0]*X[12+NA*11] + (-8.944271909999160e-01*X[11+NA*5])+(2.828427124746190e-01*X[12+NA*8]);
G[37+NA*33] = tcrd[1]*X[12+NA*11] + (8.944271909999160e-01*X[11+NA*6])+(-9.797958971132712e-01*X[12+NA*4])+(-2.828427124746190e-01*X[12+NA*7]);
G[38+NA*33] = tcrd[2]*X[12+NA*11] + (-8.944271909999160e-01*X[11+NA*7])+(-1.131370849898476e+00*X[12+NA*6]);
G[39+NA*33] = tcrd[0]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*6])+(2.828427124746190e-01*X[13+NA*8]);
G[40+NA*33] = tcrd[1]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*5])+(-9.797958971132712e-01*X[13+NA*4])+(-2.828427124746190e-01*X[13+NA*7]);
G[41+NA*33] = tcrd[2]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*8])+(-1.131370849898476e+00*X[13+NA*6]);
G[42+NA*33] = tcrd[0]*X[14+NA*11] + (-1.095445115010332e+00*X[11+NA*7])+(2.828427124746190e-01*X[14+NA*8]);
G[43+NA*33] = tcrd[1]*X[14+NA*11] + (1.095445115010332e+00*X[11+NA*8])+(-9.797958971132712e-01*X[14+NA*4])+(-2.828427124746190e-01*X[14+NA*7]);
G[44+NA*33] = tcrd[2]*X[14+NA*11] + (-1.131370849898476e+00*X[14+NA*6]);
G[45+NA*33] = tcrd[0]*X[15+NA*11] + (-1.095445115010332e+00*X[11+NA*8])+(2.828427124746190e-01*X[15+NA*8]);
G[46+NA*33] = tcrd[1]*X[15+NA*11] + (-1.095445115010332e+00*X[11+NA*7])+(-9.797958971132712e-01*X[15+NA*4])+(-2.828427124746190e-01*X[15+NA*7]);
G[47+NA*33] = tcrd[2]*X[15+NA*11] + (-1.131370849898476e+00*X[15+NA*6]);
G[0+NA*36] = -G[36];
G[1+NA*36] = -G[37];
G[2+NA*36] = -G[38];
G[3+NA*36] =  G[36+NA*3];
G[4+NA*36] =  G[37+NA*3];
G[5+NA*36] =  G[38+NA*3];
G[6+NA*36] =  G[36+NA*6];
G[7+NA*36] =  G[37+NA*6];
G[8+NA*36] =  G[38+NA*6];
G[9+NA*36] =  G[36+NA*9];
G[10+NA*36] =  G[37+NA*9];
G[11+NA*36] =  G[38+NA*9];
G[12+NA*36] = -G[36+NA*12];
G[13+NA*36] = -G[37+NA*12];
G[14+NA*36] = -G[38+NA*12];
G[15+NA*36] = -G[36+NA*15];
G[16+NA*36] = -G[37+NA*15];
G[17+NA*36] = -G[38+NA*15];
G[18+NA*36] = -G[36+NA*18];
G[19+NA*36] = -G[37+NA*18];
G[20+NA*36] = -G[38+NA*18];
G[21+NA*36] = -G[36+NA*21];
G[22+NA*36] = -G[37+NA*21];
G[23+NA*36] = -G[38+NA*21];
G[24+NA*36] = -G[36+NA*24];
G[25+NA*36] = -G[37+NA*24];
G[26+NA*36] = -G[38+NA*24];
G[27+NA*36] =  G[36+NA*27];
G[28+NA*36] =  G[37+NA*27];
G[29+NA*36] =  G[38+NA*27];
G[27+NA*36] =  G[36+NA*27];
G[28+NA*36] =  G[37+NA*27];
G[29+NA*36] =  G[38+NA*27];
G[30+NA*36] =  G[36+NA*30];
G[31+NA*36] =  G[37+NA*30];
G[32+NA*36] =  G[38+NA*30];
G[30+NA*36] =  G[36+NA*30];
G[31+NA*36] =  G[37+NA*30];
G[32+NA*36] =  G[38+NA*30];
G[33+NA*36] =  G[36+NA*33];
G[34+NA*36] =  G[37+NA*33];
G[35+NA*36] =  G[38+NA*33];
G[33+NA*36] =  G[36+NA*33];
G[34+NA*36] =  G[37+NA*33];
G[35+NA*36] =  G[38+NA*33];
G[36+NA*36] = tcrd[0]*X[12+NA*12] + (-1.788854381999832e+00*X[12+NA*5]);
G[37+NA*36] = tcrd[1]*X[12+NA*12] + (1.788854381999832e+00*X[12+NA*6]);
G[38+NA*36] = tcrd[2]*X[12+NA*12] + (-1.788854381999832e+00*X[12+NA*7]);
G[39+NA*36] = tcrd[0]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*6])+(-8.944271909999160e-01*X[13+NA*5]);
G[40+NA*36] = tcrd[1]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*5])+(8.944271909999160e-01*X[13+NA*6]);
G[41+NA*36] = tcrd[2]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*8])+(-8.944271909999160e-01*X[13+NA*7]);
G[42+NA*36] = tcrd[0]*X[14+NA*12] + (-1.095445115010332e+00*X[12+NA*7])+(-8.944271909999160e-01*X[14+NA*5]);
G[43+NA*36] = tcrd[1]*X[14+NA*12] + (1.095445115010332e+00*X[12+NA*8])+(8.944271909999160e-01*X[14+NA*6]);
G[44+NA*36] = tcrd[2]*X[14+NA*12] + (-8.944271909999160e-01*X[14+NA*7]);
G[45+NA*36] = tcrd[0]*X[15+NA*12] + (-1.095445115010332e+00*X[12+NA*8])+(-8.944271909999160e-01*X[15+NA*5]);
G[46+NA*36] = tcrd[1]*X[15+NA*12] + (-1.095445115010332e+00*X[12+NA*7])+(8.944271909999160e-01*X[15+NA*6]);
G[47+NA*36] = tcrd[2]*X[15+NA*12] + (-8.944271909999160e-01*X[15+NA*7]);
G[0+NA*39] = -G[39];
G[1+NA*39] = -G[40];
G[2+NA*39] = -G[41];
G[3+NA*39] =  G[39+NA*3];
G[4+NA*39] =  G[40+NA*3];
G[5+NA*39] =  G[41+NA*3];
G[6+NA*39] =  G[39+NA*6];
G[7+NA*39] =  G[40+NA*6];
G[8+NA*39] =  G[41+NA*6];
G[9+NA*39] =  G[39+NA*9];
G[10+NA*39] =  G[40+NA*9];
G[11+NA*39] =  G[41+NA*9];
G[12+NA*39] = -G[39+NA*12];
G[13+NA*39] = -G[40+NA*12];
G[14+NA*39] = -G[41+NA*12];
G[15+NA*39] = -G[39+NA*15];
G[16+NA*39] = -G[40+NA*15];
G[17+NA*39] = -G[41+NA*15];
G[18+NA*39] = -G[39+NA*18];
G[19+NA*39] = -G[40+NA*18];
G[20+NA*39] = -G[41+NA*18];
G[21+NA*39] = -G[39+NA*21];
G[22+NA*39] = -G[40+NA*21];
G[23+NA*39] = -G[41+NA*21];
G[24+NA*39] = -G[39+NA*24];
G[25+NA*39] = -G[40+NA*24];
G[26+NA*39] = -G[41+NA*24];
G[27+NA*39] =  G[39+NA*27];
G[28+NA*39] =  G[40+NA*27];
G[29+NA*39] =  G[41+NA*27];
G[27+NA*39] =  G[39+NA*27];
G[28+NA*39] =  G[40+NA*27];
G[29+NA*39] =  G[41+NA*27];
G[30+NA*39] =  G[39+NA*30];
G[31+NA*39] =  G[40+NA*30];
G[32+NA*39] =  G[41+NA*30];
G[30+NA*39] =  G[39+NA*30];
G[31+NA*39] =  G[40+NA*30];
G[32+NA*39] =  G[41+NA*30];
G[33+NA*39] =  G[39+NA*33];
G[34+NA*39] =  G[40+NA*33];
G[35+NA*39] =  G[41+NA*33];
G[33+NA*39] =  G[39+NA*33];
G[34+NA*39] =  G[40+NA*33];
G[35+NA*39] =  G[41+NA*33];
G[36+NA*39] =  G[39+NA*36];
G[37+NA*39] =  G[40+NA*36];
G[38+NA*39] =  G[41+NA*36];
G[36+NA*39] =  G[39+NA*36];
G[37+NA*39] =  G[40+NA*36];
G[38+NA*39] =  G[41+NA*36];
G[39+NA*39] = tcrd[0]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*6]);
G[40+NA*39] = tcrd[1]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*5]);
G[41+NA*39] = tcrd[2]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*8]);
G[42+NA*39] = tcrd[0]*X[14+NA*13] + (-1.095445115010332e+00*X[13+NA*7])+(-8.944271909999160e-01*X[14+NA*6]);
G[43+NA*39] = tcrd[1]*X[14+NA*13] + (1.095445115010332e+00*X[13+NA*8])+(-8.944271909999160e-01*X[14+NA*5]);
G[44+NA*39] = tcrd[2]*X[14+NA*13] + (-8.944271909999160e-01*X[14+NA*8]);
G[45+NA*39] = tcrd[0]*X[15+NA*13] + (-1.095445115010332e+00*X[13+NA*8])+(-8.944271909999160e-01*X[15+NA*6]);
G[46+NA*39] = tcrd[1]*X[15+NA*13] + (-1.095445115010332e+00*X[13+NA*7])+(-8.944271909999160e-01*X[15+NA*5]);
G[47+NA*39] = tcrd[2]*X[15+NA*13] + (-8.944271909999160e-01*X[15+NA*8]);
G[0+NA*42] = -G[42];
G[1+NA*42] = -G[43];
G[2+NA*42] = -G[44];
G[3+NA*42] =  G[42+NA*3];
G[4+NA*42] =  G[43+NA*3];
G[5+NA*42] =  G[44+NA*3];
G[6+NA*42] =  G[42+NA*6];
G[7+NA*42] =  G[43+NA*6];
G[8+NA*42] =  G[44+NA*6];
G[9+NA*42] =  G[42+NA*9];
G[10+NA*42] =  G[43+NA*9];
G[11+NA*42] =  G[44+NA*9];
G[12+NA*42] = -G[42+NA*12];
G[13+NA*42] = -G[43+NA*12];
G[14+NA*42] = -G[44+NA*12];
G[15+NA*42] = -G[42+NA*15];
G[16+NA*42] = -G[43+NA*15];
G[17+NA*42] = -G[44+NA*15];
G[18+NA*42] = -G[42+NA*18];
G[19+NA*42] = -G[43+NA*18];
G[20+NA*42] = -G[44+NA*18];
G[21+NA*42] = -G[42+NA*21];
G[22+NA*42] = -G[43+NA*21];
G[23+NA*42] = -G[44+NA*21];
G[24+NA*42] = -G[42+NA*24];
G[25+NA*42] = -G[43+NA*24];
G[26+NA*42] = -G[44+NA*24];
G[27+NA*42] =  G[42+NA*27];
G[28+NA*42] =  G[43+NA*27];
G[29+NA*42] =  G[44+NA*27];
G[27+NA*42] =  G[42+NA*27];
G[28+NA*42] =  G[43+NA*27];
G[29+NA*42] =  G[44+NA*27];
G[30+NA*42] =  G[42+NA*30];
G[31+NA*42] =  G[43+NA*30];
G[32+NA*42] =  G[44+NA*30];
G[30+NA*42] =  G[42+NA*30];
G[31+NA*42] =  G[43+NA*30];
G[32+NA*42] =  G[44+NA*30];
G[33+NA*42] =  G[42+NA*33];
G[34+NA*42] =  G[43+NA*33];
G[35+NA*42] =  G[44+NA*33];
G[33+NA*42] =  G[42+NA*33];
G[34+NA*42] =  G[43+NA*33];
G[35+NA*42] =  G[44+NA*33];
G[36+NA*42] =  G[42+NA*36];
G[37+NA*42] =  G[43+NA*36];
G[38+NA*42] =  G[44+NA*36];
G[36+NA*42] =  G[42+NA*36];
G[37+NA*42] =  G[43+NA*36];
G[38+NA*42] =  G[44+NA*36];
G[39+NA*42] =  G[42+NA*39];
G[40+NA*42] =  G[43+NA*39];
G[41+NA*42] =  G[44+NA*39];
G[39+NA*42] =  G[42+NA*39];
G[40+NA*42] =  G[43+NA*39];
G[41+NA*42] =  G[44+NA*39];
G[42+NA*42] = tcrd[0]*X[14+NA*14] + (-2.190890230020665e+00*X[14+NA*7]);
G[43+NA*42] = tcrd[1]*X[14+NA*14] + (2.190890230020665e+00*X[14+NA*8]);
G[44+NA*42] = tcrd[2]*X[14+NA*14];
G[45+NA*42] = tcrd[0]*X[15+NA*14] + (-1.095445115010332e+00*X[14+NA*8])+(-1.095445115010332e+00*X[15+NA*7]);
G[46+NA*42] = tcrd[1]*X[15+NA*14] + (-1.095445115010332e+00*X[14+NA*7])+(1.095445115010332e+00*X[15+NA*8]);
G[47+NA*42] = tcrd[2]*X[15+NA*14];
G[0+NA*45] = -G[45];
G[1+NA*45] = -G[46];
G[2+NA*45] = -G[47];
G[3+NA*45] =  G[45+NA*3];
G[4+NA*45] =  G[46+NA*3];
G[5+NA*45] =  G[47+NA*3];
G[6+NA*45] =  G[45+NA*6];
G[7+NA*45] =  G[46+NA*6];
G[8+NA*45] =  G[47+NA*6];
G[9+NA*45] =  G[45+NA*9];
G[10+NA*45] =  G[46+NA*9];
G[11+NA*45] =  G[47+NA*9];
G[12+NA*45] = -G[45+NA*12];
G[13+NA*45] = -G[46+NA*12];
G[14+NA*45] = -G[47+NA*12];
G[15+NA*45] = -G[45+NA*15];
G[16+NA*45] = -G[46+NA*15];
G[17+NA*45] = -G[47+NA*15];
G[18+NA*45] = -G[45+NA*18];
G[19+NA*45] = -G[46+NA*18];
G[20+NA*45] = -G[47+NA*18];
G[21+NA*45] = -G[45+NA*21];
G[22+NA*45] = -G[46+NA*21];
G[23+NA*45] = -G[47+NA*21];
G[24+NA*45] = -G[45+NA*24];
G[25+NA*45] = -G[46+NA*24];
G[26+NA*45] = -G[47+NA*24];
G[27+NA*45] =  G[45+NA*27];
G[28+NA*45] =  G[46+NA*27];
G[29+NA*45] =  G[47+NA*27];
G[27+NA*45] =  G[45+NA*27];
G[28+NA*45] =  G[46+NA*27];
G[29+NA*45] =  G[47+NA*27];
G[30+NA*45] =  G[45+NA*30];
G[31+NA*45] =  G[46+NA*30];
G[32+NA*45] =  G[47+NA*30];
G[30+NA*45] =  G[45+NA*30];
G[31+NA*45] =  G[46+NA*30];
G[32+NA*45] =  G[47+NA*30];
G[33+NA*45] =  G[45+NA*33];
G[34+NA*45] =  G[46+NA*33];
G[35+NA*45] =  G[47+NA*33];
G[33+NA*45] =  G[45+NA*33];
G[34+NA*45] =  G[46+NA*33];
G[35+NA*45] =  G[47+NA*33];
G[36+NA*45] =  G[45+NA*36];
G[37+NA*45] =  G[46+NA*36];
G[38+NA*45] =  G[47+NA*36];
G[36+NA*45] =  G[45+NA*36];
G[37+NA*45] =  G[46+NA*36];
G[38+NA*45] =  G[47+NA*36];
G[39+NA*45] =  G[45+NA*39];
G[40+NA*45] =  G[46+NA*39];
G[41+NA*45] =  G[47+NA*39];
G[39+NA*45] =  G[45+NA*39];
G[40+NA*45] =  G[46+NA*39];
G[41+NA*45] =  G[47+NA*39];
G[42+NA*45] =  G[45+NA*42];
G[43+NA*45] =  G[46+NA*42];
G[44+NA*45] =  G[47+NA*42];
G[42+NA*45] =  G[45+NA*42];
G[43+NA*45] =  G[46+NA*42];
G[44+NA*45] =  G[47+NA*42];
G[45+NA*45] = tcrd[0]*X[15+NA*15] + (-2.190890230020665e+00*X[15+NA*8]);
G[46+NA*45] = tcrd[1]*X[15+NA*15] + (-2.190890230020665e+00*X[15+NA*7]);
G[47+NA*45] = tcrd[2]*X[15+NA*15];
}

template <int NA>
inline void ExpHobGrdBlk_GS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[48] = tcrd[0]*X[16] + (-6.998542122237653e-01*X[10]);
G[49] = tcrd[1]*X[16] + (-6.998542122237653e-01*X[11]);
G[50] = tcrd[2]*X[16] + (1.142857142857143e+00*X[9]);
G[51] = tcrd[0]*X[17] + (9.035079029052513e-01*X[9])+(-3.499271061118825e-01*X[12]);
G[52] = tcrd[1]*X[17] + (-3.499271061118825e-01*X[13]);
G[53] = tcrd[2]*X[17] + (1.106566670344976e+00*X[10]);
G[54] = tcrd[0]*X[18] + (-3.499271061118825e-01*X[13]);
G[55] = tcrd[1]*X[18] + (9.035079029052513e-01*X[9])+(3.499271061118825e-01*X[12]);
G[56] = tcrd[2]*X[18] + (1.106566670344976e+00*X[11]);
G[57] = tcrd[0]*X[19] + (7.824607964359518e-01*X[10])+(-2.020305089104422e-01*X[14]);
G[58] = tcrd[1]*X[19] + (-7.824607964359518e-01*X[11])+(-2.020305089104422e-01*X[15]);
G[59] = tcrd[2]*X[19] + (9.897433186107870e-01*X[12]);
G[60] = tcrd[0]*X[20] + (7.824607964359518e-01*X[11])+(-2.020305089104422e-01*X[15]);
G[61] = tcrd[1]*X[20] + (7.824607964359518e-01*X[10])+(2.020305089104422e-01*X[14]);
G[62] = tcrd[2]*X[20] + (9.897433186107870e-01*X[13]);
G[63] = tcrd[0]*X[21] + (9.258200997725513e-01*X[12]);
G[64] = tcrd[1]*X[21] + (-9.258200997725513e-01*X[13]);
G[65] = tcrd[2]*X[21] + (7.559289460184544e-01*X[14]);
G[66] = tcrd[0]*X[22] + (9.258200997725513e-01*X[13]);
G[67] = tcrd[1]*X[22] + (9.258200997725513e-01*X[12]);
G[68] = tcrd[2]*X[22] + (7.559289460184544e-01*X[15]);
G[69] = tcrd[0]*X[23] + (1.069044967649698e+00*X[14]);
G[70] = tcrd[1]*X[23] + (-1.069044967649698e+00*X[15]);
G[71] = tcrd[2]*X[23];
G[72] = tcrd[0]*X[24] + (1.069044967649698e+00*X[15]);
G[73] = tcrd[1]*X[24] + (1.069044967649698e+00*X[14]);
G[74] = tcrd[2]*X[24];
}

template <int NA>
void ExpHobGrdBlk_GP( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[48+NA*3] = tcrd[0]*X[16+NA] + (-6.998542122237653e-01*X[10+NA]);
G[49+NA*3] = tcrd[1]*X[16+NA] + (-6.998542122237653e-01*X[11+NA]);
G[50+NA*3] = tcrd[2]*X[16+NA] + (1.142857142857143e+00*X[9+NA])+(-2.000000000000000e+00*X[16]);
G[51+NA*3] = tcrd[0]*X[17+NA] + (9.035079029052513e-01*X[9+NA])+(-3.499271061118825e-01*X[12+NA]);
G[52+NA*3] = tcrd[1]*X[17+NA] + (-3.499271061118825e-01*X[13+NA]);
G[53+NA*3] = tcrd[2]*X[17+NA] + (1.106566670344976e+00*X[10+NA])+(-2.000000000000000e+00*X[17]);
G[54+NA*3] = tcrd[0]*X[18+NA] + (-3.499271061118825e-01*X[13+NA]);
G[55+NA*3] = tcrd[1]*X[18+NA] + (9.035079029052513e-01*X[9+NA])+(3.499271061118825e-01*X[12+NA]);
G[56+NA*3] = tcrd[2]*X[18+NA] + (1.106566670344976e+00*X[11+NA])+(-2.000000000000000e+00*X[18]);
G[57+NA*3] = tcrd[0]*X[19+NA] + (7.824607964359518e-01*X[10+NA])+(-2.020305089104422e-01*X[14+NA]);
G[58+NA*3] = tcrd[1]*X[19+NA] + (-7.824607964359518e-01*X[11+NA])+(-2.020305089104422e-01*X[15+NA]);
G[59+NA*3] = tcrd[2]*X[19+NA] + (9.897433186107870e-01*X[12+NA])+(-2.000000000000000e+00*X[19]);
G[60+NA*3] = tcrd[0]*X[20+NA] + (7.824607964359518e-01*X[11+NA])+(-2.020305089104422e-01*X[15+NA]);
G[61+NA*3] = tcrd[1]*X[20+NA] + (7.824607964359518e-01*X[10+NA])+(2.020305089104422e-01*X[14+NA]);
G[62+NA*3] = tcrd[2]*X[20+NA] + (9.897433186107870e-01*X[13+NA])+(-2.000000000000000e+00*X[20]);
G[63+NA*3] = tcrd[0]*X[21+NA] + (9.258200997725513e-01*X[12+NA]);
G[64+NA*3] = tcrd[1]*X[21+NA] + (-9.258200997725513e-01*X[13+NA]);
G[65+NA*3] = tcrd[2]*X[21+NA] + (7.559289460184544e-01*X[14+NA])+(-2.000000000000000e+00*X[21]);
G[66+NA*3] = tcrd[0]*X[22+NA] + (9.258200997725513e-01*X[13+NA]);
G[67+NA*3] = tcrd[1]*X[22+NA] + (9.258200997725513e-01*X[12+NA]);
G[68+NA*3] = tcrd[2]*X[22+NA] + (7.559289460184544e-01*X[15+NA])+(-2.000000000000000e+00*X[22]);
G[69+NA*3] = tcrd[0]*X[23+NA] + (1.069044967649698e+00*X[14+NA]);
G[70+NA*3] = tcrd[1]*X[23+NA] + (-1.069044967649698e+00*X[15+NA]);
G[71+NA*3] = tcrd[2]*X[23+NA] + (-2.000000000000000e+00*X[23]);
G[72+NA*3] = tcrd[0]*X[24+NA] + (1.069044967649698e+00*X[15+NA]);
G[73+NA*3] = tcrd[1]*X[24+NA] + (1.069044967649698e+00*X[14+NA]);
G[74+NA*3] = tcrd[2]*X[24+NA] + (-2.000000000000000e+00*X[24]);
G[48+NA*6] = tcrd[0]*X[16+NA*2] + (-6.998542122237653e-01*X[10+NA*2])+(-2.000000000000000e+00*X[16]);
G[49+NA*6] = tcrd[1]*X[16+NA*2] + (-6.998542122237653e-01*X[11+NA*2]);
G[50+NA*6] = tcrd[2]*X[16+NA*2] + (1.142857142857143e+00*X[9+NA*2]);
G[51+NA*6] = tcrd[0]*X[17+NA*2] + (9.035079029052513e-01*X[9+NA*2])+(-3.499271061118825e-01*X[12+NA*2])+(-2.000000000000000e+00*X[17]);
G[52+NA*6] = tcrd[1]*X[17+NA*2] + (-3.499271061118825e-01*X[13+NA*2]);
G[53+NA*6] = tcrd[2]*X[17+NA*2] + (1.106566670344976e+00*X[10+NA*2]);
G[54+NA*6] = tcrd[0]*X[18+NA*2] + (-3.499271061118825e-01*X[13+NA*2])+(-2.000000000000000e+00*X[18]);
G[55+NA*6] = tcrd[1]*X[18+NA*2] + (9.035079029052513e-01*X[9+NA*2])+(3.499271061118825e-01*X[12+NA*2]);
G[56+NA*6] = tcrd[2]*X[18+NA*2] + (1.106566670344976e+00*X[11+NA*2]);
G[57+NA*6] = tcrd[0]*X[19+NA*2] + (7.824607964359518e-01*X[10+NA*2])+(-2.020305089104422e-01*X[14+NA*2])+(-2.000000000000000e+00*X[19]);
G[58+NA*6] = tcrd[1]*X[19+NA*2] + (-7.824607964359518e-01*X[11+NA*2])+(-2.020305089104422e-01*X[15+NA*2]);
G[59+NA*6] = tcrd[2]*X[19+NA*2] + (9.897433186107870e-01*X[12+NA*2]);
G[60+NA*6] = tcrd[0]*X[20+NA*2] + (7.824607964359518e-01*X[11+NA*2])+(-2.020305089104422e-01*X[15+NA*2])+(-2.000000000000000e+00*X[20]);
G[61+NA*6] = tcrd[1]*X[20+NA*2] + (7.824607964359518e-01*X[10+NA*2])+(2.020305089104422e-01*X[14+NA*2]);
G[62+NA*6] = tcrd[2]*X[20+NA*2] + (9.897433186107870e-01*X[13+NA*2]);
G[63+NA*6] = tcrd[0]*X[21+NA*2] + (9.258200997725513e-01*X[12+NA*2])+(-2.000000000000000e+00*X[21]);
G[64+NA*6] = tcrd[1]*X[21+NA*2] + (-9.258200997725513e-01*X[13+NA*2]);
G[65+NA*6] = tcrd[2]*X[21+NA*2] + (7.559289460184544e-01*X[14+NA*2]);
G[66+NA*6] = tcrd[0]*X[22+NA*2] + (9.258200997725513e-01*X[13+NA*2])+(-2.000000000000000e+00*X[22]);
G[67+NA*6] = tcrd[1]*X[22+NA*2] + (9.258200997725513e-01*X[12+NA*2]);
G[68+NA*6] = tcrd[2]*X[22+NA*2] + (7.559289460184544e-01*X[15+NA*2]);
G[69+NA*6] = tcrd[0]*X[23+NA*2] + (1.069044967649698e+00*X[14+NA*2])+(-2.000000000000000e+00*X[23]);
G[70+NA*6] = tcrd[1]*X[23+NA*2] + (-1.069044967649698e+00*X[15+NA*2]);
G[71+NA*6] = tcrd[2]*X[23+NA*2];
G[72+NA*6] = tcrd[0]*X[24+NA*2] + (1.069044967649698e+00*X[15+NA*2])+(-2.000000000000000e+00*X[24]);
G[73+NA*6] = tcrd[1]*X[24+NA*2] + (1.069044967649698e+00*X[14+NA*2]);
G[74+NA*6] = tcrd[2]*X[24+NA*2];
G[48+NA*9] = tcrd[0]*X[16+NA*3] + (-6.998542122237653e-01*X[10+NA*3]);
G[49+NA*9] = tcrd[1]*X[16+NA*3] + (-6.998542122237653e-01*X[11+NA*3])+(-2.000000000000000e+00*X[16]);
G[50+NA*9] = tcrd[2]*X[16+NA*3] + (1.142857142857143e+00*X[9+NA*3]);
G[51+NA*9] = tcrd[0]*X[17+NA*3] + (9.035079029052513e-01*X[9+NA*3])+(-3.499271061118825e-01*X[12+NA*3]);
G[52+NA*9] = tcrd[1]*X[17+NA*3] + (-3.499271061118825e-01*X[13+NA*3])+(-2.000000000000000e+00*X[17]);
G[53+NA*9] = tcrd[2]*X[17+NA*3] + (1.106566670344976e+00*X[10+NA*3]);
G[54+NA*9] = tcrd[0]*X[18+NA*3] + (-3.499271061118825e-01*X[13+NA*3]);
G[55+NA*9] = tcrd[1]*X[18+NA*3] + (9.035079029052513e-01*X[9+NA*3])+(3.499271061118825e-01*X[12+NA*3])+(-2.000000000000000e+00*X[18]);
G[56+NA*9] = tcrd[2]*X[18+NA*3] + (1.106566670344976e+00*X[11+NA*3]);
G[57+NA*9] = tcrd[0]*X[19+NA*3] + (7.824607964359518e-01*X[10+NA*3])+(-2.020305089104422e-01*X[14+NA*3]);
G[58+NA*9] = tcrd[1]*X[19+NA*3] + (-7.824607964359518e-01*X[11+NA*3])+(-2.020305089104422e-01*X[15+NA*3])+(-2.000000000000000e+00*X[19]);
G[59+NA*9] = tcrd[2]*X[19+NA*3] + (9.897433186107870e-01*X[12+NA*3]);
G[60+NA*9] = tcrd[0]*X[20+NA*3] + (7.824607964359518e-01*X[11+NA*3])+(-2.020305089104422e-01*X[15+NA*3]);
G[61+NA*9] = tcrd[1]*X[20+NA*3] + (7.824607964359518e-01*X[10+NA*3])+(2.020305089104422e-01*X[14+NA*3])+(-2.000000000000000e+00*X[20]);
G[62+NA*9] = tcrd[2]*X[20+NA*3] + (9.897433186107870e-01*X[13+NA*3]);
G[63+NA*9] = tcrd[0]*X[21+NA*3] + (9.258200997725513e-01*X[12+NA*3]);
G[64+NA*9] = tcrd[1]*X[21+NA*3] + (-9.258200997725513e-01*X[13+NA*3])+(-2.000000000000000e+00*X[21]);
G[65+NA*9] = tcrd[2]*X[21+NA*3] + (7.559289460184544e-01*X[14+NA*3]);
G[66+NA*9] = tcrd[0]*X[22+NA*3] + (9.258200997725513e-01*X[13+NA*3]);
G[67+NA*9] = tcrd[1]*X[22+NA*3] + (9.258200997725513e-01*X[12+NA*3])+(-2.000000000000000e+00*X[22]);
G[68+NA*9] = tcrd[2]*X[22+NA*3] + (7.559289460184544e-01*X[15+NA*3]);
G[69+NA*9] = tcrd[0]*X[23+NA*3] + (1.069044967649698e+00*X[14+NA*3]);
G[70+NA*9] = tcrd[1]*X[23+NA*3] + (-1.069044967649698e+00*X[15+NA*3])+(-2.000000000000000e+00*X[23]);
G[71+NA*9] = tcrd[2]*X[23+NA*3];
G[72+NA*9] = tcrd[0]*X[24+NA*3] + (1.069044967649698e+00*X[15+NA*3]);
G[73+NA*9] = tcrd[1]*X[24+NA*3] + (1.069044967649698e+00*X[14+NA*3])+(-2.000000000000000e+00*X[24]);
G[74+NA*9] = tcrd[2]*X[24+NA*3];
}

template <int NA>
void ExpHobGrdBlk_GD( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[48+NA*12] = tcrd[0]*X[16+NA*4] + (-6.998542122237653e-01*X[10+NA*4])+(6.666666666666666e-01*X[16+NA*2]);
G[49+NA*12] = tcrd[1]*X[16+NA*4] + (-6.998542122237653e-01*X[11+NA*4])+(6.666666666666666e-01*X[16+NA*3]);
G[50+NA*12] = tcrd[2]*X[16+NA*4] + (1.142857142857143e+00*X[9+NA*4])+(-1.333333333333333e+00*X[16+NA]);
G[51+NA*12] = tcrd[0]*X[17+NA*4] + (9.035079029052513e-01*X[9+NA*4])+(-3.499271061118825e-01*X[12+NA*4])+(6.666666666666666e-01*X[17+NA*2]);
G[52+NA*12] = tcrd[1]*X[17+NA*4] + (-3.499271061118825e-01*X[13+NA*4])+(6.666666666666666e-01*X[17+NA*3]);
G[53+NA*12] = tcrd[2]*X[17+NA*4] + (1.106566670344976e+00*X[10+NA*4])+(-1.333333333333333e+00*X[17+NA]);
G[54+NA*12] = tcrd[0]*X[18+NA*4] + (-3.499271061118825e-01*X[13+NA*4])+(6.666666666666666e-01*X[18+NA*2]);
G[55+NA*12] = tcrd[1]*X[18+NA*4] + (9.035079029052513e-01*X[9+NA*4])+(3.499271061118825e-01*X[12+NA*4])+(6.666666666666666e-01*X[18+NA*3]);
G[56+NA*12] = tcrd[2]*X[18+NA*4] + (1.106566670344976e+00*X[11+NA*4])+(-1.333333333333333e+00*X[18+NA]);
G[57+NA*12] = tcrd[0]*X[19+NA*4] + (7.824607964359518e-01*X[10+NA*4])+(-2.020305089104422e-01*X[14+NA*4])+(6.666666666666666e-01*X[19+NA*2]);
G[58+NA*12] = tcrd[1]*X[19+NA*4] + (-7.824607964359518e-01*X[11+NA*4])+(-2.020305089104422e-01*X[15+NA*4])+(6.666666666666666e-01*X[19+NA*3]);
G[59+NA*12] = tcrd[2]*X[19+NA*4] + (9.897433186107870e-01*X[12+NA*4])+(-1.333333333333333e+00*X[19+NA]);
G[60+NA*12] = tcrd[0]*X[20+NA*4] + (7.824607964359518e-01*X[11+NA*4])+(-2.020305089104422e-01*X[15+NA*4])+(6.666666666666666e-01*X[20+NA*2]);
G[61+NA*12] = tcrd[1]*X[20+NA*4] + (7.824607964359518e-01*X[10+NA*4])+(2.020305089104422e-01*X[14+NA*4])+(6.666666666666666e-01*X[20+NA*3]);
G[62+NA*12] = tcrd[2]*X[20+NA*4] + (9.897433186107870e-01*X[13+NA*4])+(-1.333333333333333e+00*X[20+NA]);
G[63+NA*12] = tcrd[0]*X[21+NA*4] + (9.258200997725513e-01*X[12+NA*4])+(6.666666666666666e-01*X[21+NA*2]);
G[64+NA*12] = tcrd[1]*X[21+NA*4] + (-9.258200997725513e-01*X[13+NA*4])+(6.666666666666666e-01*X[21+NA*3]);
G[65+NA*12] = tcrd[2]*X[21+NA*4] + (7.559289460184544e-01*X[14+NA*4])+(-1.333333333333333e+00*X[21+NA]);
G[66+NA*12] = tcrd[0]*X[22+NA*4] + (9.258200997725513e-01*X[13+NA*4])+(6.666666666666666e-01*X[22+NA*2]);
G[67+NA*12] = tcrd[1]*X[22+NA*4] + (9.258200997725513e-01*X[12+NA*4])+(6.666666666666666e-01*X[22+NA*3]);
G[68+NA*12] = tcrd[2]*X[22+NA*4] + (7.559289460184544e-01*X[15+NA*4])+(-1.333333333333333e+00*X[22+NA]);
G[69+NA*12] = tcrd[0]*X[23+NA*4] + (1.069044967649698e+00*X[14+NA*4])+(6.666666666666666e-01*X[23+NA*2]);
G[70+NA*12] = tcrd[1]*X[23+NA*4] + (-1.069044967649698e+00*X[15+NA*4])+(6.666666666666666e-01*X[23+NA*3]);
G[71+NA*12] = tcrd[2]*X[23+NA*4] + (-1.333333333333333e+00*X[23+NA]);
G[72+NA*12] = tcrd[0]*X[24+NA*4] + (1.069044967649698e+00*X[15+NA*4])+(6.666666666666666e-01*X[24+NA*2]);
G[73+NA*12] = tcrd[1]*X[24+NA*4] + (1.069044967649698e+00*X[14+NA*4])+(6.666666666666666e-01*X[24+NA*3]);
G[74+NA*12] = tcrd[2]*X[24+NA*4] + (-1.333333333333333e+00*X[24+NA]);
G[48+NA*15] = tcrd[0]*X[16+NA*5] + (-6.998542122237653e-01*X[10+NA*5])+(-1.154700538379251e+00*X[16+NA]);
G[49+NA*15] = tcrd[1]*X[16+NA*5] + (-6.998542122237653e-01*X[11+NA*5]);
G[50+NA*15] = tcrd[2]*X[16+NA*5] + (1.142857142857143e+00*X[9+NA*5])+(-1.154700538379251e+00*X[16+NA*2]);
G[51+NA*15] = tcrd[0]*X[17+NA*5] + (9.035079029052513e-01*X[9+NA*5])+(-3.499271061118825e-01*X[12+NA*5])+(-1.154700538379251e+00*X[17+NA]);
G[52+NA*15] = tcrd[1]*X[17+NA*5] + (-3.499271061118825e-01*X[13+NA*5]);
G[53+NA*15] = tcrd[2]*X[17+NA*5] + (1.106566670344976e+00*X[10+NA*5])+(-1.154700538379251e+00*X[17+NA*2]);
G[54+NA*15] = tcrd[0]*X[18+NA*5] + (-3.499271061118825e-01*X[13+NA*5])+(-1.154700538379251e+00*X[18+NA]);
G[55+NA*15] = tcrd[1]*X[18+NA*5] + (9.035079029052513e-01*X[9+NA*5])+(3.499271061118825e-01*X[12+NA*5]);
G[56+NA*15] = tcrd[2]*X[18+NA*5] + (1.106566670344976e+00*X[11+NA*5])+(-1.154700538379251e+00*X[18+NA*2]);
G[57+NA*15] = tcrd[0]*X[19+NA*5] + (7.824607964359518e-01*X[10+NA*5])+(-2.020305089104422e-01*X[14+NA*5])+(-1.154700538379251e+00*X[19+NA]);
G[58+NA*15] = tcrd[1]*X[19+NA*5] + (-7.824607964359518e-01*X[11+NA*5])+(-2.020305089104422e-01*X[15+NA*5]);
G[59+NA*15] = tcrd[2]*X[19+NA*5] + (9.897433186107870e-01*X[12+NA*5])+(-1.154700538379251e+00*X[19+NA*2]);
G[60+NA*15] = tcrd[0]*X[20+NA*5] + (7.824607964359518e-01*X[11+NA*5])+(-2.020305089104422e-01*X[15+NA*5])+(-1.154700538379251e+00*X[20+NA]);
G[61+NA*15] = tcrd[1]*X[20+NA*5] + (7.824607964359518e-01*X[10+NA*5])+(2.020305089104422e-01*X[14+NA*5]);
G[62+NA*15] = tcrd[2]*X[20+NA*5] + (9.897433186107870e-01*X[13+NA*5])+(-1.154700538379251e+00*X[20+NA*2]);
G[63+NA*15] = tcrd[0]*X[21+NA*5] + (9.258200997725513e-01*X[12+NA*5])+(-1.154700538379251e+00*X[21+NA]);
G[64+NA*15] = tcrd[1]*X[21+NA*5] + (-9.258200997725513e-01*X[13+NA*5]);
G[65+NA*15] = tcrd[2]*X[21+NA*5] + (7.559289460184544e-01*X[14+NA*5])+(-1.154700538379251e+00*X[21+NA*2]);
G[66+NA*15] = tcrd[0]*X[22+NA*5] + (9.258200997725513e-01*X[13+NA*5])+(-1.154700538379251e+00*X[22+NA]);
G[67+NA*15] = tcrd[1]*X[22+NA*5] + (9.258200997725513e-01*X[12+NA*5]);
G[68+NA*15] = tcrd[2]*X[22+NA*5] + (7.559289460184544e-01*X[15+NA*5])+(-1.154700538379251e+00*X[22+NA*2]);
G[69+NA*15] = tcrd[0]*X[23+NA*5] + (1.069044967649698e+00*X[14+NA*5])+(-1.154700538379251e+00*X[23+NA]);
G[70+NA*15] = tcrd[1]*X[23+NA*5] + (-1.069044967649698e+00*X[15+NA*5]);
G[71+NA*15] = tcrd[2]*X[23+NA*5] + (-1.154700538379251e+00*X[23+NA*2]);
G[72+NA*15] = tcrd[0]*X[24+NA*5] + (1.069044967649698e+00*X[15+NA*5])+(-1.154700538379251e+00*X[24+NA]);
G[73+NA*15] = tcrd[1]*X[24+NA*5] + (1.069044967649698e+00*X[14+NA*5]);
G[74+NA*15] = tcrd[2]*X[24+NA*5] + (-1.154700538379251e+00*X[24+NA*2]);
G[48+NA*18] = tcrd[0]*X[16+NA*6] + (-6.998542122237653e-01*X[10+NA*6]);
G[49+NA*18] = tcrd[1]*X[16+NA*6] + (-6.998542122237653e-01*X[11+NA*6])+(-1.154700538379251e+00*X[16+NA]);
G[50+NA*18] = tcrd[2]*X[16+NA*6] + (1.142857142857143e+00*X[9+NA*6])+(-1.154700538379251e+00*X[16+NA*3]);
G[51+NA*18] = tcrd[0]*X[17+NA*6] + (9.035079029052513e-01*X[9+NA*6])+(-3.499271061118825e-01*X[12+NA*6]);
G[52+NA*18] = tcrd[1]*X[17+NA*6] + (-3.499271061118825e-01*X[13+NA*6])+(-1.154700538379251e+00*X[17+NA]);
G[53+NA*18] = tcrd[2]*X[17+NA*6] + (1.106566670344976e+00*X[10+NA*6])+(-1.154700538379251e+00*X[17+NA*3]);
G[54+NA*18] = tcrd[0]*X[18+NA*6] + (-3.499271061118825e-01*X[13+NA*6]);
G[55+NA*18] = tcrd[1]*X[18+NA*6] + (9.035079029052513e-01*X[9+NA*6])+(3.499271061118825e-01*X[12+NA*6])+(-1.154700538379251e+00*X[18+NA]);
G[56+NA*18] = tcrd[2]*X[18+NA*6] + (1.106566670344976e+00*X[11+NA*6])+(-1.154700538379251e+00*X[18+NA*3]);
G[57+NA*18] = tcrd[0]*X[19+NA*6] + (7.824607964359518e-01*X[10+NA*6])+(-2.020305089104422e-01*X[14+NA*6]);
G[58+NA*18] = tcrd[1]*X[19+NA*6] + (-7.824607964359518e-01*X[11+NA*6])+(-2.020305089104422e-01*X[15+NA*6])+(-1.154700538379251e+00*X[19+NA]);
G[59+NA*18] = tcrd[2]*X[19+NA*6] + (9.897433186107870e-01*X[12+NA*6])+(-1.154700538379251e+00*X[19+NA*3]);
G[60+NA*18] = tcrd[0]*X[20+NA*6] + (7.824607964359518e-01*X[11+NA*6])+(-2.020305089104422e-01*X[15+NA*6]);
G[61+NA*18] = tcrd[1]*X[20+NA*6] + (7.824607964359518e-01*X[10+NA*6])+(2.020305089104422e-01*X[14+NA*6])+(-1.154700538379251e+00*X[20+NA]);
G[62+NA*18] = tcrd[2]*X[20+NA*6] + (9.897433186107870e-01*X[13+NA*6])+(-1.154700538379251e+00*X[20+NA*3]);
G[63+NA*18] = tcrd[0]*X[21+NA*6] + (9.258200997725513e-01*X[12+NA*6]);
G[64+NA*18] = tcrd[1]*X[21+NA*6] + (-9.258200997725513e-01*X[13+NA*6])+(-1.154700538379251e+00*X[21+NA]);
G[65+NA*18] = tcrd[2]*X[21+NA*6] + (7.559289460184544e-01*X[14+NA*6])+(-1.154700538379251e+00*X[21+NA*3]);
G[66+NA*18] = tcrd[0]*X[22+NA*6] + (9.258200997725513e-01*X[13+NA*6]);
G[67+NA*18] = tcrd[1]*X[22+NA*6] + (9.258200997725513e-01*X[12+NA*6])+(-1.154700538379251e+00*X[22+NA]);
G[68+NA*18] = tcrd[2]*X[22+NA*6] + (7.559289460184544e-01*X[15+NA*6])+(-1.154700538379251e+00*X[22+NA*3]);
G[69+NA*18] = tcrd[0]*X[23+NA*6] + (1.069044967649698e+00*X[14+NA*6]);
G[70+NA*18] = tcrd[1]*X[23+NA*6] + (-1.069044967649698e+00*X[15+NA*6])+(-1.154700538379251e+00*X[23+NA]);
G[71+NA*18] = tcrd[2]*X[23+NA*6] + (-1.154700538379251e+00*X[23+NA*3]);
G[72+NA*18] = tcrd[0]*X[24+NA*6] + (1.069044967649698e+00*X[15+NA*6]);
G[73+NA*18] = tcrd[1]*X[24+NA*6] + (1.069044967649698e+00*X[14+NA*6])+(-1.154700538379251e+00*X[24+NA]);
G[74+NA*18] = tcrd[2]*X[24+NA*6] + (-1.154700538379251e+00*X[24+NA*3]);
G[48+NA*21] = tcrd[0]*X[16+NA*7] + (-6.998542122237653e-01*X[10+NA*7])+(-1.154700538379251e+00*X[16+NA*2]);
G[49+NA*21] = tcrd[1]*X[16+NA*7] + (-6.998542122237653e-01*X[11+NA*7])+(1.154700538379251e+00*X[16+NA*3]);
G[50+NA*21] = tcrd[2]*X[16+NA*7] + (1.142857142857143e+00*X[9+NA*7]);
G[51+NA*21] = tcrd[0]*X[17+NA*7] + (9.035079029052513e-01*X[9+NA*7])+(-3.499271061118825e-01*X[12+NA*7])+(-1.154700538379251e+00*X[17+NA*2]);
G[52+NA*21] = tcrd[1]*X[17+NA*7] + (-3.499271061118825e-01*X[13+NA*7])+(1.154700538379251e+00*X[17+NA*3]);
G[53+NA*21] = tcrd[2]*X[17+NA*7] + (1.106566670344976e+00*X[10+NA*7]);
G[54+NA*21] = tcrd[0]*X[18+NA*7] + (-3.499271061118825e-01*X[13+NA*7])+(-1.154700538379251e+00*X[18+NA*2]);
G[55+NA*21] = tcrd[1]*X[18+NA*7] + (9.035079029052513e-01*X[9+NA*7])+(3.499271061118825e-01*X[12+NA*7])+(1.154700538379251e+00*X[18+NA*3]);
G[56+NA*21] = tcrd[2]*X[18+NA*7] + (1.106566670344976e+00*X[11+NA*7]);
G[57+NA*21] = tcrd[0]*X[19+NA*7] + (7.824607964359518e-01*X[10+NA*7])+(-2.020305089104422e-01*X[14+NA*7])+(-1.154700538379251e+00*X[19+NA*2]);
G[58+NA*21] = tcrd[1]*X[19+NA*7] + (-7.824607964359518e-01*X[11+NA*7])+(-2.020305089104422e-01*X[15+NA*7])+(1.154700538379251e+00*X[19+NA*3]);
G[59+NA*21] = tcrd[2]*X[19+NA*7] + (9.897433186107870e-01*X[12+NA*7]);
G[60+NA*21] = tcrd[0]*X[20+NA*7] + (7.824607964359518e-01*X[11+NA*7])+(-2.020305089104422e-01*X[15+NA*7])+(-1.154700538379251e+00*X[20+NA*2]);
G[61+NA*21] = tcrd[1]*X[20+NA*7] + (7.824607964359518e-01*X[10+NA*7])+(2.020305089104422e-01*X[14+NA*7])+(1.154700538379251e+00*X[20+NA*3]);
G[62+NA*21] = tcrd[2]*X[20+NA*7] + (9.897433186107870e-01*X[13+NA*7]);
G[63+NA*21] = tcrd[0]*X[21+NA*7] + (9.258200997725513e-01*X[12+NA*7])+(-1.154700538379251e+00*X[21+NA*2]);
G[64+NA*21] = tcrd[1]*X[21+NA*7] + (-9.258200997725513e-01*X[13+NA*7])+(1.154700538379251e+00*X[21+NA*3]);
G[65+NA*21] = tcrd[2]*X[21+NA*7] + (7.559289460184544e-01*X[14+NA*7]);
G[66+NA*21] = tcrd[0]*X[22+NA*7] + (9.258200997725513e-01*X[13+NA*7])+(-1.154700538379251e+00*X[22+NA*2]);
G[67+NA*21] = tcrd[1]*X[22+NA*7] + (9.258200997725513e-01*X[12+NA*7])+(1.154700538379251e+00*X[22+NA*3]);
G[68+NA*21] = tcrd[2]*X[22+NA*7] + (7.559289460184544e-01*X[15+NA*7]);
G[69+NA*21] = tcrd[0]*X[23+NA*7] + (1.069044967649698e+00*X[14+NA*7])+(-1.154700538379251e+00*X[23+NA*2]);
G[70+NA*21] = tcrd[1]*X[23+NA*7] + (-1.069044967649698e+00*X[15+NA*7])+(1.154700538379251e+00*X[23+NA*3]);
G[71+NA*21] = tcrd[2]*X[23+NA*7];
G[72+NA*21] = tcrd[0]*X[24+NA*7] + (1.069044967649698e+00*X[15+NA*7])+(-1.154700538379251e+00*X[24+NA*2]);
G[73+NA*21] = tcrd[1]*X[24+NA*7] + (1.069044967649698e+00*X[14+NA*7])+(1.154700538379251e+00*X[24+NA*3]);
G[74+NA*21] = tcrd[2]*X[24+NA*7];
G[48+NA*24] = tcrd[0]*X[16+NA*8] + (-6.998542122237653e-01*X[10+NA*8])+(-1.154700538379251e+00*X[16+NA*3]);
G[49+NA*24] = tcrd[1]*X[16+NA*8] + (-6.998542122237653e-01*X[11+NA*8])+(-1.154700538379251e+00*X[16+NA*2]);
G[50+NA*24] = tcrd[2]*X[16+NA*8] + (1.142857142857143e+00*X[9+NA*8]);
G[51+NA*24] = tcrd[0]*X[17+NA*8] + (9.035079029052513e-01*X[9+NA*8])+(-3.499271061118825e-01*X[12+NA*8])+(-1.154700538379251e+00*X[17+NA*3]);
G[52+NA*24] = tcrd[1]*X[17+NA*8] + (-3.499271061118825e-01*X[13+NA*8])+(-1.154700538379251e+00*X[17+NA*2]);
G[53+NA*24] = tcrd[2]*X[17+NA*8] + (1.106566670344976e+00*X[10+NA*8]);
G[54+NA*24] = tcrd[0]*X[18+NA*8] + (-3.499271061118825e-01*X[13+NA*8])+(-1.154700538379251e+00*X[18+NA*3]);
G[55+NA*24] = tcrd[1]*X[18+NA*8] + (9.035079029052513e-01*X[9+NA*8])+(3.499271061118825e-01*X[12+NA*8])+(-1.154700538379251e+00*X[18+NA*2]);
G[56+NA*24] = tcrd[2]*X[18+NA*8] + (1.106566670344976e+00*X[11+NA*8]);
G[57+NA*24] = tcrd[0]*X[19+NA*8] + (7.824607964359518e-01*X[10+NA*8])+(-2.020305089104422e-01*X[14+NA*8])+(-1.154700538379251e+00*X[19+NA*3]);
G[58+NA*24] = tcrd[1]*X[19+NA*8] + (-7.824607964359518e-01*X[11+NA*8])+(-2.020305089104422e-01*X[15+NA*8])+(-1.154700538379251e+00*X[19+NA*2]);
G[59+NA*24] = tcrd[2]*X[19+NA*8] + (9.897433186107870e-01*X[12+NA*8]);
G[60+NA*24] = tcrd[0]*X[20+NA*8] + (7.824607964359518e-01*X[11+NA*8])+(-2.020305089104422e-01*X[15+NA*8])+(-1.154700538379251e+00*X[20+NA*3]);
G[61+NA*24] = tcrd[1]*X[20+NA*8] + (7.824607964359518e-01*X[10+NA*8])+(2.020305089104422e-01*X[14+NA*8])+(-1.154700538379251e+00*X[20+NA*2]);
G[62+NA*24] = tcrd[2]*X[20+NA*8] + (9.897433186107870e-01*X[13+NA*8]);
G[63+NA*24] = tcrd[0]*X[21+NA*8] + (9.258200997725513e-01*X[12+NA*8])+(-1.154700538379251e+00*X[21+NA*3]);
G[64+NA*24] = tcrd[1]*X[21+NA*8] + (-9.258200997725513e-01*X[13+NA*8])+(-1.154700538379251e+00*X[21+NA*2]);
G[65+NA*24] = tcrd[2]*X[21+NA*8] + (7.559289460184544e-01*X[14+NA*8]);
G[66+NA*24] = tcrd[0]*X[22+NA*8] + (9.258200997725513e-01*X[13+NA*8])+(-1.154700538379251e+00*X[22+NA*3]);
G[67+NA*24] = tcrd[1]*X[22+NA*8] + (9.258200997725513e-01*X[12+NA*8])+(-1.154700538379251e+00*X[22+NA*2]);
G[68+NA*24] = tcrd[2]*X[22+NA*8] + (7.559289460184544e-01*X[15+NA*8]);
G[69+NA*24] = tcrd[0]*X[23+NA*8] + (1.069044967649698e+00*X[14+NA*8])+(-1.154700538379251e+00*X[23+NA*3]);
G[70+NA*24] = tcrd[1]*X[23+NA*8] + (-1.069044967649698e+00*X[15+NA*8])+(-1.154700538379251e+00*X[23+NA*2]);
G[71+NA*24] = tcrd[2]*X[23+NA*8];
G[72+NA*24] = tcrd[0]*X[24+NA*8] + (1.069044967649698e+00*X[15+NA*8])+(-1.154700538379251e+00*X[24+NA*3]);
G[73+NA*24] = tcrd[1]*X[24+NA*8] + (1.069044967649698e+00*X[14+NA*8])+(-1.154700538379251e+00*X[24+NA*2]);
G[74+NA*24] = tcrd[2]*X[24+NA*8];
}

template <int NA>
void ExpHobGrdBlk_GF( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[48+NA*27] = tcrd[0]*X[16+NA*9] + (-6.998542122237653e-01*X[10+NA*9])+(6.928203230275510e-01*X[16+NA*5]);
G[49+NA*27] = tcrd[1]*X[16+NA*9] + (-6.998542122237653e-01*X[11+NA*9])+(6.928203230275510e-01*X[16+NA*6]);
G[50+NA*27] = tcrd[2]*X[16+NA*9] + (1.142857142857143e+00*X[9+NA*9])+(-1.200000000000000e+00*X[16+NA*4]);
G[51+NA*27] = tcrd[0]*X[17+NA*9] + (9.035079029052513e-01*X[9+NA*9])+(-3.499271061118825e-01*X[12+NA*9])+(6.928203230275510e-01*X[17+NA*5]);
G[52+NA*27] = tcrd[1]*X[17+NA*9] + (-3.499271061118825e-01*X[13+NA*9])+(6.928203230275510e-01*X[17+NA*6]);
G[53+NA*27] = tcrd[2]*X[17+NA*9] + (1.106566670344976e+00*X[10+NA*9])+(-1.200000000000000e+00*X[17+NA*4]);
G[54+NA*27] = tcrd[0]*X[18+NA*9] + (-3.499271061118825e-01*X[13+NA*9])+(6.928203230275510e-01*X[18+NA*5]);
G[55+NA*27] = tcrd[1]*X[18+NA*9] + (9.035079029052513e-01*X[9+NA*9])+(3.499271061118825e-01*X[12+NA*9])+(6.928203230275510e-01*X[18+NA*6]);
G[56+NA*27] = tcrd[2]*X[18+NA*9] + (1.106566670344976e+00*X[11+NA*9])+(-1.200000000000000e+00*X[18+NA*4]);
G[57+NA*27] = tcrd[0]*X[19+NA*9] + (7.824607964359518e-01*X[10+NA*9])+(-2.020305089104422e-01*X[14+NA*9])+(6.928203230275510e-01*X[19+NA*5]);
G[58+NA*27] = tcrd[1]*X[19+NA*9] + (-7.824607964359518e-01*X[11+NA*9])+(-2.020305089104422e-01*X[15+NA*9])+(6.928203230275510e-01*X[19+NA*6]);
G[59+NA*27] = tcrd[2]*X[19+NA*9] + (9.897433186107870e-01*X[12+NA*9])+(-1.200000000000000e+00*X[19+NA*4]);
G[60+NA*27] = tcrd[0]*X[20+NA*9] + (7.824607964359518e-01*X[11+NA*9])+(-2.020305089104422e-01*X[15+NA*9])+(6.928203230275510e-01*X[20+NA*5]);
G[61+NA*27] = tcrd[1]*X[20+NA*9] + (7.824607964359518e-01*X[10+NA*9])+(2.020305089104422e-01*X[14+NA*9])+(6.928203230275510e-01*X[20+NA*6]);
G[62+NA*27] = tcrd[2]*X[20+NA*9] + (9.897433186107870e-01*X[13+NA*9])+(-1.200000000000000e+00*X[20+NA*4]);
G[63+NA*27] = tcrd[0]*X[21+NA*9] + (9.258200997725513e-01*X[12+NA*9])+(6.928203230275510e-01*X[21+NA*5]);
G[64+NA*27] = tcrd[1]*X[21+NA*9] + (-9.258200997725513e-01*X[13+NA*9])+(6.928203230275510e-01*X[21+NA*6]);
G[65+NA*27] = tcrd[2]*X[21+NA*9] + (7.559289460184544e-01*X[14+NA*9])+(-1.200000000000000e+00*X[21+NA*4]);
G[66+NA*27] = tcrd[0]*X[22+NA*9] + (9.258200997725513e-01*X[13+NA*9])+(6.928203230275510e-01*X[22+NA*5]);
G[67+NA*27] = tcrd[1]*X[22+NA*9] + (9.258200997725513e-01*X[12+NA*9])+(6.928203230275510e-01*X[22+NA*6]);
G[68+NA*27] = tcrd[2]*X[22+NA*9] + (7.559289460184544e-01*X[15+NA*9])+(-1.200000000000000e+00*X[22+NA*4]);
G[69+NA*27] = tcrd[0]*X[23+NA*9] + (1.069044967649698e+00*X[14+NA*9])+(6.928203230275510e-01*X[23+NA*5]);
G[70+NA*27] = tcrd[1]*X[23+NA*9] + (-1.069044967649698e+00*X[15+NA*9])+(6.928203230275510e-01*X[23+NA*6]);
G[71+NA*27] = tcrd[2]*X[23+NA*9] + (-1.200000000000000e+00*X[23+NA*4]);
G[72+NA*27] = tcrd[0]*X[24+NA*9] + (1.069044967649698e+00*X[15+NA*9])+(6.928203230275510e-01*X[24+NA*5]);
G[73+NA*27] = tcrd[1]*X[24+NA*9] + (1.069044967649698e+00*X[14+NA*9])+(6.928203230275510e-01*X[24+NA*6]);
G[74+NA*27] = tcrd[2]*X[24+NA*9] + (-1.200000000000000e+00*X[24+NA*4]);
G[48+NA*30] = tcrd[0]*X[16+NA*10] + (-6.998542122237653e-01*X[10+NA*10])+(-9.797958971132712e-01*X[16+NA*4])+(2.828427124746190e-01*X[16+NA*7]);
G[49+NA*30] = tcrd[1]*X[16+NA*10] + (-6.998542122237653e-01*X[11+NA*10])+(2.828427124746190e-01*X[16+NA*8]);
G[50+NA*30] = tcrd[2]*X[16+NA*10] + (1.142857142857143e+00*X[10+NA*9])+(-1.131370849898476e+00*X[16+NA*5]);
G[51+NA*30] = tcrd[0]*X[17+NA*10] + (9.035079029052513e-01*X[10+NA*9])+(-3.499271061118825e-01*X[12+NA*10])+(-9.797958971132712e-01*X[17+NA*4])+(2.828427124746190e-01*X[17+NA*7]);
G[52+NA*30] = tcrd[1]*X[17+NA*10] + (-3.499271061118825e-01*X[13+NA*10])+(2.828427124746190e-01*X[17+NA*8]);
G[53+NA*30] = tcrd[2]*X[17+NA*10] + (1.106566670344976e+00*X[10+NA*10])+(-1.131370849898476e+00*X[17+NA*5]);
G[54+NA*30] = tcrd[0]*X[18+NA*10] + (-3.499271061118825e-01*X[13+NA*10])+(-9.797958971132712e-01*X[18+NA*4])+(2.828427124746190e-01*X[18+NA*7]);
G[55+NA*30] = tcrd[1]*X[18+NA*10] + (9.035079029052513e-01*X[10+NA*9])+(3.499271061118825e-01*X[12+NA*10])+(2.828427124746190e-01*X[18+NA*8]);
G[56+NA*30] = tcrd[2]*X[18+NA*10] + (1.106566670344976e+00*X[11+NA*10])+(-1.131370849898476e+00*X[18+NA*5]);
G[57+NA*30] = tcrd[0]*X[19+NA*10] + (7.824607964359518e-01*X[10+NA*10])+(-2.020305089104422e-01*X[14+NA*10])+(-9.797958971132712e-01*X[19+NA*4])+(2.828427124746190e-01*X[19+NA*7]);
G[58+NA*30] = tcrd[1]*X[19+NA*10] + (-7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[15+NA*10])+(2.828427124746190e-01*X[19+NA*8]);
G[59+NA*30] = tcrd[2]*X[19+NA*10] + (9.897433186107870e-01*X[12+NA*10])+(-1.131370849898476e+00*X[19+NA*5]);
G[60+NA*30] = tcrd[0]*X[20+NA*10] + (7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[15+NA*10])+(-9.797958971132712e-01*X[20+NA*4])+(2.828427124746190e-01*X[20+NA*7]);
G[61+NA*30] = tcrd[1]*X[20+NA*10] + (7.824607964359518e-01*X[10+NA*10])+(2.020305089104422e-01*X[14+NA*10])+(2.828427124746190e-01*X[20+NA*8]);
G[62+NA*30] = tcrd[2]*X[20+NA*10] + (9.897433186107870e-01*X[13+NA*10])+(-1.131370849898476e+00*X[20+NA*5]);
G[63+NA*30] = tcrd[0]*X[21+NA*10] + (9.258200997725513e-01*X[12+NA*10])+(-9.797958971132712e-01*X[21+NA*4])+(2.828427124746190e-01*X[21+NA*7]);
G[64+NA*30] = tcrd[1]*X[21+NA*10] + (-9.258200997725513e-01*X[13+NA*10])+(2.828427124746190e-01*X[21+NA*8]);
G[65+NA*30] = tcrd[2]*X[21+NA*10] + (7.559289460184544e-01*X[14+NA*10])+(-1.131370849898476e+00*X[21+NA*5]);
G[66+NA*30] = tcrd[0]*X[22+NA*10] + (9.258200997725513e-01*X[13+NA*10])+(-9.797958971132712e-01*X[22+NA*4])+(2.828427124746190e-01*X[22+NA*7]);
G[67+NA*30] = tcrd[1]*X[22+NA*10] + (9.258200997725513e-01*X[12+NA*10])+(2.828427124746190e-01*X[22+NA*8]);
G[68+NA*30] = tcrd[2]*X[22+NA*10] + (7.559289460184544e-01*X[15+NA*10])+(-1.131370849898476e+00*X[22+NA*5]);
G[69+NA*30] = tcrd[0]*X[23+NA*10] + (1.069044967649698e+00*X[14+NA*10])+(-9.797958971132712e-01*X[23+NA*4])+(2.828427124746190e-01*X[23+NA*7]);
G[70+NA*30] = tcrd[1]*X[23+NA*10] + (-1.069044967649698e+00*X[15+NA*10])+(2.828427124746190e-01*X[23+NA*8]);
G[71+NA*30] = tcrd[2]*X[23+NA*10] + (-1.131370849898476e+00*X[23+NA*5]);
G[72+NA*30] = tcrd[0]*X[24+NA*10] + (1.069044967649698e+00*X[15+NA*10])+(-9.797958971132712e-01*X[24+NA*4])+(2.828427124746190e-01*X[24+NA*7]);
G[73+NA*30] = tcrd[1]*X[24+NA*10] + (1.069044967649698e+00*X[14+NA*10])+(2.828427124746190e-01*X[24+NA*8]);
G[74+NA*30] = tcrd[2]*X[24+NA*10] + (-1.131370849898476e+00*X[24+NA*5]);
G[48+NA*33] = tcrd[0]*X[16+NA*11] + (-6.998542122237653e-01*X[11+NA*10])+(2.828427124746190e-01*X[16+NA*8]);
G[49+NA*33] = tcrd[1]*X[16+NA*11] + (-6.998542122237653e-01*X[11+NA*11])+(-9.797958971132712e-01*X[16+NA*4])+(-2.828427124746190e-01*X[16+NA*7]);
G[50+NA*33] = tcrd[2]*X[16+NA*11] + (1.142857142857143e+00*X[11+NA*9])+(-1.131370849898476e+00*X[16+NA*6]);
G[51+NA*33] = tcrd[0]*X[17+NA*11] + (9.035079029052513e-01*X[11+NA*9])+(-3.499271061118825e-01*X[12+NA*11])+(2.828427124746190e-01*X[17+NA*8]);
G[52+NA*33] = tcrd[1]*X[17+NA*11] + (-3.499271061118825e-01*X[13+NA*11])+(-9.797958971132712e-01*X[17+NA*4])+(-2.828427124746190e-01*X[17+NA*7]);
G[53+NA*33] = tcrd[2]*X[17+NA*11] + (1.106566670344976e+00*X[11+NA*10])+(-1.131370849898476e+00*X[17+NA*6]);
G[54+NA*33] = tcrd[0]*X[18+NA*11] + (-3.499271061118825e-01*X[13+NA*11])+(2.828427124746190e-01*X[18+NA*8]);
G[55+NA*33] = tcrd[1]*X[18+NA*11] + (9.035079029052513e-01*X[11+NA*9])+(3.499271061118825e-01*X[12+NA*11])+(-9.797958971132712e-01*X[18+NA*4])+(-2.828427124746190e-01*X[18+NA*7]);
G[56+NA*33] = tcrd[2]*X[18+NA*11] + (1.106566670344976e+00*X[11+NA*11])+(-1.131370849898476e+00*X[18+NA*6]);
G[57+NA*33] = tcrd[0]*X[19+NA*11] + (7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[14+NA*11])+(2.828427124746190e-01*X[19+NA*8]);
G[58+NA*33] = tcrd[1]*X[19+NA*11] + (-7.824607964359518e-01*X[11+NA*11])+(-2.020305089104422e-01*X[15+NA*11])+(-9.797958971132712e-01*X[19+NA*4])+(-2.828427124746190e-01*X[19+NA*7]);
G[59+NA*33] = tcrd[2]*X[19+NA*11] + (9.897433186107870e-01*X[12+NA*11])+(-1.131370849898476e+00*X[19+NA*6]);
G[60+NA*33] = tcrd[0]*X[20+NA*11] + (7.824607964359518e-01*X[11+NA*11])+(-2.020305089104422e-01*X[15+NA*11])+(2.828427124746190e-01*X[20+NA*8]);
G[61+NA*33] = tcrd[1]*X[20+NA*11] + (7.824607964359518e-01*X[11+NA*10])+(2.020305089104422e-01*X[14+NA*11])+(-9.797958971132712e-01*X[20+NA*4])+(-2.828427124746190e-01*X[20+NA*7]);
G[62+NA*33] = tcrd[2]*X[20+NA*11] + (9.897433186107870e-01*X[13+NA*11])+(-1.131370849898476e+00*X[20+NA*6]);
G[63+NA*33] = tcrd[0]*X[21+NA*11] + (9.258200997725513e-01*X[12+NA*11])+(2.828427124746190e-01*X[21+NA*8]);
G[64+NA*33] = tcrd[1]*X[21+NA*11] + (-9.258200997725513e-01*X[13+NA*11])+(-9.797958971132712e-01*X[21+NA*4])+(-2.828427124746190e-01*X[21+NA*7]);
G[65+NA*33] = tcrd[2]*X[21+NA*11] + (7.559289460184544e-01*X[14+NA*11])+(-1.131370849898476e+00*X[21+NA*6]);
G[66+NA*33] = tcrd[0]*X[22+NA*11] + (9.258200997725513e-01*X[13+NA*11])+(2.828427124746190e-01*X[22+NA*8]);
G[67+NA*33] = tcrd[1]*X[22+NA*11] + (9.258200997725513e-01*X[12+NA*11])+(-9.797958971132712e-01*X[22+NA*4])+(-2.828427124746190e-01*X[22+NA*7]);
G[68+NA*33] = tcrd[2]*X[22+NA*11] + (7.559289460184544e-01*X[15+NA*11])+(-1.131370849898476e+00*X[22+NA*6]);
G[69+NA*33] = tcrd[0]*X[23+NA*11] + (1.069044967649698e+00*X[14+NA*11])+(2.828427124746190e-01*X[23+NA*8]);
G[70+NA*33] = tcrd[1]*X[23+NA*11] + (-1.069044967649698e+00*X[15+NA*11])+(-9.797958971132712e-01*X[23+NA*4])+(-2.828427124746190e-01*X[23+NA*7]);
G[71+NA*33] = tcrd[2]*X[23+NA*11] + (-1.131370849898476e+00*X[23+NA*6]);
G[72+NA*33] = tcrd[0]*X[24+NA*11] + (1.069044967649698e+00*X[15+NA*11])+(2.828427124746190e-01*X[24+NA*8]);
G[73+NA*33] = tcrd[1]*X[24+NA*11] + (1.069044967649698e+00*X[14+NA*11])+(-9.797958971132712e-01*X[24+NA*4])+(-2.828427124746190e-01*X[24+NA*7]);
G[74+NA*33] = tcrd[2]*X[24+NA*11] + (-1.131370849898476e+00*X[24+NA*6]);
G[48+NA*36] = tcrd[0]*X[16+NA*12] + (-6.998542122237653e-01*X[12+NA*10])+(-8.944271909999160e-01*X[16+NA*5]);
G[49+NA*36] = tcrd[1]*X[16+NA*12] + (-6.998542122237653e-01*X[12+NA*11])+(8.944271909999160e-01*X[16+NA*6]);
G[50+NA*36] = tcrd[2]*X[16+NA*12] + (1.142857142857143e+00*X[12+NA*9])+(-8.944271909999160e-01*X[16+NA*7]);
G[51+NA*36] = tcrd[0]*X[17+NA*12] + (9.035079029052513e-01*X[12+NA*9])+(-3.499271061118825e-01*X[12+NA*12])+(-8.944271909999160e-01*X[17+NA*5]);
G[52+NA*36] = tcrd[1]*X[17+NA*12] + (-3.499271061118825e-01*X[13+NA*12])+(8.944271909999160e-01*X[17+NA*6]);
G[53+NA*36] = tcrd[2]*X[17+NA*12] + (1.106566670344976e+00*X[12+NA*10])+(-8.944271909999160e-01*X[17+NA*7]);
G[54+NA*36] = tcrd[0]*X[18+NA*12] + (-3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[18+NA*5]);
G[55+NA*36] = tcrd[1]*X[18+NA*12] + (9.035079029052513e-01*X[12+NA*9])+(3.499271061118825e-01*X[12+NA*12])+(8.944271909999160e-01*X[18+NA*6]);
G[56+NA*36] = tcrd[2]*X[18+NA*12] + (1.106566670344976e+00*X[12+NA*11])+(-8.944271909999160e-01*X[18+NA*7]);
G[57+NA*36] = tcrd[0]*X[19+NA*12] + (7.824607964359518e-01*X[12+NA*10])+(-2.020305089104422e-01*X[14+NA*12])+(-8.944271909999160e-01*X[19+NA*5]);
G[58+NA*36] = tcrd[1]*X[19+NA*12] + (-7.824607964359518e-01*X[12+NA*11])+(-2.020305089104422e-01*X[15+NA*12])+(8.944271909999160e-01*X[19+NA*6]);
G[59+NA*36] = tcrd[2]*X[19+NA*12] + (9.897433186107870e-01*X[12+NA*12])+(-8.944271909999160e-01*X[19+NA*7]);
G[60+NA*36] = tcrd[0]*X[20+NA*12] + (7.824607964359518e-01*X[12+NA*11])+(-2.020305089104422e-01*X[15+NA*12])+(-8.944271909999160e-01*X[20+NA*5]);
G[61+NA*36] = tcrd[1]*X[20+NA*12] + (7.824607964359518e-01*X[12+NA*10])+(2.020305089104422e-01*X[14+NA*12])+(8.944271909999160e-01*X[20+NA*6]);
G[62+NA*36] = tcrd[2]*X[20+NA*12] + (9.897433186107870e-01*X[13+NA*12])+(-8.944271909999160e-01*X[20+NA*7]);
G[63+NA*36] = tcrd[0]*X[21+NA*12] + (9.258200997725513e-01*X[12+NA*12])+(-8.944271909999160e-01*X[21+NA*5]);
G[64+NA*36] = tcrd[1]*X[21+NA*12] + (-9.258200997725513e-01*X[13+NA*12])+(8.944271909999160e-01*X[21+NA*6]);
G[65+NA*36] = tcrd[2]*X[21+NA*12] + (7.559289460184544e-01*X[14+NA*12])+(-8.944271909999160e-01*X[21+NA*7]);
G[66+NA*36] = tcrd[0]*X[22+NA*12] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[22+NA*5]);
G[67+NA*36] = tcrd[1]*X[22+NA*12] + (9.258200997725513e-01*X[12+NA*12])+(8.944271909999160e-01*X[22+NA*6]);
G[68+NA*36] = tcrd[2]*X[22+NA*12] + (7.559289460184544e-01*X[15+NA*12])+(-8.944271909999160e-01*X[22+NA*7]);
G[69+NA*36] = tcrd[0]*X[23+NA*12] + (1.069044967649698e+00*X[14+NA*12])+(-8.944271909999160e-01*X[23+NA*5]);
G[70+NA*36] = tcrd[1]*X[23+NA*12] + (-1.069044967649698e+00*X[15+NA*12])+(8.944271909999160e-01*X[23+NA*6]);
G[71+NA*36] = tcrd[2]*X[23+NA*12] + (-8.944271909999160e-01*X[23+NA*7]);
G[72+NA*36] = tcrd[0]*X[24+NA*12] + (1.069044967649698e+00*X[15+NA*12])+(-8.944271909999160e-01*X[24+NA*5]);
G[73+NA*36] = tcrd[1]*X[24+NA*12] + (1.069044967649698e+00*X[14+NA*12])+(8.944271909999160e-01*X[24+NA*6]);
G[74+NA*36] = tcrd[2]*X[24+NA*12] + (-8.944271909999160e-01*X[24+NA*7]);
G[48+NA*39] = tcrd[0]*X[16+NA*13] + (-6.998542122237653e-01*X[13+NA*10])+(-8.944271909999160e-01*X[16+NA*6]);
G[49+NA*39] = tcrd[1]*X[16+NA*13] + (-6.998542122237653e-01*X[13+NA*11])+(-8.944271909999160e-01*X[16+NA*5]);
G[50+NA*39] = tcrd[2]*X[16+NA*13] + (1.142857142857143e+00*X[13+NA*9])+(-8.944271909999160e-01*X[16+NA*8]);
G[51+NA*39] = tcrd[0]*X[17+NA*13] + (9.035079029052513e-01*X[13+NA*9])+(-3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[17+NA*6]);
G[52+NA*39] = tcrd[1]*X[17+NA*13] + (-3.499271061118825e-01*X[13+NA*13])+(-8.944271909999160e-01*X[17+NA*5]);
G[53+NA*39] = tcrd[2]*X[17+NA*13] + (1.106566670344976e+00*X[13+NA*10])+(-8.944271909999160e-01*X[17+NA*8]);
G[54+NA*39] = tcrd[0]*X[18+NA*13] + (-3.499271061118825e-01*X[13+NA*13])+(-8.944271909999160e-01*X[18+NA*6]);
G[55+NA*39] = tcrd[1]*X[18+NA*13] + (9.035079029052513e-01*X[13+NA*9])+(3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[18+NA*5]);
G[56+NA*39] = tcrd[2]*X[18+NA*13] + (1.106566670344976e+00*X[13+NA*11])+(-8.944271909999160e-01*X[18+NA*8]);
G[57+NA*39] = tcrd[0]*X[19+NA*13] + (7.824607964359518e-01*X[13+NA*10])+(-2.020305089104422e-01*X[14+NA*13])+(-8.944271909999160e-01*X[19+NA*6]);
G[58+NA*39] = tcrd[1]*X[19+NA*13] + (-7.824607964359518e-01*X[13+NA*11])+(-2.020305089104422e-01*X[15+NA*13])+(-8.944271909999160e-01*X[19+NA*5]);
G[59+NA*39] = tcrd[2]*X[19+NA*13] + (9.897433186107870e-01*X[13+NA*12])+(-8.944271909999160e-01*X[19+NA*8]);
G[60+NA*39] = tcrd[0]*X[20+NA*13] + (7.824607964359518e-01*X[13+NA*11])+(-2.020305089104422e-01*X[15+NA*13])+(-8.944271909999160e-01*X[20+NA*6]);
G[61+NA*39] = tcrd[1]*X[20+NA*13] + (7.824607964359518e-01*X[13+NA*10])+(2.020305089104422e-01*X[14+NA*13])+(-8.944271909999160e-01*X[20+NA*5]);
G[62+NA*39] = tcrd[2]*X[20+NA*13] + (9.897433186107870e-01*X[13+NA*13])+(-8.944271909999160e-01*X[20+NA*8]);
G[63+NA*39] = tcrd[0]*X[21+NA*13] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[21+NA*6]);
G[64+NA*39] = tcrd[1]*X[21+NA*13] + (-9.258200997725513e-01*X[13+NA*13])+(-8.944271909999160e-01*X[21+NA*5]);
G[65+NA*39] = tcrd[2]*X[21+NA*13] + (7.559289460184544e-01*X[14+NA*13])+(-8.944271909999160e-01*X[21+NA*8]);
G[66+NA*39] = tcrd[0]*X[22+NA*13] + (9.258200997725513e-01*X[13+NA*13])+(-8.944271909999160e-01*X[22+NA*6]);
G[67+NA*39] = tcrd[1]*X[22+NA*13] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[22+NA*5]);
G[68+NA*39] = tcrd[2]*X[22+NA*13] + (7.559289460184544e-01*X[15+NA*13])+(-8.944271909999160e-01*X[22+NA*8]);
G[69+NA*39] = tcrd[0]*X[23+NA*13] + (1.069044967649698e+00*X[14+NA*13])+(-8.944271909999160e-01*X[23+NA*6]);
G[70+NA*39] = tcrd[1]*X[23+NA*13] + (-1.069044967649698e+00*X[15+NA*13])+(-8.944271909999160e-01*X[23+NA*5]);
G[71+NA*39] = tcrd[2]*X[23+NA*13] + (-8.944271909999160e-01*X[23+NA*8]);
G[72+NA*39] = tcrd[0]*X[24+NA*13] + (1.069044967649698e+00*X[15+NA*13])+(-8.944271909999160e-01*X[24+NA*6]);
G[73+NA*39] = tcrd[1]*X[24+NA*13] + (1.069044967649698e+00*X[14+NA*13])+(-8.944271909999160e-01*X[24+NA*5]);
G[74+NA*39] = tcrd[2]*X[24+NA*13] + (-8.944271909999160e-01*X[24+NA*8]);
G[48+NA*42] = tcrd[0]*X[16+NA*14] + (-6.998542122237653e-01*X[14+NA*10])+(-1.095445115010332e+00*X[16+NA*7]);
G[49+NA*42] = tcrd[1]*X[16+NA*14] + (-6.998542122237653e-01*X[14+NA*11])+(1.095445115010332e+00*X[16+NA*8]);
G[50+NA*42] = tcrd[2]*X[16+NA*14] + (1.142857142857143e+00*X[14+NA*9]);
G[51+NA*42] = tcrd[0]*X[17+NA*14] + (9.035079029052513e-01*X[14+NA*9])+(-3.499271061118825e-01*X[14+NA*12])+(-1.095445115010332e+00*X[17+NA*7]);
G[52+NA*42] = tcrd[1]*X[17+NA*14] + (-3.499271061118825e-01*X[14+NA*13])+(1.095445115010332e+00*X[17+NA*8]);
G[53+NA*42] = tcrd[2]*X[17+NA*14] + (1.106566670344976e+00*X[14+NA*10]);
G[54+NA*42] = tcrd[0]*X[18+NA*14] + (-3.499271061118825e-01*X[14+NA*13])+(-1.095445115010332e+00*X[18+NA*7]);
G[55+NA*42] = tcrd[1]*X[18+NA*14] + (9.035079029052513e-01*X[14+NA*9])+(3.499271061118825e-01*X[14+NA*12])+(1.095445115010332e+00*X[18+NA*8]);
G[56+NA*42] = tcrd[2]*X[18+NA*14] + (1.106566670344976e+00*X[14+NA*11]);
G[57+NA*42] = tcrd[0]*X[19+NA*14] + (7.824607964359518e-01*X[14+NA*10])+(-2.020305089104422e-01*X[14+NA*14])+(-1.095445115010332e+00*X[19+NA*7]);
G[58+NA*42] = tcrd[1]*X[19+NA*14] + (-7.824607964359518e-01*X[14+NA*11])+(-2.020305089104422e-01*X[15+NA*14])+(1.095445115010332e+00*X[19+NA*8]);
G[59+NA*42] = tcrd[2]*X[19+NA*14] + (9.897433186107870e-01*X[14+NA*12]);
G[60+NA*42] = tcrd[0]*X[20+NA*14] + (7.824607964359518e-01*X[14+NA*11])+(-2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[20+NA*7]);
G[61+NA*42] = tcrd[1]*X[20+NA*14] + (7.824607964359518e-01*X[14+NA*10])+(2.020305089104422e-01*X[14+NA*14])+(1.095445115010332e+00*X[20+NA*8]);
G[62+NA*42] = tcrd[2]*X[20+NA*14] + (9.897433186107870e-01*X[14+NA*13]);
G[63+NA*42] = tcrd[0]*X[21+NA*14] + (9.258200997725513e-01*X[14+NA*12])+(-1.095445115010332e+00*X[21+NA*7]);
G[64+NA*42] = tcrd[1]*X[21+NA*14] + (-9.258200997725513e-01*X[14+NA*13])+(1.095445115010332e+00*X[21+NA*8]);
G[65+NA*42] = tcrd[2]*X[21+NA*14] + (7.559289460184544e-01*X[14+NA*14]);
G[66+NA*42] = tcrd[0]*X[22+NA*14] + (9.258200997725513e-01*X[14+NA*13])+(-1.095445115010332e+00*X[22+NA*7]);
G[67+NA*42] = tcrd[1]*X[22+NA*14] + (9.258200997725513e-01*X[14+NA*12])+(1.095445115010332e+00*X[22+NA*8]);
G[68+NA*42] = tcrd[2]*X[22+NA*14] + (7.559289460184544e-01*X[15+NA*14]);
G[69+NA*42] = tcrd[0]*X[23+NA*14] + (1.069044967649698e+00*X[14+NA*14])+(-1.095445115010332e+00*X[23+NA*7]);
G[70+NA*42] = tcrd[1]*X[23+NA*14] + (-1.069044967649698e+00*X[15+NA*14])+(1.095445115010332e+00*X[23+NA*8]);
G[71+NA*42] = tcrd[2]*X[23+NA*14];
G[72+NA*42] = tcrd[0]*X[24+NA*14] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[24+NA*7]);
G[73+NA*42] = tcrd[1]*X[24+NA*14] + (1.069044967649698e+00*X[14+NA*14])+(1.095445115010332e+00*X[24+NA*8]);
G[74+NA*42] = tcrd[2]*X[24+NA*14];
G[48+NA*45] = tcrd[0]*X[16+NA*15] + (-6.998542122237653e-01*X[15+NA*10])+(-1.095445115010332e+00*X[16+NA*8]);
G[49+NA*45] = tcrd[1]*X[16+NA*15] + (-6.998542122237653e-01*X[15+NA*11])+(-1.095445115010332e+00*X[16+NA*7]);
G[50+NA*45] = tcrd[2]*X[16+NA*15] + (1.142857142857143e+00*X[15+NA*9]);
G[51+NA*45] = tcrd[0]*X[17+NA*15] + (9.035079029052513e-01*X[15+NA*9])+(-3.499271061118825e-01*X[15+NA*12])+(-1.095445115010332e+00*X[17+NA*8]);
G[52+NA*45] = tcrd[1]*X[17+NA*15] + (-3.499271061118825e-01*X[15+NA*13])+(-1.095445115010332e+00*X[17+NA*7]);
G[53+NA*45] = tcrd[2]*X[17+NA*15] + (1.106566670344976e+00*X[15+NA*10]);
G[54+NA*45] = tcrd[0]*X[18+NA*15] + (-3.499271061118825e-01*X[15+NA*13])+(-1.095445115010332e+00*X[18+NA*8]);
G[55+NA*45] = tcrd[1]*X[18+NA*15] + (9.035079029052513e-01*X[15+NA*9])+(3.499271061118825e-01*X[15+NA*12])+(-1.095445115010332e+00*X[18+NA*7]);
G[56+NA*45] = tcrd[2]*X[18+NA*15] + (1.106566670344976e+00*X[15+NA*11]);
G[57+NA*45] = tcrd[0]*X[19+NA*15] + (7.824607964359518e-01*X[15+NA*10])+(-2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[19+NA*8]);
G[58+NA*45] = tcrd[1]*X[19+NA*15] + (-7.824607964359518e-01*X[15+NA*11])+(-2.020305089104422e-01*X[15+NA*15])+(-1.095445115010332e+00*X[19+NA*7]);
G[59+NA*45] = tcrd[2]*X[19+NA*15] + (9.897433186107870e-01*X[15+NA*12]);
G[60+NA*45] = tcrd[0]*X[20+NA*15] + (7.824607964359518e-01*X[15+NA*11])+(-2.020305089104422e-01*X[15+NA*15])+(-1.095445115010332e+00*X[20+NA*8]);
G[61+NA*45] = tcrd[1]*X[20+NA*15] + (7.824607964359518e-01*X[15+NA*10])+(2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[20+NA*7]);
G[62+NA*45] = tcrd[2]*X[20+NA*15] + (9.897433186107870e-01*X[15+NA*13]);
G[63+NA*45] = tcrd[0]*X[21+NA*15] + (9.258200997725513e-01*X[15+NA*12])+(-1.095445115010332e+00*X[21+NA*8]);
G[64+NA*45] = tcrd[1]*X[21+NA*15] + (-9.258200997725513e-01*X[15+NA*13])+(-1.095445115010332e+00*X[21+NA*7]);
G[65+NA*45] = tcrd[2]*X[21+NA*15] + (7.559289460184544e-01*X[15+NA*14]);
G[66+NA*45] = tcrd[0]*X[22+NA*15] + (9.258200997725513e-01*X[15+NA*13])+(-1.095445115010332e+00*X[22+NA*8]);
G[67+NA*45] = tcrd[1]*X[22+NA*15] + (9.258200997725513e-01*X[15+NA*12])+(-1.095445115010332e+00*X[22+NA*7]);
G[68+NA*45] = tcrd[2]*X[22+NA*15] + (7.559289460184544e-01*X[15+NA*15]);
G[69+NA*45] = tcrd[0]*X[23+NA*15] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[23+NA*8]);
G[70+NA*45] = tcrd[1]*X[23+NA*15] + (-1.069044967649698e+00*X[15+NA*15])+(-1.095445115010332e+00*X[23+NA*7]);
G[71+NA*45] = tcrd[2]*X[23+NA*15];
G[72+NA*45] = tcrd[0]*X[24+NA*15] + (1.069044967649698e+00*X[15+NA*15])+(-1.095445115010332e+00*X[24+NA*8]);
G[73+NA*45] = tcrd[1]*X[24+NA*15] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[24+NA*7]);
G[74+NA*45] = tcrd[2]*X[24+NA*15];
}

template <int NA>
void ExpHobGrdBlk_GG( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0+NA*48] =  G[48];
G[1+NA*48] =  G[49];
G[2+NA*48] =  G[50];
G[3+NA*48] = -G[48+NA*3];
G[4+NA*48] = -G[49+NA*3];
G[5+NA*48] = -G[50+NA*3];
G[6+NA*48] = -G[48+NA*6];
G[7+NA*48] = -G[49+NA*6];
G[8+NA*48] = -G[50+NA*6];
G[9+NA*48] = -G[48+NA*9];
G[10+NA*48] = -G[49+NA*9];
G[11+NA*48] = -G[50+NA*9];
G[12+NA*48] =  G[48+NA*12];
G[13+NA*48] =  G[49+NA*12];
G[14+NA*48] =  G[50+NA*12];
G[15+NA*48] =  G[48+NA*15];
G[16+NA*48] =  G[49+NA*15];
G[17+NA*48] =  G[50+NA*15];
G[18+NA*48] =  G[48+NA*18];
G[19+NA*48] =  G[49+NA*18];
G[20+NA*48] =  G[50+NA*18];
G[21+NA*48] =  G[48+NA*21];
G[22+NA*48] =  G[49+NA*21];
G[23+NA*48] =  G[50+NA*21];
G[24+NA*48] =  G[48+NA*24];
G[25+NA*48] =  G[49+NA*24];
G[26+NA*48] =  G[50+NA*24];
G[27+NA*48] = -G[48+NA*27];
G[28+NA*48] = -G[49+NA*27];
G[29+NA*48] = -G[50+NA*27];
G[30+NA*48] = -G[48+NA*30];
G[31+NA*48] = -G[49+NA*30];
G[32+NA*48] = -G[50+NA*30];
G[33+NA*48] = -G[48+NA*33];
G[34+NA*48] = -G[49+NA*33];
G[35+NA*48] = -G[50+NA*33];
G[36+NA*48] = -G[48+NA*36];
G[37+NA*48] = -G[49+NA*36];
G[38+NA*48] = -G[50+NA*36];
G[39+NA*48] = -G[48+NA*39];
G[40+NA*48] = -G[49+NA*39];
G[41+NA*48] = -G[50+NA*39];
G[42+NA*48] = -G[48+NA*42];
G[43+NA*48] = -G[49+NA*42];
G[44+NA*48] = -G[50+NA*42];
G[45+NA*48] = -G[48+NA*45];
G[46+NA*48] = -G[49+NA*45];
G[47+NA*48] = -G[50+NA*45];
G[48+NA*48] = tcrd[0]*X[16+NA*16] + (1.399708424447531e+00*X[16+NA*10]);
G[49+NA*48] = tcrd[1]*X[16+NA*16] + (1.399708424447531e+00*X[16+NA*11]);
G[50+NA*48] = tcrd[2]*X[16+NA*16] + (-2.285714285714286e+00*X[16+NA*9]);
G[51+NA*48] = tcrd[0]*X[17+NA*16] + (-9.035079029052513e-01*X[16+NA*9])+(3.499271061118825e-01*X[16+NA*12])+(6.998542122237653e-01*X[17+NA*10]);
G[52+NA*48] = tcrd[1]*X[17+NA*16] + (3.499271061118825e-01*X[16+NA*13])+(6.998542122237653e-01*X[17+NA*11]);
G[53+NA*48] = tcrd[2]*X[17+NA*16] + (-1.106566670344976e+00*X[16+NA*10])+(-1.142857142857143e+00*X[17+NA*9]);
G[54+NA*48] = tcrd[0]*X[18+NA*16] + (3.499271061118825e-01*X[16+NA*13])+(6.998542122237653e-01*X[18+NA*10]);
G[55+NA*48] = tcrd[1]*X[18+NA*16] + (-9.035079029052513e-01*X[16+NA*9])+(-3.499271061118825e-01*X[16+NA*12])+(6.998542122237653e-01*X[18+NA*11]);
G[56+NA*48] = tcrd[2]*X[18+NA*16] + (-1.106566670344976e+00*X[16+NA*11])+(-1.142857142857143e+00*X[18+NA*9]);
G[57+NA*48] = tcrd[0]*X[19+NA*16] + (-7.824607964359518e-01*X[16+NA*10])+(2.020305089104422e-01*X[16+NA*14])+(6.998542122237653e-01*X[19+NA*10]);
G[58+NA*48] = tcrd[1]*X[19+NA*16] + (7.824607964359518e-01*X[16+NA*11])+(2.020305089104422e-01*X[16+NA*15])+(6.998542122237653e-01*X[19+NA*11]);
G[59+NA*48] = tcrd[2]*X[19+NA*16] + (-9.897433186107870e-01*X[16+NA*12])+(-1.142857142857143e+00*X[19+NA*9]);
G[60+NA*48] = tcrd[0]*X[20+NA*16] + (-7.824607964359518e-01*X[16+NA*11])+(2.020305089104422e-01*X[16+NA*15])+(6.998542122237653e-01*X[20+NA*10]);
G[61+NA*48] = tcrd[1]*X[20+NA*16] + (-7.824607964359518e-01*X[16+NA*10])+(-2.020305089104422e-01*X[16+NA*14])+(6.998542122237653e-01*X[20+NA*11]);
G[62+NA*48] = tcrd[2]*X[20+NA*16] + (-9.897433186107870e-01*X[16+NA*13])+(-1.142857142857143e+00*X[20+NA*9]);
G[63+NA*48] = tcrd[0]*X[21+NA*16] + (-9.258200997725513e-01*X[16+NA*12])+(6.998542122237653e-01*X[21+NA*10]);
G[64+NA*48] = tcrd[1]*X[21+NA*16] + (9.258200997725513e-01*X[16+NA*13])+(6.998542122237653e-01*X[21+NA*11]);
G[65+NA*48] = tcrd[2]*X[21+NA*16] + (-7.559289460184544e-01*X[16+NA*14])+(-1.142857142857143e+00*X[21+NA*9]);
G[66+NA*48] = tcrd[0]*X[22+NA*16] + (-9.258200997725513e-01*X[16+NA*13])+(6.998542122237653e-01*X[22+NA*10]);
G[67+NA*48] = tcrd[1]*X[22+NA*16] + (-9.258200997725513e-01*X[16+NA*12])+(6.998542122237653e-01*X[22+NA*11]);
G[68+NA*48] = tcrd[2]*X[22+NA*16] + (-7.559289460184544e-01*X[16+NA*15])+(-1.142857142857143e+00*X[22+NA*9]);
G[69+NA*48] = tcrd[0]*X[23+NA*16] + (-1.069044967649698e+00*X[16+NA*14])+(6.998542122237653e-01*X[23+NA*10]);
G[70+NA*48] = tcrd[1]*X[23+NA*16] + (1.069044967649698e+00*X[16+NA*15])+(6.998542122237653e-01*X[23+NA*11]);
G[71+NA*48] = tcrd[2]*X[23+NA*16] + (-1.142857142857143e+00*X[23+NA*9]);
G[72+NA*48] = tcrd[0]*X[24+NA*16] + (-1.069044967649698e+00*X[16+NA*15])+(6.998542122237653e-01*X[24+NA*10]);
G[73+NA*48] = tcrd[1]*X[24+NA*16] + (-1.069044967649698e+00*X[16+NA*14])+(6.998542122237653e-01*X[24+NA*11]);
G[74+NA*48] = tcrd[2]*X[24+NA*16] + (-1.142857142857143e+00*X[24+NA*9]);
G[0+NA*51] =  G[51];
G[1+NA*51] =  G[52];
G[2+NA*51] =  G[53];
G[3+NA*51] = -G[51+NA*3];
G[4+NA*51] = -G[52+NA*3];
G[5+NA*51] = -G[53+NA*3];
G[6+NA*51] = -G[51+NA*6];
G[7+NA*51] = -G[52+NA*6];
G[8+NA*51] = -G[53+NA*6];
G[9+NA*51] = -G[51+NA*9];
G[10+NA*51] = -G[52+NA*9];
G[11+NA*51] = -G[53+NA*9];
G[12+NA*51] =  G[51+NA*12];
G[13+NA*51] =  G[52+NA*12];
G[14+NA*51] =  G[53+NA*12];
G[15+NA*51] =  G[51+NA*15];
G[16+NA*51] =  G[52+NA*15];
G[17+NA*51] =  G[53+NA*15];
G[18+NA*51] =  G[51+NA*18];
G[19+NA*51] =  G[52+NA*18];
G[20+NA*51] =  G[53+NA*18];
G[21+NA*51] =  G[51+NA*21];
G[22+NA*51] =  G[52+NA*21];
G[23+NA*51] =  G[53+NA*21];
G[24+NA*51] =  G[51+NA*24];
G[25+NA*51] =  G[52+NA*24];
G[26+NA*51] =  G[53+NA*24];
G[27+NA*51] = -G[51+NA*27];
G[28+NA*51] = -G[52+NA*27];
G[29+NA*51] = -G[53+NA*27];
G[30+NA*51] = -G[51+NA*30];
G[31+NA*51] = -G[52+NA*30];
G[32+NA*51] = -G[53+NA*30];
G[33+NA*51] = -G[51+NA*33];
G[34+NA*51] = -G[52+NA*33];
G[35+NA*51] = -G[53+NA*33];
G[36+NA*51] = -G[51+NA*36];
G[37+NA*51] = -G[52+NA*36];
G[38+NA*51] = -G[53+NA*36];
G[39+NA*51] = -G[51+NA*39];
G[40+NA*51] = -G[52+NA*39];
G[41+NA*51] = -G[53+NA*39];
G[42+NA*51] = -G[51+NA*42];
G[43+NA*51] = -G[52+NA*42];
G[44+NA*51] = -G[53+NA*42];
G[45+NA*51] = -G[51+NA*45];
G[46+NA*51] = -G[52+NA*45];
G[47+NA*51] = -G[53+NA*45];
G[48+NA*51] =  G[51+NA*48];
G[49+NA*51] =  G[52+NA*48];
G[50+NA*51] =  G[53+NA*48];
G[48+NA*51] =  G[51+NA*48];
G[49+NA*51] =  G[52+NA*48];
G[50+NA*51] =  G[53+NA*48];
G[51+NA*51] = tcrd[0]*X[17+NA*17] + (-1.807015805810503e+00*X[17+NA*9])+(6.998542122237651e-01*X[17+NA*12]);
G[52+NA*51] = tcrd[1]*X[17+NA*17] + (6.998542122237651e-01*X[17+NA*13]);
G[53+NA*51] = tcrd[2]*X[17+NA*17] + (-2.213133340689953e+00*X[17+NA*10]);
G[54+NA*51] = tcrd[0]*X[18+NA*17] + (3.499271061118825e-01*X[17+NA*13])+(-9.035079029052513e-01*X[18+NA*9])+(3.499271061118825e-01*X[18+NA*12]);
G[55+NA*51] = tcrd[1]*X[18+NA*17] + (-9.035079029052513e-01*X[17+NA*9])+(-3.499271061118825e-01*X[17+NA*12])+(3.499271061118825e-01*X[18+NA*13]);
G[56+NA*51] = tcrd[2]*X[18+NA*17] + (-1.106566670344976e+00*X[17+NA*11])+(-1.106566670344976e+00*X[18+NA*10]);
G[57+NA*51] = tcrd[0]*X[19+NA*17] + (-7.824607964359518e-01*X[17+NA*10])+(2.020305089104422e-01*X[17+NA*14])+(-9.035079029052513e-01*X[19+NA*9])+(3.499271061118825e-01*X[19+NA*12]);
G[58+NA*51] = tcrd[1]*X[19+NA*17] + (7.824607964359518e-01*X[17+NA*11])+(2.020305089104422e-01*X[17+NA*15])+(3.499271061118825e-01*X[19+NA*13]);
G[59+NA*51] = tcrd[2]*X[19+NA*17] + (-9.897433186107870e-01*X[17+NA*12])+(-1.106566670344976e+00*X[19+NA*10]);
G[60+NA*51] = tcrd[0]*X[20+NA*17] + (-7.824607964359518e-01*X[17+NA*11])+(2.020305089104422e-01*X[17+NA*15])+(-9.035079029052513e-01*X[20+NA*9])+(3.499271061118825e-01*X[20+NA*12]);
G[61+NA*51] = tcrd[1]*X[20+NA*17] + (-7.824607964359518e-01*X[17+NA*10])+(-2.020305089104422e-01*X[17+NA*14])+(3.499271061118825e-01*X[20+NA*13]);
G[62+NA*51] = tcrd[2]*X[20+NA*17] + (-9.897433186107870e-01*X[17+NA*13])+(-1.106566670344976e+00*X[20+NA*10]);
G[63+NA*51] = tcrd[0]*X[21+NA*17] + (-9.258200997725513e-01*X[17+NA*12])+(-9.035079029052513e-01*X[21+NA*9])+(3.499271061118825e-01*X[21+NA*12]);
G[64+NA*51] = tcrd[1]*X[21+NA*17] + (9.258200997725513e-01*X[17+NA*13])+(3.499271061118825e-01*X[21+NA*13]);
G[65+NA*51] = tcrd[2]*X[21+NA*17] + (-7.559289460184544e-01*X[17+NA*14])+(-1.106566670344976e+00*X[21+NA*10]);
G[66+NA*51] = tcrd[0]*X[22+NA*17] + (-9.258200997725513e-01*X[17+NA*13])+(-9.035079029052513e-01*X[22+NA*9])+(3.499271061118825e-01*X[22+NA*12]);
G[67+NA*51] = tcrd[1]*X[22+NA*17] + (-9.258200997725513e-01*X[17+NA*12])+(3.499271061118825e-01*X[22+NA*13]);
G[68+NA*51] = tcrd[2]*X[22+NA*17] + (-7.559289460184544e-01*X[17+NA*15])+(-1.106566670344976e+00*X[22+NA*10]);
G[69+NA*51] = tcrd[0]*X[23+NA*17] + (-1.069044967649698e+00*X[17+NA*14])+(-9.035079029052513e-01*X[23+NA*9])+(3.499271061118825e-01*X[23+NA*12]);
G[70+NA*51] = tcrd[1]*X[23+NA*17] + (1.069044967649698e+00*X[17+NA*15])+(3.499271061118825e-01*X[23+NA*13]);
G[71+NA*51] = tcrd[2]*X[23+NA*17] + (-1.106566670344976e+00*X[23+NA*10]);
G[72+NA*51] = tcrd[0]*X[24+NA*17] + (-1.069044967649698e+00*X[17+NA*15])+(-9.035079029052513e-01*X[24+NA*9])+(3.499271061118825e-01*X[24+NA*12]);
G[73+NA*51] = tcrd[1]*X[24+NA*17] + (-1.069044967649698e+00*X[17+NA*14])+(3.499271061118825e-01*X[24+NA*13]);
G[74+NA*51] = tcrd[2]*X[24+NA*17] + (-1.106566670344976e+00*X[24+NA*10]);
G[0+NA*54] =  G[54];
G[1+NA*54] =  G[55];
G[2+NA*54] =  G[56];
G[3+NA*54] = -G[54+NA*3];
G[4+NA*54] = -G[55+NA*3];
G[5+NA*54] = -G[56+NA*3];
G[6+NA*54] = -G[54+NA*6];
G[7+NA*54] = -G[55+NA*6];
G[8+NA*54] = -G[56+NA*6];
G[9+NA*54] = -G[54+NA*9];
G[10+NA*54] = -G[55+NA*9];
G[11+NA*54] = -G[56+NA*9];
G[12+NA*54] =  G[54+NA*12];
G[13+NA*54] =  G[55+NA*12];
G[14+NA*54] =  G[56+NA*12];
G[15+NA*54] =  G[54+NA*15];
G[16+NA*54] =  G[55+NA*15];
G[17+NA*54] =  G[56+NA*15];
G[18+NA*54] =  G[54+NA*18];
G[19+NA*54] =  G[55+NA*18];
G[20+NA*54] =  G[56+NA*18];
G[21+NA*54] =  G[54+NA*21];
G[22+NA*54] =  G[55+NA*21];
G[23+NA*54] =  G[56+NA*21];
G[24+NA*54] =  G[54+NA*24];
G[25+NA*54] =  G[55+NA*24];
G[26+NA*54] =  G[56+NA*24];
G[27+NA*54] = -G[54+NA*27];
G[28+NA*54] = -G[55+NA*27];
G[29+NA*54] = -G[56+NA*27];
G[30+NA*54] = -G[54+NA*30];
G[31+NA*54] = -G[55+NA*30];
G[32+NA*54] = -G[56+NA*30];
G[33+NA*54] = -G[54+NA*33];
G[34+NA*54] = -G[55+NA*33];
G[35+NA*54] = -G[56+NA*33];
G[36+NA*54] = -G[54+NA*36];
G[37+NA*54] = -G[55+NA*36];
G[38+NA*54] = -G[56+NA*36];
G[39+NA*54] = -G[54+NA*39];
G[40+NA*54] = -G[55+NA*39];
G[41+NA*54] = -G[56+NA*39];
G[42+NA*54] = -G[54+NA*42];
G[43+NA*54] = -G[55+NA*42];
G[44+NA*54] = -G[56+NA*42];
G[45+NA*54] = -G[54+NA*45];
G[46+NA*54] = -G[55+NA*45];
G[47+NA*54] = -G[56+NA*45];
G[48+NA*54] =  G[54+NA*48];
G[49+NA*54] =  G[55+NA*48];
G[50+NA*54] =  G[56+NA*48];
G[48+NA*54] =  G[54+NA*48];
G[49+NA*54] =  G[55+NA*48];
G[50+NA*54] =  G[56+NA*48];
G[51+NA*54] =  G[54+NA*51];
G[52+NA*54] =  G[55+NA*51];
G[53+NA*54] =  G[56+NA*51];
G[51+NA*54] =  G[54+NA*51];
G[52+NA*54] =  G[55+NA*51];
G[53+NA*54] =  G[56+NA*51];
G[54+NA*54] = tcrd[0]*X[18+NA*18] + (6.998542122237651e-01*X[18+NA*13]);
G[55+NA*54] = tcrd[1]*X[18+NA*18] + (-1.807015805810503e+00*X[18+NA*9])+(-6.998542122237651e-01*X[18+NA*12]);
G[56+NA*54] = tcrd[2]*X[18+NA*18] + (-2.213133340689953e+00*X[18+NA*11]);
G[57+NA*54] = tcrd[0]*X[19+NA*18] + (-7.824607964359518e-01*X[18+NA*10])+(2.020305089104422e-01*X[18+NA*14])+(3.499271061118825e-01*X[19+NA*13]);
G[58+NA*54] = tcrd[1]*X[19+NA*18] + (7.824607964359518e-01*X[18+NA*11])+(2.020305089104422e-01*X[18+NA*15])+(-9.035079029052513e-01*X[19+NA*9])+(-3.499271061118825e-01*X[19+NA*12]);
G[59+NA*54] = tcrd[2]*X[19+NA*18] + (-9.897433186107870e-01*X[18+NA*12])+(-1.106566670344976e+00*X[19+NA*11]);
G[60+NA*54] = tcrd[0]*X[20+NA*18] + (-7.824607964359518e-01*X[18+NA*11])+(2.020305089104422e-01*X[18+NA*15])+(3.499271061118825e-01*X[20+NA*13]);
G[61+NA*54] = tcrd[1]*X[20+NA*18] + (-7.824607964359518e-01*X[18+NA*10])+(-2.020305089104422e-01*X[18+NA*14])+(-9.035079029052513e-01*X[20+NA*9])+(-3.499271061118825e-01*X[20+NA*12]);
G[62+NA*54] = tcrd[2]*X[20+NA*18] + (-9.897433186107870e-01*X[18+NA*13])+(-1.106566670344976e+00*X[20+NA*11]);
G[63+NA*54] = tcrd[0]*X[21+NA*18] + (-9.258200997725513e-01*X[18+NA*12])+(3.499271061118825e-01*X[21+NA*13]);
G[64+NA*54] = tcrd[1]*X[21+NA*18] + (9.258200997725513e-01*X[18+NA*13])+(-9.035079029052513e-01*X[21+NA*9])+(-3.499271061118825e-01*X[21+NA*12]);
G[65+NA*54] = tcrd[2]*X[21+NA*18] + (-7.559289460184544e-01*X[18+NA*14])+(-1.106566670344976e+00*X[21+NA*11]);
G[66+NA*54] = tcrd[0]*X[22+NA*18] + (-9.258200997725513e-01*X[18+NA*13])+(3.499271061118825e-01*X[22+NA*13]);
G[67+NA*54] = tcrd[1]*X[22+NA*18] + (-9.258200997725513e-01*X[18+NA*12])+(-9.035079029052513e-01*X[22+NA*9])+(-3.499271061118825e-01*X[22+NA*12]);
G[68+NA*54] = tcrd[2]*X[22+NA*18] + (-7.559289460184544e-01*X[18+NA*15])+(-1.106566670344976e+00*X[22+NA*11]);
G[69+NA*54] = tcrd[0]*X[23+NA*18] + (-1.069044967649698e+00*X[18+NA*14])+(3.499271061118825e-01*X[23+NA*13]);
G[70+NA*54] = tcrd[1]*X[23+NA*18] + (1.069044967649698e+00*X[18+NA*15])+(-9.035079029052513e-01*X[23+NA*9])+(-3.499271061118825e-01*X[23+NA*12]);
G[71+NA*54] = tcrd[2]*X[23+NA*18] + (-1.106566670344976e+00*X[23+NA*11]);
G[72+NA*54] = tcrd[0]*X[24+NA*18] + (-1.069044967649698e+00*X[18+NA*15])+(3.499271061118825e-01*X[24+NA*13]);
G[73+NA*54] = tcrd[1]*X[24+NA*18] + (-1.069044967649698e+00*X[18+NA*14])+(-9.035079029052513e-01*X[24+NA*9])+(-3.499271061118825e-01*X[24+NA*12]);
G[74+NA*54] = tcrd[2]*X[24+NA*18] + (-1.106566670344976e+00*X[24+NA*11]);
G[0+NA*57] =  G[57];
G[1+NA*57] =  G[58];
G[2+NA*57] =  G[59];
G[3+NA*57] = -G[57+NA*3];
G[4+NA*57] = -G[58+NA*3];
G[5+NA*57] = -G[59+NA*3];
G[6+NA*57] = -G[57+NA*6];
G[7+NA*57] = -G[58+NA*6];
G[8+NA*57] = -G[59+NA*6];
G[9+NA*57] = -G[57+NA*9];
G[10+NA*57] = -G[58+NA*9];
G[11+NA*57] = -G[59+NA*9];
G[12+NA*57] =  G[57+NA*12];
G[13+NA*57] =  G[58+NA*12];
G[14+NA*57] =  G[59+NA*12];
G[15+NA*57] =  G[57+NA*15];
G[16+NA*57] =  G[58+NA*15];
G[17+NA*57] =  G[59+NA*15];
G[18+NA*57] =  G[57+NA*18];
G[19+NA*57] =  G[58+NA*18];
G[20+NA*57] =  G[59+NA*18];
G[21+NA*57] =  G[57+NA*21];
G[22+NA*57] =  G[58+NA*21];
G[23+NA*57] =  G[59+NA*21];
G[24+NA*57] =  G[57+NA*24];
G[25+NA*57] =  G[58+NA*24];
G[26+NA*57] =  G[59+NA*24];
G[27+NA*57] = -G[57+NA*27];
G[28+NA*57] = -G[58+NA*27];
G[29+NA*57] = -G[59+NA*27];
G[30+NA*57] = -G[57+NA*30];
G[31+NA*57] = -G[58+NA*30];
G[32+NA*57] = -G[59+NA*30];
G[33+NA*57] = -G[57+NA*33];
G[34+NA*57] = -G[58+NA*33];
G[35+NA*57] = -G[59+NA*33];
G[36+NA*57] = -G[57+NA*36];
G[37+NA*57] = -G[58+NA*36];
G[38+NA*57] = -G[59+NA*36];
G[39+NA*57] = -G[57+NA*39];
G[40+NA*57] = -G[58+NA*39];
G[41+NA*57] = -G[59+NA*39];
G[42+NA*57] = -G[57+NA*42];
G[43+NA*57] = -G[58+NA*42];
G[44+NA*57] = -G[59+NA*42];
G[45+NA*57] = -G[57+NA*45];
G[46+NA*57] = -G[58+NA*45];
G[47+NA*57] = -G[59+NA*45];
G[48+NA*57] =  G[57+NA*48];
G[49+NA*57] =  G[58+NA*48];
G[50+NA*57] =  G[59+NA*48];
G[48+NA*57] =  G[57+NA*48];
G[49+NA*57] =  G[58+NA*48];
G[50+NA*57] =  G[59+NA*48];
G[51+NA*57] =  G[57+NA*51];
G[52+NA*57] =  G[58+NA*51];
G[53+NA*57] =  G[59+NA*51];
G[51+NA*57] =  G[57+NA*51];
G[52+NA*57] =  G[58+NA*51];
G[53+NA*57] =  G[59+NA*51];
G[54+NA*57] =  G[57+NA*54];
G[55+NA*57] =  G[58+NA*54];
G[56+NA*57] =  G[59+NA*54];
G[54+NA*57] =  G[57+NA*54];
G[55+NA*57] =  G[58+NA*54];
G[56+NA*57] =  G[59+NA*54];
G[57+NA*57] = tcrd[0]*X[19+NA*19] + (-1.564921592871904e+00*X[19+NA*10])+(4.040610178208843e-01*X[19+NA*14]);
G[58+NA*57] = tcrd[1]*X[19+NA*19] + (1.564921592871904e+00*X[19+NA*11])+(4.040610178208843e-01*X[19+NA*15]);
G[59+NA*57] = tcrd[2]*X[19+NA*19] + (-1.979486637221574e+00*X[19+NA*12]);
G[60+NA*57] = tcrd[0]*X[20+NA*19] + (-7.824607964359518e-01*X[19+NA*11])+(2.020305089104422e-01*X[19+NA*15])+(-7.824607964359518e-01*X[20+NA*10])+(2.020305089104422e-01*X[20+NA*14]);
G[61+NA*57] = tcrd[1]*X[20+NA*19] + (-7.824607964359518e-01*X[19+NA*10])+(-2.020305089104422e-01*X[19+NA*14])+(7.824607964359518e-01*X[20+NA*11])+(2.020305089104422e-01*X[20+NA*15]);
G[62+NA*57] = tcrd[2]*X[20+NA*19] + (-9.897433186107870e-01*X[19+NA*13])+(-9.897433186107870e-01*X[20+NA*12]);
G[63+NA*57] = tcrd[0]*X[21+NA*19] + (-9.258200997725513e-01*X[19+NA*12])+(-7.824607964359518e-01*X[21+NA*10])+(2.020305089104422e-01*X[21+NA*14]);
G[64+NA*57] = tcrd[1]*X[21+NA*19] + (9.258200997725513e-01*X[19+NA*13])+(7.824607964359518e-01*X[21+NA*11])+(2.020305089104422e-01*X[21+NA*15]);
G[65+NA*57] = tcrd[2]*X[21+NA*19] + (-7.559289460184544e-01*X[19+NA*14])+(-9.897433186107870e-01*X[21+NA*12]);
G[66+NA*57] = tcrd[0]*X[22+NA*19] + (-9.258200997725513e-01*X[19+NA*13])+(-7.824607964359518e-01*X[22+NA*10])+(2.020305089104422e-01*X[22+NA*14]);
G[67+NA*57] = tcrd[1]*X[22+NA*19] + (-9.258200997725513e-01*X[19+NA*12])+(7.824607964359518e-01*X[22+NA*11])+(2.020305089104422e-01*X[22+NA*15]);
G[68+NA*57] = tcrd[2]*X[22+NA*19] + (-7.559289460184544e-01*X[19+NA*15])+(-9.897433186107870e-01*X[22+NA*12]);
G[69+NA*57] = tcrd[0]*X[23+NA*19] + (-1.069044967649698e+00*X[19+NA*14])+(-7.824607964359518e-01*X[23+NA*10])+(2.020305089104422e-01*X[23+NA*14]);
G[70+NA*57] = tcrd[1]*X[23+NA*19] + (1.069044967649698e+00*X[19+NA*15])+(7.824607964359518e-01*X[23+NA*11])+(2.020305089104422e-01*X[23+NA*15]);
G[71+NA*57] = tcrd[2]*X[23+NA*19] + (-9.897433186107870e-01*X[23+NA*12]);
G[72+NA*57] = tcrd[0]*X[24+NA*19] + (-1.069044967649698e+00*X[19+NA*15])+(-7.824607964359518e-01*X[24+NA*10])+(2.020305089104422e-01*X[24+NA*14]);
G[73+NA*57] = tcrd[1]*X[24+NA*19] + (-1.069044967649698e+00*X[19+NA*14])+(7.824607964359518e-01*X[24+NA*11])+(2.020305089104422e-01*X[24+NA*15]);
G[74+NA*57] = tcrd[2]*X[24+NA*19] + (-9.897433186107870e-01*X[24+NA*12]);
G[0+NA*60] =  G[60];
G[1+NA*60] =  G[61];
G[2+NA*60] =  G[62];
G[3+NA*60] = -G[60+NA*3];
G[4+NA*60] = -G[61+NA*3];
G[5+NA*60] = -G[62+NA*3];
G[6+NA*60] = -G[60+NA*6];
G[7+NA*60] = -G[61+NA*6];
G[8+NA*60] = -G[62+NA*6];
G[9+NA*60] = -G[60+NA*9];
G[10+NA*60] = -G[61+NA*9];
G[11+NA*60] = -G[62+NA*9];
G[12+NA*60] =  G[60+NA*12];
G[13+NA*60] =  G[61+NA*12];
G[14+NA*60] =  G[62+NA*12];
G[15+NA*60] =  G[60+NA*15];
G[16+NA*60] =  G[61+NA*15];
G[17+NA*60] =  G[62+NA*15];
G[18+NA*60] =  G[60+NA*18];
G[19+NA*60] =  G[61+NA*18];
G[20+NA*60] =  G[62+NA*18];
G[21+NA*60] =  G[60+NA*21];
G[22+NA*60] =  G[61+NA*21];
G[23+NA*60] =  G[62+NA*21];
G[24+NA*60] =  G[60+NA*24];
G[25+NA*60] =  G[61+NA*24];
G[26+NA*60] =  G[62+NA*24];
G[27+NA*60] = -G[60+NA*27];
G[28+NA*60] = -G[61+NA*27];
G[29+NA*60] = -G[62+NA*27];
G[30+NA*60] = -G[60+NA*30];
G[31+NA*60] = -G[61+NA*30];
G[32+NA*60] = -G[62+NA*30];
G[33+NA*60] = -G[60+NA*33];
G[34+NA*60] = -G[61+NA*33];
G[35+NA*60] = -G[62+NA*33];
G[36+NA*60] = -G[60+NA*36];
G[37+NA*60] = -G[61+NA*36];
G[38+NA*60] = -G[62+NA*36];
G[39+NA*60] = -G[60+NA*39];
G[40+NA*60] = -G[61+NA*39];
G[41+NA*60] = -G[62+NA*39];
G[42+NA*60] = -G[60+NA*42];
G[43+NA*60] = -G[61+NA*42];
G[44+NA*60] = -G[62+NA*42];
G[45+NA*60] = -G[60+NA*45];
G[46+NA*60] = -G[61+NA*45];
G[47+NA*60] = -G[62+NA*45];
G[48+NA*60] =  G[60+NA*48];
G[49+NA*60] =  G[61+NA*48];
G[50+NA*60] =  G[62+NA*48];
G[48+NA*60] =  G[60+NA*48];
G[49+NA*60] =  G[61+NA*48];
G[50+NA*60] =  G[62+NA*48];
G[51+NA*60] =  G[60+NA*51];
G[52+NA*60] =  G[61+NA*51];
G[53+NA*60] =  G[62+NA*51];
G[51+NA*60] =  G[60+NA*51];
G[52+NA*60] =  G[61+NA*51];
G[53+NA*60] =  G[62+NA*51];
G[54+NA*60] =  G[60+NA*54];
G[55+NA*60] =  G[61+NA*54];
G[56+NA*60] =  G[62+NA*54];
G[54+NA*60] =  G[60+NA*54];
G[55+NA*60] =  G[61+NA*54];
G[56+NA*60] =  G[62+NA*54];
G[57+NA*60] =  G[60+NA*57];
G[58+NA*60] =  G[61+NA*57];
G[59+NA*60] =  G[62+NA*57];
G[57+NA*60] =  G[60+NA*57];
G[58+NA*60] =  G[61+NA*57];
G[59+NA*60] =  G[62+NA*57];
G[60+NA*60] = tcrd[0]*X[20+NA*20] + (-1.564921592871904e+00*X[20+NA*11])+(4.040610178208843e-01*X[20+NA*15]);
G[61+NA*60] = tcrd[1]*X[20+NA*20] + (-1.564921592871904e+00*X[20+NA*10])+(-4.040610178208843e-01*X[20+NA*14]);
G[62+NA*60] = tcrd[2]*X[20+NA*20] + (-1.979486637221574e+00*X[20+NA*13]);
G[63+NA*60] = tcrd[0]*X[21+NA*20] + (-9.258200997725513e-01*X[20+NA*12])+(-7.824607964359518e-01*X[21+NA*11])+(2.020305089104422e-01*X[21+NA*15]);
G[64+NA*60] = tcrd[1]*X[21+NA*20] + (9.258200997725513e-01*X[20+NA*13])+(-7.824607964359518e-01*X[21+NA*10])+(-2.020305089104422e-01*X[21+NA*14]);
G[65+NA*60] = tcrd[2]*X[21+NA*20] + (-7.559289460184544e-01*X[20+NA*14])+(-9.897433186107870e-01*X[21+NA*13]);
G[66+NA*60] = tcrd[0]*X[22+NA*20] + (-9.258200997725513e-01*X[20+NA*13])+(-7.824607964359518e-01*X[22+NA*11])+(2.020305089104422e-01*X[22+NA*15]);
G[67+NA*60] = tcrd[1]*X[22+NA*20] + (-9.258200997725513e-01*X[20+NA*12])+(-7.824607964359518e-01*X[22+NA*10])+(-2.020305089104422e-01*X[22+NA*14]);
G[68+NA*60] = tcrd[2]*X[22+NA*20] + (-7.559289460184544e-01*X[20+NA*15])+(-9.897433186107870e-01*X[22+NA*13]);
G[69+NA*60] = tcrd[0]*X[23+NA*20] + (-1.069044967649698e+00*X[20+NA*14])+(-7.824607964359518e-01*X[23+NA*11])+(2.020305089104422e-01*X[23+NA*15]);
G[70+NA*60] = tcrd[1]*X[23+NA*20] + (1.069044967649698e+00*X[20+NA*15])+(-7.824607964359518e-01*X[23+NA*10])+(-2.020305089104422e-01*X[23+NA*14]);
G[71+NA*60] = tcrd[2]*X[23+NA*20] + (-9.897433186107870e-01*X[23+NA*13]);
G[72+NA*60] = tcrd[0]*X[24+NA*20] + (-1.069044967649698e+00*X[20+NA*15])+(-7.824607964359518e-01*X[24+NA*11])+(2.020305089104422e-01*X[24+NA*15]);
G[73+NA*60] = tcrd[1]*X[24+NA*20] + (-1.069044967649698e+00*X[20+NA*14])+(-7.824607964359518e-01*X[24+NA*10])+(-2.020305089104422e-01*X[24+NA*14]);
G[74+NA*60] = tcrd[2]*X[24+NA*20] + (-9.897433186107870e-01*X[24+NA*13]);
G[0+NA*63] =  G[63];
G[1+NA*63] =  G[64];
G[2+NA*63] =  G[65];
G[3+NA*63] = -G[63+NA*3];
G[4+NA*63] = -G[64+NA*3];
G[5+NA*63] = -G[65+NA*3];
G[6+NA*63] = -G[63+NA*6];
G[7+NA*63] = -G[64+NA*6];
G[8+NA*63] = -G[65+NA*6];
G[9+NA*63] = -G[63+NA*9];
G[10+NA*63] = -G[64+NA*9];
G[11+NA*63] = -G[65+NA*9];
G[12+NA*63] =  G[63+NA*12];
G[13+NA*63] =  G[64+NA*12];
G[14+NA*63] =  G[65+NA*12];
G[15+NA*63] =  G[63+NA*15];
G[16+NA*63] =  G[64+NA*15];
G[17+NA*63] =  G[65+NA*15];
G[18+NA*63] =  G[63+NA*18];
G[19+NA*63] =  G[64+NA*18];
G[20+NA*63] =  G[65+NA*18];
G[21+NA*63] =  G[63+NA*21];
G[22+NA*63] =  G[64+NA*21];
G[23+NA*63] =  G[65+NA*21];
G[24+NA*63] =  G[63+NA*24];
G[25+NA*63] =  G[64+NA*24];
G[26+NA*63] =  G[65+NA*24];
G[27+NA*63] = -G[63+NA*27];
G[28+NA*63] = -G[64+NA*27];
G[29+NA*63] = -G[65+NA*27];
G[30+NA*63] = -G[63+NA*30];
G[31+NA*63] = -G[64+NA*30];
G[32+NA*63] = -G[65+NA*30];
G[33+NA*63] = -G[63+NA*33];
G[34+NA*63] = -G[64+NA*33];
G[35+NA*63] = -G[65+NA*33];
G[36+NA*63] = -G[63+NA*36];
G[37+NA*63] = -G[64+NA*36];
G[38+NA*63] = -G[65+NA*36];
G[39+NA*63] = -G[63+NA*39];
G[40+NA*63] = -G[64+NA*39];
G[41+NA*63] = -G[65+NA*39];
G[42+NA*63] = -G[63+NA*42];
G[43+NA*63] = -G[64+NA*42];
G[44+NA*63] = -G[65+NA*42];
G[45+NA*63] = -G[63+NA*45];
G[46+NA*63] = -G[64+NA*45];
G[47+NA*63] = -G[65+NA*45];
G[48+NA*63] =  G[63+NA*48];
G[49+NA*63] =  G[64+NA*48];
G[50+NA*63] =  G[65+NA*48];
G[48+NA*63] =  G[63+NA*48];
G[49+NA*63] =  G[64+NA*48];
G[50+NA*63] =  G[65+NA*48];
G[51+NA*63] =  G[63+NA*51];
G[52+NA*63] =  G[64+NA*51];
G[53+NA*63] =  G[65+NA*51];
G[51+NA*63] =  G[63+NA*51];
G[52+NA*63] =  G[64+NA*51];
G[53+NA*63] =  G[65+NA*51];
G[54+NA*63] =  G[63+NA*54];
G[55+NA*63] =  G[64+NA*54];
G[56+NA*63] =  G[65+NA*54];
G[54+NA*63] =  G[63+NA*54];
G[55+NA*63] =  G[64+NA*54];
G[56+NA*63] =  G[65+NA*54];
G[57+NA*63] =  G[63+NA*57];
G[58+NA*63] =  G[64+NA*57];
G[59+NA*63] =  G[65+NA*57];
G[57+NA*63] =  G[63+NA*57];
G[58+NA*63] =  G[64+NA*57];
G[59+NA*63] =  G[65+NA*57];
G[60+NA*63] =  G[63+NA*60];
G[61+NA*63] =  G[64+NA*60];
G[62+NA*63] =  G[65+NA*60];
G[60+NA*63] =  G[63+NA*60];
G[61+NA*63] =  G[64+NA*60];
G[62+NA*63] =  G[65+NA*60];
G[63+NA*63] = tcrd[0]*X[21+NA*21] + (-1.851640199545103e+00*X[21+NA*12]);
G[64+NA*63] = tcrd[1]*X[21+NA*21] + (1.851640199545103e+00*X[21+NA*13]);
G[65+NA*63] = tcrd[2]*X[21+NA*21] + (-1.511857892036909e+00*X[21+NA*14]);
G[66+NA*63] = tcrd[0]*X[22+NA*21] + (-9.258200997725513e-01*X[21+NA*13])+(-9.258200997725513e-01*X[22+NA*12]);
G[67+NA*63] = tcrd[1]*X[22+NA*21] + (-9.258200997725513e-01*X[21+NA*12])+(9.258200997725513e-01*X[22+NA*13]);
G[68+NA*63] = tcrd[2]*X[22+NA*21] + (-7.559289460184544e-01*X[21+NA*15])+(-7.559289460184544e-01*X[22+NA*14]);
G[69+NA*63] = tcrd[0]*X[23+NA*21] + (-1.069044967649698e+00*X[21+NA*14])+(-9.258200997725513e-01*X[23+NA*12]);
G[70+NA*63] = tcrd[1]*X[23+NA*21] + (1.069044967649698e+00*X[21+NA*15])+(9.258200997725513e-01*X[23+NA*13]);
G[71+NA*63] = tcrd[2]*X[23+NA*21] + (-7.559289460184544e-01*X[23+NA*14]);
G[72+NA*63] = tcrd[0]*X[24+NA*21] + (-1.069044967649698e+00*X[21+NA*15])+(-9.258200997725513e-01*X[24+NA*12]);
G[73+NA*63] = tcrd[1]*X[24+NA*21] + (-1.069044967649698e+00*X[21+NA*14])+(9.258200997725513e-01*X[24+NA*13]);
G[74+NA*63] = tcrd[2]*X[24+NA*21] + (-7.559289460184544e-01*X[24+NA*14]);
G[0+NA*66] =  G[66];
G[1+NA*66] =  G[67];
G[2+NA*66] =  G[68];
G[3+NA*66] = -G[66+NA*3];
G[4+NA*66] = -G[67+NA*3];
G[5+NA*66] = -G[68+NA*3];
G[6+NA*66] = -G[66+NA*6];
G[7+NA*66] = -G[67+NA*6];
G[8+NA*66] = -G[68+NA*6];
G[9+NA*66] = -G[66+NA*9];
G[10+NA*66] = -G[67+NA*9];
G[11+NA*66] = -G[68+NA*9];
G[12+NA*66] =  G[66+NA*12];
G[13+NA*66] =  G[67+NA*12];
G[14+NA*66] =  G[68+NA*12];
G[15+NA*66] =  G[66+NA*15];
G[16+NA*66] =  G[67+NA*15];
G[17+NA*66] =  G[68+NA*15];
G[18+NA*66] =  G[66+NA*18];
G[19+NA*66] =  G[67+NA*18];
G[20+NA*66] =  G[68+NA*18];
G[21+NA*66] =  G[66+NA*21];
G[22+NA*66] =  G[67+NA*21];
G[23+NA*66] =  G[68+NA*21];
G[24+NA*66] =  G[66+NA*24];
G[25+NA*66] =  G[67+NA*24];
G[26+NA*66] =  G[68+NA*24];
G[27+NA*66] = -G[66+NA*27];
G[28+NA*66] = -G[67+NA*27];
G[29+NA*66] = -G[68+NA*27];
G[30+NA*66] = -G[66+NA*30];
G[31+NA*66] = -G[67+NA*30];
G[32+NA*66] = -G[68+NA*30];
G[33+NA*66] = -G[66+NA*33];
G[34+NA*66] = -G[67+NA*33];
G[35+NA*66] = -G[68+NA*33];
G[36+NA*66] = -G[66+NA*36];
G[37+NA*66] = -G[67+NA*36];
G[38+NA*66] = -G[68+NA*36];
G[39+NA*66] = -G[66+NA*39];
G[40+NA*66] = -G[67+NA*39];
G[41+NA*66] = -G[68+NA*39];
G[42+NA*66] = -G[66+NA*42];
G[43+NA*66] = -G[67+NA*42];
G[44+NA*66] = -G[68+NA*42];
G[45+NA*66] = -G[66+NA*45];
G[46+NA*66] = -G[67+NA*45];
G[47+NA*66] = -G[68+NA*45];
G[48+NA*66] =  G[66+NA*48];
G[49+NA*66] =  G[67+NA*48];
G[50+NA*66] =  G[68+NA*48];
G[48+NA*66] =  G[66+NA*48];
G[49+NA*66] =  G[67+NA*48];
G[50+NA*66] =  G[68+NA*48];
G[51+NA*66] =  G[66+NA*51];
G[52+NA*66] =  G[67+NA*51];
G[53+NA*66] =  G[68+NA*51];
G[51+NA*66] =  G[66+NA*51];
G[52+NA*66] =  G[67+NA*51];
G[53+NA*66] =  G[68+NA*51];
G[54+NA*66] =  G[66+NA*54];
G[55+NA*66] =  G[67+NA*54];
G[56+NA*66] =  G[68+NA*54];
G[54+NA*66] =  G[66+NA*54];
G[55+NA*66] =  G[67+NA*54];
G[56+NA*66] =  G[68+NA*54];
G[57+NA*66] =  G[66+NA*57];
G[58+NA*66] =  G[67+NA*57];
G[59+NA*66] =  G[68+NA*57];
G[57+NA*66] =  G[66+NA*57];
G[58+NA*66] =  G[67+NA*57];
G[59+NA*66] =  G[68+NA*57];
G[60+NA*66] =  G[66+NA*60];
G[61+NA*66] =  G[67+NA*60];
G[62+NA*66] =  G[68+NA*60];
G[60+NA*66] =  G[66+NA*60];
G[61+NA*66] =  G[67+NA*60];
G[62+NA*66] =  G[68+NA*60];
G[63+NA*66] =  G[66+NA*63];
G[64+NA*66] =  G[67+NA*63];
G[65+NA*66] =  G[68+NA*63];
G[63+NA*66] =  G[66+NA*63];
G[64+NA*66] =  G[67+NA*63];
G[65+NA*66] =  G[68+NA*63];
G[66+NA*66] = tcrd[0]*X[22+NA*22] + (-1.851640199545103e+00*X[22+NA*13]);
G[67+NA*66] = tcrd[1]*X[22+NA*22] + (-1.851640199545103e+00*X[22+NA*12]);
G[68+NA*66] = tcrd[2]*X[22+NA*22] + (-1.511857892036909e+00*X[22+NA*15]);
G[69+NA*66] = tcrd[0]*X[23+NA*22] + (-1.069044967649698e+00*X[22+NA*14])+(-9.258200997725513e-01*X[23+NA*13]);
G[70+NA*66] = tcrd[1]*X[23+NA*22] + (1.069044967649698e+00*X[22+NA*15])+(-9.258200997725513e-01*X[23+NA*12]);
G[71+NA*66] = tcrd[2]*X[23+NA*22] + (-7.559289460184544e-01*X[23+NA*15]);
G[72+NA*66] = tcrd[0]*X[24+NA*22] + (-1.069044967649698e+00*X[22+NA*15])+(-9.258200997725513e-01*X[24+NA*13]);
G[73+NA*66] = tcrd[1]*X[24+NA*22] + (-1.069044967649698e+00*X[22+NA*14])+(-9.258200997725513e-01*X[24+NA*12]);
G[74+NA*66] = tcrd[2]*X[24+NA*22] + (-7.559289460184544e-01*X[24+NA*15]);
G[0+NA*69] =  G[69];
G[1+NA*69] =  G[70];
G[2+NA*69] =  G[71];
G[3+NA*69] = -G[69+NA*3];
G[4+NA*69] = -G[70+NA*3];
G[5+NA*69] = -G[71+NA*3];
G[6+NA*69] = -G[69+NA*6];
G[7+NA*69] = -G[70+NA*6];
G[8+NA*69] = -G[71+NA*6];
G[9+NA*69] = -G[69+NA*9];
G[10+NA*69] = -G[70+NA*9];
G[11+NA*69] = -G[71+NA*9];
G[12+NA*69] =  G[69+NA*12];
G[13+NA*69] =  G[70+NA*12];
G[14+NA*69] =  G[71+NA*12];
G[15+NA*69] =  G[69+NA*15];
G[16+NA*69] =  G[70+NA*15];
G[17+NA*69] =  G[71+NA*15];
G[18+NA*69] =  G[69+NA*18];
G[19+NA*69] =  G[70+NA*18];
G[20+NA*69] =  G[71+NA*18];
G[21+NA*69] =  G[69+NA*21];
G[22+NA*69] =  G[70+NA*21];
G[23+NA*69] =  G[71+NA*21];
G[24+NA*69] =  G[69+NA*24];
G[25+NA*69] =  G[70+NA*24];
G[26+NA*69] =  G[71+NA*24];
G[27+NA*69] = -G[69+NA*27];
G[28+NA*69] = -G[70+NA*27];
G[29+NA*69] = -G[71+NA*27];
G[30+NA*69] = -G[69+NA*30];
G[31+NA*69] = -G[70+NA*30];
G[32+NA*69] = -G[71+NA*30];
G[33+NA*69] = -G[69+NA*33];
G[34+NA*69] = -G[70+NA*33];
G[35+NA*69] = -G[71+NA*33];
G[36+NA*69] = -G[69+NA*36];
G[37+NA*69] = -G[70+NA*36];
G[38+NA*69] = -G[71+NA*36];
G[39+NA*69] = -G[69+NA*39];
G[40+NA*69] = -G[70+NA*39];
G[41+NA*69] = -G[71+NA*39];
G[42+NA*69] = -G[69+NA*42];
G[43+NA*69] = -G[70+NA*42];
G[44+NA*69] = -G[71+NA*42];
G[45+NA*69] = -G[69+NA*45];
G[46+NA*69] = -G[70+NA*45];
G[47+NA*69] = -G[71+NA*45];
G[48+NA*69] =  G[69+NA*48];
G[49+NA*69] =  G[70+NA*48];
G[50+NA*69] =  G[71+NA*48];
G[48+NA*69] =  G[69+NA*48];
G[49+NA*69] =  G[70+NA*48];
G[50+NA*69] =  G[71+NA*48];
G[51+NA*69] =  G[69+NA*51];
G[52+NA*69] =  G[70+NA*51];
G[53+NA*69] =  G[71+NA*51];
G[51+NA*69] =  G[69+NA*51];
G[52+NA*69] =  G[70+NA*51];
G[53+NA*69] =  G[71+NA*51];
G[54+NA*69] =  G[69+NA*54];
G[55+NA*69] =  G[70+NA*54];
G[56+NA*69] =  G[71+NA*54];
G[54+NA*69] =  G[69+NA*54];
G[55+NA*69] =  G[70+NA*54];
G[56+NA*69] =  G[71+NA*54];
G[57+NA*69] =  G[69+NA*57];
G[58+NA*69] =  G[70+NA*57];
G[59+NA*69] =  G[71+NA*57];
G[57+NA*69] =  G[69+NA*57];
G[58+NA*69] =  G[70+NA*57];
G[59+NA*69] =  G[71+NA*57];
G[60+NA*69] =  G[69+NA*60];
G[61+NA*69] =  G[70+NA*60];
G[62+NA*69] =  G[71+NA*60];
G[60+NA*69] =  G[69+NA*60];
G[61+NA*69] =  G[70+NA*60];
G[62+NA*69] =  G[71+NA*60];
G[63+NA*69] =  G[69+NA*63];
G[64+NA*69] =  G[70+NA*63];
G[65+NA*69] =  G[71+NA*63];
G[63+NA*69] =  G[69+NA*63];
G[64+NA*69] =  G[70+NA*63];
G[65+NA*69] =  G[71+NA*63];
G[66+NA*69] =  G[69+NA*66];
G[67+NA*69] =  G[70+NA*66];
G[68+NA*69] =  G[71+NA*66];
G[66+NA*69] =  G[69+NA*66];
G[67+NA*69] =  G[70+NA*66];
G[68+NA*69] =  G[71+NA*66];
G[69+NA*69] = tcrd[0]*X[23+NA*23] + (-2.138089935299395e+00*X[23+NA*14]);
G[70+NA*69] = tcrd[1]*X[23+NA*23] + (2.138089935299395e+00*X[23+NA*15]);
G[71+NA*69] = tcrd[2]*X[23+NA*23];
G[72+NA*69] = tcrd[0]*X[24+NA*23] + (-1.069044967649698e+00*X[23+NA*15])+(-1.069044967649698e+00*X[24+NA*14]);
G[73+NA*69] = tcrd[1]*X[24+NA*23] + (-1.069044967649698e+00*X[23+NA*14])+(1.069044967649698e+00*X[24+NA*15]);
G[74+NA*69] = tcrd[2]*X[24+NA*23];
G[0+NA*72] =  G[72];
G[1+NA*72] =  G[73];
G[2+NA*72] =  G[74];
G[3+NA*72] = -G[72+NA*3];
G[4+NA*72] = -G[73+NA*3];
G[5+NA*72] = -G[74+NA*3];
G[6+NA*72] = -G[72+NA*6];
G[7+NA*72] = -G[73+NA*6];
G[8+NA*72] = -G[74+NA*6];
G[9+NA*72] = -G[72+NA*9];
G[10+NA*72] = -G[73+NA*9];
G[11+NA*72] = -G[74+NA*9];
G[12+NA*72] =  G[72+NA*12];
G[13+NA*72] =  G[73+NA*12];
G[14+NA*72] =  G[74+NA*12];
G[15+NA*72] =  G[72+NA*15];
G[16+NA*72] =  G[73+NA*15];
G[17+NA*72] =  G[74+NA*15];
G[18+NA*72] =  G[72+NA*18];
G[19+NA*72] =  G[73+NA*18];
G[20+NA*72] =  G[74+NA*18];
G[21+NA*72] =  G[72+NA*21];
G[22+NA*72] =  G[73+NA*21];
G[23+NA*72] =  G[74+NA*21];
G[24+NA*72] =  G[72+NA*24];
G[25+NA*72] =  G[73+NA*24];
G[26+NA*72] =  G[74+NA*24];
G[27+NA*72] = -G[72+NA*27];
G[28+NA*72] = -G[73+NA*27];
G[29+NA*72] = -G[74+NA*27];
G[30+NA*72] = -G[72+NA*30];
G[31+NA*72] = -G[73+NA*30];
G[32+NA*72] = -G[74+NA*30];
G[33+NA*72] = -G[72+NA*33];
G[34+NA*72] = -G[73+NA*33];
G[35+NA*72] = -G[74+NA*33];
G[36+NA*72] = -G[72+NA*36];
G[37+NA*72] = -G[73+NA*36];
G[38+NA*72] = -G[74+NA*36];
G[39+NA*72] = -G[72+NA*39];
G[40+NA*72] = -G[73+NA*39];
G[41+NA*72] = -G[74+NA*39];
G[42+NA*72] = -G[72+NA*42];
G[43+NA*72] = -G[73+NA*42];
G[44+NA*72] = -G[74+NA*42];
G[45+NA*72] = -G[72+NA*45];
G[46+NA*72] = -G[73+NA*45];
G[47+NA*72] = -G[74+NA*45];
G[48+NA*72] =  G[72+NA*48];
G[49+NA*72] =  G[73+NA*48];
G[50+NA*72] =  G[74+NA*48];
G[48+NA*72] =  G[72+NA*48];
G[49+NA*72] =  G[73+NA*48];
G[50+NA*72] =  G[74+NA*48];
G[51+NA*72] =  G[72+NA*51];
G[52+NA*72] =  G[73+NA*51];
G[53+NA*72] =  G[74+NA*51];
G[51+NA*72] =  G[72+NA*51];
G[52+NA*72] =  G[73+NA*51];
G[53+NA*72] =  G[74+NA*51];
G[54+NA*72] =  G[72+NA*54];
G[55+NA*72] =  G[73+NA*54];
G[56+NA*72] =  G[74+NA*54];
G[54+NA*72] =  G[72+NA*54];
G[55+NA*72] =  G[73+NA*54];
G[56+NA*72] =  G[74+NA*54];
G[57+NA*72] =  G[72+NA*57];
G[58+NA*72] =  G[73+NA*57];
G[59+NA*72] =  G[74+NA*57];
G[57+NA*72] =  G[72+NA*57];
G[58+NA*72] =  G[73+NA*57];
G[59+NA*72] =  G[74+NA*57];
G[60+NA*72] =  G[72+NA*60];
G[61+NA*72] =  G[73+NA*60];
G[62+NA*72] =  G[74+NA*60];
G[60+NA*72] =  G[72+NA*60];
G[61+NA*72] =  G[73+NA*60];
G[62+NA*72] =  G[74+NA*60];
G[63+NA*72] =  G[72+NA*63];
G[64+NA*72] =  G[73+NA*63];
G[65+NA*72] =  G[74+NA*63];
G[63+NA*72] =  G[72+NA*63];
G[64+NA*72] =  G[73+NA*63];
G[65+NA*72] =  G[74+NA*63];
G[66+NA*72] =  G[72+NA*66];
G[67+NA*72] =  G[73+NA*66];
G[68+NA*72] =  G[74+NA*66];
G[66+NA*72] =  G[72+NA*66];
G[67+NA*72] =  G[73+NA*66];
G[68+NA*72] =  G[74+NA*66];
G[69+NA*72] =  G[72+NA*69];
G[70+NA*72] =  G[73+NA*69];
G[71+NA*72] =  G[74+NA*69];
G[69+NA*72] =  G[72+NA*69];
G[70+NA*72] =  G[73+NA*69];
G[71+NA*72] =  G[74+NA*69];
G[72+NA*72] = tcrd[0]*X[24+NA*24] + (-2.138089935299395e+00*X[24+NA*15]);
G[73+NA*72] = tcrd[1]*X[24+NA*24] + (-2.138089935299395e+00*X[24+NA*14]);
G[74+NA*72] = tcrd[2]*X[24+NA*24];
}

template <int NA>
void ExpHobGrdBlk_HS( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[75] = tcrd[0]*X[25] + (-7.027283689263065e-01*X[17]);
G[76] = tcrd[1]*X[25] + (-7.027283689263065e-01*X[18]);
G[77] = tcrd[2]*X[25] + (1.111111111111111e+00*X[16]);
G[78] = tcrd[0]*X[26] + (8.606629658238704e-01*X[16])+(-3.849001794597505e-01*X[19]);
G[79] = tcrd[1]*X[26] + (-3.849001794597505e-01*X[20]);
G[80] = tcrd[2]*X[26] + (1.088662107903635e+00*X[17]);
G[81] = tcrd[0]*X[27] + (-3.849001794597505e-01*X[20]);
G[82] = tcrd[1]*X[27] + (8.606629658238704e-01*X[16])+(3.849001794597505e-01*X[19]);
G[83] = tcrd[2]*X[27] + (1.088662107903635e+00*X[18]);
G[84] = tcrd[0]*X[28] + (7.200822998230956e-01*X[17])+(-2.721655269759087e-01*X[21]);
G[85] = tcrd[1]*X[28] + (-7.200822998230956e-01*X[18])+(-2.721655269759087e-01*X[22]);
G[86] = tcrd[2]*X[28] + (1.018350154434631e+00*X[19]);
G[87] = tcrd[0]*X[29] + (7.200822998230956e-01*X[18])+(-2.721655269759087e-01*X[22]);
G[88] = tcrd[1]*X[29] + (7.200822998230956e-01*X[17])+(2.721655269759087e-01*X[21]);
G[89] = tcrd[2]*X[29] + (1.018350154434631e+00*X[20]);
G[90] = tcrd[0]*X[30] + (8.314794192830980e-01*X[19])+(-1.571348402636772e-01*X[23]);
G[91] = tcrd[1]*X[30] + (-8.314794192830980e-01*X[20])+(-1.571348402636772e-01*X[24]);
G[92] = tcrd[2]*X[30] + (8.888888888888888e-01*X[21]);
G[93] = tcrd[0]*X[31] + (8.314794192830980e-01*X[20])+(-1.571348402636772e-01*X[24]);
G[94] = tcrd[1]*X[31] + (8.314794192830980e-01*X[19])+(1.571348402636772e-01*X[23]);
G[95] = tcrd[2]*X[31] + (8.888888888888888e-01*X[22]);
G[96] = tcrd[0]*X[32] + (9.428090415820635e-01*X[21]);
G[97] = tcrd[1]*X[32] + (-9.428090415820635e-01*X[22]);
G[98] = tcrd[2]*X[32] + (6.666666666666667e-01*X[23]);
G[99] = tcrd[0]*X[33] + (9.428090415820635e-01*X[22]);
G[100] = tcrd[1]*X[33] + (9.428090415820635e-01*X[21]);
G[101] = tcrd[2]*X[33] + (6.666666666666667e-01*X[24]);
G[102] = tcrd[0]*X[34] + (1.054092553389460e+00*X[23]);
G[103] = tcrd[1]*X[34] + (-1.054092553389460e+00*X[24]);
G[104] = tcrd[2]*X[34];
G[105] = tcrd[0]*X[35] + (1.054092553389460e+00*X[24]);
G[106] = tcrd[1]*X[35] + (1.054092553389460e+00*X[23]);
G[107] = tcrd[2]*X[35];
}

template <int NA>
void ExpHobGrdBlk_HP( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[75+NA*3] = tcrd[0]*X[25+NA] + (-7.027283689263065e-01*X[17+NA]);
G[76+NA*3] = tcrd[1]*X[25+NA] + (-7.027283689263065e-01*X[18+NA]);
G[77+NA*3] = tcrd[2]*X[25+NA] + (1.111111111111111e+00*X[16+NA])+(-2.000000000000000e+00*X[25]);
G[78+NA*3] = tcrd[0]*X[26+NA] + (8.606629658238704e-01*X[16+NA])+(-3.849001794597505e-01*X[19+NA]);
G[79+NA*3] = tcrd[1]*X[26+NA] + (-3.849001794597505e-01*X[20+NA]);
G[80+NA*3] = tcrd[2]*X[26+NA] + (1.088662107903635e+00*X[17+NA])+(-2.000000000000000e+00*X[26]);
G[81+NA*3] = tcrd[0]*X[27+NA] + (-3.849001794597505e-01*X[20+NA]);
G[82+NA*3] = tcrd[1]*X[27+NA] + (8.606629658238704e-01*X[16+NA])+(3.849001794597505e-01*X[19+NA]);
G[83+NA*3] = tcrd[2]*X[27+NA] + (1.088662107903635e+00*X[18+NA])+(-2.000000000000000e+00*X[27]);
G[84+NA*3] = tcrd[0]*X[28+NA] + (7.200822998230956e-01*X[17+NA])+(-2.721655269759087e-01*X[21+NA]);
G[85+NA*3] = tcrd[1]*X[28+NA] + (-7.200822998230956e-01*X[18+NA])+(-2.721655269759087e-01*X[22+NA]);
G[86+NA*3] = tcrd[2]*X[28+NA] + (1.018350154434631e+00*X[19+NA])+(-2.000000000000000e+00*X[28]);
G[87+NA*3] = tcrd[0]*X[29+NA] + (7.200822998230956e-01*X[18+NA])+(-2.721655269759087e-01*X[22+NA]);
G[88+NA*3] = tcrd[1]*X[29+NA] + (7.200822998230956e-01*X[17+NA])+(2.721655269759087e-01*X[21+NA]);
G[89+NA*3] = tcrd[2]*X[29+NA] + (1.018350154434631e+00*X[20+NA])+(-2.000000000000000e+00*X[29]);
G[90+NA*3] = tcrd[0]*X[30+NA] + (8.314794192830980e-01*X[19+NA])+(-1.571348402636772e-01*X[23+NA]);
G[91+NA*3] = tcrd[1]*X[30+NA] + (-8.314794192830980e-01*X[20+NA])+(-1.571348402636772e-01*X[24+NA]);
G[92+NA*3] = tcrd[2]*X[30+NA] + (8.888888888888888e-01*X[21+NA])+(-2.000000000000000e+00*X[30]);
G[93+NA*3] = tcrd[0]*X[31+NA] + (8.314794192830980e-01*X[20+NA])+(-1.571348402636772e-01*X[24+NA]);
G[94+NA*3] = tcrd[1]*X[31+NA] + (8.314794192830980e-01*X[19+NA])+(1.571348402636772e-01*X[23+NA]);
G[95+NA*3] = tcrd[2]*X[31+NA] + (8.888888888888888e-01*X[22+NA])+(-2.000000000000000e+00*X[31]);
G[96+NA*3] = tcrd[0]*X[32+NA] + (9.428090415820635e-01*X[21+NA]);
G[97+NA*3] = tcrd[1]*X[32+NA] + (-9.428090415820635e-01*X[22+NA]);
G[98+NA*3] = tcrd[2]*X[32+NA] + (6.666666666666667e-01*X[23+NA])+(-2.000000000000000e+00*X[32]);
G[99+NA*3] = tcrd[0]*X[33+NA] + (9.428090415820635e-01*X[22+NA]);
G[100+NA*3] = tcrd[1]*X[33+NA] + (9.428090415820635e-01*X[21+NA]);
G[101+NA*3] = tcrd[2]*X[33+NA] + (6.666666666666667e-01*X[24+NA])+(-2.000000000000000e+00*X[33]);
G[102+NA*3] = tcrd[0]*X[34+NA] + (1.054092553389460e+00*X[23+NA]);
G[103+NA*3] = tcrd[1]*X[34+NA] + (-1.054092553389460e+00*X[24+NA]);
G[104+NA*3] = tcrd[2]*X[34+NA] + (-2.000000000000000e+00*X[34]);
G[105+NA*3] = tcrd[0]*X[35+NA] + (1.054092553389460e+00*X[24+NA]);
G[106+NA*3] = tcrd[1]*X[35+NA] + (1.054092553389460e+00*X[23+NA]);
G[107+NA*3] = tcrd[2]*X[35+NA] + (-2.000000000000000e+00*X[35]);
G[75+NA*6] = tcrd[0]*X[25+NA*2] + (-7.027283689263065e-01*X[17+NA*2])+(-2.000000000000000e+00*X[25]);
G[76+NA*6] = tcrd[1]*X[25+NA*2] + (-7.027283689263065e-01*X[18+NA*2]);
G[77+NA*6] = tcrd[2]*X[25+NA*2] + (1.111111111111111e+00*X[16+NA*2]);
G[78+NA*6] = tcrd[0]*X[26+NA*2] + (8.606629658238704e-01*X[16+NA*2])+(-3.849001794597505e-01*X[19+NA*2])+(-2.000000000000000e+00*X[26]);
G[79+NA*6] = tcrd[1]*X[26+NA*2] + (-3.849001794597505e-01*X[20+NA*2]);
G[80+NA*6] = tcrd[2]*X[26+NA*2] + (1.088662107903635e+00*X[17+NA*2]);
G[81+NA*6] = tcrd[0]*X[27+NA*2] + (-3.849001794597505e-01*X[20+NA*2])+(-2.000000000000000e+00*X[27]);
G[82+NA*6] = tcrd[1]*X[27+NA*2] + (8.606629658238704e-01*X[16+NA*2])+(3.849001794597505e-01*X[19+NA*2]);
G[83+NA*6] = tcrd[2]*X[27+NA*2] + (1.088662107903635e+00*X[18+NA*2]);
G[84+NA*6] = tcrd[0]*X[28+NA*2] + (7.200822998230956e-01*X[17+NA*2])+(-2.721655269759087e-01*X[21+NA*2])+(-2.000000000000000e+00*X[28]);
G[85+NA*6] = tcrd[1]*X[28+NA*2] + (-7.200822998230956e-01*X[18+NA*2])+(-2.721655269759087e-01*X[22+NA*2]);
G[86+NA*6] = tcrd[2]*X[28+NA*2] + (1.018350154434631e+00*X[19+NA*2]);
G[87+NA*6] = tcrd[0]*X[29+NA*2] + (7.200822998230956e-01*X[18+NA*2])+(-2.721655269759087e-01*X[22+NA*2])+(-2.000000000000000e+00*X[29]);
G[88+NA*6] = tcrd[1]*X[29+NA*2] + (7.200822998230956e-01*X[17+NA*2])+(2.721655269759087e-01*X[21+NA*2]);
G[89+NA*6] = tcrd[2]*X[29+NA*2] + (1.018350154434631e+00*X[20+NA*2]);
G[90+NA*6] = tcrd[0]*X[30+NA*2] + (8.314794192830980e-01*X[19+NA*2])+(-1.571348402636772e-01*X[23+NA*2])+(-2.000000000000000e+00*X[30]);
G[91+NA*6] = tcrd[1]*X[30+NA*2] + (-8.314794192830980e-01*X[20+NA*2])+(-1.571348402636772e-01*X[24+NA*2]);
G[92+NA*6] = tcrd[2]*X[30+NA*2] + (8.888888888888888e-01*X[21+NA*2]);
G[93+NA*6] = tcrd[0]*X[31+NA*2] + (8.314794192830980e-01*X[20+NA*2])+(-1.571348402636772e-01*X[24+NA*2])+(-2.000000000000000e+00*X[31]);
G[94+NA*6] = tcrd[1]*X[31+NA*2] + (8.314794192830980e-01*X[19+NA*2])+(1.571348402636772e-01*X[23+NA*2]);
G[95+NA*6] = tcrd[2]*X[31+NA*2] + (8.888888888888888e-01*X[22+NA*2]);
G[96+NA*6] = tcrd[0]*X[32+NA*2] + (9.428090415820635e-01*X[21+NA*2])+(-2.000000000000000e+00*X[32]);
G[97+NA*6] = tcrd[1]*X[32+NA*2] + (-9.428090415820635e-01*X[22+NA*2]);
G[98+NA*6] = tcrd[2]*X[32+NA*2] + (6.666666666666667e-01*X[23+NA*2]);
G[99+NA*6] = tcrd[0]*X[33+NA*2] + (9.428090415820635e-01*X[22+NA*2])+(-2.000000000000000e+00*X[33]);
G[100+NA*6] = tcrd[1]*X[33+NA*2] + (9.428090415820635e-01*X[21+NA*2]);
G[101+NA*6] = tcrd[2]*X[33+NA*2] + (6.666666666666667e-01*X[24+NA*2]);
G[102+NA*6] = tcrd[0]*X[34+NA*2] + (1.054092553389460e+00*X[23+NA*2])+(-2.000000000000000e+00*X[34]);
G[103+NA*6] = tcrd[1]*X[34+NA*2] + (-1.054092553389460e+00*X[24+NA*2]);
G[104+NA*6] = tcrd[2]*X[34+NA*2];
G[105+NA*6] = tcrd[0]*X[35+NA*2] + (1.054092553389460e+00*X[24+NA*2])+(-2.000000000000000e+00*X[35]);
G[106+NA*6] = tcrd[1]*X[35+NA*2] + (1.054092553389460e+00*X[23+NA*2]);
G[107+NA*6] = tcrd[2]*X[35+NA*2];
G[75+NA*9] = tcrd[0]*X[25+NA*3] + (-7.027283689263065e-01*X[17+NA*3]);
G[76+NA*9] = tcrd[1]*X[25+NA*3] + (-7.027283689263065e-01*X[18+NA*3])+(-2.000000000000000e+00*X[25]);
G[77+NA*9] = tcrd[2]*X[25+NA*3] + (1.111111111111111e+00*X[16+NA*3]);
G[78+NA*9] = tcrd[0]*X[26+NA*3] + (8.606629658238704e-01*X[16+NA*3])+(-3.849001794597505e-01*X[19+NA*3]);
G[79+NA*9] = tcrd[1]*X[26+NA*3] + (-3.849001794597505e-01*X[20+NA*3])+(-2.000000000000000e+00*X[26]);
G[80+NA*9] = tcrd[2]*X[26+NA*3] + (1.088662107903635e+00*X[17+NA*3]);
G[81+NA*9] = tcrd[0]*X[27+NA*3] + (-3.849001794597505e-01*X[20+NA*3]);
G[82+NA*9] = tcrd[1]*X[27+NA*3] + (8.606629658238704e-01*X[16+NA*3])+(3.849001794597505e-01*X[19+NA*3])+(-2.000000000000000e+00*X[27]);
G[83+NA*9] = tcrd[2]*X[27+NA*3] + (1.088662107903635e+00*X[18+NA*3]);
G[84+NA*9] = tcrd[0]*X[28+NA*3] + (7.200822998230956e-01*X[17+NA*3])+(-2.721655269759087e-01*X[21+NA*3]);
G[85+NA*9] = tcrd[1]*X[28+NA*3] + (-7.200822998230956e-01*X[18+NA*3])+(-2.721655269759087e-01*X[22+NA*3])+(-2.000000000000000e+00*X[28]);
G[86+NA*9] = tcrd[2]*X[28+NA*3] + (1.018350154434631e+00*X[19+NA*3]);
G[87+NA*9] = tcrd[0]*X[29+NA*3] + (7.200822998230956e-01*X[18+NA*3])+(-2.721655269759087e-01*X[22+NA*3]);
G[88+NA*9] = tcrd[1]*X[29+NA*3] + (7.200822998230956e-01*X[17+NA*3])+(2.721655269759087e-01*X[21+NA*3])+(-2.000000000000000e+00*X[29]);
G[89+NA*9] = tcrd[2]*X[29+NA*3] + (1.018350154434631e+00*X[20+NA*3]);
G[90+NA*9] = tcrd[0]*X[30+NA*3] + (8.314794192830980e-01*X[19+NA*3])+(-1.571348402636772e-01*X[23+NA*3]);
G[91+NA*9] = tcrd[1]*X[30+NA*3] + (-8.314794192830980e-01*X[20+NA*3])+(-1.571348402636772e-01*X[24+NA*3])+(-2.000000000000000e+00*X[30]);
G[92+NA*9] = tcrd[2]*X[30+NA*3] + (8.888888888888888e-01*X[21+NA*3]);
G[93+NA*9] = tcrd[0]*X[31+NA*3] + (8.314794192830980e-01*X[20+NA*3])+(-1.571348402636772e-01*X[24+NA*3]);
G[94+NA*9] = tcrd[1]*X[31+NA*3] + (8.314794192830980e-01*X[19+NA*3])+(1.571348402636772e-01*X[23+NA*3])+(-2.000000000000000e+00*X[31]);
G[95+NA*9] = tcrd[2]*X[31+NA*3] + (8.888888888888888e-01*X[22+NA*3]);
G[96+NA*9] = tcrd[0]*X[32+NA*3] + (9.428090415820635e-01*X[21+NA*3]);
G[97+NA*9] = tcrd[1]*X[32+NA*3] + (-9.428090415820635e-01*X[22+NA*3])+(-2.000000000000000e+00*X[32]);
G[98+NA*9] = tcrd[2]*X[32+NA*3] + (6.666666666666667e-01*X[23+NA*3]);
G[99+NA*9] = tcrd[0]*X[33+NA*3] + (9.428090415820635e-01*X[22+NA*3]);
G[100+NA*9] = tcrd[1]*X[33+NA*3] + (9.428090415820635e-01*X[21+NA*3])+(-2.000000000000000e+00*X[33]);
G[101+NA*9] = tcrd[2]*X[33+NA*3] + (6.666666666666667e-01*X[24+NA*3]);
G[102+NA*9] = tcrd[0]*X[34+NA*3] + (1.054092553389460e+00*X[23+NA*3]);
G[103+NA*9] = tcrd[1]*X[34+NA*3] + (-1.054092553389460e+00*X[24+NA*3])+(-2.000000000000000e+00*X[34]);
G[104+NA*9] = tcrd[2]*X[34+NA*3];
G[105+NA*9] = tcrd[0]*X[35+NA*3] + (1.054092553389460e+00*X[24+NA*3]);
G[106+NA*9] = tcrd[1]*X[35+NA*3] + (1.054092553389460e+00*X[23+NA*3])+(-2.000000000000000e+00*X[35]);
G[107+NA*9] = tcrd[2]*X[35+NA*3];
}

template <int NA>
void ExpHobGrdBlk_HD( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[75+NA*12] = tcrd[0]*X[25+NA*4] + (-7.027283689263065e-01*X[17+NA*4])+(6.666666666666666e-01*X[25+NA*2]);
G[76+NA*12] = tcrd[1]*X[25+NA*4] + (-7.027283689263065e-01*X[18+NA*4])+(6.666666666666666e-01*X[25+NA*3]);
G[77+NA*12] = tcrd[2]*X[25+NA*4] + (1.111111111111111e+00*X[16+NA*4])+(-1.333333333333333e+00*X[25+NA]);
G[78+NA*12] = tcrd[0]*X[26+NA*4] + (8.606629658238704e-01*X[16+NA*4])+(-3.849001794597505e-01*X[19+NA*4])+(6.666666666666666e-01*X[26+NA*2]);
G[79+NA*12] = tcrd[1]*X[26+NA*4] + (-3.849001794597505e-01*X[20+NA*4])+(6.666666666666666e-01*X[26+NA*3]);
G[80+NA*12] = tcrd[2]*X[26+NA*4] + (1.088662107903635e+00*X[17+NA*4])+(-1.333333333333333e+00*X[26+NA]);
G[81+NA*12] = tcrd[0]*X[27+NA*4] + (-3.849001794597505e-01*X[20+NA*4])+(6.666666666666666e-01*X[27+NA*2]);
G[82+NA*12] = tcrd[1]*X[27+NA*4] + (8.606629658238704e-01*X[16+NA*4])+(3.849001794597505e-01*X[19+NA*4])+(6.666666666666666e-01*X[27+NA*3]);
G[83+NA*12] = tcrd[2]*X[27+NA*4] + (1.088662107903635e+00*X[18+NA*4])+(-1.333333333333333e+00*X[27+NA]);
G[84+NA*12] = tcrd[0]*X[28+NA*4] + (7.200822998230956e-01*X[17+NA*4])+(-2.721655269759087e-01*X[21+NA*4])+(6.666666666666666e-01*X[28+NA*2]);
G[85+NA*12] = tcrd[1]*X[28+NA*4] + (-7.200822998230956e-01*X[18+NA*4])+(-2.721655269759087e-01*X[22+NA*4])+(6.666666666666666e-01*X[28+NA*3]);
G[86+NA*12] = tcrd[2]*X[28+NA*4] + (1.018350154434631e+00*X[19+NA*4])+(-1.333333333333333e+00*X[28+NA]);
G[87+NA*12] = tcrd[0]*X[29+NA*4] + (7.200822998230956e-01*X[18+NA*4])+(-2.721655269759087e-01*X[22+NA*4])+(6.666666666666666e-01*X[29+NA*2]);
G[88+NA*12] = tcrd[1]*X[29+NA*4] + (7.200822998230956e-01*X[17+NA*4])+(2.721655269759087e-01*X[21+NA*4])+(6.666666666666666e-01*X[29+NA*3]);
G[89+NA*12] = tcrd[2]*X[29+NA*4] + (1.018350154434631e+00*X[20+NA*4])+(-1.333333333333333e+00*X[29+NA]);
G[90+NA*12] = tcrd[0]*X[30+NA*4] + (8.314794192830980e-01*X[19+NA*4])+(-1.571348402636772e-01*X[23+NA*4])+(6.666666666666666e-01*X[30+NA*2]);
G[91+NA*12] = tcrd[1]*X[30+NA*4] + (-8.314794192830980e-01*X[20+NA*4])+(-1.571348402636772e-01*X[24+NA*4])+(6.666666666666666e-01*X[30+NA*3]);
G[92+NA*12] = tcrd[2]*X[30+NA*4] + (8.888888888888888e-01*X[21+NA*4])+(-1.333333333333333e+00*X[30+NA]);
G[93+NA*12] = tcrd[0]*X[31+NA*4] + (8.314794192830980e-01*X[20+NA*4])+(-1.571348402636772e-01*X[24+NA*4])+(6.666666666666666e-01*X[31+NA*2]);
G[94+NA*12] = tcrd[1]*X[31+NA*4] + (8.314794192830980e-01*X[19+NA*4])+(1.571348402636772e-01*X[23+NA*4])+(6.666666666666666e-01*X[31+NA*3]);
G[95+NA*12] = tcrd[2]*X[31+NA*4] + (8.888888888888888e-01*X[22+NA*4])+(-1.333333333333333e+00*X[31+NA]);
G[96+NA*12] = tcrd[0]*X[32+NA*4] + (9.428090415820635e-01*X[21+NA*4])+(6.666666666666666e-01*X[32+NA*2]);
G[97+NA*12] = tcrd[1]*X[32+NA*4] + (-9.428090415820635e-01*X[22+NA*4])+(6.666666666666666e-01*X[32+NA*3]);
G[98+NA*12] = tcrd[2]*X[32+NA*4] + (6.666666666666667e-01*X[23+NA*4])+(-1.333333333333333e+00*X[32+NA]);
G[99+NA*12] = tcrd[0]*X[33+NA*4] + (9.428090415820635e-01*X[22+NA*4])+(6.666666666666666e-01*X[33+NA*2]);
G[100+NA*12] = tcrd[1]*X[33+NA*4] + (9.428090415820635e-01*X[21+NA*4])+(6.666666666666666e-01*X[33+NA*3]);
G[101+NA*12] = tcrd[2]*X[33+NA*4] + (6.666666666666667e-01*X[24+NA*4])+(-1.333333333333333e+00*X[33+NA]);
G[102+NA*12] = tcrd[0]*X[34+NA*4] + (1.054092553389460e+00*X[23+NA*4])+(6.666666666666666e-01*X[34+NA*2]);
G[103+NA*12] = tcrd[1]*X[34+NA*4] + (-1.054092553389460e+00*X[24+NA*4])+(6.666666666666666e-01*X[34+NA*3]);
G[104+NA*12] = tcrd[2]*X[34+NA*4] + (-1.333333333333333e+00*X[34+NA]);
G[105+NA*12] = tcrd[0]*X[35+NA*4] + (1.054092553389460e+00*X[24+NA*4])+(6.666666666666666e-01*X[35+NA*2]);
G[106+NA*12] = tcrd[1]*X[35+NA*4] + (1.054092553389460e+00*X[23+NA*4])+(6.666666666666666e-01*X[35+NA*3]);
G[107+NA*12] = tcrd[2]*X[35+NA*4] + (-1.333333333333333e+00*X[35+NA]);
G[75+NA*15] = tcrd[0]*X[25+NA*5] + (-7.027283689263065e-01*X[17+NA*5])+(-1.154700538379251e+00*X[25+NA]);
G[76+NA*15] = tcrd[1]*X[25+NA*5] + (-7.027283689263065e-01*X[18+NA*5]);
G[77+NA*15] = tcrd[2]*X[25+NA*5] + (1.111111111111111e+00*X[16+NA*5])+(-1.154700538379251e+00*X[25+NA*2]);
G[78+NA*15] = tcrd[0]*X[26+NA*5] + (8.606629658238704e-01*X[16+NA*5])+(-3.849001794597505e-01*X[19+NA*5])+(-1.154700538379251e+00*X[26+NA]);
G[79+NA*15] = tcrd[1]*X[26+NA*5] + (-3.849001794597505e-01*X[20+NA*5]);
G[80+NA*15] = tcrd[2]*X[26+NA*5] + (1.088662107903635e+00*X[17+NA*5])+(-1.154700538379251e+00*X[26+NA*2]);
G[81+NA*15] = tcrd[0]*X[27+NA*5] + (-3.849001794597505e-01*X[20+NA*5])+(-1.154700538379251e+00*X[27+NA]);
G[82+NA*15] = tcrd[1]*X[27+NA*5] + (8.606629658238704e-01*X[16+NA*5])+(3.849001794597505e-01*X[19+NA*5]);
G[83+NA*15] = tcrd[2]*X[27+NA*5] + (1.088662107903635e+00*X[18+NA*5])+(-1.154700538379251e+00*X[27+NA*2]);
G[84+NA*15] = tcrd[0]*X[28+NA*5] + (7.200822998230956e-01*X[17+NA*5])+(-2.721655269759087e-01*X[21+NA*5])+(-1.154700538379251e+00*X[28+NA]);
G[85+NA*15] = tcrd[1]*X[28+NA*5] + (-7.200822998230956e-01*X[18+NA*5])+(-2.721655269759087e-01*X[22+NA*5]);
G[86+NA*15] = tcrd[2]*X[28+NA*5] + (1.018350154434631e+00*X[19+NA*5])+(-1.154700538379251e+00*X[28+NA*2]);
G[87+NA*15] = tcrd[0]*X[29+NA*5] + (7.200822998230956e-01*X[18+NA*5])+(-2.721655269759087e-01*X[22+NA*5])+(-1.154700538379251e+00*X[29+NA]);
G[88+NA*15] = tcrd[1]*X[29+NA*5] + (7.200822998230956e-01*X[17+NA*5])+(2.721655269759087e-01*X[21+NA*5]);
G[89+NA*15] = tcrd[2]*X[29+NA*5] + (1.018350154434631e+00*X[20+NA*5])+(-1.154700538379251e+00*X[29+NA*2]);
G[90+NA*15] = tcrd[0]*X[30+NA*5] + (8.314794192830980e-01*X[19+NA*5])+(-1.571348402636772e-01*X[23+NA*5])+(-1.154700538379251e+00*X[30+NA]);
G[91+NA*15] = tcrd[1]*X[30+NA*5] + (-8.314794192830980e-01*X[20+NA*5])+(-1.571348402636772e-01*X[24+NA*5]);
G[92+NA*15] = tcrd[2]*X[30+NA*5] + (8.888888888888888e-01*X[21+NA*5])+(-1.154700538379251e+00*X[30+NA*2]);
G[93+NA*15] = tcrd[0]*X[31+NA*5] + (8.314794192830980e-01*X[20+NA*5])+(-1.571348402636772e-01*X[24+NA*5])+(-1.154700538379251e+00*X[31+NA]);
G[94+NA*15] = tcrd[1]*X[31+NA*5] + (8.314794192830980e-01*X[19+NA*5])+(1.571348402636772e-01*X[23+NA*5]);
G[95+NA*15] = tcrd[2]*X[31+NA*5] + (8.888888888888888e-01*X[22+NA*5])+(-1.154700538379251e+00*X[31+NA*2]);
G[96+NA*15] = tcrd[0]*X[32+NA*5] + (9.428090415820635e-01*X[21+NA*5])+(-1.154700538379251e+00*X[32+NA]);
G[97+NA*15] = tcrd[1]*X[32+NA*5] + (-9.428090415820635e-01*X[22+NA*5]);
G[98+NA*15] = tcrd[2]*X[32+NA*5] + (6.666666666666667e-01*X[23+NA*5])+(-1.154700538379251e+00*X[32+NA*2]);
G[99+NA*15] = tcrd[0]*X[33+NA*5] + (9.428090415820635e-01*X[22+NA*5])+(-1.154700538379251e+00*X[33+NA]);
G[100+NA*15] = tcrd[1]*X[33+NA*5] + (9.428090415820635e-01*X[21+NA*5]);
G[101+NA*15] = tcrd[2]*X[33+NA*5] + (6.666666666666667e-01*X[24+NA*5])+(-1.154700538379251e+00*X[33+NA*2]);
G[102+NA*15] = tcrd[0]*X[34+NA*5] + (1.054092553389460e+00*X[23+NA*5])+(-1.154700538379251e+00*X[34+NA]);
G[103+NA*15] = tcrd[1]*X[34+NA*5] + (-1.054092553389460e+00*X[24+NA*5]);
G[104+NA*15] = tcrd[2]*X[34+NA*5] + (-1.154700538379251e+00*X[34+NA*2]);
G[105+NA*15] = tcrd[0]*X[35+NA*5] + (1.054092553389460e+00*X[24+NA*5])+(-1.154700538379251e+00*X[35+NA]);
G[106+NA*15] = tcrd[1]*X[35+NA*5] + (1.054092553389460e+00*X[23+NA*5]);
G[107+NA*15] = tcrd[2]*X[35+NA*5] + (-1.154700538379251e+00*X[35+NA*2]);
G[75+NA*18] = tcrd[0]*X[25+NA*6] + (-7.027283689263065e-01*X[17+NA*6]);
G[76+NA*18] = tcrd[1]*X[25+NA*6] + (-7.027283689263065e-01*X[18+NA*6])+(-1.154700538379251e+00*X[25+NA]);
G[77+NA*18] = tcrd[2]*X[25+NA*6] + (1.111111111111111e+00*X[16+NA*6])+(-1.154700538379251e+00*X[25+NA*3]);
G[78+NA*18] = tcrd[0]*X[26+NA*6] + (8.606629658238704e-01*X[16+NA*6])+(-3.849001794597505e-01*X[19+NA*6]);
G[79+NA*18] = tcrd[1]*X[26+NA*6] + (-3.849001794597505e-01*X[20+NA*6])+(-1.154700538379251e+00*X[26+NA]);
G[80+NA*18] = tcrd[2]*X[26+NA*6] + (1.088662107903635e+00*X[17+NA*6])+(-1.154700538379251e+00*X[26+NA*3]);
G[81+NA*18] = tcrd[0]*X[27+NA*6] + (-3.849001794597505e-01*X[20+NA*6]);
G[82+NA*18] = tcrd[1]*X[27+NA*6] + (8.606629658238704e-01*X[16+NA*6])+(3.849001794597505e-01*X[19+NA*6])+(-1.154700538379251e+00*X[27+NA]);
G[83+NA*18] = tcrd[2]*X[27+NA*6] + (1.088662107903635e+00*X[18+NA*6])+(-1.154700538379251e+00*X[27+NA*3]);
G[84+NA*18] = tcrd[0]*X[28+NA*6] + (7.200822998230956e-01*X[17+NA*6])+(-2.721655269759087e-01*X[21+NA*6]);
G[85+NA*18] = tcrd[1]*X[28+NA*6] + (-7.200822998230956e-01*X[18+NA*6])+(-2.721655269759087e-01*X[22+NA*6])+(-1.154700538379251e+00*X[28+NA]);
G[86+NA*18] = tcrd[2]*X[28+NA*6] + (1.018350154434631e+00*X[19+NA*6])+(-1.154700538379251e+00*X[28+NA*3]);
G[87+NA*18] = tcrd[0]*X[29+NA*6] + (7.200822998230956e-01*X[18+NA*6])+(-2.721655269759087e-01*X[22+NA*6]);
G[88+NA*18] = tcrd[1]*X[29+NA*6] + (7.200822998230956e-01*X[17+NA*6])+(2.721655269759087e-01*X[21+NA*6])+(-1.154700538379251e+00*X[29+NA]);
G[89+NA*18] = tcrd[2]*X[29+NA*6] + (1.018350154434631e+00*X[20+NA*6])+(-1.154700538379251e+00*X[29+NA*3]);
G[90+NA*18] = tcrd[0]*X[30+NA*6] + (8.314794192830980e-01*X[19+NA*6])+(-1.571348402636772e-01*X[23+NA*6]);
G[91+NA*18] = tcrd[1]*X[30+NA*6] + (-8.314794192830980e-01*X[20+NA*6])+(-1.571348402636772e-01*X[24+NA*6])+(-1.154700538379251e+00*X[30+NA]);
G[92+NA*18] = tcrd[2]*X[30+NA*6] + (8.888888888888888e-01*X[21+NA*6])+(-1.154700538379251e+00*X[30+NA*3]);
G[93+NA*18] = tcrd[0]*X[31+NA*6] + (8.314794192830980e-01*X[20+NA*6])+(-1.571348402636772e-01*X[24+NA*6]);
G[94+NA*18] = tcrd[1]*X[31+NA*6] + (8.314794192830980e-01*X[19+NA*6])+(1.571348402636772e-01*X[23+NA*6])+(-1.154700538379251e+00*X[31+NA]);
G[95+NA*18] = tcrd[2]*X[31+NA*6] + (8.888888888888888e-01*X[22+NA*6])+(-1.154700538379251e+00*X[31+NA*3]);
G[96+NA*18] = tcrd[0]*X[32+NA*6] + (9.428090415820635e-01*X[21+NA*6]);
G[97+NA*18] = tcrd[1]*X[32+NA*6] + (-9.428090415820635e-01*X[22+NA*6])+(-1.154700538379251e+00*X[32+NA]);
G[98+NA*18] = tcrd[2]*X[32+NA*6] + (6.666666666666667e-01*X[23+NA*6])+(-1.154700538379251e+00*X[32+NA*3]);
G[99+NA*18] = tcrd[0]*X[33+NA*6] + (9.428090415820635e-01*X[22+NA*6]);
G[100+NA*18] = tcrd[1]*X[33+NA*6] + (9.428090415820635e-01*X[21+NA*6])+(-1.154700538379251e+00*X[33+NA]);
G[101+NA*18] = tcrd[2]*X[33+NA*6] + (6.666666666666667e-01*X[24+NA*6])+(-1.154700538379251e+00*X[33+NA*3]);
G[102+NA*18] = tcrd[0]*X[34+NA*6] + (1.054092553389460e+00*X[23+NA*6]);
G[103+NA*18] = tcrd[1]*X[34+NA*6] + (-1.054092553389460e+00*X[24+NA*6])+(-1.154700538379251e+00*X[34+NA]);
G[104+NA*18] = tcrd[2]*X[34+NA*6] + (-1.154700538379251e+00*X[34+NA*3]);
G[105+NA*18] = tcrd[0]*X[35+NA*6] + (1.054092553389460e+00*X[24+NA*6]);
G[106+NA*18] = tcrd[1]*X[35+NA*6] + (1.054092553389460e+00*X[23+NA*6])+(-1.154700538379251e+00*X[35+NA]);
G[107+NA*18] = tcrd[2]*X[35+NA*6] + (-1.154700538379251e+00*X[35+NA*3]);
G[75+NA*21] = tcrd[0]*X[25+NA*7] + (-7.027283689263065e-01*X[17+NA*7])+(-1.154700538379251e+00*X[25+NA*2]);
G[76+NA*21] = tcrd[1]*X[25+NA*7] + (-7.027283689263065e-01*X[18+NA*7])+(1.154700538379251e+00*X[25+NA*3]);
G[77+NA*21] = tcrd[2]*X[25+NA*7] + (1.111111111111111e+00*X[16+NA*7]);
G[78+NA*21] = tcrd[0]*X[26+NA*7] + (8.606629658238704e-01*X[16+NA*7])+(-3.849001794597505e-01*X[19+NA*7])+(-1.154700538379251e+00*X[26+NA*2]);
G[79+NA*21] = tcrd[1]*X[26+NA*7] + (-3.849001794597505e-01*X[20+NA*7])+(1.154700538379251e+00*X[26+NA*3]);
G[80+NA*21] = tcrd[2]*X[26+NA*7] + (1.088662107903635e+00*X[17+NA*7]);
G[81+NA*21] = tcrd[0]*X[27+NA*7] + (-3.849001794597505e-01*X[20+NA*7])+(-1.154700538379251e+00*X[27+NA*2]);
G[82+NA*21] = tcrd[1]*X[27+NA*7] + (8.606629658238704e-01*X[16+NA*7])+(3.849001794597505e-01*X[19+NA*7])+(1.154700538379251e+00*X[27+NA*3]);
G[83+NA*21] = tcrd[2]*X[27+NA*7] + (1.088662107903635e+00*X[18+NA*7]);
G[84+NA*21] = tcrd[0]*X[28+NA*7] + (7.200822998230956e-01*X[17+NA*7])+(-2.721655269759087e-01*X[21+NA*7])+(-1.154700538379251e+00*X[28+NA*2]);
G[85+NA*21] = tcrd[1]*X[28+NA*7] + (-7.200822998230956e-01*X[18+NA*7])+(-2.721655269759087e-01*X[22+NA*7])+(1.154700538379251e+00*X[28+NA*3]);
G[86+NA*21] = tcrd[2]*X[28+NA*7] + (1.018350154434631e+00*X[19+NA*7]);
G[87+NA*21] = tcrd[0]*X[29+NA*7] + (7.200822998230956e-01*X[18+NA*7])+(-2.721655269759087e-01*X[22+NA*7])+(-1.154700538379251e+00*X[29+NA*2]);
G[88+NA*21] = tcrd[1]*X[29+NA*7] + (7.200822998230956e-01*X[17+NA*7])+(2.721655269759087e-01*X[21+NA*7])+(1.154700538379251e+00*X[29+NA*3]);
G[89+NA*21] = tcrd[2]*X[29+NA*7] + (1.018350154434631e+00*X[20+NA*7]);
G[90+NA*21] = tcrd[0]*X[30+NA*7] + (8.314794192830980e-01*X[19+NA*7])+(-1.571348402636772e-01*X[23+NA*7])+(-1.154700538379251e+00*X[30+NA*2]);
G[91+NA*21] = tcrd[1]*X[30+NA*7] + (-8.314794192830980e-01*X[20+NA*7])+(-1.571348402636772e-01*X[24+NA*7])+(1.154700538379251e+00*X[30+NA*3]);
G[92+NA*21] = tcrd[2]*X[30+NA*7] + (8.888888888888888e-01*X[21+NA*7]);
G[93+NA*21] = tcrd[0]*X[31+NA*7] + (8.314794192830980e-01*X[20+NA*7])+(-1.571348402636772e-01*X[24+NA*7])+(-1.154700538379251e+00*X[31+NA*2]);
G[94+NA*21] = tcrd[1]*X[31+NA*7] + (8.314794192830980e-01*X[19+NA*7])+(1.571348402636772e-01*X[23+NA*7])+(1.154700538379251e+00*X[31+NA*3]);
G[95+NA*21] = tcrd[2]*X[31+NA*7] + (8.888888888888888e-01*X[22+NA*7]);
G[96+NA*21] = tcrd[0]*X[32+NA*7] + (9.428090415820635e-01*X[21+NA*7])+(-1.154700538379251e+00*X[32+NA*2]);
G[97+NA*21] = tcrd[1]*X[32+NA*7] + (-9.428090415820635e-01*X[22+NA*7])+(1.154700538379251e+00*X[32+NA*3]);
G[98+NA*21] = tcrd[2]*X[32+NA*7] + (6.666666666666667e-01*X[23+NA*7]);
G[99+NA*21] = tcrd[0]*X[33+NA*7] + (9.428090415820635e-01*X[22+NA*7])+(-1.154700538379251e+00*X[33+NA*2]);
G[100+NA*21] = tcrd[1]*X[33+NA*7] + (9.428090415820635e-01*X[21+NA*7])+(1.154700538379251e+00*X[33+NA*3]);
G[101+NA*21] = tcrd[2]*X[33+NA*7] + (6.666666666666667e-01*X[24+NA*7]);
G[102+NA*21] = tcrd[0]*X[34+NA*7] + (1.054092553389460e+00*X[23+NA*7])+(-1.154700538379251e+00*X[34+NA*2]);
G[103+NA*21] = tcrd[1]*X[34+NA*7] + (-1.054092553389460e+00*X[24+NA*7])+(1.154700538379251e+00*X[34+NA*3]);
G[104+NA*21] = tcrd[2]*X[34+NA*7];
G[105+NA*21] = tcrd[0]*X[35+NA*7] + (1.054092553389460e+00*X[24+NA*7])+(-1.154700538379251e+00*X[35+NA*2]);
G[106+NA*21] = tcrd[1]*X[35+NA*7] + (1.054092553389460e+00*X[23+NA*7])+(1.154700538379251e+00*X[35+NA*3]);
G[107+NA*21] = tcrd[2]*X[35+NA*7];
G[75+NA*24] = tcrd[0]*X[25+NA*8] + (-7.027283689263065e-01*X[17+NA*8])+(-1.154700538379251e+00*X[25+NA*3]);
G[76+NA*24] = tcrd[1]*X[25+NA*8] + (-7.027283689263065e-01*X[18+NA*8])+(-1.154700538379251e+00*X[25+NA*2]);
G[77+NA*24] = tcrd[2]*X[25+NA*8] + (1.111111111111111e+00*X[16+NA*8]);
G[78+NA*24] = tcrd[0]*X[26+NA*8] + (8.606629658238704e-01*X[16+NA*8])+(-3.849001794597505e-01*X[19+NA*8])+(-1.154700538379251e+00*X[26+NA*3]);
G[79+NA*24] = tcrd[1]*X[26+NA*8] + (-3.849001794597505e-01*X[20+NA*8])+(-1.154700538379251e+00*X[26+NA*2]);
G[80+NA*24] = tcrd[2]*X[26+NA*8] + (1.088662107903635e+00*X[17+NA*8]);
G[81+NA*24] = tcrd[0]*X[27+NA*8] + (-3.849001794597505e-01*X[20+NA*8])+(-1.154700538379251e+00*X[27+NA*3]);
G[82+NA*24] = tcrd[1]*X[27+NA*8] + (8.606629658238704e-01*X[16+NA*8])+(3.849001794597505e-01*X[19+NA*8])+(-1.154700538379251e+00*X[27+NA*2]);
G[83+NA*24] = tcrd[2]*X[27+NA*8] + (1.088662107903635e+00*X[18+NA*8]);
G[84+NA*24] = tcrd[0]*X[28+NA*8] + (7.200822998230956e-01*X[17+NA*8])+(-2.721655269759087e-01*X[21+NA*8])+(-1.154700538379251e+00*X[28+NA*3]);
G[85+NA*24] = tcrd[1]*X[28+NA*8] + (-7.200822998230956e-01*X[18+NA*8])+(-2.721655269759087e-01*X[22+NA*8])+(-1.154700538379251e+00*X[28+NA*2]);
G[86+NA*24] = tcrd[2]*X[28+NA*8] + (1.018350154434631e+00*X[19+NA*8]);
G[87+NA*24] = tcrd[0]*X[29+NA*8] + (7.200822998230956e-01*X[18+NA*8])+(-2.721655269759087e-01*X[22+NA*8])+(-1.154700538379251e+00*X[29+NA*3]);
G[88+NA*24] = tcrd[1]*X[29+NA*8] + (7.200822998230956e-01*X[17+NA*8])+(2.721655269759087e-01*X[21+NA*8])+(-1.154700538379251e+00*X[29+NA*2]);
G[89+NA*24] = tcrd[2]*X[29+NA*8] + (1.018350154434631e+00*X[20+NA*8]);
G[90+NA*24] = tcrd[0]*X[30+NA*8] + (8.314794192830980e-01*X[19+NA*8])+(-1.571348402636772e-01*X[23+NA*8])+(-1.154700538379251e+00*X[30+NA*3]);
G[91+NA*24] = tcrd[1]*X[30+NA*8] + (-8.314794192830980e-01*X[20+NA*8])+(-1.571348402636772e-01*X[24+NA*8])+(-1.154700538379251e+00*X[30+NA*2]);
G[92+NA*24] = tcrd[2]*X[30+NA*8] + (8.888888888888888e-01*X[21+NA*8]);
G[93+NA*24] = tcrd[0]*X[31+NA*8] + (8.314794192830980e-01*X[20+NA*8])+(-1.571348402636772e-01*X[24+NA*8])+(-1.154700538379251e+00*X[31+NA*3]);
G[94+NA*24] = tcrd[1]*X[31+NA*8] + (8.314794192830980e-01*X[19+NA*8])+(1.571348402636772e-01*X[23+NA*8])+(-1.154700538379251e+00*X[31+NA*2]);
G[95+NA*24] = tcrd[2]*X[31+NA*8] + (8.888888888888888e-01*X[22+NA*8]);
G[96+NA*24] = tcrd[0]*X[32+NA*8] + (9.428090415820635e-01*X[21+NA*8])+(-1.154700538379251e+00*X[32+NA*3]);
G[97+NA*24] = tcrd[1]*X[32+NA*8] + (-9.428090415820635e-01*X[22+NA*8])+(-1.154700538379251e+00*X[32+NA*2]);
G[98+NA*24] = tcrd[2]*X[32+NA*8] + (6.666666666666667e-01*X[23+NA*8]);
G[99+NA*24] = tcrd[0]*X[33+NA*8] + (9.428090415820635e-01*X[22+NA*8])+(-1.154700538379251e+00*X[33+NA*3]);
G[100+NA*24] = tcrd[1]*X[33+NA*8] + (9.428090415820635e-01*X[21+NA*8])+(-1.154700538379251e+00*X[33+NA*2]);
G[101+NA*24] = tcrd[2]*X[33+NA*8] + (6.666666666666667e-01*X[24+NA*8]);
G[102+NA*24] = tcrd[0]*X[34+NA*8] + (1.054092553389460e+00*X[23+NA*8])+(-1.154700538379251e+00*X[34+NA*3]);
G[103+NA*24] = tcrd[1]*X[34+NA*8] + (-1.054092553389460e+00*X[24+NA*8])+(-1.154700538379251e+00*X[34+NA*2]);
G[104+NA*24] = tcrd[2]*X[34+NA*8];
G[105+NA*24] = tcrd[0]*X[35+NA*8] + (1.054092553389460e+00*X[24+NA*8])+(-1.154700538379251e+00*X[35+NA*3]);
G[106+NA*24] = tcrd[1]*X[35+NA*8] + (1.054092553389460e+00*X[23+NA*8])+(-1.154700538379251e+00*X[35+NA*2]);
G[107+NA*24] = tcrd[2]*X[35+NA*8];
}

template <int NA>
void ExpHobGrdBlk_HF( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[75+NA*27] = tcrd[0]*X[25+NA*9] + (-7.027283689263065e-01*X[17+NA*9])+(6.928203230275510e-01*X[25+NA*5]);
G[76+NA*27] = tcrd[1]*X[25+NA*9] + (-7.027283689263065e-01*X[18+NA*9])+(6.928203230275510e-01*X[25+NA*6]);
G[77+NA*27] = tcrd[2]*X[25+NA*9] + (1.111111111111111e+00*X[16+NA*9])+(-1.200000000000000e+00*X[25+NA*4]);
G[78+NA*27] = tcrd[0]*X[26+NA*9] + (8.606629658238704e-01*X[16+NA*9])+(-3.849001794597505e-01*X[19+NA*9])+(6.928203230275510e-01*X[26+NA*5]);
G[79+NA*27] = tcrd[1]*X[26+NA*9] + (-3.849001794597505e-01*X[20+NA*9])+(6.928203230275510e-01*X[26+NA*6]);
G[80+NA*27] = tcrd[2]*X[26+NA*9] + (1.088662107903635e+00*X[17+NA*9])+(-1.200000000000000e+00*X[26+NA*4]);
G[81+NA*27] = tcrd[0]*X[27+NA*9] + (-3.849001794597505e-01*X[20+NA*9])+(6.928203230275510e-01*X[27+NA*5]);
G[82+NA*27] = tcrd[1]*X[27+NA*9] + (8.606629658238704e-01*X[16+NA*9])+(3.849001794597505e-01*X[19+NA*9])+(6.928203230275510e-01*X[27+NA*6]);
G[83+NA*27] = tcrd[2]*X[27+NA*9] + (1.088662107903635e+00*X[18+NA*9])+(-1.200000000000000e+00*X[27+NA*4]);
G[84+NA*27] = tcrd[0]*X[28+NA*9] + (7.200822998230956e-01*X[17+NA*9])+(-2.721655269759087e-01*X[21+NA*9])+(6.928203230275510e-01*X[28+NA*5]);
G[85+NA*27] = tcrd[1]*X[28+NA*9] + (-7.200822998230956e-01*X[18+NA*9])+(-2.721655269759087e-01*X[22+NA*9])+(6.928203230275510e-01*X[28+NA*6]);
G[86+NA*27] = tcrd[2]*X[28+NA*9] + (1.018350154434631e+00*X[19+NA*9])+(-1.200000000000000e+00*X[28+NA*4]);
G[87+NA*27] = tcrd[0]*X[29+NA*9] + (7.200822998230956e-01*X[18+NA*9])+(-2.721655269759087e-01*X[22+NA*9])+(6.928203230275510e-01*X[29+NA*5]);
G[88+NA*27] = tcrd[1]*X[29+NA*9] + (7.200822998230956e-01*X[17+NA*9])+(2.721655269759087e-01*X[21+NA*9])+(6.928203230275510e-01*X[29+NA*6]);
G[89+NA*27] = tcrd[2]*X[29+NA*9] + (1.018350154434631e+00*X[20+NA*9])+(-1.200000000000000e+00*X[29+NA*4]);
G[90+NA*27] = tcrd[0]*X[30+NA*9] + (8.314794192830980e-01*X[19+NA*9])+(-1.571348402636772e-01*X[23+NA*9])+(6.928203230275510e-01*X[30+NA*5]);
G[91+NA*27] = tcrd[1]*X[30+NA*9] + (-8.314794192830980e-01*X[20+NA*9])+(-1.571348402636772e-01*X[24+NA*9])+(6.928203230275510e-01*X[30+NA*6]);
G[92+NA*27] = tcrd[2]*X[30+NA*9] + (8.888888888888888e-01*X[21+NA*9])+(-1.200000000000000e+00*X[30+NA*4]);
G[93+NA*27] = tcrd[0]*X[31+NA*9] + (8.314794192830980e-01*X[20+NA*9])+(-1.571348402636772e-01*X[24+NA*9])+(6.928203230275510e-01*X[31+NA*5]);
G[94+NA*27] = tcrd[1]*X[31+NA*9] + (8.314794192830980e-01*X[19+NA*9])+(1.571348402636772e-01*X[23+NA*9])+(6.928203230275510e-01*X[31+NA*6]);
G[95+NA*27] = tcrd[2]*X[31+NA*9] + (8.888888888888888e-01*X[22+NA*9])+(-1.200000000000000e+00*X[31+NA*4]);
G[96+NA*27] = tcrd[0]*X[32+NA*9] + (9.428090415820635e-01*X[21+NA*9])+(6.928203230275510e-01*X[32+NA*5]);
G[97+NA*27] = tcrd[1]*X[32+NA*9] + (-9.428090415820635e-01*X[22+NA*9])+(6.928203230275510e-01*X[32+NA*6]);
G[98+NA*27] = tcrd[2]*X[32+NA*9] + (6.666666666666667e-01*X[23+NA*9])+(-1.200000000000000e+00*X[32+NA*4]);
G[99+NA*27] = tcrd[0]*X[33+NA*9] + (9.428090415820635e-01*X[22+NA*9])+(6.928203230275510e-01*X[33+NA*5]);
G[100+NA*27] = tcrd[1]*X[33+NA*9] + (9.428090415820635e-01*X[21+NA*9])+(6.928203230275510e-01*X[33+NA*6]);
G[101+NA*27] = tcrd[2]*X[33+NA*9] + (6.666666666666667e-01*X[24+NA*9])+(-1.200000000000000e+00*X[33+NA*4]);
G[102+NA*27] = tcrd[0]*X[34+NA*9] + (1.054092553389460e+00*X[23+NA*9])+(6.928203230275510e-01*X[34+NA*5]);
G[103+NA*27] = tcrd[1]*X[34+NA*9] + (-1.054092553389460e+00*X[24+NA*9])+(6.928203230275510e-01*X[34+NA*6]);
G[104+NA*27] = tcrd[2]*X[34+NA*9] + (-1.200000000000000e+00*X[34+NA*4]);
G[105+NA*27] = tcrd[0]*X[35+NA*9] + (1.054092553389460e+00*X[24+NA*9])+(6.928203230275510e-01*X[35+NA*5]);
G[106+NA*27] = tcrd[1]*X[35+NA*9] + (1.054092553389460e+00*X[23+NA*9])+(6.928203230275510e-01*X[35+NA*6]);
G[107+NA*27] = tcrd[2]*X[35+NA*9] + (-1.200000000000000e+00*X[35+NA*4]);
G[75+NA*30] = tcrd[0]*X[25+NA*10] + (-7.027283689263065e-01*X[17+NA*10])+(-9.797958971132712e-01*X[25+NA*4])+(2.828427124746190e-01*X[25+NA*7]);
G[76+NA*30] = tcrd[1]*X[25+NA*10] + (-7.027283689263065e-01*X[18+NA*10])+(2.828427124746190e-01*X[25+NA*8]);
G[77+NA*30] = tcrd[2]*X[25+NA*10] + (1.111111111111111e+00*X[16+NA*10])+(-1.131370849898476e+00*X[25+NA*5]);
G[78+NA*30] = tcrd[0]*X[26+NA*10] + (8.606629658238704e-01*X[16+NA*10])+(-3.849001794597505e-01*X[19+NA*10])+(-9.797958971132712e-01*X[26+NA*4])+(2.828427124746190e-01*X[26+NA*7]);
G[79+NA*30] = tcrd[1]*X[26+NA*10] + (-3.849001794597505e-01*X[20+NA*10])+(2.828427124746190e-01*X[26+NA*8]);
G[80+NA*30] = tcrd[2]*X[26+NA*10] + (1.088662107903635e+00*X[17+NA*10])+(-1.131370849898476e+00*X[26+NA*5]);
G[81+NA*30] = tcrd[0]*X[27+NA*10] + (-3.849001794597505e-01*X[20+NA*10])+(-9.797958971132712e-01*X[27+NA*4])+(2.828427124746190e-01*X[27+NA*7]);
G[82+NA*30] = tcrd[1]*X[27+NA*10] + (8.606629658238704e-01*X[16+NA*10])+(3.849001794597505e-01*X[19+NA*10])+(2.828427124746190e-01*X[27+NA*8]);
G[83+NA*30] = tcrd[2]*X[27+NA*10] + (1.088662107903635e+00*X[18+NA*10])+(-1.131370849898476e+00*X[27+NA*5]);
G[84+NA*30] = tcrd[0]*X[28+NA*10] + (7.200822998230956e-01*X[17+NA*10])+(-2.721655269759087e-01*X[21+NA*10])+(-9.797958971132712e-01*X[28+NA*4])+(2.828427124746190e-01*X[28+NA*7]);
G[85+NA*30] = tcrd[1]*X[28+NA*10] + (-7.200822998230956e-01*X[18+NA*10])+(-2.721655269759087e-01*X[22+NA*10])+(2.828427124746190e-01*X[28+NA*8]);
G[86+NA*30] = tcrd[2]*X[28+NA*10] + (1.018350154434631e+00*X[19+NA*10])+(-1.131370849898476e+00*X[28+NA*5]);
G[87+NA*30] = tcrd[0]*X[29+NA*10] + (7.200822998230956e-01*X[18+NA*10])+(-2.721655269759087e-01*X[22+NA*10])+(-9.797958971132712e-01*X[29+NA*4])+(2.828427124746190e-01*X[29+NA*7]);
G[88+NA*30] = tcrd[1]*X[29+NA*10] + (7.200822998230956e-01*X[17+NA*10])+(2.721655269759087e-01*X[21+NA*10])+(2.828427124746190e-01*X[29+NA*8]);
G[89+NA*30] = tcrd[2]*X[29+NA*10] + (1.018350154434631e+00*X[20+NA*10])+(-1.131370849898476e+00*X[29+NA*5]);
G[90+NA*30] = tcrd[0]*X[30+NA*10] + (8.314794192830980e-01*X[19+NA*10])+(-1.571348402636772e-01*X[23+NA*10])+(-9.797958971132712e-01*X[30+NA*4])+(2.828427124746190e-01*X[30+NA*7]);
G[91+NA*30] = tcrd[1]*X[30+NA*10] + (-8.314794192830980e-01*X[20+NA*10])+(-1.571348402636772e-01*X[24+NA*10])+(2.828427124746190e-01*X[30+NA*8]);
G[92+NA*30] = tcrd[2]*X[30+NA*10] + (8.888888888888888e-01*X[21+NA*10])+(-1.131370849898476e+00*X[30+NA*5]);
G[93+NA*30] = tcrd[0]*X[31+NA*10] + (8.314794192830980e-01*X[20+NA*10])+(-1.571348402636772e-01*X[24+NA*10])+(-9.797958971132712e-01*X[31+NA*4])+(2.828427124746190e-01*X[31+NA*7]);
G[94+NA*30] = tcrd[1]*X[31+NA*10] + (8.314794192830980e-01*X[19+NA*10])+(1.571348402636772e-01*X[23+NA*10])+(2.828427124746190e-01*X[31+NA*8]);
G[95+NA*30] = tcrd[2]*X[31+NA*10] + (8.888888888888888e-01*X[22+NA*10])+(-1.131370849898476e+00*X[31+NA*5]);
G[96+NA*30] = tcrd[0]*X[32+NA*10] + (9.428090415820635e-01*X[21+NA*10])+(-9.797958971132712e-01*X[32+NA*4])+(2.828427124746190e-01*X[32+NA*7]);
G[97+NA*30] = tcrd[1]*X[32+NA*10] + (-9.428090415820635e-01*X[22+NA*10])+(2.828427124746190e-01*X[32+NA*8]);
G[98+NA*30] = tcrd[2]*X[32+NA*10] + (6.666666666666667e-01*X[23+NA*10])+(-1.131370849898476e+00*X[32+NA*5]);
G[99+NA*30] = tcrd[0]*X[33+NA*10] + (9.428090415820635e-01*X[22+NA*10])+(-9.797958971132712e-01*X[33+NA*4])+(2.828427124746190e-01*X[33+NA*7]);
G[100+NA*30] = tcrd[1]*X[33+NA*10] + (9.428090415820635e-01*X[21+NA*10])+(2.828427124746190e-01*X[33+NA*8]);
G[101+NA*30] = tcrd[2]*X[33+NA*10] + (6.666666666666667e-01*X[24+NA*10])+(-1.131370849898476e+00*X[33+NA*5]);
G[102+NA*30] = tcrd[0]*X[34+NA*10] + (1.054092553389460e+00*X[23+NA*10])+(-9.797958971132712e-01*X[34+NA*4])+(2.828427124746190e-01*X[34+NA*7]);
G[103+NA*30] = tcrd[1]*X[34+NA*10] + (-1.054092553389460e+00*X[24+NA*10])+(2.828427124746190e-01*X[34+NA*8]);
G[104+NA*30] = tcrd[2]*X[34+NA*10] + (-1.131370849898476e+00*X[34+NA*5]);
G[105+NA*30] = tcrd[0]*X[35+NA*10] + (1.054092553389460e+00*X[24+NA*10])+(-9.797958971132712e-01*X[35+NA*4])+(2.828427124746190e-01*X[35+NA*7]);
G[106+NA*30] = tcrd[1]*X[35+NA*10] + (1.054092553389460e+00*X[23+NA*10])+(2.828427124746190e-01*X[35+NA*8]);
G[107+NA*30] = tcrd[2]*X[35+NA*10] + (-1.131370849898476e+00*X[35+NA*5]);
G[75+NA*33] = tcrd[0]*X[25+NA*11] + (-7.027283689263065e-01*X[17+NA*11])+(2.828427124746190e-01*X[25+NA*8]);
G[76+NA*33] = tcrd[1]*X[25+NA*11] + (-7.027283689263065e-01*X[18+NA*11])+(-9.797958971132712e-01*X[25+NA*4])+(-2.828427124746190e-01*X[25+NA*7]);
G[77+NA*33] = tcrd[2]*X[25+NA*11] + (1.111111111111111e+00*X[16+NA*11])+(-1.131370849898476e+00*X[25+NA*6]);
G[78+NA*33] = tcrd[0]*X[26+NA*11] + (8.606629658238704e-01*X[16+NA*11])+(-3.849001794597505e-01*X[19+NA*11])+(2.828427124746190e-01*X[26+NA*8]);
G[79+NA*33] = tcrd[1]*X[26+NA*11] + (-3.849001794597505e-01*X[20+NA*11])+(-9.797958971132712e-01*X[26+NA*4])+(-2.828427124746190e-01*X[26+NA*7]);
G[80+NA*33] = tcrd[2]*X[26+NA*11] + (1.088662107903635e+00*X[17+NA*11])+(-1.131370849898476e+00*X[26+NA*6]);
G[81+NA*33] = tcrd[0]*X[27+NA*11] + (-3.849001794597505e-01*X[20+NA*11])+(2.828427124746190e-01*X[27+NA*8]);
G[82+NA*33] = tcrd[1]*X[27+NA*11] + (8.606629658238704e-01*X[16+NA*11])+(3.849001794597505e-01*X[19+NA*11])+(-9.797958971132712e-01*X[27+NA*4])+(-2.828427124746190e-01*X[27+NA*7]);
G[83+NA*33] = tcrd[2]*X[27+NA*11] + (1.088662107903635e+00*X[18+NA*11])+(-1.131370849898476e+00*X[27+NA*6]);
G[84+NA*33] = tcrd[0]*X[28+NA*11] + (7.200822998230956e-01*X[17+NA*11])+(-2.721655269759087e-01*X[21+NA*11])+(2.828427124746190e-01*X[28+NA*8]);
G[85+NA*33] = tcrd[1]*X[28+NA*11] + (-7.200822998230956e-01*X[18+NA*11])+(-2.721655269759087e-01*X[22+NA*11])+(-9.797958971132712e-01*X[28+NA*4])+(-2.828427124746190e-01*X[28+NA*7]);
G[86+NA*33] = tcrd[2]*X[28+NA*11] + (1.018350154434631e+00*X[19+NA*11])+(-1.131370849898476e+00*X[28+NA*6]);
G[87+NA*33] = tcrd[0]*X[29+NA*11] + (7.200822998230956e-01*X[18+NA*11])+(-2.721655269759087e-01*X[22+NA*11])+(2.828427124746190e-01*X[29+NA*8]);
G[88+NA*33] = tcrd[1]*X[29+NA*11] + (7.200822998230956e-01*X[17+NA*11])+(2.721655269759087e-01*X[21+NA*11])+(-9.797958971132712e-01*X[29+NA*4])+(-2.828427124746190e-01*X[29+NA*7]);
G[89+NA*33] = tcrd[2]*X[29+NA*11] + (1.018350154434631e+00*X[20+NA*11])+(-1.131370849898476e+00*X[29+NA*6]);
G[90+NA*33] = tcrd[0]*X[30+NA*11] + (8.314794192830980e-01*X[19+NA*11])+(-1.571348402636772e-01*X[23+NA*11])+(2.828427124746190e-01*X[30+NA*8]);
G[91+NA*33] = tcrd[1]*X[30+NA*11] + (-8.314794192830980e-01*X[20+NA*11])+(-1.571348402636772e-01*X[24+NA*11])+(-9.797958971132712e-01*X[30+NA*4])+(-2.828427124746190e-01*X[30+NA*7]);
G[92+NA*33] = tcrd[2]*X[30+NA*11] + (8.888888888888888e-01*X[21+NA*11])+(-1.131370849898476e+00*X[30+NA*6]);
G[93+NA*33] = tcrd[0]*X[31+NA*11] + (8.314794192830980e-01*X[20+NA*11])+(-1.571348402636772e-01*X[24+NA*11])+(2.828427124746190e-01*X[31+NA*8]);
G[94+NA*33] = tcrd[1]*X[31+NA*11] + (8.314794192830980e-01*X[19+NA*11])+(1.571348402636772e-01*X[23+NA*11])+(-9.797958971132712e-01*X[31+NA*4])+(-2.828427124746190e-01*X[31+NA*7]);
G[95+NA*33] = tcrd[2]*X[31+NA*11] + (8.888888888888888e-01*X[22+NA*11])+(-1.131370849898476e+00*X[31+NA*6]);
G[96+NA*33] = tcrd[0]*X[32+NA*11] + (9.428090415820635e-01*X[21+NA*11])+(2.828427124746190e-01*X[32+NA*8]);
G[97+NA*33] = tcrd[1]*X[32+NA*11] + (-9.428090415820635e-01*X[22+NA*11])+(-9.797958971132712e-01*X[32+NA*4])+(-2.828427124746190e-01*X[32+NA*7]);
G[98+NA*33] = tcrd[2]*X[32+NA*11] + (6.666666666666667e-01*X[23+NA*11])+(-1.131370849898476e+00*X[32+NA*6]);
G[99+NA*33] = tcrd[0]*X[33+NA*11] + (9.428090415820635e-01*X[22+NA*11])+(2.828427124746190e-01*X[33+NA*8]);
G[100+NA*33] = tcrd[1]*X[33+NA*11] + (9.428090415820635e-01*X[21+NA*11])+(-9.797958971132712e-01*X[33+NA*4])+(-2.828427124746190e-01*X[33+NA*7]);
G[101+NA*33] = tcrd[2]*X[33+NA*11] + (6.666666666666667e-01*X[24+NA*11])+(-1.131370849898476e+00*X[33+NA*6]);
G[102+NA*33] = tcrd[0]*X[34+NA*11] + (1.054092553389460e+00*X[23+NA*11])+(2.828427124746190e-01*X[34+NA*8]);
G[103+NA*33] = tcrd[1]*X[34+NA*11] + (-1.054092553389460e+00*X[24+NA*11])+(-9.797958971132712e-01*X[34+NA*4])+(-2.828427124746190e-01*X[34+NA*7]);
G[104+NA*33] = tcrd[2]*X[34+NA*11] + (-1.131370849898476e+00*X[34+NA*6]);
G[105+NA*33] = tcrd[0]*X[35+NA*11] + (1.054092553389460e+00*X[24+NA*11])+(2.828427124746190e-01*X[35+NA*8]);
G[106+NA*33] = tcrd[1]*X[35+NA*11] + (1.054092553389460e+00*X[23+NA*11])+(-9.797958971132712e-01*X[35+NA*4])+(-2.828427124746190e-01*X[35+NA*7]);
G[107+NA*33] = tcrd[2]*X[35+NA*11] + (-1.131370849898476e+00*X[35+NA*6]);
G[75+NA*36] = tcrd[0]*X[25+NA*12] + (-7.027283689263065e-01*X[17+NA*12])+(-8.944271909999160e-01*X[25+NA*5]);
G[76+NA*36] = tcrd[1]*X[25+NA*12] + (-7.027283689263065e-01*X[18+NA*12])+(8.944271909999160e-01*X[25+NA*6]);
G[77+NA*36] = tcrd[2]*X[25+NA*12] + (1.111111111111111e+00*X[16+NA*12])+(-8.944271909999160e-01*X[25+NA*7]);
G[78+NA*36] = tcrd[0]*X[26+NA*12] + (8.606629658238704e-01*X[16+NA*12])+(-3.849001794597505e-01*X[19+NA*12])+(-8.944271909999160e-01*X[26+NA*5]);
G[79+NA*36] = tcrd[1]*X[26+NA*12] + (-3.849001794597505e-01*X[20+NA*12])+(8.944271909999160e-01*X[26+NA*6]);
G[80+NA*36] = tcrd[2]*X[26+NA*12] + (1.088662107903635e+00*X[17+NA*12])+(-8.944271909999160e-01*X[26+NA*7]);
G[81+NA*36] = tcrd[0]*X[27+NA*12] + (-3.849001794597505e-01*X[20+NA*12])+(-8.944271909999160e-01*X[27+NA*5]);
G[82+NA*36] = tcrd[1]*X[27+NA*12] + (8.606629658238704e-01*X[16+NA*12])+(3.849001794597505e-01*X[19+NA*12])+(8.944271909999160e-01*X[27+NA*6]);
G[83+NA*36] = tcrd[2]*X[27+NA*12] + (1.088662107903635e+00*X[18+NA*12])+(-8.944271909999160e-01*X[27+NA*7]);
G[84+NA*36] = tcrd[0]*X[28+NA*12] + (7.200822998230956e-01*X[17+NA*12])+(-2.721655269759087e-01*X[21+NA*12])+(-8.944271909999160e-01*X[28+NA*5]);
G[85+NA*36] = tcrd[1]*X[28+NA*12] + (-7.200822998230956e-01*X[18+NA*12])+(-2.721655269759087e-01*X[22+NA*12])+(8.944271909999160e-01*X[28+NA*6]);
G[86+NA*36] = tcrd[2]*X[28+NA*12] + (1.018350154434631e+00*X[19+NA*12])+(-8.944271909999160e-01*X[28+NA*7]);
G[87+NA*36] = tcrd[0]*X[29+NA*12] + (7.200822998230956e-01*X[18+NA*12])+(-2.721655269759087e-01*X[22+NA*12])+(-8.944271909999160e-01*X[29+NA*5]);
G[88+NA*36] = tcrd[1]*X[29+NA*12] + (7.200822998230956e-01*X[17+NA*12])+(2.721655269759087e-01*X[21+NA*12])+(8.944271909999160e-01*X[29+NA*6]);
G[89+NA*36] = tcrd[2]*X[29+NA*12] + (1.018350154434631e+00*X[20+NA*12])+(-8.944271909999160e-01*X[29+NA*7]);
G[90+NA*36] = tcrd[0]*X[30+NA*12] + (8.314794192830980e-01*X[19+NA*12])+(-1.571348402636772e-01*X[23+NA*12])+(-8.944271909999160e-01*X[30+NA*5]);
G[91+NA*36] = tcrd[1]*X[30+NA*12] + (-8.314794192830980e-01*X[20+NA*12])+(-1.571348402636772e-01*X[24+NA*12])+(8.944271909999160e-01*X[30+NA*6]);
G[92+NA*36] = tcrd[2]*X[30+NA*12] + (8.888888888888888e-01*X[21+NA*12])+(-8.944271909999160e-01*X[30+NA*7]);
G[93+NA*36] = tcrd[0]*X[31+NA*12] + (8.314794192830980e-01*X[20+NA*12])+(-1.571348402636772e-01*X[24+NA*12])+(-8.944271909999160e-01*X[31+NA*5]);
G[94+NA*36] = tcrd[1]*X[31+NA*12] + (8.314794192830980e-01*X[19+NA*12])+(1.571348402636772e-01*X[23+NA*12])+(8.944271909999160e-01*X[31+NA*6]);
G[95+NA*36] = tcrd[2]*X[31+NA*12] + (8.888888888888888e-01*X[22+NA*12])+(-8.944271909999160e-01*X[31+NA*7]);
G[96+NA*36] = tcrd[0]*X[32+NA*12] + (9.428090415820635e-01*X[21+NA*12])+(-8.944271909999160e-01*X[32+NA*5]);
G[97+NA*36] = tcrd[1]*X[32+NA*12] + (-9.428090415820635e-01*X[22+NA*12])+(8.944271909999160e-01*X[32+NA*6]);
G[98+NA*36] = tcrd[2]*X[32+NA*12] + (6.666666666666667e-01*X[23+NA*12])+(-8.944271909999160e-01*X[32+NA*7]);
G[99+NA*36] = tcrd[0]*X[33+NA*12] + (9.428090415820635e-01*X[22+NA*12])+(-8.944271909999160e-01*X[33+NA*5]);
G[100+NA*36] = tcrd[1]*X[33+NA*12] + (9.428090415820635e-01*X[21+NA*12])+(8.944271909999160e-01*X[33+NA*6]);
G[101+NA*36] = tcrd[2]*X[33+NA*12] + (6.666666666666667e-01*X[24+NA*12])+(-8.944271909999160e-01*X[33+NA*7]);
G[102+NA*36] = tcrd[0]*X[34+NA*12] + (1.054092553389460e+00*X[23+NA*12])+(-8.944271909999160e-01*X[34+NA*5]);
G[103+NA*36] = tcrd[1]*X[34+NA*12] + (-1.054092553389460e+00*X[24+NA*12])+(8.944271909999160e-01*X[34+NA*6]);
G[104+NA*36] = tcrd[2]*X[34+NA*12] + (-8.944271909999160e-01*X[34+NA*7]);
G[105+NA*36] = tcrd[0]*X[35+NA*12] + (1.054092553389460e+00*X[24+NA*12])+(-8.944271909999160e-01*X[35+NA*5]);
G[106+NA*36] = tcrd[1]*X[35+NA*12] + (1.054092553389460e+00*X[23+NA*12])+(8.944271909999160e-01*X[35+NA*6]);
G[107+NA*36] = tcrd[2]*X[35+NA*12] + (-8.944271909999160e-01*X[35+NA*7]);
G[75+NA*39] = tcrd[0]*X[25+NA*13] + (-7.027283689263065e-01*X[17+NA*13])+(-8.944271909999160e-01*X[25+NA*6]);
G[76+NA*39] = tcrd[1]*X[25+NA*13] + (-7.027283689263065e-01*X[18+NA*13])+(-8.944271909999160e-01*X[25+NA*5]);
G[77+NA*39] = tcrd[2]*X[25+NA*13] + (1.111111111111111e+00*X[16+NA*13])+(-8.944271909999160e-01*X[25+NA*8]);
G[78+NA*39] = tcrd[0]*X[26+NA*13] + (8.606629658238704e-01*X[16+NA*13])+(-3.849001794597505e-01*X[19+NA*13])+(-8.944271909999160e-01*X[26+NA*6]);
G[79+NA*39] = tcrd[1]*X[26+NA*13] + (-3.849001794597505e-01*X[20+NA*13])+(-8.944271909999160e-01*X[26+NA*5]);
G[80+NA*39] = tcrd[2]*X[26+NA*13] + (1.088662107903635e+00*X[17+NA*13])+(-8.944271909999160e-01*X[26+NA*8]);
G[81+NA*39] = tcrd[0]*X[27+NA*13] + (-3.849001794597505e-01*X[20+NA*13])+(-8.944271909999160e-01*X[27+NA*6]);
G[82+NA*39] = tcrd[1]*X[27+NA*13] + (8.606629658238704e-01*X[16+NA*13])+(3.849001794597505e-01*X[19+NA*13])+(-8.944271909999160e-01*X[27+NA*5]);
G[83+NA*39] = tcrd[2]*X[27+NA*13] + (1.088662107903635e+00*X[18+NA*13])+(-8.944271909999160e-01*X[27+NA*8]);
G[84+NA*39] = tcrd[0]*X[28+NA*13] + (7.200822998230956e-01*X[17+NA*13])+(-2.721655269759087e-01*X[21+NA*13])+(-8.944271909999160e-01*X[28+NA*6]);
G[85+NA*39] = tcrd[1]*X[28+NA*13] + (-7.200822998230956e-01*X[18+NA*13])+(-2.721655269759087e-01*X[22+NA*13])+(-8.944271909999160e-01*X[28+NA*5]);
G[86+NA*39] = tcrd[2]*X[28+NA*13] + (1.018350154434631e+00*X[19+NA*13])+(-8.944271909999160e-01*X[28+NA*8]);
G[87+NA*39] = tcrd[0]*X[29+NA*13] + (7.200822998230956e-01*X[18+NA*13])+(-2.721655269759087e-01*X[22+NA*13])+(-8.944271909999160e-01*X[29+NA*6]);
G[88+NA*39] = tcrd[1]*X[29+NA*13] + (7.200822998230956e-01*X[17+NA*13])+(2.721655269759087e-01*X[21+NA*13])+(-8.944271909999160e-01*X[29+NA*5]);
G[89+NA*39] = tcrd[2]*X[29+NA*13] + (1.018350154434631e+00*X[20+NA*13])+(-8.944271909999160e-01*X[29+NA*8]);
G[90+NA*39] = tcrd[0]*X[30+NA*13] + (8.314794192830980e-01*X[19+NA*13])+(-1.571348402636772e-01*X[23+NA*13])+(-8.944271909999160e-01*X[30+NA*6]);
G[91+NA*39] = tcrd[1]*X[30+NA*13] + (-8.314794192830980e-01*X[20+NA*13])+(-1.571348402636772e-01*X[24+NA*13])+(-8.944271909999160e-01*X[30+NA*5]);
G[92+NA*39] = tcrd[2]*X[30+NA*13] + (8.888888888888888e-01*X[21+NA*13])+(-8.944271909999160e-01*X[30+NA*8]);
G[93+NA*39] = tcrd[0]*X[31+NA*13] + (8.314794192830980e-01*X[20+NA*13])+(-1.571348402636772e-01*X[24+NA*13])+(-8.944271909999160e-01*X[31+NA*6]);
G[94+NA*39] = tcrd[1]*X[31+NA*13] + (8.314794192830980e-01*X[19+NA*13])+(1.571348402636772e-01*X[23+NA*13])+(-8.944271909999160e-01*X[31+NA*5]);
G[95+NA*39] = tcrd[2]*X[31+NA*13] + (8.888888888888888e-01*X[22+NA*13])+(-8.944271909999160e-01*X[31+NA*8]);
G[96+NA*39] = tcrd[0]*X[32+NA*13] + (9.428090415820635e-01*X[21+NA*13])+(-8.944271909999160e-01*X[32+NA*6]);
G[97+NA*39] = tcrd[1]*X[32+NA*13] + (-9.428090415820635e-01*X[22+NA*13])+(-8.944271909999160e-01*X[32+NA*5]);
G[98+NA*39] = tcrd[2]*X[32+NA*13] + (6.666666666666667e-01*X[23+NA*13])+(-8.944271909999160e-01*X[32+NA*8]);
G[99+NA*39] = tcrd[0]*X[33+NA*13] + (9.428090415820635e-01*X[22+NA*13])+(-8.944271909999160e-01*X[33+NA*6]);
G[100+NA*39] = tcrd[1]*X[33+NA*13] + (9.428090415820635e-01*X[21+NA*13])+(-8.944271909999160e-01*X[33+NA*5]);
G[101+NA*39] = tcrd[2]*X[33+NA*13] + (6.666666666666667e-01*X[24+NA*13])+(-8.944271909999160e-01*X[33+NA*8]);
G[102+NA*39] = tcrd[0]*X[34+NA*13] + (1.054092553389460e+00*X[23+NA*13])+(-8.944271909999160e-01*X[34+NA*6]);
G[103+NA*39] = tcrd[1]*X[34+NA*13] + (-1.054092553389460e+00*X[24+NA*13])+(-8.944271909999160e-01*X[34+NA*5]);
G[104+NA*39] = tcrd[2]*X[34+NA*13] + (-8.944271909999160e-01*X[34+NA*8]);
G[105+NA*39] = tcrd[0]*X[35+NA*13] + (1.054092553389460e+00*X[24+NA*13])+(-8.944271909999160e-01*X[35+NA*6]);
G[106+NA*39] = tcrd[1]*X[35+NA*13] + (1.054092553389460e+00*X[23+NA*13])+(-8.944271909999160e-01*X[35+NA*5]);
G[107+NA*39] = tcrd[2]*X[35+NA*13] + (-8.944271909999160e-01*X[35+NA*8]);
G[75+NA*42] = tcrd[0]*X[25+NA*14] + (-7.027283689263065e-01*X[17+NA*14])+(-1.095445115010332e+00*X[25+NA*7]);
G[76+NA*42] = tcrd[1]*X[25+NA*14] + (-7.027283689263065e-01*X[18+NA*14])+(1.095445115010332e+00*X[25+NA*8]);
G[77+NA*42] = tcrd[2]*X[25+NA*14] + (1.111111111111111e+00*X[16+NA*14]);
G[78+NA*42] = tcrd[0]*X[26+NA*14] + (8.606629658238704e-01*X[16+NA*14])+(-3.849001794597505e-01*X[19+NA*14])+(-1.095445115010332e+00*X[26+NA*7]);
G[79+NA*42] = tcrd[1]*X[26+NA*14] + (-3.849001794597505e-01*X[20+NA*14])+(1.095445115010332e+00*X[26+NA*8]);
G[80+NA*42] = tcrd[2]*X[26+NA*14] + (1.088662107903635e+00*X[17+NA*14]);
G[81+NA*42] = tcrd[0]*X[27+NA*14] + (-3.849001794597505e-01*X[20+NA*14])+(-1.095445115010332e+00*X[27+NA*7]);
G[82+NA*42] = tcrd[1]*X[27+NA*14] + (8.606629658238704e-01*X[16+NA*14])+(3.849001794597505e-01*X[19+NA*14])+(1.095445115010332e+00*X[27+NA*8]);
G[83+NA*42] = tcrd[2]*X[27+NA*14] + (1.088662107903635e+00*X[18+NA*14]);
G[84+NA*42] = tcrd[0]*X[28+NA*14] + (7.200822998230956e-01*X[17+NA*14])+(-2.721655269759087e-01*X[21+NA*14])+(-1.095445115010332e+00*X[28+NA*7]);
G[85+NA*42] = tcrd[1]*X[28+NA*14] + (-7.200822998230956e-01*X[18+NA*14])+(-2.721655269759087e-01*X[22+NA*14])+(1.095445115010332e+00*X[28+NA*8]);
G[86+NA*42] = tcrd[2]*X[28+NA*14] + (1.018350154434631e+00*X[19+NA*14]);
G[87+NA*42] = tcrd[0]*X[29+NA*14] + (7.200822998230956e-01*X[18+NA*14])+(-2.721655269759087e-01*X[22+NA*14])+(-1.095445115010332e+00*X[29+NA*7]);
G[88+NA*42] = tcrd[1]*X[29+NA*14] + (7.200822998230956e-01*X[17+NA*14])+(2.721655269759087e-01*X[21+NA*14])+(1.095445115010332e+00*X[29+NA*8]);
G[89+NA*42] = tcrd[2]*X[29+NA*14] + (1.018350154434631e+00*X[20+NA*14]);
G[90+NA*42] = tcrd[0]*X[30+NA*14] + (8.314794192830980e-01*X[19+NA*14])+(-1.571348402636772e-01*X[23+NA*14])+(-1.095445115010332e+00*X[30+NA*7]);
G[91+NA*42] = tcrd[1]*X[30+NA*14] + (-8.314794192830980e-01*X[20+NA*14])+(-1.571348402636772e-01*X[24+NA*14])+(1.095445115010332e+00*X[30+NA*8]);
G[92+NA*42] = tcrd[2]*X[30+NA*14] + (8.888888888888888e-01*X[21+NA*14]);
G[93+NA*42] = tcrd[0]*X[31+NA*14] + (8.314794192830980e-01*X[20+NA*14])+(-1.571348402636772e-01*X[24+NA*14])+(-1.095445115010332e+00*X[31+NA*7]);
G[94+NA*42] = tcrd[1]*X[31+NA*14] + (8.314794192830980e-01*X[19+NA*14])+(1.571348402636772e-01*X[23+NA*14])+(1.095445115010332e+00*X[31+NA*8]);
G[95+NA*42] = tcrd[2]*X[31+NA*14] + (8.888888888888888e-01*X[22+NA*14]);
G[96+NA*42] = tcrd[0]*X[32+NA*14] + (9.428090415820635e-01*X[21+NA*14])+(-1.095445115010332e+00*X[32+NA*7]);
G[97+NA*42] = tcrd[1]*X[32+NA*14] + (-9.428090415820635e-01*X[22+NA*14])+(1.095445115010332e+00*X[32+NA*8]);
G[98+NA*42] = tcrd[2]*X[32+NA*14] + (6.666666666666667e-01*X[23+NA*14]);
G[99+NA*42] = tcrd[0]*X[33+NA*14] + (9.428090415820635e-01*X[22+NA*14])+(-1.095445115010332e+00*X[33+NA*7]);
G[100+NA*42] = tcrd[1]*X[33+NA*14] + (9.428090415820635e-01*X[21+NA*14])+(1.095445115010332e+00*X[33+NA*8]);
G[101+NA*42] = tcrd[2]*X[33+NA*14] + (6.666666666666667e-01*X[24+NA*14]);
G[102+NA*42] = tcrd[0]*X[34+NA*14] + (1.054092553389460e+00*X[23+NA*14])+(-1.095445115010332e+00*X[34+NA*7]);
G[103+NA*42] = tcrd[1]*X[34+NA*14] + (-1.054092553389460e+00*X[24+NA*14])+(1.095445115010332e+00*X[34+NA*8]);
G[104+NA*42] = tcrd[2]*X[34+NA*14];
G[105+NA*42] = tcrd[0]*X[35+NA*14] + (1.054092553389460e+00*X[24+NA*14])+(-1.095445115010332e+00*X[35+NA*7]);
G[106+NA*42] = tcrd[1]*X[35+NA*14] + (1.054092553389460e+00*X[23+NA*14])+(1.095445115010332e+00*X[35+NA*8]);
G[107+NA*42] = tcrd[2]*X[35+NA*14];
G[75+NA*45] = tcrd[0]*X[25+NA*15] + (-7.027283689263065e-01*X[17+NA*15])+(-1.095445115010332e+00*X[25+NA*8]);
G[76+NA*45] = tcrd[1]*X[25+NA*15] + (-7.027283689263065e-01*X[18+NA*15])+(-1.095445115010332e+00*X[25+NA*7]);
G[77+NA*45] = tcrd[2]*X[25+NA*15] + (1.111111111111111e+00*X[16+NA*15]);
G[78+NA*45] = tcrd[0]*X[26+NA*15] + (8.606629658238704e-01*X[16+NA*15])+(-3.849001794597505e-01*X[19+NA*15])+(-1.095445115010332e+00*X[26+NA*8]);
G[79+NA*45] = tcrd[1]*X[26+NA*15] + (-3.849001794597505e-01*X[20+NA*15])+(-1.095445115010332e+00*X[26+NA*7]);
G[80+NA*45] = tcrd[2]*X[26+NA*15] + (1.088662107903635e+00*X[17+NA*15]);
G[81+NA*45] = tcrd[0]*X[27+NA*15] + (-3.849001794597505e-01*X[20+NA*15])+(-1.095445115010332e+00*X[27+NA*8]);
G[82+NA*45] = tcrd[1]*X[27+NA*15] + (8.606629658238704e-01*X[16+NA*15])+(3.849001794597505e-01*X[19+NA*15])+(-1.095445115010332e+00*X[27+NA*7]);
G[83+NA*45] = tcrd[2]*X[27+NA*15] + (1.088662107903635e+00*X[18+NA*15]);
G[84+NA*45] = tcrd[0]*X[28+NA*15] + (7.200822998230956e-01*X[17+NA*15])+(-2.721655269759087e-01*X[21+NA*15])+(-1.095445115010332e+00*X[28+NA*8]);
G[85+NA*45] = tcrd[1]*X[28+NA*15] + (-7.200822998230956e-01*X[18+NA*15])+(-2.721655269759087e-01*X[22+NA*15])+(-1.095445115010332e+00*X[28+NA*7]);
G[86+NA*45] = tcrd[2]*X[28+NA*15] + (1.018350154434631e+00*X[19+NA*15]);
G[87+NA*45] = tcrd[0]*X[29+NA*15] + (7.200822998230956e-01*X[18+NA*15])+(-2.721655269759087e-01*X[22+NA*15])+(-1.095445115010332e+00*X[29+NA*8]);
G[88+NA*45] = tcrd[1]*X[29+NA*15] + (7.200822998230956e-01*X[17+NA*15])+(2.721655269759087e-01*X[21+NA*15])+(-1.095445115010332e+00*X[29+NA*7]);
G[89+NA*45] = tcrd[2]*X[29+NA*15] + (1.018350154434631e+00*X[20+NA*15]);
G[90+NA*45] = tcrd[0]*X[30+NA*15] + (8.314794192830980e-01*X[19+NA*15])+(-1.571348402636772e-01*X[23+NA*15])+(-1.095445115010332e+00*X[30+NA*8]);
G[91+NA*45] = tcrd[1]*X[30+NA*15] + (-8.314794192830980e-01*X[20+NA*15])+(-1.571348402636772e-01*X[24+NA*15])+(-1.095445115010332e+00*X[30+NA*7]);
G[92+NA*45] = tcrd[2]*X[30+NA*15] + (8.888888888888888e-01*X[21+NA*15]);
G[93+NA*45] = tcrd[0]*X[31+NA*15] + (8.314794192830980e-01*X[20+NA*15])+(-1.571348402636772e-01*X[24+NA*15])+(-1.095445115010332e+00*X[31+NA*8]);
G[94+NA*45] = tcrd[1]*X[31+NA*15] + (8.314794192830980e-01*X[19+NA*15])+(1.571348402636772e-01*X[23+NA*15])+(-1.095445115010332e+00*X[31+NA*7]);
G[95+NA*45] = tcrd[2]*X[31+NA*15] + (8.888888888888888e-01*X[22+NA*15]);
G[96+NA*45] = tcrd[0]*X[32+NA*15] + (9.428090415820635e-01*X[21+NA*15])+(-1.095445115010332e+00*X[32+NA*8]);
G[97+NA*45] = tcrd[1]*X[32+NA*15] + (-9.428090415820635e-01*X[22+NA*15])+(-1.095445115010332e+00*X[32+NA*7]);
G[98+NA*45] = tcrd[2]*X[32+NA*15] + (6.666666666666667e-01*X[23+NA*15]);
G[99+NA*45] = tcrd[0]*X[33+NA*15] + (9.428090415820635e-01*X[22+NA*15])+(-1.095445115010332e+00*X[33+NA*8]);
G[100+NA*45] = tcrd[1]*X[33+NA*15] + (9.428090415820635e-01*X[21+NA*15])+(-1.095445115010332e+00*X[33+NA*7]);
G[101+NA*45] = tcrd[2]*X[33+NA*15] + (6.666666666666667e-01*X[24+NA*15]);
G[102+NA*45] = tcrd[0]*X[34+NA*15] + (1.054092553389460e+00*X[23+NA*15])+(-1.095445115010332e+00*X[34+NA*8]);
G[103+NA*45] = tcrd[1]*X[34+NA*15] + (-1.054092553389460e+00*X[24+NA*15])+(-1.095445115010332e+00*X[34+NA*7]);
G[104+NA*45] = tcrd[2]*X[34+NA*15];
G[105+NA*45] = tcrd[0]*X[35+NA*15] + (1.054092553389460e+00*X[24+NA*15])+(-1.095445115010332e+00*X[35+NA*8]);
G[106+NA*45] = tcrd[1]*X[35+NA*15] + (1.054092553389460e+00*X[23+NA*15])+(-1.095445115010332e+00*X[35+NA*7]);
G[107+NA*45] = tcrd[2]*X[35+NA*15];
}

template <int NA>
void ExpHobGrdBlk_HG( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[75+NA*48] = tcrd[0]*X[25+NA*16] + (-7.027283689263065e-01*X[17+NA*16])+(6.998542122237653e-01*X[25+NA*10]);
G[76+NA*48] = tcrd[1]*X[25+NA*16] + (-7.027283689263065e-01*X[18+NA*16])+(6.998542122237653e-01*X[25+NA*11]);
G[77+NA*48] = tcrd[2]*X[25+NA*16] + (1.111111111111111e+00*X[16+NA*16])+(-1.142857142857143e+00*X[25+NA*9]);
G[78+NA*48] = tcrd[0]*X[26+NA*16] + (8.606629658238704e-01*X[16+NA*16])+(-3.849001794597505e-01*X[19+NA*16])+(6.998542122237653e-01*X[26+NA*10]);
G[79+NA*48] = tcrd[1]*X[26+NA*16] + (-3.849001794597505e-01*X[20+NA*16])+(6.998542122237653e-01*X[26+NA*11]);
G[80+NA*48] = tcrd[2]*X[26+NA*16] + (1.088662107903635e+00*X[17+NA*16])+(-1.142857142857143e+00*X[26+NA*9]);
G[81+NA*48] = tcrd[0]*X[27+NA*16] + (-3.849001794597505e-01*X[20+NA*16])+(6.998542122237653e-01*X[27+NA*10]);
G[82+NA*48] = tcrd[1]*X[27+NA*16] + (8.606629658238704e-01*X[16+NA*16])+(3.849001794597505e-01*X[19+NA*16])+(6.998542122237653e-01*X[27+NA*11]);
G[83+NA*48] = tcrd[2]*X[27+NA*16] + (1.088662107903635e+00*X[18+NA*16])+(-1.142857142857143e+00*X[27+NA*9]);
G[84+NA*48] = tcrd[0]*X[28+NA*16] + (7.200822998230956e-01*X[17+NA*16])+(-2.721655269759087e-01*X[21+NA*16])+(6.998542122237653e-01*X[28+NA*10]);
G[85+NA*48] = tcrd[1]*X[28+NA*16] + (-7.200822998230956e-01*X[18+NA*16])+(-2.721655269759087e-01*X[22+NA*16])+(6.998542122237653e-01*X[28+NA*11]);
G[86+NA*48] = tcrd[2]*X[28+NA*16] + (1.018350154434631e+00*X[19+NA*16])+(-1.142857142857143e+00*X[28+NA*9]);
G[87+NA*48] = tcrd[0]*X[29+NA*16] + (7.200822998230956e-01*X[18+NA*16])+(-2.721655269759087e-01*X[22+NA*16])+(6.998542122237653e-01*X[29+NA*10]);
G[88+NA*48] = tcrd[1]*X[29+NA*16] + (7.200822998230956e-01*X[17+NA*16])+(2.721655269759087e-01*X[21+NA*16])+(6.998542122237653e-01*X[29+NA*11]);
G[89+NA*48] = tcrd[2]*X[29+NA*16] + (1.018350154434631e+00*X[20+NA*16])+(-1.142857142857143e+00*X[29+NA*9]);
G[90+NA*48] = tcrd[0]*X[30+NA*16] + (8.314794192830980e-01*X[19+NA*16])+(-1.571348402636772e-01*X[23+NA*16])+(6.998542122237653e-01*X[30+NA*10]);
G[91+NA*48] = tcrd[1]*X[30+NA*16] + (-8.314794192830980e-01*X[20+NA*16])+(-1.571348402636772e-01*X[24+NA*16])+(6.998542122237653e-01*X[30+NA*11]);
G[92+NA*48] = tcrd[2]*X[30+NA*16] + (8.888888888888888e-01*X[21+NA*16])+(-1.142857142857143e+00*X[30+NA*9]);
G[93+NA*48] = tcrd[0]*X[31+NA*16] + (8.314794192830980e-01*X[20+NA*16])+(-1.571348402636772e-01*X[24+NA*16])+(6.998542122237653e-01*X[31+NA*10]);
G[94+NA*48] = tcrd[1]*X[31+NA*16] + (8.314794192830980e-01*X[19+NA*16])+(1.571348402636772e-01*X[23+NA*16])+(6.998542122237653e-01*X[31+NA*11]);
G[95+NA*48] = tcrd[2]*X[31+NA*16] + (8.888888888888888e-01*X[22+NA*16])+(-1.142857142857143e+00*X[31+NA*9]);
G[96+NA*48] = tcrd[0]*X[32+NA*16] + (9.428090415820635e-01*X[21+NA*16])+(6.998542122237653e-01*X[32+NA*10]);
G[97+NA*48] = tcrd[1]*X[32+NA*16] + (-9.428090415820635e-01*X[22+NA*16])+(6.998542122237653e-01*X[32+NA*11]);
G[98+NA*48] = tcrd[2]*X[32+NA*16] + (6.666666666666667e-01*X[23+NA*16])+(-1.142857142857143e+00*X[32+NA*9]);
G[99+NA*48] = tcrd[0]*X[33+NA*16] + (9.428090415820635e-01*X[22+NA*16])+(6.998542122237653e-01*X[33+NA*10]);
G[100+NA*48] = tcrd[1]*X[33+NA*16] + (9.428090415820635e-01*X[21+NA*16])+(6.998542122237653e-01*X[33+NA*11]);
G[101+NA*48] = tcrd[2]*X[33+NA*16] + (6.666666666666667e-01*X[24+NA*16])+(-1.142857142857143e+00*X[33+NA*9]);
G[102+NA*48] = tcrd[0]*X[34+NA*16] + (1.054092553389460e+00*X[23+NA*16])+(6.998542122237653e-01*X[34+NA*10]);
G[103+NA*48] = tcrd[1]*X[34+NA*16] + (-1.054092553389460e+00*X[24+NA*16])+(6.998542122237653e-01*X[34+NA*11]);
G[104+NA*48] = tcrd[2]*X[34+NA*16] + (-1.142857142857143e+00*X[34+NA*9]);
G[105+NA*48] = tcrd[0]*X[35+NA*16] + (1.054092553389460e+00*X[24+NA*16])+(6.998542122237653e-01*X[35+NA*10]);
G[106+NA*48] = tcrd[1]*X[35+NA*16] + (1.054092553389460e+00*X[23+NA*16])+(6.998542122237653e-01*X[35+NA*11]);
G[107+NA*48] = tcrd[2]*X[35+NA*16] + (-1.142857142857143e+00*X[35+NA*9]);
G[75+NA*51] = tcrd[0]*X[25+NA*17] + (-7.027283689263065e-01*X[17+NA*17])+(-9.035079029052513e-01*X[25+NA*9])+(3.499271061118825e-01*X[25+NA*12]);
G[76+NA*51] = tcrd[1]*X[25+NA*17] + (-7.027283689263065e-01*X[18+NA*17])+(3.499271061118825e-01*X[25+NA*13]);
G[77+NA*51] = tcrd[2]*X[25+NA*17] + (1.111111111111111e+00*X[17+NA*16])+(-1.106566670344976e+00*X[25+NA*10]);
G[78+NA*51] = tcrd[0]*X[26+NA*17] + (8.606629658238704e-01*X[17+NA*16])+(-3.849001794597505e-01*X[19+NA*17])+(-9.035079029052513e-01*X[26+NA*9])+(3.499271061118825e-01*X[26+NA*12]);
G[79+NA*51] = tcrd[1]*X[26+NA*17] + (-3.849001794597505e-01*X[20+NA*17])+(3.499271061118825e-01*X[26+NA*13]);
G[80+NA*51] = tcrd[2]*X[26+NA*17] + (1.088662107903635e+00*X[17+NA*17])+(-1.106566670344976e+00*X[26+NA*10]);
G[81+NA*51] = tcrd[0]*X[27+NA*17] + (-3.849001794597505e-01*X[20+NA*17])+(-9.035079029052513e-01*X[27+NA*9])+(3.499271061118825e-01*X[27+NA*12]);
G[82+NA*51] = tcrd[1]*X[27+NA*17] + (8.606629658238704e-01*X[17+NA*16])+(3.849001794597505e-01*X[19+NA*17])+(3.499271061118825e-01*X[27+NA*13]);
G[83+NA*51] = tcrd[2]*X[27+NA*17] + (1.088662107903635e+00*X[18+NA*17])+(-1.106566670344976e+00*X[27+NA*10]);
G[84+NA*51] = tcrd[0]*X[28+NA*17] + (7.200822998230956e-01*X[17+NA*17])+(-2.721655269759087e-01*X[21+NA*17])+(-9.035079029052513e-01*X[28+NA*9])+(3.499271061118825e-01*X[28+NA*12]);
G[85+NA*51] = tcrd[1]*X[28+NA*17] + (-7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[22+NA*17])+(3.499271061118825e-01*X[28+NA*13]);
G[86+NA*51] = tcrd[2]*X[28+NA*17] + (1.018350154434631e+00*X[19+NA*17])+(-1.106566670344976e+00*X[28+NA*10]);
G[87+NA*51] = tcrd[0]*X[29+NA*17] + (7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[22+NA*17])+(-9.035079029052513e-01*X[29+NA*9])+(3.499271061118825e-01*X[29+NA*12]);
G[88+NA*51] = tcrd[1]*X[29+NA*17] + (7.200822998230956e-01*X[17+NA*17])+(2.721655269759087e-01*X[21+NA*17])+(3.499271061118825e-01*X[29+NA*13]);
G[89+NA*51] = tcrd[2]*X[29+NA*17] + (1.018350154434631e+00*X[20+NA*17])+(-1.106566670344976e+00*X[29+NA*10]);
G[90+NA*51] = tcrd[0]*X[30+NA*17] + (8.314794192830980e-01*X[19+NA*17])+(-1.571348402636772e-01*X[23+NA*17])+(-9.035079029052513e-01*X[30+NA*9])+(3.499271061118825e-01*X[30+NA*12]);
G[91+NA*51] = tcrd[1]*X[30+NA*17] + (-8.314794192830980e-01*X[20+NA*17])+(-1.571348402636772e-01*X[24+NA*17])+(3.499271061118825e-01*X[30+NA*13]);
G[92+NA*51] = tcrd[2]*X[30+NA*17] + (8.888888888888888e-01*X[21+NA*17])+(-1.106566670344976e+00*X[30+NA*10]);
G[93+NA*51] = tcrd[0]*X[31+NA*17] + (8.314794192830980e-01*X[20+NA*17])+(-1.571348402636772e-01*X[24+NA*17])+(-9.035079029052513e-01*X[31+NA*9])+(3.499271061118825e-01*X[31+NA*12]);
G[94+NA*51] = tcrd[1]*X[31+NA*17] + (8.314794192830980e-01*X[19+NA*17])+(1.571348402636772e-01*X[23+NA*17])+(3.499271061118825e-01*X[31+NA*13]);
G[95+NA*51] = tcrd[2]*X[31+NA*17] + (8.888888888888888e-01*X[22+NA*17])+(-1.106566670344976e+00*X[31+NA*10]);
G[96+NA*51] = tcrd[0]*X[32+NA*17] + (9.428090415820635e-01*X[21+NA*17])+(-9.035079029052513e-01*X[32+NA*9])+(3.499271061118825e-01*X[32+NA*12]);
G[97+NA*51] = tcrd[1]*X[32+NA*17] + (-9.428090415820635e-01*X[22+NA*17])+(3.499271061118825e-01*X[32+NA*13]);
G[98+NA*51] = tcrd[2]*X[32+NA*17] + (6.666666666666667e-01*X[23+NA*17])+(-1.106566670344976e+00*X[32+NA*10]);
G[99+NA*51] = tcrd[0]*X[33+NA*17] + (9.428090415820635e-01*X[22+NA*17])+(-9.035079029052513e-01*X[33+NA*9])+(3.499271061118825e-01*X[33+NA*12]);
G[100+NA*51] = tcrd[1]*X[33+NA*17] + (9.428090415820635e-01*X[21+NA*17])+(3.499271061118825e-01*X[33+NA*13]);
G[101+NA*51] = tcrd[2]*X[33+NA*17] + (6.666666666666667e-01*X[24+NA*17])+(-1.106566670344976e+00*X[33+NA*10]);
G[102+NA*51] = tcrd[0]*X[34+NA*17] + (1.054092553389460e+00*X[23+NA*17])+(-9.035079029052513e-01*X[34+NA*9])+(3.499271061118825e-01*X[34+NA*12]);
G[103+NA*51] = tcrd[1]*X[34+NA*17] + (-1.054092553389460e+00*X[24+NA*17])+(3.499271061118825e-01*X[34+NA*13]);
G[104+NA*51] = tcrd[2]*X[34+NA*17] + (-1.106566670344976e+00*X[34+NA*10]);
G[105+NA*51] = tcrd[0]*X[35+NA*17] + (1.054092553389460e+00*X[24+NA*17])+(-9.035079029052513e-01*X[35+NA*9])+(3.499271061118825e-01*X[35+NA*12]);
G[106+NA*51] = tcrd[1]*X[35+NA*17] + (1.054092553389460e+00*X[23+NA*17])+(3.499271061118825e-01*X[35+NA*13]);
G[107+NA*51] = tcrd[2]*X[35+NA*17] + (-1.106566670344976e+00*X[35+NA*10]);
G[75+NA*54] = tcrd[0]*X[25+NA*18] + (-7.027283689263065e-01*X[18+NA*17])+(3.499271061118825e-01*X[25+NA*13]);
G[76+NA*54] = tcrd[1]*X[25+NA*18] + (-7.027283689263065e-01*X[18+NA*18])+(-9.035079029052513e-01*X[25+NA*9])+(-3.499271061118825e-01*X[25+NA*12]);
G[77+NA*54] = tcrd[2]*X[25+NA*18] + (1.111111111111111e+00*X[18+NA*16])+(-1.106566670344976e+00*X[25+NA*11]);
G[78+NA*54] = tcrd[0]*X[26+NA*18] + (8.606629658238704e-01*X[18+NA*16])+(-3.849001794597505e-01*X[19+NA*18])+(3.499271061118825e-01*X[26+NA*13]);
G[79+NA*54] = tcrd[1]*X[26+NA*18] + (-3.849001794597505e-01*X[20+NA*18])+(-9.035079029052513e-01*X[26+NA*9])+(-3.499271061118825e-01*X[26+NA*12]);
G[80+NA*54] = tcrd[2]*X[26+NA*18] + (1.088662107903635e+00*X[18+NA*17])+(-1.106566670344976e+00*X[26+NA*11]);
G[81+NA*54] = tcrd[0]*X[27+NA*18] + (-3.849001794597505e-01*X[20+NA*18])+(3.499271061118825e-01*X[27+NA*13]);
G[82+NA*54] = tcrd[1]*X[27+NA*18] + (8.606629658238704e-01*X[18+NA*16])+(3.849001794597505e-01*X[19+NA*18])+(-9.035079029052513e-01*X[27+NA*9])+(-3.499271061118825e-01*X[27+NA*12]);
G[83+NA*54] = tcrd[2]*X[27+NA*18] + (1.088662107903635e+00*X[18+NA*18])+(-1.106566670344976e+00*X[27+NA*11]);
G[84+NA*54] = tcrd[0]*X[28+NA*18] + (7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[21+NA*18])+(3.499271061118825e-01*X[28+NA*13]);
G[85+NA*54] = tcrd[1]*X[28+NA*18] + (-7.200822998230956e-01*X[18+NA*18])+(-2.721655269759087e-01*X[22+NA*18])+(-9.035079029052513e-01*X[28+NA*9])+(-3.499271061118825e-01*X[28+NA*12]);
G[86+NA*54] = tcrd[2]*X[28+NA*18] + (1.018350154434631e+00*X[19+NA*18])+(-1.106566670344976e+00*X[28+NA*11]);
G[87+NA*54] = tcrd[0]*X[29+NA*18] + (7.200822998230956e-01*X[18+NA*18])+(-2.721655269759087e-01*X[22+NA*18])+(3.499271061118825e-01*X[29+NA*13]);
G[88+NA*54] = tcrd[1]*X[29+NA*18] + (7.200822998230956e-01*X[18+NA*17])+(2.721655269759087e-01*X[21+NA*18])+(-9.035079029052513e-01*X[29+NA*9])+(-3.499271061118825e-01*X[29+NA*12]);
G[89+NA*54] = tcrd[2]*X[29+NA*18] + (1.018350154434631e+00*X[20+NA*18])+(-1.106566670344976e+00*X[29+NA*11]);
G[90+NA*54] = tcrd[0]*X[30+NA*18] + (8.314794192830980e-01*X[19+NA*18])+(-1.571348402636772e-01*X[23+NA*18])+(3.499271061118825e-01*X[30+NA*13]);
G[91+NA*54] = tcrd[1]*X[30+NA*18] + (-8.314794192830980e-01*X[20+NA*18])+(-1.571348402636772e-01*X[24+NA*18])+(-9.035079029052513e-01*X[30+NA*9])+(-3.499271061118825e-01*X[30+NA*12]);
G[92+NA*54] = tcrd[2]*X[30+NA*18] + (8.888888888888888e-01*X[21+NA*18])+(-1.106566670344976e+00*X[30+NA*11]);
G[93+NA*54] = tcrd[0]*X[31+NA*18] + (8.314794192830980e-01*X[20+NA*18])+(-1.571348402636772e-01*X[24+NA*18])+(3.499271061118825e-01*X[31+NA*13]);
G[94+NA*54] = tcrd[1]*X[31+NA*18] + (8.314794192830980e-01*X[19+NA*18])+(1.571348402636772e-01*X[23+NA*18])+(-9.035079029052513e-01*X[31+NA*9])+(-3.499271061118825e-01*X[31+NA*12]);
G[95+NA*54] = tcrd[2]*X[31+NA*18] + (8.888888888888888e-01*X[22+NA*18])+(-1.106566670344976e+00*X[31+NA*11]);
G[96+NA*54] = tcrd[0]*X[32+NA*18] + (9.428090415820635e-01*X[21+NA*18])+(3.499271061118825e-01*X[32+NA*13]);
G[97+NA*54] = tcrd[1]*X[32+NA*18] + (-9.428090415820635e-01*X[22+NA*18])+(-9.035079029052513e-01*X[32+NA*9])+(-3.499271061118825e-01*X[32+NA*12]);
G[98+NA*54] = tcrd[2]*X[32+NA*18] + (6.666666666666667e-01*X[23+NA*18])+(-1.106566670344976e+00*X[32+NA*11]);
G[99+NA*54] = tcrd[0]*X[33+NA*18] + (9.428090415820635e-01*X[22+NA*18])+(3.499271061118825e-01*X[33+NA*13]);
G[100+NA*54] = tcrd[1]*X[33+NA*18] + (9.428090415820635e-01*X[21+NA*18])+(-9.035079029052513e-01*X[33+NA*9])+(-3.499271061118825e-01*X[33+NA*12]);
G[101+NA*54] = tcrd[2]*X[33+NA*18] + (6.666666666666667e-01*X[24+NA*18])+(-1.106566670344976e+00*X[33+NA*11]);
G[102+NA*54] = tcrd[0]*X[34+NA*18] + (1.054092553389460e+00*X[23+NA*18])+(3.499271061118825e-01*X[34+NA*13]);
G[103+NA*54] = tcrd[1]*X[34+NA*18] + (-1.054092553389460e+00*X[24+NA*18])+(-9.035079029052513e-01*X[34+NA*9])+(-3.499271061118825e-01*X[34+NA*12]);
G[104+NA*54] = tcrd[2]*X[34+NA*18] + (-1.106566670344976e+00*X[34+NA*11]);
G[105+NA*54] = tcrd[0]*X[35+NA*18] + (1.054092553389460e+00*X[24+NA*18])+(3.499271061118825e-01*X[35+NA*13]);
G[106+NA*54] = tcrd[1]*X[35+NA*18] + (1.054092553389460e+00*X[23+NA*18])+(-9.035079029052513e-01*X[35+NA*9])+(-3.499271061118825e-01*X[35+NA*12]);
G[107+NA*54] = tcrd[2]*X[35+NA*18] + (-1.106566670344976e+00*X[35+NA*11]);
G[75+NA*57] = tcrd[0]*X[25+NA*19] + (-7.027283689263065e-01*X[19+NA*17])+(-7.824607964359518e-01*X[25+NA*10])+(2.020305089104422e-01*X[25+NA*14]);
G[76+NA*57] = tcrd[1]*X[25+NA*19] + (-7.027283689263065e-01*X[19+NA*18])+(7.824607964359518e-01*X[25+NA*11])+(2.020305089104422e-01*X[25+NA*15]);
G[77+NA*57] = tcrd[2]*X[25+NA*19] + (1.111111111111111e+00*X[19+NA*16])+(-9.897433186107870e-01*X[25+NA*12]);
G[78+NA*57] = tcrd[0]*X[26+NA*19] + (8.606629658238704e-01*X[19+NA*16])+(-3.849001794597505e-01*X[19+NA*19])+(-7.824607964359518e-01*X[26+NA*10])+(2.020305089104422e-01*X[26+NA*14]);
G[79+NA*57] = tcrd[1]*X[26+NA*19] + (-3.849001794597505e-01*X[20+NA*19])+(7.824607964359518e-01*X[26+NA*11])+(2.020305089104422e-01*X[26+NA*15]);
G[80+NA*57] = tcrd[2]*X[26+NA*19] + (1.088662107903635e+00*X[19+NA*17])+(-9.897433186107870e-01*X[26+NA*12]);
G[81+NA*57] = tcrd[0]*X[27+NA*19] + (-3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[27+NA*10])+(2.020305089104422e-01*X[27+NA*14]);
G[82+NA*57] = tcrd[1]*X[27+NA*19] + (8.606629658238704e-01*X[19+NA*16])+(3.849001794597505e-01*X[19+NA*19])+(7.824607964359518e-01*X[27+NA*11])+(2.020305089104422e-01*X[27+NA*15]);
G[83+NA*57] = tcrd[2]*X[27+NA*19] + (1.088662107903635e+00*X[19+NA*18])+(-9.897433186107870e-01*X[27+NA*12]);
G[84+NA*57] = tcrd[0]*X[28+NA*19] + (7.200822998230956e-01*X[19+NA*17])+(-2.721655269759087e-01*X[21+NA*19])+(-7.824607964359518e-01*X[28+NA*10])+(2.020305089104422e-01*X[28+NA*14]);
G[85+NA*57] = tcrd[1]*X[28+NA*19] + (-7.200822998230956e-01*X[19+NA*18])+(-2.721655269759087e-01*X[22+NA*19])+(7.824607964359518e-01*X[28+NA*11])+(2.020305089104422e-01*X[28+NA*15]);
G[86+NA*57] = tcrd[2]*X[28+NA*19] + (1.018350154434631e+00*X[19+NA*19])+(-9.897433186107870e-01*X[28+NA*12]);
G[87+NA*57] = tcrd[0]*X[29+NA*19] + (7.200822998230956e-01*X[19+NA*18])+(-2.721655269759087e-01*X[22+NA*19])+(-7.824607964359518e-01*X[29+NA*10])+(2.020305089104422e-01*X[29+NA*14]);
G[88+NA*57] = tcrd[1]*X[29+NA*19] + (7.200822998230956e-01*X[19+NA*17])+(2.721655269759087e-01*X[21+NA*19])+(7.824607964359518e-01*X[29+NA*11])+(2.020305089104422e-01*X[29+NA*15]);
G[89+NA*57] = tcrd[2]*X[29+NA*19] + (1.018350154434631e+00*X[20+NA*19])+(-9.897433186107870e-01*X[29+NA*12]);
G[90+NA*57] = tcrd[0]*X[30+NA*19] + (8.314794192830980e-01*X[19+NA*19])+(-1.571348402636772e-01*X[23+NA*19])+(-7.824607964359518e-01*X[30+NA*10])+(2.020305089104422e-01*X[30+NA*14]);
G[91+NA*57] = tcrd[1]*X[30+NA*19] + (-8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[24+NA*19])+(7.824607964359518e-01*X[30+NA*11])+(2.020305089104422e-01*X[30+NA*15]);
G[92+NA*57] = tcrd[2]*X[30+NA*19] + (8.888888888888888e-01*X[21+NA*19])+(-9.897433186107870e-01*X[30+NA*12]);
G[93+NA*57] = tcrd[0]*X[31+NA*19] + (8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[24+NA*19])+(-7.824607964359518e-01*X[31+NA*10])+(2.020305089104422e-01*X[31+NA*14]);
G[94+NA*57] = tcrd[1]*X[31+NA*19] + (8.314794192830980e-01*X[19+NA*19])+(1.571348402636772e-01*X[23+NA*19])+(7.824607964359518e-01*X[31+NA*11])+(2.020305089104422e-01*X[31+NA*15]);
G[95+NA*57] = tcrd[2]*X[31+NA*19] + (8.888888888888888e-01*X[22+NA*19])+(-9.897433186107870e-01*X[31+NA*12]);
G[96+NA*57] = tcrd[0]*X[32+NA*19] + (9.428090415820635e-01*X[21+NA*19])+(-7.824607964359518e-01*X[32+NA*10])+(2.020305089104422e-01*X[32+NA*14]);
G[97+NA*57] = tcrd[1]*X[32+NA*19] + (-9.428090415820635e-01*X[22+NA*19])+(7.824607964359518e-01*X[32+NA*11])+(2.020305089104422e-01*X[32+NA*15]);
G[98+NA*57] = tcrd[2]*X[32+NA*19] + (6.666666666666667e-01*X[23+NA*19])+(-9.897433186107870e-01*X[32+NA*12]);
G[99+NA*57] = tcrd[0]*X[33+NA*19] + (9.428090415820635e-01*X[22+NA*19])+(-7.824607964359518e-01*X[33+NA*10])+(2.020305089104422e-01*X[33+NA*14]);
G[100+NA*57] = tcrd[1]*X[33+NA*19] + (9.428090415820635e-01*X[21+NA*19])+(7.824607964359518e-01*X[33+NA*11])+(2.020305089104422e-01*X[33+NA*15]);
G[101+NA*57] = tcrd[2]*X[33+NA*19] + (6.666666666666667e-01*X[24+NA*19])+(-9.897433186107870e-01*X[33+NA*12]);
G[102+NA*57] = tcrd[0]*X[34+NA*19] + (1.054092553389460e+00*X[23+NA*19])+(-7.824607964359518e-01*X[34+NA*10])+(2.020305089104422e-01*X[34+NA*14]);
G[103+NA*57] = tcrd[1]*X[34+NA*19] + (-1.054092553389460e+00*X[24+NA*19])+(7.824607964359518e-01*X[34+NA*11])+(2.020305089104422e-01*X[34+NA*15]);
G[104+NA*57] = tcrd[2]*X[34+NA*19] + (-9.897433186107870e-01*X[34+NA*12]);
G[105+NA*57] = tcrd[0]*X[35+NA*19] + (1.054092553389460e+00*X[24+NA*19])+(-7.824607964359518e-01*X[35+NA*10])+(2.020305089104422e-01*X[35+NA*14]);
G[106+NA*57] = tcrd[1]*X[35+NA*19] + (1.054092553389460e+00*X[23+NA*19])+(7.824607964359518e-01*X[35+NA*11])+(2.020305089104422e-01*X[35+NA*15]);
G[107+NA*57] = tcrd[2]*X[35+NA*19] + (-9.897433186107870e-01*X[35+NA*12]);
G[75+NA*60] = tcrd[0]*X[25+NA*20] + (-7.027283689263065e-01*X[20+NA*17])+(-7.824607964359518e-01*X[25+NA*11])+(2.020305089104422e-01*X[25+NA*15]);
G[76+NA*60] = tcrd[1]*X[25+NA*20] + (-7.027283689263065e-01*X[20+NA*18])+(-7.824607964359518e-01*X[25+NA*10])+(-2.020305089104422e-01*X[25+NA*14]);
G[77+NA*60] = tcrd[2]*X[25+NA*20] + (1.111111111111111e+00*X[20+NA*16])+(-9.897433186107870e-01*X[25+NA*13]);
G[78+NA*60] = tcrd[0]*X[26+NA*20] + (8.606629658238704e-01*X[20+NA*16])+(-3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[26+NA*11])+(2.020305089104422e-01*X[26+NA*15]);
G[79+NA*60] = tcrd[1]*X[26+NA*20] + (-3.849001794597505e-01*X[20+NA*20])+(-7.824607964359518e-01*X[26+NA*10])+(-2.020305089104422e-01*X[26+NA*14]);
G[80+NA*60] = tcrd[2]*X[26+NA*20] + (1.088662107903635e+00*X[20+NA*17])+(-9.897433186107870e-01*X[26+NA*13]);
G[81+NA*60] = tcrd[0]*X[27+NA*20] + (-3.849001794597505e-01*X[20+NA*20])+(-7.824607964359518e-01*X[27+NA*11])+(2.020305089104422e-01*X[27+NA*15]);
G[82+NA*60] = tcrd[1]*X[27+NA*20] + (8.606629658238704e-01*X[20+NA*16])+(3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[27+NA*10])+(-2.020305089104422e-01*X[27+NA*14]);
G[83+NA*60] = tcrd[2]*X[27+NA*20] + (1.088662107903635e+00*X[20+NA*18])+(-9.897433186107870e-01*X[27+NA*13]);
G[84+NA*60] = tcrd[0]*X[28+NA*20] + (7.200822998230956e-01*X[20+NA*17])+(-2.721655269759087e-01*X[21+NA*20])+(-7.824607964359518e-01*X[28+NA*11])+(2.020305089104422e-01*X[28+NA*15]);
G[85+NA*60] = tcrd[1]*X[28+NA*20] + (-7.200822998230956e-01*X[20+NA*18])+(-2.721655269759087e-01*X[22+NA*20])+(-7.824607964359518e-01*X[28+NA*10])+(-2.020305089104422e-01*X[28+NA*14]);
G[86+NA*60] = tcrd[2]*X[28+NA*20] + (1.018350154434631e+00*X[20+NA*19])+(-9.897433186107870e-01*X[28+NA*13]);
G[87+NA*60] = tcrd[0]*X[29+NA*20] + (7.200822998230956e-01*X[20+NA*18])+(-2.721655269759087e-01*X[22+NA*20])+(-7.824607964359518e-01*X[29+NA*11])+(2.020305089104422e-01*X[29+NA*15]);
G[88+NA*60] = tcrd[1]*X[29+NA*20] + (7.200822998230956e-01*X[20+NA*17])+(2.721655269759087e-01*X[21+NA*20])+(-7.824607964359518e-01*X[29+NA*10])+(-2.020305089104422e-01*X[29+NA*14]);
G[89+NA*60] = tcrd[2]*X[29+NA*20] + (1.018350154434631e+00*X[20+NA*20])+(-9.897433186107870e-01*X[29+NA*13]);
G[90+NA*60] = tcrd[0]*X[30+NA*20] + (8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[23+NA*20])+(-7.824607964359518e-01*X[30+NA*11])+(2.020305089104422e-01*X[30+NA*15]);
G[91+NA*60] = tcrd[1]*X[30+NA*20] + (-8.314794192830980e-01*X[20+NA*20])+(-1.571348402636772e-01*X[24+NA*20])+(-7.824607964359518e-01*X[30+NA*10])+(-2.020305089104422e-01*X[30+NA*14]);
G[92+NA*60] = tcrd[2]*X[30+NA*20] + (8.888888888888888e-01*X[21+NA*20])+(-9.897433186107870e-01*X[30+NA*13]);
G[93+NA*60] = tcrd[0]*X[31+NA*20] + (8.314794192830980e-01*X[20+NA*20])+(-1.571348402636772e-01*X[24+NA*20])+(-7.824607964359518e-01*X[31+NA*11])+(2.020305089104422e-01*X[31+NA*15]);
G[94+NA*60] = tcrd[1]*X[31+NA*20] + (8.314794192830980e-01*X[20+NA*19])+(1.571348402636772e-01*X[23+NA*20])+(-7.824607964359518e-01*X[31+NA*10])+(-2.020305089104422e-01*X[31+NA*14]);
G[95+NA*60] = tcrd[2]*X[31+NA*20] + (8.888888888888888e-01*X[22+NA*20])+(-9.897433186107870e-01*X[31+NA*13]);
G[96+NA*60] = tcrd[0]*X[32+NA*20] + (9.428090415820635e-01*X[21+NA*20])+(-7.824607964359518e-01*X[32+NA*11])+(2.020305089104422e-01*X[32+NA*15]);
G[97+NA*60] = tcrd[1]*X[32+NA*20] + (-9.428090415820635e-01*X[22+NA*20])+(-7.824607964359518e-01*X[32+NA*10])+(-2.020305089104422e-01*X[32+NA*14]);
G[98+NA*60] = tcrd[2]*X[32+NA*20] + (6.666666666666667e-01*X[23+NA*20])+(-9.897433186107870e-01*X[32+NA*13]);
G[99+NA*60] = tcrd[0]*X[33+NA*20] + (9.428090415820635e-01*X[22+NA*20])+(-7.824607964359518e-01*X[33+NA*11])+(2.020305089104422e-01*X[33+NA*15]);
G[100+NA*60] = tcrd[1]*X[33+NA*20] + (9.428090415820635e-01*X[21+NA*20])+(-7.824607964359518e-01*X[33+NA*10])+(-2.020305089104422e-01*X[33+NA*14]);
G[101+NA*60] = tcrd[2]*X[33+NA*20] + (6.666666666666667e-01*X[24+NA*20])+(-9.897433186107870e-01*X[33+NA*13]);
G[102+NA*60] = tcrd[0]*X[34+NA*20] + (1.054092553389460e+00*X[23+NA*20])+(-7.824607964359518e-01*X[34+NA*11])+(2.020305089104422e-01*X[34+NA*15]);
G[103+NA*60] = tcrd[1]*X[34+NA*20] + (-1.054092553389460e+00*X[24+NA*20])+(-7.824607964359518e-01*X[34+NA*10])+(-2.020305089104422e-01*X[34+NA*14]);
G[104+NA*60] = tcrd[2]*X[34+NA*20] + (-9.897433186107870e-01*X[34+NA*13]);
G[105+NA*60] = tcrd[0]*X[35+NA*20] + (1.054092553389460e+00*X[24+NA*20])+(-7.824607964359518e-01*X[35+NA*11])+(2.020305089104422e-01*X[35+NA*15]);
G[106+NA*60] = tcrd[1]*X[35+NA*20] + (1.054092553389460e+00*X[23+NA*20])+(-7.824607964359518e-01*X[35+NA*10])+(-2.020305089104422e-01*X[35+NA*14]);
G[107+NA*60] = tcrd[2]*X[35+NA*20] + (-9.897433186107870e-01*X[35+NA*13]);
G[75+NA*63] = tcrd[0]*X[25+NA*21] + (-7.027283689263065e-01*X[21+NA*17])+(-9.258200997725513e-01*X[25+NA*12]);
G[76+NA*63] = tcrd[1]*X[25+NA*21] + (-7.027283689263065e-01*X[21+NA*18])+(9.258200997725513e-01*X[25+NA*13]);
G[77+NA*63] = tcrd[2]*X[25+NA*21] + (1.111111111111111e+00*X[21+NA*16])+(-7.559289460184544e-01*X[25+NA*14]);
G[78+NA*63] = tcrd[0]*X[26+NA*21] + (8.606629658238704e-01*X[21+NA*16])+(-3.849001794597505e-01*X[21+NA*19])+(-9.258200997725513e-01*X[26+NA*12]);
G[79+NA*63] = tcrd[1]*X[26+NA*21] + (-3.849001794597505e-01*X[21+NA*20])+(9.258200997725513e-01*X[26+NA*13]);
G[80+NA*63] = tcrd[2]*X[26+NA*21] + (1.088662107903635e+00*X[21+NA*17])+(-7.559289460184544e-01*X[26+NA*14]);
G[81+NA*63] = tcrd[0]*X[27+NA*21] + (-3.849001794597505e-01*X[21+NA*20])+(-9.258200997725513e-01*X[27+NA*12]);
G[82+NA*63] = tcrd[1]*X[27+NA*21] + (8.606629658238704e-01*X[21+NA*16])+(3.849001794597505e-01*X[21+NA*19])+(9.258200997725513e-01*X[27+NA*13]);
G[83+NA*63] = tcrd[2]*X[27+NA*21] + (1.088662107903635e+00*X[21+NA*18])+(-7.559289460184544e-01*X[27+NA*14]);
G[84+NA*63] = tcrd[0]*X[28+NA*21] + (7.200822998230956e-01*X[21+NA*17])+(-2.721655269759087e-01*X[21+NA*21])+(-9.258200997725513e-01*X[28+NA*12]);
G[85+NA*63] = tcrd[1]*X[28+NA*21] + (-7.200822998230956e-01*X[21+NA*18])+(-2.721655269759087e-01*X[22+NA*21])+(9.258200997725513e-01*X[28+NA*13]);
G[86+NA*63] = tcrd[2]*X[28+NA*21] + (1.018350154434631e+00*X[21+NA*19])+(-7.559289460184544e-01*X[28+NA*14]);
G[87+NA*63] = tcrd[0]*X[29+NA*21] + (7.200822998230956e-01*X[21+NA*18])+(-2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[29+NA*12]);
G[88+NA*63] = tcrd[1]*X[29+NA*21] + (7.200822998230956e-01*X[21+NA*17])+(2.721655269759087e-01*X[21+NA*21])+(9.258200997725513e-01*X[29+NA*13]);
G[89+NA*63] = tcrd[2]*X[29+NA*21] + (1.018350154434631e+00*X[21+NA*20])+(-7.559289460184544e-01*X[29+NA*14]);
G[90+NA*63] = tcrd[0]*X[30+NA*21] + (8.314794192830980e-01*X[21+NA*19])+(-1.571348402636772e-01*X[23+NA*21])+(-9.258200997725513e-01*X[30+NA*12]);
G[91+NA*63] = tcrd[1]*X[30+NA*21] + (-8.314794192830980e-01*X[21+NA*20])+(-1.571348402636772e-01*X[24+NA*21])+(9.258200997725513e-01*X[30+NA*13]);
G[92+NA*63] = tcrd[2]*X[30+NA*21] + (8.888888888888888e-01*X[21+NA*21])+(-7.559289460184544e-01*X[30+NA*14]);
G[93+NA*63] = tcrd[0]*X[31+NA*21] + (8.314794192830980e-01*X[21+NA*20])+(-1.571348402636772e-01*X[24+NA*21])+(-9.258200997725513e-01*X[31+NA*12]);
G[94+NA*63] = tcrd[1]*X[31+NA*21] + (8.314794192830980e-01*X[21+NA*19])+(1.571348402636772e-01*X[23+NA*21])+(9.258200997725513e-01*X[31+NA*13]);
G[95+NA*63] = tcrd[2]*X[31+NA*21] + (8.888888888888888e-01*X[22+NA*21])+(-7.559289460184544e-01*X[31+NA*14]);
G[96+NA*63] = tcrd[0]*X[32+NA*21] + (9.428090415820635e-01*X[21+NA*21])+(-9.258200997725513e-01*X[32+NA*12]);
G[97+NA*63] = tcrd[1]*X[32+NA*21] + (-9.428090415820635e-01*X[22+NA*21])+(9.258200997725513e-01*X[32+NA*13]);
G[98+NA*63] = tcrd[2]*X[32+NA*21] + (6.666666666666667e-01*X[23+NA*21])+(-7.559289460184544e-01*X[32+NA*14]);
G[99+NA*63] = tcrd[0]*X[33+NA*21] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[33+NA*12]);
G[100+NA*63] = tcrd[1]*X[33+NA*21] + (9.428090415820635e-01*X[21+NA*21])+(9.258200997725513e-01*X[33+NA*13]);
G[101+NA*63] = tcrd[2]*X[33+NA*21] + (6.666666666666667e-01*X[24+NA*21])+(-7.559289460184544e-01*X[33+NA*14]);
G[102+NA*63] = tcrd[0]*X[34+NA*21] + (1.054092553389460e+00*X[23+NA*21])+(-9.258200997725513e-01*X[34+NA*12]);
G[103+NA*63] = tcrd[1]*X[34+NA*21] + (-1.054092553389460e+00*X[24+NA*21])+(9.258200997725513e-01*X[34+NA*13]);
G[104+NA*63] = tcrd[2]*X[34+NA*21] + (-7.559289460184544e-01*X[34+NA*14]);
G[105+NA*63] = tcrd[0]*X[35+NA*21] + (1.054092553389460e+00*X[24+NA*21])+(-9.258200997725513e-01*X[35+NA*12]);
G[106+NA*63] = tcrd[1]*X[35+NA*21] + (1.054092553389460e+00*X[23+NA*21])+(9.258200997725513e-01*X[35+NA*13]);
G[107+NA*63] = tcrd[2]*X[35+NA*21] + (-7.559289460184544e-01*X[35+NA*14]);
G[75+NA*66] = tcrd[0]*X[25+NA*22] + (-7.027283689263065e-01*X[22+NA*17])+(-9.258200997725513e-01*X[25+NA*13]);
G[76+NA*66] = tcrd[1]*X[25+NA*22] + (-7.027283689263065e-01*X[22+NA*18])+(-9.258200997725513e-01*X[25+NA*12]);
G[77+NA*66] = tcrd[2]*X[25+NA*22] + (1.111111111111111e+00*X[22+NA*16])+(-7.559289460184544e-01*X[25+NA*15]);
G[78+NA*66] = tcrd[0]*X[26+NA*22] + (8.606629658238704e-01*X[22+NA*16])+(-3.849001794597505e-01*X[22+NA*19])+(-9.258200997725513e-01*X[26+NA*13]);
G[79+NA*66] = tcrd[1]*X[26+NA*22] + (-3.849001794597505e-01*X[22+NA*20])+(-9.258200997725513e-01*X[26+NA*12]);
G[80+NA*66] = tcrd[2]*X[26+NA*22] + (1.088662107903635e+00*X[22+NA*17])+(-7.559289460184544e-01*X[26+NA*15]);
G[81+NA*66] = tcrd[0]*X[27+NA*22] + (-3.849001794597505e-01*X[22+NA*20])+(-9.258200997725513e-01*X[27+NA*13]);
G[82+NA*66] = tcrd[1]*X[27+NA*22] + (8.606629658238704e-01*X[22+NA*16])+(3.849001794597505e-01*X[22+NA*19])+(-9.258200997725513e-01*X[27+NA*12]);
G[83+NA*66] = tcrd[2]*X[27+NA*22] + (1.088662107903635e+00*X[22+NA*18])+(-7.559289460184544e-01*X[27+NA*15]);
G[84+NA*66] = tcrd[0]*X[28+NA*22] + (7.200822998230956e-01*X[22+NA*17])+(-2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[28+NA*13]);
G[85+NA*66] = tcrd[1]*X[28+NA*22] + (-7.200822998230956e-01*X[22+NA*18])+(-2.721655269759087e-01*X[22+NA*22])+(-9.258200997725513e-01*X[28+NA*12]);
G[86+NA*66] = tcrd[2]*X[28+NA*22] + (1.018350154434631e+00*X[22+NA*19])+(-7.559289460184544e-01*X[28+NA*15]);
G[87+NA*66] = tcrd[0]*X[29+NA*22] + (7.200822998230956e-01*X[22+NA*18])+(-2.721655269759087e-01*X[22+NA*22])+(-9.258200997725513e-01*X[29+NA*13]);
G[88+NA*66] = tcrd[1]*X[29+NA*22] + (7.200822998230956e-01*X[22+NA*17])+(2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[29+NA*12]);
G[89+NA*66] = tcrd[2]*X[29+NA*22] + (1.018350154434631e+00*X[22+NA*20])+(-7.559289460184544e-01*X[29+NA*15]);
G[90+NA*66] = tcrd[0]*X[30+NA*22] + (8.314794192830980e-01*X[22+NA*19])+(-1.571348402636772e-01*X[23+NA*22])+(-9.258200997725513e-01*X[30+NA*13]);
G[91+NA*66] = tcrd[1]*X[30+NA*22] + (-8.314794192830980e-01*X[22+NA*20])+(-1.571348402636772e-01*X[24+NA*22])+(-9.258200997725513e-01*X[30+NA*12]);
G[92+NA*66] = tcrd[2]*X[30+NA*22] + (8.888888888888888e-01*X[22+NA*21])+(-7.559289460184544e-01*X[30+NA*15]);
G[93+NA*66] = tcrd[0]*X[31+NA*22] + (8.314794192830980e-01*X[22+NA*20])+(-1.571348402636772e-01*X[24+NA*22])+(-9.258200997725513e-01*X[31+NA*13]);
G[94+NA*66] = tcrd[1]*X[31+NA*22] + (8.314794192830980e-01*X[22+NA*19])+(1.571348402636772e-01*X[23+NA*22])+(-9.258200997725513e-01*X[31+NA*12]);
G[95+NA*66] = tcrd[2]*X[31+NA*22] + (8.888888888888888e-01*X[22+NA*22])+(-7.559289460184544e-01*X[31+NA*15]);
G[96+NA*66] = tcrd[0]*X[32+NA*22] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[32+NA*13]);
G[97+NA*66] = tcrd[1]*X[32+NA*22] + (-9.428090415820635e-01*X[22+NA*22])+(-9.258200997725513e-01*X[32+NA*12]);
G[98+NA*66] = tcrd[2]*X[32+NA*22] + (6.666666666666667e-01*X[23+NA*22])+(-7.559289460184544e-01*X[32+NA*15]);
G[99+NA*66] = tcrd[0]*X[33+NA*22] + (9.428090415820635e-01*X[22+NA*22])+(-9.258200997725513e-01*X[33+NA*13]);
G[100+NA*66] = tcrd[1]*X[33+NA*22] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[33+NA*12]);
G[101+NA*66] = tcrd[2]*X[33+NA*22] + (6.666666666666667e-01*X[24+NA*22])+(-7.559289460184544e-01*X[33+NA*15]);
G[102+NA*66] = tcrd[0]*X[34+NA*22] + (1.054092553389460e+00*X[23+NA*22])+(-9.258200997725513e-01*X[34+NA*13]);
G[103+NA*66] = tcrd[1]*X[34+NA*22] + (-1.054092553389460e+00*X[24+NA*22])+(-9.258200997725513e-01*X[34+NA*12]);
G[104+NA*66] = tcrd[2]*X[34+NA*22] + (-7.559289460184544e-01*X[34+NA*15]);
G[105+NA*66] = tcrd[0]*X[35+NA*22] + (1.054092553389460e+00*X[24+NA*22])+(-9.258200997725513e-01*X[35+NA*13]);
G[106+NA*66] = tcrd[1]*X[35+NA*22] + (1.054092553389460e+00*X[23+NA*22])+(-9.258200997725513e-01*X[35+NA*12]);
G[107+NA*66] = tcrd[2]*X[35+NA*22] + (-7.559289460184544e-01*X[35+NA*15]);
G[75+NA*69] = tcrd[0]*X[25+NA*23] + (-7.027283689263065e-01*X[23+NA*17])+(-1.069044967649698e+00*X[25+NA*14]);
G[76+NA*69] = tcrd[1]*X[25+NA*23] + (-7.027283689263065e-01*X[23+NA*18])+(1.069044967649698e+00*X[25+NA*15]);
G[77+NA*69] = tcrd[2]*X[25+NA*23] + (1.111111111111111e+00*X[23+NA*16]);
G[78+NA*69] = tcrd[0]*X[26+NA*23] + (8.606629658238704e-01*X[23+NA*16])+(-3.849001794597505e-01*X[23+NA*19])+(-1.069044967649698e+00*X[26+NA*14]);
G[79+NA*69] = tcrd[1]*X[26+NA*23] + (-3.849001794597505e-01*X[23+NA*20])+(1.069044967649698e+00*X[26+NA*15]);
G[80+NA*69] = tcrd[2]*X[26+NA*23] + (1.088662107903635e+00*X[23+NA*17]);
G[81+NA*69] = tcrd[0]*X[27+NA*23] + (-3.849001794597505e-01*X[23+NA*20])+(-1.069044967649698e+00*X[27+NA*14]);
G[82+NA*69] = tcrd[1]*X[27+NA*23] + (8.606629658238704e-01*X[23+NA*16])+(3.849001794597505e-01*X[23+NA*19])+(1.069044967649698e+00*X[27+NA*15]);
G[83+NA*69] = tcrd[2]*X[27+NA*23] + (1.088662107903635e+00*X[23+NA*18]);
G[84+NA*69] = tcrd[0]*X[28+NA*23] + (7.200822998230956e-01*X[23+NA*17])+(-2.721655269759087e-01*X[23+NA*21])+(-1.069044967649698e+00*X[28+NA*14]);
G[85+NA*69] = tcrd[1]*X[28+NA*23] + (-7.200822998230956e-01*X[23+NA*18])+(-2.721655269759087e-01*X[23+NA*22])+(1.069044967649698e+00*X[28+NA*15]);
G[86+NA*69] = tcrd[2]*X[28+NA*23] + (1.018350154434631e+00*X[23+NA*19]);
G[87+NA*69] = tcrd[0]*X[29+NA*23] + (7.200822998230956e-01*X[23+NA*18])+(-2.721655269759087e-01*X[23+NA*22])+(-1.069044967649698e+00*X[29+NA*14]);
G[88+NA*69] = tcrd[1]*X[29+NA*23] + (7.200822998230956e-01*X[23+NA*17])+(2.721655269759087e-01*X[23+NA*21])+(1.069044967649698e+00*X[29+NA*15]);
G[89+NA*69] = tcrd[2]*X[29+NA*23] + (1.018350154434631e+00*X[23+NA*20]);
G[90+NA*69] = tcrd[0]*X[30+NA*23] + (8.314794192830980e-01*X[23+NA*19])+(-1.571348402636772e-01*X[23+NA*23])+(-1.069044967649698e+00*X[30+NA*14]);
G[91+NA*69] = tcrd[1]*X[30+NA*23] + (-8.314794192830980e-01*X[23+NA*20])+(-1.571348402636772e-01*X[24+NA*23])+(1.069044967649698e+00*X[30+NA*15]);
G[92+NA*69] = tcrd[2]*X[30+NA*23] + (8.888888888888888e-01*X[23+NA*21]);
G[93+NA*69] = tcrd[0]*X[31+NA*23] + (8.314794192830980e-01*X[23+NA*20])+(-1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[31+NA*14]);
G[94+NA*69] = tcrd[1]*X[31+NA*23] + (8.314794192830980e-01*X[23+NA*19])+(1.571348402636772e-01*X[23+NA*23])+(1.069044967649698e+00*X[31+NA*15]);
G[95+NA*69] = tcrd[2]*X[31+NA*23] + (8.888888888888888e-01*X[23+NA*22]);
G[96+NA*69] = tcrd[0]*X[32+NA*23] + (9.428090415820635e-01*X[23+NA*21])+(-1.069044967649698e+00*X[32+NA*14]);
G[97+NA*69] = tcrd[1]*X[32+NA*23] + (-9.428090415820635e-01*X[23+NA*22])+(1.069044967649698e+00*X[32+NA*15]);
G[98+NA*69] = tcrd[2]*X[32+NA*23] + (6.666666666666667e-01*X[23+NA*23]);
G[99+NA*69] = tcrd[0]*X[33+NA*23] + (9.428090415820635e-01*X[23+NA*22])+(-1.069044967649698e+00*X[33+NA*14]);
G[100+NA*69] = tcrd[1]*X[33+NA*23] + (9.428090415820635e-01*X[23+NA*21])+(1.069044967649698e+00*X[33+NA*15]);
G[101+NA*69] = tcrd[2]*X[33+NA*23] + (6.666666666666667e-01*X[24+NA*23]);
G[102+NA*69] = tcrd[0]*X[34+NA*23] + (1.054092553389460e+00*X[23+NA*23])+(-1.069044967649698e+00*X[34+NA*14]);
G[103+NA*69] = tcrd[1]*X[34+NA*23] + (-1.054092553389460e+00*X[24+NA*23])+(1.069044967649698e+00*X[34+NA*15]);
G[104+NA*69] = tcrd[2]*X[34+NA*23];
G[105+NA*69] = tcrd[0]*X[35+NA*23] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[35+NA*14]);
G[106+NA*69] = tcrd[1]*X[35+NA*23] + (1.054092553389460e+00*X[23+NA*23])+(1.069044967649698e+00*X[35+NA*15]);
G[107+NA*69] = tcrd[2]*X[35+NA*23];
G[75+NA*72] = tcrd[0]*X[25+NA*24] + (-7.027283689263065e-01*X[24+NA*17])+(-1.069044967649698e+00*X[25+NA*15]);
G[76+NA*72] = tcrd[1]*X[25+NA*24] + (-7.027283689263065e-01*X[24+NA*18])+(-1.069044967649698e+00*X[25+NA*14]);
G[77+NA*72] = tcrd[2]*X[25+NA*24] + (1.111111111111111e+00*X[24+NA*16]);
G[78+NA*72] = tcrd[0]*X[26+NA*24] + (8.606629658238704e-01*X[24+NA*16])+(-3.849001794597505e-01*X[24+NA*19])+(-1.069044967649698e+00*X[26+NA*15]);
G[79+NA*72] = tcrd[1]*X[26+NA*24] + (-3.849001794597505e-01*X[24+NA*20])+(-1.069044967649698e+00*X[26+NA*14]);
G[80+NA*72] = tcrd[2]*X[26+NA*24] + (1.088662107903635e+00*X[24+NA*17]);
G[81+NA*72] = tcrd[0]*X[27+NA*24] + (-3.849001794597505e-01*X[24+NA*20])+(-1.069044967649698e+00*X[27+NA*15]);
G[82+NA*72] = tcrd[1]*X[27+NA*24] + (8.606629658238704e-01*X[24+NA*16])+(3.849001794597505e-01*X[24+NA*19])+(-1.069044967649698e+00*X[27+NA*14]);
G[83+NA*72] = tcrd[2]*X[27+NA*24] + (1.088662107903635e+00*X[24+NA*18]);
G[84+NA*72] = tcrd[0]*X[28+NA*24] + (7.200822998230956e-01*X[24+NA*17])+(-2.721655269759087e-01*X[24+NA*21])+(-1.069044967649698e+00*X[28+NA*15]);
G[85+NA*72] = tcrd[1]*X[28+NA*24] + (-7.200822998230956e-01*X[24+NA*18])+(-2.721655269759087e-01*X[24+NA*22])+(-1.069044967649698e+00*X[28+NA*14]);
G[86+NA*72] = tcrd[2]*X[28+NA*24] + (1.018350154434631e+00*X[24+NA*19]);
G[87+NA*72] = tcrd[0]*X[29+NA*24] + (7.200822998230956e-01*X[24+NA*18])+(-2.721655269759087e-01*X[24+NA*22])+(-1.069044967649698e+00*X[29+NA*15]);
G[88+NA*72] = tcrd[1]*X[29+NA*24] + (7.200822998230956e-01*X[24+NA*17])+(2.721655269759087e-01*X[24+NA*21])+(-1.069044967649698e+00*X[29+NA*14]);
G[89+NA*72] = tcrd[2]*X[29+NA*24] + (1.018350154434631e+00*X[24+NA*20]);
G[90+NA*72] = tcrd[0]*X[30+NA*24] + (8.314794192830980e-01*X[24+NA*19])+(-1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[30+NA*15]);
G[91+NA*72] = tcrd[1]*X[30+NA*24] + (-8.314794192830980e-01*X[24+NA*20])+(-1.571348402636772e-01*X[24+NA*24])+(-1.069044967649698e+00*X[30+NA*14]);
G[92+NA*72] = tcrd[2]*X[30+NA*24] + (8.888888888888888e-01*X[24+NA*21]);
G[93+NA*72] = tcrd[0]*X[31+NA*24] + (8.314794192830980e-01*X[24+NA*20])+(-1.571348402636772e-01*X[24+NA*24])+(-1.069044967649698e+00*X[31+NA*15]);
G[94+NA*72] = tcrd[1]*X[31+NA*24] + (8.314794192830980e-01*X[24+NA*19])+(1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[31+NA*14]);
G[95+NA*72] = tcrd[2]*X[31+NA*24] + (8.888888888888888e-01*X[24+NA*22]);
G[96+NA*72] = tcrd[0]*X[32+NA*24] + (9.428090415820635e-01*X[24+NA*21])+(-1.069044967649698e+00*X[32+NA*15]);
G[97+NA*72] = tcrd[1]*X[32+NA*24] + (-9.428090415820635e-01*X[24+NA*22])+(-1.069044967649698e+00*X[32+NA*14]);
G[98+NA*72] = tcrd[2]*X[32+NA*24] + (6.666666666666667e-01*X[24+NA*23]);
G[99+NA*72] = tcrd[0]*X[33+NA*24] + (9.428090415820635e-01*X[24+NA*22])+(-1.069044967649698e+00*X[33+NA*15]);
G[100+NA*72] = tcrd[1]*X[33+NA*24] + (9.428090415820635e-01*X[24+NA*21])+(-1.069044967649698e+00*X[33+NA*14]);
G[101+NA*72] = tcrd[2]*X[33+NA*24] + (6.666666666666667e-01*X[24+NA*24]);
G[102+NA*72] = tcrd[0]*X[34+NA*24] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[34+NA*15]);
G[103+NA*72] = tcrd[1]*X[34+NA*24] + (-1.054092553389460e+00*X[24+NA*24])+(-1.069044967649698e+00*X[34+NA*14]);
G[104+NA*72] = tcrd[2]*X[34+NA*24];
G[105+NA*72] = tcrd[0]*X[35+NA*24] + (1.054092553389460e+00*X[24+NA*24])+(-1.069044967649698e+00*X[35+NA*15]);
G[106+NA*72] = tcrd[1]*X[35+NA*24] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[35+NA*14]);
G[107+NA*72] = tcrd[2]*X[35+NA*24];
}

template <int NA>
void ExpHobGrdBlk_HH( double const *__restrict__ tcrd, double const *__restrict__ X, double *__restrict__ G )
{
G[0+NA*75] = -G[75];
G[1+NA*75] = -G[76];
G[2+NA*75] = -G[77];
G[3+NA*75] =  G[75+NA*3];
G[4+NA*75] =  G[76+NA*3];
G[5+NA*75] =  G[77+NA*3];
G[6+NA*75] =  G[75+NA*6];
G[7+NA*75] =  G[76+NA*6];
G[8+NA*75] =  G[77+NA*6];
G[9+NA*75] =  G[75+NA*9];
G[10+NA*75] =  G[76+NA*9];
G[11+NA*75] =  G[77+NA*9];
G[12+NA*75] = -G[75+NA*12];
G[13+NA*75] = -G[76+NA*12];
G[14+NA*75] = -G[77+NA*12];
G[15+NA*75] = -G[75+NA*15];
G[16+NA*75] = -G[76+NA*15];
G[17+NA*75] = -G[77+NA*15];
G[18+NA*75] = -G[75+NA*18];
G[19+NA*75] = -G[76+NA*18];
G[20+NA*75] = -G[77+NA*18];
G[21+NA*75] = -G[75+NA*21];
G[22+NA*75] = -G[76+NA*21];
G[23+NA*75] = -G[77+NA*21];
G[24+NA*75] = -G[75+NA*24];
G[25+NA*75] = -G[76+NA*24];
G[26+NA*75] = -G[77+NA*24];
G[27+NA*75] =  G[75+NA*27];
G[28+NA*75] =  G[76+NA*27];
G[29+NA*75] =  G[77+NA*27];
G[30+NA*75] =  G[75+NA*30];
G[31+NA*75] =  G[76+NA*30];
G[32+NA*75] =  G[77+NA*30];
G[33+NA*75] =  G[75+NA*33];
G[34+NA*75] =  G[76+NA*33];
G[35+NA*75] =  G[77+NA*33];
G[36+NA*75] =  G[75+NA*36];
G[37+NA*75] =  G[76+NA*36];
G[38+NA*75] =  G[77+NA*36];
G[39+NA*75] =  G[75+NA*39];
G[40+NA*75] =  G[76+NA*39];
G[41+NA*75] =  G[77+NA*39];
G[42+NA*75] =  G[75+NA*42];
G[43+NA*75] =  G[76+NA*42];
G[44+NA*75] =  G[77+NA*42];
G[45+NA*75] =  G[75+NA*45];
G[46+NA*75] =  G[76+NA*45];
G[47+NA*75] =  G[77+NA*45];
G[48+NA*75] = -G[75+NA*48];
G[49+NA*75] = -G[76+NA*48];
G[50+NA*75] = -G[77+NA*48];
G[51+NA*75] = -G[75+NA*51];
G[52+NA*75] = -G[76+NA*51];
G[53+NA*75] = -G[77+NA*51];
G[54+NA*75] = -G[75+NA*54];
G[55+NA*75] = -G[76+NA*54];
G[56+NA*75] = -G[77+NA*54];
G[57+NA*75] = -G[75+NA*57];
G[58+NA*75] = -G[76+NA*57];
G[59+NA*75] = -G[77+NA*57];
G[60+NA*75] = -G[75+NA*60];
G[61+NA*75] = -G[76+NA*60];
G[62+NA*75] = -G[77+NA*60];
G[63+NA*75] = -G[75+NA*63];
G[64+NA*75] = -G[76+NA*63];
G[65+NA*75] = -G[77+NA*63];
G[66+NA*75] = -G[75+NA*66];
G[67+NA*75] = -G[76+NA*66];
G[68+NA*75] = -G[77+NA*66];
G[69+NA*75] = -G[75+NA*69];
G[70+NA*75] = -G[76+NA*69];
G[71+NA*75] = -G[77+NA*69];
G[72+NA*75] = -G[75+NA*72];
G[73+NA*75] = -G[76+NA*72];
G[74+NA*75] = -G[77+NA*72];
G[75+NA*75] = tcrd[0]*X[25+NA*25] + (1.405456737852613e+00*X[25+NA*17]);
G[76+NA*75] = tcrd[1]*X[25+NA*25] + (1.405456737852613e+00*X[25+NA*18]);
G[77+NA*75] = tcrd[2]*X[25+NA*25] + (-2.222222222222222e+00*X[25+NA*16]);
G[78+NA*75] = tcrd[0]*X[26+NA*25] + (-8.606629658238704e-01*X[25+NA*16])+(3.849001794597505e-01*X[25+NA*19])+(7.027283689263065e-01*X[26+NA*17]);
G[79+NA*75] = tcrd[1]*X[26+NA*25] + (3.849001794597505e-01*X[25+NA*20])+(7.027283689263065e-01*X[26+NA*18]);
G[80+NA*75] = tcrd[2]*X[26+NA*25] + (-1.088662107903635e+00*X[25+NA*17])+(-1.111111111111111e+00*X[26+NA*16]);
G[81+NA*75] = tcrd[0]*X[27+NA*25] + (3.849001794597505e-01*X[25+NA*20])+(7.027283689263065e-01*X[27+NA*17]);
G[82+NA*75] = tcrd[1]*X[27+NA*25] + (-8.606629658238704e-01*X[25+NA*16])+(-3.849001794597505e-01*X[25+NA*19])+(7.027283689263065e-01*X[27+NA*18]);
G[83+NA*75] = tcrd[2]*X[27+NA*25] + (-1.088662107903635e+00*X[25+NA*18])+(-1.111111111111111e+00*X[27+NA*16]);
G[84+NA*75] = tcrd[0]*X[28+NA*25] + (-7.200822998230956e-01*X[25+NA*17])+(2.721655269759087e-01*X[25+NA*21])+(7.027283689263065e-01*X[28+NA*17]);
G[85+NA*75] = tcrd[1]*X[28+NA*25] + (7.200822998230956e-01*X[25+NA*18])+(2.721655269759087e-01*X[25+NA*22])+(7.027283689263065e-01*X[28+NA*18]);
G[86+NA*75] = tcrd[2]*X[28+NA*25] + (-1.018350154434631e+00*X[25+NA*19])+(-1.111111111111111e+00*X[28+NA*16]);
G[87+NA*75] = tcrd[0]*X[29+NA*25] + (-7.200822998230956e-01*X[25+NA*18])+(2.721655269759087e-01*X[25+NA*22])+(7.027283689263065e-01*X[29+NA*17]);
G[88+NA*75] = tcrd[1]*X[29+NA*25] + (-7.200822998230956e-01*X[25+NA*17])+(-2.721655269759087e-01*X[25+NA*21])+(7.027283689263065e-01*X[29+NA*18]);
G[89+NA*75] = tcrd[2]*X[29+NA*25] + (-1.018350154434631e+00*X[25+NA*20])+(-1.111111111111111e+00*X[29+NA*16]);
G[90+NA*75] = tcrd[0]*X[30+NA*25] + (-8.314794192830980e-01*X[25+NA*19])+(1.571348402636772e-01*X[25+NA*23])+(7.027283689263065e-01*X[30+NA*17]);
G[91+NA*75] = tcrd[1]*X[30+NA*25] + (8.314794192830980e-01*X[25+NA*20])+(1.571348402636772e-01*X[25+NA*24])+(7.027283689263065e-01*X[30+NA*18]);
G[92+NA*75] = tcrd[2]*X[30+NA*25] + (-8.888888888888888e-01*X[25+NA*21])+(-1.111111111111111e+00*X[30+NA*16]);
G[93+NA*75] = tcrd[0]*X[31+NA*25] + (-8.314794192830980e-01*X[25+NA*20])+(1.571348402636772e-01*X[25+NA*24])+(7.027283689263065e-01*X[31+NA*17]);
G[94+NA*75] = tcrd[1]*X[31+NA*25] + (-8.314794192830980e-01*X[25+NA*19])+(-1.571348402636772e-01*X[25+NA*23])+(7.027283689263065e-01*X[31+NA*18]);
G[95+NA*75] = tcrd[2]*X[31+NA*25] + (-8.888888888888888e-01*X[25+NA*22])+(-1.111111111111111e+00*X[31+NA*16]);
G[96+NA*75] = tcrd[0]*X[32+NA*25] + (-9.428090415820635e-01*X[25+NA*21])+(7.027283689263065e-01*X[32+NA*17]);
G[97+NA*75] = tcrd[1]*X[32+NA*25] + (9.428090415820635e-01*X[25+NA*22])+(7.027283689263065e-01*X[32+NA*18]);
G[98+NA*75] = tcrd[2]*X[32+NA*25] + (-6.666666666666667e-01*X[25+NA*23])+(-1.111111111111111e+00*X[32+NA*16]);
G[99+NA*75] = tcrd[0]*X[33+NA*25] + (-9.428090415820635e-01*X[25+NA*22])+(7.027283689263065e-01*X[33+NA*17]);
G[100+NA*75] = tcrd[1]*X[33+NA*25] + (-9.428090415820635e-01*X[25+NA*21])+(7.027283689263065e-01*X[33+NA*18]);
G[101+NA*75] = tcrd[2]*X[33+NA*25] + (-6.666666666666667e-01*X[25+NA*24])+(-1.111111111111111e+00*X[33+NA*16]);
G[102+NA*75] = tcrd[0]*X[34+NA*25] + (-1.054092553389460e+00*X[25+NA*23])+(7.027283689263065e-01*X[34+NA*17]);
G[103+NA*75] = tcrd[1]*X[34+NA*25] + (1.054092553389460e+00*X[25+NA*24])+(7.027283689263065e-01*X[34+NA*18]);
G[104+NA*75] = tcrd[2]*X[34+NA*25] + (-1.111111111111111e+00*X[34+NA*16]);
G[105+NA*75] = tcrd[0]*X[35+NA*25] + (-1.054092553389460e+00*X[25+NA*24])+(7.027283689263065e-01*X[35+NA*17]);
G[106+NA*75] = tcrd[1]*X[35+NA*25] + (-1.054092553389460e+00*X[25+NA*23])+(7.027283689263065e-01*X[35+NA*18]);
G[107+NA*75] = tcrd[2]*X[35+NA*25] + (-1.111111111111111e+00*X[35+NA*16]);
G[0+NA*78] = -G[78];
G[1+NA*78] = -G[79];
G[2+NA*78] = -G[80];
G[3+NA*78] =  G[78+NA*3];
G[4+NA*78] =  G[79+NA*3];
G[5+NA*78] =  G[80+NA*3];
G[6+NA*78] =  G[78+NA*6];
G[7+NA*78] =  G[79+NA*6];
G[8+NA*78] =  G[80+NA*6];
G[9+NA*78] =  G[78+NA*9];
G[10+NA*78] =  G[79+NA*9];
G[11+NA*78] =  G[80+NA*9];
G[12+NA*78] = -G[78+NA*12];
G[13+NA*78] = -G[79+NA*12];
G[14+NA*78] = -G[80+NA*12];
G[15+NA*78] = -G[78+NA*15];
G[16+NA*78] = -G[79+NA*15];
G[17+NA*78] = -G[80+NA*15];
G[18+NA*78] = -G[78+NA*18];
G[19+NA*78] = -G[79+NA*18];
G[20+NA*78] = -G[80+NA*18];
G[21+NA*78] = -G[78+NA*21];
G[22+NA*78] = -G[79+NA*21];
G[23+NA*78] = -G[80+NA*21];
G[24+NA*78] = -G[78+NA*24];
G[25+NA*78] = -G[79+NA*24];
G[26+NA*78] = -G[80+NA*24];
G[27+NA*78] =  G[78+NA*27];
G[28+NA*78] =  G[79+NA*27];
G[29+NA*78] =  G[80+NA*27];
G[30+NA*78] =  G[78+NA*30];
G[31+NA*78] =  G[79+NA*30];
G[32+NA*78] =  G[80+NA*30];
G[33+NA*78] =  G[78+NA*33];
G[34+NA*78] =  G[79+NA*33];
G[35+NA*78] =  G[80+NA*33];
G[36+NA*78] =  G[78+NA*36];
G[37+NA*78] =  G[79+NA*36];
G[38+NA*78] =  G[80+NA*36];
G[39+NA*78] =  G[78+NA*39];
G[40+NA*78] =  G[79+NA*39];
G[41+NA*78] =  G[80+NA*39];
G[42+NA*78] =  G[78+NA*42];
G[43+NA*78] =  G[79+NA*42];
G[44+NA*78] =  G[80+NA*42];
G[45+NA*78] =  G[78+NA*45];
G[46+NA*78] =  G[79+NA*45];
G[47+NA*78] =  G[80+NA*45];
G[48+NA*78] = -G[78+NA*48];
G[49+NA*78] = -G[79+NA*48];
G[50+NA*78] = -G[80+NA*48];
G[51+NA*78] = -G[78+NA*51];
G[52+NA*78] = -G[79+NA*51];
G[53+NA*78] = -G[80+NA*51];
G[54+NA*78] = -G[78+NA*54];
G[55+NA*78] = -G[79+NA*54];
G[56+NA*78] = -G[80+NA*54];
G[57+NA*78] = -G[78+NA*57];
G[58+NA*78] = -G[79+NA*57];
G[59+NA*78] = -G[80+NA*57];
G[60+NA*78] = -G[78+NA*60];
G[61+NA*78] = -G[79+NA*60];
G[62+NA*78] = -G[80+NA*60];
G[63+NA*78] = -G[78+NA*63];
G[64+NA*78] = -G[79+NA*63];
G[65+NA*78] = -G[80+NA*63];
G[66+NA*78] = -G[78+NA*66];
G[67+NA*78] = -G[79+NA*66];
G[68+NA*78] = -G[80+NA*66];
G[69+NA*78] = -G[78+NA*69];
G[70+NA*78] = -G[79+NA*69];
G[71+NA*78] = -G[80+NA*69];
G[72+NA*78] = -G[78+NA*72];
G[73+NA*78] = -G[79+NA*72];
G[74+NA*78] = -G[80+NA*72];
G[75+NA*78] =  G[78+NA*75];
G[76+NA*78] =  G[79+NA*75];
G[77+NA*78] =  G[80+NA*75];
G[75+NA*78] =  G[78+NA*75];
G[76+NA*78] =  G[79+NA*75];
G[77+NA*78] =  G[80+NA*75];
G[78+NA*78] = tcrd[0]*X[26+NA*26] + (-1.721325931647741e+00*X[26+NA*16])+(7.698003589195009e-01*X[26+NA*19]);
G[79+NA*78] = tcrd[1]*X[26+NA*26] + (7.698003589195009e-01*X[26+NA*20]);
G[80+NA*78] = tcrd[2]*X[26+NA*26] + (-2.177324215807269e+00*X[26+NA*17]);
G[81+NA*78] = tcrd[0]*X[27+NA*26] + (3.849001794597505e-01*X[26+NA*20])+(-8.606629658238704e-01*X[27+NA*16])+(3.849001794597505e-01*X[27+NA*19]);
G[82+NA*78] = tcrd[1]*X[27+NA*26] + (-8.606629658238704e-01*X[26+NA*16])+(-3.849001794597505e-01*X[26+NA*19])+(3.849001794597505e-01*X[27+NA*20]);
G[83+NA*78] = tcrd[2]*X[27+NA*26] + (-1.088662107903635e+00*X[26+NA*18])+(-1.088662107903635e+00*X[27+NA*17]);
G[84+NA*78] = tcrd[0]*X[28+NA*26] + (-7.200822998230956e-01*X[26+NA*17])+(2.721655269759087e-01*X[26+NA*21])+(-8.606629658238704e-01*X[28+NA*16])+(3.849001794597505e-01*X[28+NA*19]);
G[85+NA*78] = tcrd[1]*X[28+NA*26] + (7.200822998230956e-01*X[26+NA*18])+(2.721655269759087e-01*X[26+NA*22])+(3.849001794597505e-01*X[28+NA*20]);
G[86+NA*78] = tcrd[2]*X[28+NA*26] + (-1.018350154434631e+00*X[26+NA*19])+(-1.088662107903635e+00*X[28+NA*17]);
G[87+NA*78] = tcrd[0]*X[29+NA*26] + (-7.200822998230956e-01*X[26+NA*18])+(2.721655269759087e-01*X[26+NA*22])+(-8.606629658238704e-01*X[29+NA*16])+(3.849001794597505e-01*X[29+NA*19]);
G[88+NA*78] = tcrd[1]*X[29+NA*26] + (-7.200822998230956e-01*X[26+NA*17])+(-2.721655269759087e-01*X[26+NA*21])+(3.849001794597505e-01*X[29+NA*20]);
G[89+NA*78] = tcrd[2]*X[29+NA*26] + (-1.018350154434631e+00*X[26+NA*20])+(-1.088662107903635e+00*X[29+NA*17]);
G[90+NA*78] = tcrd[0]*X[30+NA*26] + (-8.314794192830980e-01*X[26+NA*19])+(1.571348402636772e-01*X[26+NA*23])+(-8.606629658238704e-01*X[30+NA*16])+(3.849001794597505e-01*X[30+NA*19]);
G[91+NA*78] = tcrd[1]*X[30+NA*26] + (8.314794192830980e-01*X[26+NA*20])+(1.571348402636772e-01*X[26+NA*24])+(3.849001794597505e-01*X[30+NA*20]);
G[92+NA*78] = tcrd[2]*X[30+NA*26] + (-8.888888888888888e-01*X[26+NA*21])+(-1.088662107903635e+00*X[30+NA*17]);
G[93+NA*78] = tcrd[0]*X[31+NA*26] + (-8.314794192830980e-01*X[26+NA*20])+(1.571348402636772e-01*X[26+NA*24])+(-8.606629658238704e-01*X[31+NA*16])+(3.849001794597505e-01*X[31+NA*19]);
G[94+NA*78] = tcrd[1]*X[31+NA*26] + (-8.314794192830980e-01*X[26+NA*19])+(-1.571348402636772e-01*X[26+NA*23])+(3.849001794597505e-01*X[31+NA*20]);
G[95+NA*78] = tcrd[2]*X[31+NA*26] + (-8.888888888888888e-01*X[26+NA*22])+(-1.088662107903635e+00*X[31+NA*17]);
G[96+NA*78] = tcrd[0]*X[32+NA*26] + (-9.428090415820635e-01*X[26+NA*21])+(-8.606629658238704e-01*X[32+NA*16])+(3.849001794597505e-01*X[32+NA*19]);
G[97+NA*78] = tcrd[1]*X[32+NA*26] + (9.428090415820635e-01*X[26+NA*22])+(3.849001794597505e-01*X[32+NA*20]);
G[98+NA*78] = tcrd[2]*X[32+NA*26] + (-6.666666666666667e-01*X[26+NA*23])+(-1.088662107903635e+00*X[32+NA*17]);
G[99+NA*78] = tcrd[0]*X[33+NA*26] + (-9.428090415820635e-01*X[26+NA*22])+(-8.606629658238704e-01*X[33+NA*16])+(3.849001794597505e-01*X[33+NA*19]);
G[100+NA*78] = tcrd[1]*X[33+NA*26] + (-9.428090415820635e-01*X[26+NA*21])+(3.849001794597505e-01*X[33+NA*20]);
G[101+NA*78] = tcrd[2]*X[33+NA*26] + (-6.666666666666667e-01*X[26+NA*24])+(-1.088662107903635e+00*X[33+NA*17]);
G[102+NA*78] = tcrd[0]*X[34+NA*26] + (-1.054092553389460e+00*X[26+NA*23])+(-8.606629658238704e-01*X[34+NA*16])+(3.849001794597505e-01*X[34+NA*19]);
G[103+NA*78] = tcrd[1]*X[34+NA*26] + (1.054092553389460e+00*X[26+NA*24])+(3.849001794597505e-01*X[34+NA*20]);
G[104+NA*78] = tcrd[2]*X[34+NA*26] + (-1.088662107903635e+00*X[34+NA*17]);
G[105+NA*78] = tcrd[0]*X[35+NA*26] + (-1.054092553389460e+00*X[26+NA*24])+(-8.606629658238704e-01*X[35+NA*16])+(3.849001794597505e-01*X[35+NA*19]);
G[106+NA*78] = tcrd[1]*X[35+NA*26] + (-1.054092553389460e+00*X[26+NA*23])+(3.849001794597505e-01*X[35+NA*20]);
G[107+NA*78] = tcrd[2]*X[35+NA*26] + (-1.088662107903635e+00*X[35+NA*17]);
G[0+NA*81] = -G[81];
G[1+NA*81] = -G[82];
G[2+NA*81] = -G[83];
G[3+NA*81] =  G[81+NA*3];
G[4+NA*81] =  G[82+NA*3];
G[5+NA*81] =  G[83+NA*3];
G[6+NA*81] =  G[81+NA*6];
G[7+NA*81] =  G[82+NA*6];
G[8+NA*81] =  G[83+NA*6];
G[9+NA*81] =  G[81+NA*9];
G[10+NA*81] =  G[82+NA*9];
G[11+NA*81] =  G[83+NA*9];
G[12+NA*81] = -G[81+NA*12];
G[13+NA*81] = -G[82+NA*12];
G[14+NA*81] = -G[83+NA*12];
G[15+NA*81] = -G[81+NA*15];
G[16+NA*81] = -G[82+NA*15];
G[17+NA*81] = -G[83+NA*15];
G[18+NA*81] = -G[81+NA*18];
G[19+NA*81] = -G[82+NA*18];
G[20+NA*81] = -G[83+NA*18];
G[21+NA*81] = -G[81+NA*21];
G[22+NA*81] = -G[82+NA*21];
G[23+NA*81] = -G[83+NA*21];
G[24+NA*81] = -G[81+NA*24];
G[25+NA*81] = -G[82+NA*24];
G[26+NA*81] = -G[83+NA*24];
G[27+NA*81] =  G[81+NA*27];
G[28+NA*81] =  G[82+NA*27];
G[29+NA*81] =  G[83+NA*27];
G[30+NA*81] =  G[81+NA*30];
G[31+NA*81] =  G[82+NA*30];
G[32+NA*81] =  G[83+NA*30];
G[33+NA*81] =  G[81+NA*33];
G[34+NA*81] =  G[82+NA*33];
G[35+NA*81] =  G[83+NA*33];
G[36+NA*81] =  G[81+NA*36];
G[37+NA*81] =  G[82+NA*36];
G[38+NA*81] =  G[83+NA*36];
G[39+NA*81] =  G[81+NA*39];
G[40+NA*81] =  G[82+NA*39];
G[41+NA*81] =  G[83+NA*39];
G[42+NA*81] =  G[81+NA*42];
G[43+NA*81] =  G[82+NA*42];
G[44+NA*81] =  G[83+NA*42];
G[45+NA*81] =  G[81+NA*45];
G[46+NA*81] =  G[82+NA*45];
G[47+NA*81] =  G[83+NA*45];
G[48+NA*81] = -G[81+NA*48];
G[49+NA*81] = -G[82+NA*48];
G[50+NA*81] = -G[83+NA*48];
G[51+NA*81] = -G[81+NA*51];
G[52+NA*81] = -G[82+NA*51];
G[53+NA*81] = -G[83+NA*51];
G[54+NA*81] = -G[81+NA*54];
G[55+NA*81] = -G[82+NA*54];
G[56+NA*81] = -G[83+NA*54];
G[57+NA*81] = -G[81+NA*57];
G[58+NA*81] = -G[82+NA*57];
G[59+NA*81] = -G[83+NA*57];
G[60+NA*81] = -G[81+NA*60];
G[61+NA*81] = -G[82+NA*60];
G[62+NA*81] = -G[83+NA*60];
G[63+NA*81] = -G[81+NA*63];
G[64+NA*81] = -G[82+NA*63];
G[65+NA*81] = -G[83+NA*63];
G[66+NA*81] = -G[81+NA*66];
G[67+NA*81] = -G[82+NA*66];
G[68+NA*81] = -G[83+NA*66];
G[69+NA*81] = -G[81+NA*69];
G[70+NA*81] = -G[82+NA*69];
G[71+NA*81] = -G[83+NA*69];
G[72+NA*81] = -G[81+NA*72];
G[73+NA*81] = -G[82+NA*72];
G[74+NA*81] = -G[83+NA*72];
G[75+NA*81] =  G[81+NA*75];
G[76+NA*81] =  G[82+NA*75];
G[77+NA*81] =  G[83+NA*75];
G[75+NA*81] =  G[81+NA*75];
G[76+NA*81] =  G[82+NA*75];
G[77+NA*81] =  G[83+NA*75];
G[78+NA*81] =  G[81+NA*78];
G[79+NA*81] =  G[82+NA*78];
G[80+NA*81] =  G[83+NA*78];
G[78+NA*81] =  G[81+NA*78];
G[79+NA*81] =  G[82+NA*78];
G[80+NA*81] =  G[83+NA*78];
G[81+NA*81] = tcrd[0]*X[27+NA*27] + (7.698003589195009e-01*X[27+NA*20]);
G[82+NA*81] = tcrd[1]*X[27+NA*27] + (-1.721325931647741e+00*X[27+NA*16])+(-7.698003589195009e-01*X[27+NA*19]);
G[83+NA*81] = tcrd[2]*X[27+NA*27] + (-2.177324215807269e+00*X[27+NA*18]);
G[84+NA*81] = tcrd[0]*X[28+NA*27] + (-7.200822998230956e-01*X[27+NA*17])+(2.721655269759087e-01*X[27+NA*21])+(3.849001794597505e-01*X[28+NA*20]);
G[85+NA*81] = tcrd[1]*X[28+NA*27] + (7.200822998230956e-01*X[27+NA*18])+(2.721655269759087e-01*X[27+NA*22])+(-8.606629658238704e-01*X[28+NA*16])+(-3.849001794597505e-01*X[28+NA*19]);
G[86+NA*81] = tcrd[2]*X[28+NA*27] + (-1.018350154434631e+00*X[27+NA*19])+(-1.088662107903635e+00*X[28+NA*18]);
G[87+NA*81] = tcrd[0]*X[29+NA*27] + (-7.200822998230956e-01*X[27+NA*18])+(2.721655269759087e-01*X[27+NA*22])+(3.849001794597505e-01*X[29+NA*20]);
G[88+NA*81] = tcrd[1]*X[29+NA*27] + (-7.200822998230956e-01*X[27+NA*17])+(-2.721655269759087e-01*X[27+NA*21])+(-8.606629658238704e-01*X[29+NA*16])+(-3.849001794597505e-01*X[29+NA*19]);
G[89+NA*81] = tcrd[2]*X[29+NA*27] + (-1.018350154434631e+00*X[27+NA*20])+(-1.088662107903635e+00*X[29+NA*18]);
G[90+NA*81] = tcrd[0]*X[30+NA*27] + (-8.314794192830980e-01*X[27+NA*19])+(1.571348402636772e-01*X[27+NA*23])+(3.849001794597505e-01*X[30+NA*20]);
G[91+NA*81] = tcrd[1]*X[30+NA*27] + (8.314794192830980e-01*X[27+NA*20])+(1.571348402636772e-01*X[27+NA*24])+(-8.606629658238704e-01*X[30+NA*16])+(-3.849001794597505e-01*X[30+NA*19]);
G[92+NA*81] = tcrd[2]*X[30+NA*27] + (-8.888888888888888e-01*X[27+NA*21])+(-1.088662107903635e+00*X[30+NA*18]);
G[93+NA*81] = tcrd[0]*X[31+NA*27] + (-8.314794192830980e-01*X[27+NA*20])+(1.571348402636772e-01*X[27+NA*24])+(3.849001794597505e-01*X[31+NA*20]);
G[94+NA*81] = tcrd[1]*X[31+NA*27] + (-8.314794192830980e-01*X[27+NA*19])+(-1.571348402636772e-01*X[27+NA*23])+(-8.606629658238704e-01*X[31+NA*16])+(-3.849001794597505e-01*X[31+NA*19]);
G[95+NA*81] = tcrd[2]*X[31+NA*27] + (-8.888888888888888e-01*X[27+NA*22])+(-1.088662107903635e+00*X[31+NA*18]);
G[96+NA*81] = tcrd[0]*X[32+NA*27] + (-9.428090415820635e-01*X[27+NA*21])+(3.849001794597505e-01*X[32+NA*20]);
G[97+NA*81] = tcrd[1]*X[32+NA*27] + (9.428090415820635e-01*X[27+NA*22])+(-8.606629658238704e-01*X[32+NA*16])+(-3.849001794597505e-01*X[32+NA*19]);
G[98+NA*81] = tcrd[2]*X[32+NA*27] + (-6.666666666666667e-01*X[27+NA*23])+(-1.088662107903635e+00*X[32+NA*18]);
G[99+NA*81] = tcrd[0]*X[33+NA*27] + (-9.428090415820635e-01*X[27+NA*22])+(3.849001794597505e-01*X[33+NA*20]);
G[100+NA*81] = tcrd[1]*X[33+NA*27] + (-9.428090415820635e-01*X[27+NA*21])+(-8.606629658238704e-01*X[33+NA*16])+(-3.849001794597505e-01*X[33+NA*19]);
G[101+NA*81] = tcrd[2]*X[33+NA*27] + (-6.666666666666667e-01*X[27+NA*24])+(-1.088662107903635e+00*X[33+NA*18]);
G[102+NA*81] = tcrd[0]*X[34+NA*27] + (-1.054092553389460e+00*X[27+NA*23])+(3.849001794597505e-01*X[34+NA*20]);
G[103+NA*81] = tcrd[1]*X[34+NA*27] + (1.054092553389460e+00*X[27+NA*24])+(-8.606629658238704e-01*X[34+NA*16])+(-3.849001794597505e-01*X[34+NA*19]);
G[104+NA*81] = tcrd[2]*X[34+NA*27] + (-1.088662107903635e+00*X[34+NA*18]);
G[105+NA*81] = tcrd[0]*X[35+NA*27] + (-1.054092553389460e+00*X[27+NA*24])+(3.849001794597505e-01*X[35+NA*20]);
G[106+NA*81] = tcrd[1]*X[35+NA*27] + (-1.054092553389460e+00*X[27+NA*23])+(-8.606629658238704e-01*X[35+NA*16])+(-3.849001794597505e-01*X[35+NA*19]);
G[107+NA*81] = tcrd[2]*X[35+NA*27] + (-1.088662107903635e+00*X[35+NA*18]);
G[0+NA*84] = -G[84];
G[1+NA*84] = -G[85];
G[2+NA*84] = -G[86];
G[3+NA*84] =  G[84+NA*3];
G[4+NA*84] =  G[85+NA*3];
G[5+NA*84] =  G[86+NA*3];
G[6+NA*84] =  G[84+NA*6];
G[7+NA*84] =  G[85+NA*6];
G[8+NA*84] =  G[86+NA*6];
G[9+NA*84] =  G[84+NA*9];
G[10+NA*84] =  G[85+NA*9];
G[11+NA*84] =  G[86+NA*9];
G[12+NA*84] = -G[84+NA*12];
G[13+NA*84] = -G[85+NA*12];
G[14+NA*84] = -G[86+NA*12];
G[15+NA*84] = -G[84+NA*15];
G[16+NA*84] = -G[85+NA*15];
G[17+NA*84] = -G[86+NA*15];
G[18+NA*84] = -G[84+NA*18];
G[19+NA*84] = -G[85+NA*18];
G[20+NA*84] = -G[86+NA*18];
G[21+NA*84] = -G[84+NA*21];
G[22+NA*84] = -G[85+NA*21];
G[23+NA*84] = -G[86+NA*21];
G[24+NA*84] = -G[84+NA*24];
G[25+NA*84] = -G[85+NA*24];
G[26+NA*84] = -G[86+NA*24];
G[27+NA*84] =  G[84+NA*27];
G[28+NA*84] =  G[85+NA*27];
G[29+NA*84] =  G[86+NA*27];
G[30+NA*84] =  G[84+NA*30];
G[31+NA*84] =  G[85+NA*30];
G[32+NA*84] =  G[86+NA*30];
G[33+NA*84] =  G[84+NA*33];
G[34+NA*84] =  G[85+NA*33];
G[35+NA*84] =  G[86+NA*33];
G[36+NA*84] =  G[84+NA*36];
G[37+NA*84] =  G[85+NA*36];
G[38+NA*84] =  G[86+NA*36];
G[39+NA*84] =  G[84+NA*39];
G[40+NA*84] =  G[85+NA*39];
G[41+NA*84] =  G[86+NA*39];
G[42+NA*84] =  G[84+NA*42];
G[43+NA*84] =  G[85+NA*42];
G[44+NA*84] =  G[86+NA*42];
G[45+NA*84] =  G[84+NA*45];
G[46+NA*84] =  G[85+NA*45];
G[47+NA*84] =  G[86+NA*45];
G[48+NA*84] = -G[84+NA*48];
G[49+NA*84] = -G[85+NA*48];
G[50+NA*84] = -G[86+NA*48];
G[51+NA*84] = -G[84+NA*51];
G[52+NA*84] = -G[85+NA*51];
G[53+NA*84] = -G[86+NA*51];
G[54+NA*84] = -G[84+NA*54];
G[55+NA*84] = -G[85+NA*54];
G[56+NA*84] = -G[86+NA*54];
G[57+NA*84] = -G[84+NA*57];
G[58+NA*84] = -G[85+NA*57];
G[59+NA*84] = -G[86+NA*57];
G[60+NA*84] = -G[84+NA*60];
G[61+NA*84] = -G[85+NA*60];
G[62+NA*84] = -G[86+NA*60];
G[63+NA*84] = -G[84+NA*63];
G[64+NA*84] = -G[85+NA*63];
G[65+NA*84] = -G[86+NA*63];
G[66+NA*84] = -G[84+NA*66];
G[67+NA*84] = -G[85+NA*66];
G[68+NA*84] = -G[86+NA*66];
G[69+NA*84] = -G[84+NA*69];
G[70+NA*84] = -G[85+NA*69];
G[71+NA*84] = -G[86+NA*69];
G[72+NA*84] = -G[84+NA*72];
G[73+NA*84] = -G[85+NA*72];
G[74+NA*84] = -G[86+NA*72];
G[75+NA*84] =  G[84+NA*75];
G[76+NA*84] =  G[85+NA*75];
G[77+NA*84] =  G[86+NA*75];
G[75+NA*84] =  G[84+NA*75];
G[76+NA*84] =  G[85+NA*75];
G[77+NA*84] =  G[86+NA*75];
G[78+NA*84] =  G[84+NA*78];
G[79+NA*84] =  G[85+NA*78];
G[80+NA*84] =  G[86+NA*78];
G[78+NA*84] =  G[84+NA*78];
G[79+NA*84] =  G[85+NA*78];
G[80+NA*84] =  G[86+NA*78];
G[81+NA*84] =  G[84+NA*81];
G[82+NA*84] =  G[85+NA*81];
G[83+NA*84] =  G[86+NA*81];
G[81+NA*84] =  G[84+NA*81];
G[82+NA*84] =  G[85+NA*81];
G[83+NA*84] =  G[86+NA*81];
G[84+NA*84] = tcrd[0]*X[28+NA*28] + (-1.440164599646191e+00*X[28+NA*17])+(5.443310539518174e-01*X[28+NA*21]);
G[85+NA*84] = tcrd[1]*X[28+NA*28] + (1.440164599646191e+00*X[28+NA*18])+(5.443310539518174e-01*X[28+NA*22]);
G[86+NA*84] = tcrd[2]*X[28+NA*28] + (-2.036700308869262e+00*X[28+NA*19]);
G[87+NA*84] = tcrd[0]*X[29+NA*28] + (-7.200822998230956e-01*X[28+NA*18])+(2.721655269759087e-01*X[28+NA*22])+(-7.200822998230956e-01*X[29+NA*17])+(2.721655269759087e-01*X[29+NA*21]);
G[88+NA*84] = tcrd[1]*X[29+NA*28] + (-7.200822998230956e-01*X[28+NA*17])+(-2.721655269759087e-01*X[28+NA*21])+(7.200822998230956e-01*X[29+NA*18])+(2.721655269759087e-01*X[29+NA*22]);
G[89+NA*84] = tcrd[2]*X[29+NA*28] + (-1.018350154434631e+00*X[28+NA*20])+(-1.018350154434631e+00*X[29+NA*19]);
G[90+NA*84] = tcrd[0]*X[30+NA*28] + (-8.314794192830980e-01*X[28+NA*19])+(1.571348402636772e-01*X[28+NA*23])+(-7.200822998230956e-01*X[30+NA*17])+(2.721655269759087e-01*X[30+NA*21]);
G[91+NA*84] = tcrd[1]*X[30+NA*28] + (8.314794192830980e-01*X[28+NA*20])+(1.571348402636772e-01*X[28+NA*24])+(7.200822998230956e-01*X[30+NA*18])+(2.721655269759087e-01*X[30+NA*22]);
G[92+NA*84] = tcrd[2]*X[30+NA*28] + (-8.888888888888888e-01*X[28+NA*21])+(-1.018350154434631e+00*X[30+NA*19]);
G[93+NA*84] = tcrd[0]*X[31+NA*28] + (-8.314794192830980e-01*X[28+NA*20])+(1.571348402636772e-01*X[28+NA*24])+(-7.200822998230956e-01*X[31+NA*17])+(2.721655269759087e-01*X[31+NA*21]);
G[94+NA*84] = tcrd[1]*X[31+NA*28] + (-8.314794192830980e-01*X[28+NA*19])+(-1.571348402636772e-01*X[28+NA*23])+(7.200822998230956e-01*X[31+NA*18])+(2.721655269759087e-01*X[31+NA*22]);
G[95+NA*84] = tcrd[2]*X[31+NA*28] + (-8.888888888888888e-01*X[28+NA*22])+(-1.018350154434631e+00*X[31+NA*19]);
G[96+NA*84] = tcrd[0]*X[32+NA*28] + (-9.428090415820635e-01*X[28+NA*21])+(-7.200822998230956e-01*X[32+NA*17])+(2.721655269759087e-01*X[32+NA*21]);
G[97+NA*84] = tcrd[1]*X[32+NA*28] + (9.428090415820635e-01*X[28+NA*22])+(7.200822998230956e-01*X[32+NA*18])+(2.721655269759087e-01*X[32+NA*22]);
G[98+NA*84] = tcrd[2]*X[32+NA*28] + (-6.666666666666667e-01*X[28+NA*23])+(-1.018350154434631e+00*X[32+NA*19]);
G[99+NA*84] = tcrd[0]*X[33+NA*28] + (-9.428090415820635e-01*X[28+NA*22])+(-7.200822998230956e-01*X[33+NA*17])+(2.721655269759087e-01*X[33+NA*21]);
G[100+NA*84] = tcrd[1]*X[33+NA*28] + (-9.428090415820635e-01*X[28+NA*21])+(7.200822998230956e-01*X[33+NA*18])+(2.721655269759087e-01*X[33+NA*22]);
G[101+NA*84] = tcrd[2]*X[33+NA*28] + (-6.666666666666667e-01*X[28+NA*24])+(-1.018350154434631e+00*X[33+NA*19]);
G[102+NA*84] = tcrd[0]*X[34+NA*28] + (-1.054092553389460e+00*X[28+NA*23])+(-7.200822998230956e-01*X[34+NA*17])+(2.721655269759087e-01*X[34+NA*21]);
G[103+NA*84] = tcrd[1]*X[34+NA*28] + (1.054092553389460e+00*X[28+NA*24])+(7.200822998230956e-01*X[34+NA*18])+(2.721655269759087e-01*X[34+NA*22]);
G[104+NA*84] = tcrd[2]*X[34+NA*28] + (-1.018350154434631e+00*X[34+NA*19]);
G[105+NA*84] = tcrd[0]*X[35+NA*28] + (-1.054092553389460e+00*X[28+NA*24])+(-7.200822998230956e-01*X[35+NA*17])+(2.721655269759087e-01*X[35+NA*21]);
G[106+NA*84] = tcrd[1]*X[35+NA*28] + (-1.054092553389460e+00*X[28+NA*23])+(7.200822998230956e-01*X[35+NA*18])+(2.721655269759087e-01*X[35+NA*22]);
G[107+NA*84] = tcrd[2]*X[35+NA*28] + (-1.018350154434631e+00*X[35+NA*19]);
G[0+NA*87] = -G[87];
G[1+NA*87] = -G[88];
G[2+NA*87] = -G[89];
G[3+NA*87] =  G[87+NA*3];
G[4+NA*87] =  G[88+NA*3];
G[5+NA*87] =  G[89+NA*3];
G[6+NA*87] =  G[87+NA*6];
G[7+NA*87] =  G[88+NA*6];
G[8+NA*87] =  G[89+NA*6];
G[9+NA*87] =  G[87+NA*9];
G[10+NA*87] =  G[88+NA*9];
G[11+NA*87] =  G[89+NA*9];
G[12+NA*87] = -G[87+NA*12];
G[13+NA*87] = -G[88+NA*12];
G[14+NA*87] = -G[89+NA*12];
G[15+NA*87] = -G[87+NA*15];
G[16+NA*87] = -G[88+NA*15];
G[17+NA*87] = -G[89+NA*15];
G[18+NA*87] = -G[87+NA*18];
G[19+NA*87] = -G[88+NA*18];
G[20+NA*87] = -G[89+NA*18];
G[21+NA*87] = -G[87+NA*21];
G[22+NA*87] = -G[88+NA*21];
G[23+NA*87] = -G[89+NA*21];
G[24+NA*87] = -G[87+NA*24];
G[25+NA*87] = -G[88+NA*24];
G[26+NA*87] = -G[89+NA*24];
G[27+NA*87] =  G[87+NA*27];
G[28+NA*87] =  G[88+NA*27];
G[29+NA*87] =  G[89+NA*27];
G[30+NA*87] =  G[87+NA*30];
G[31+NA*87] =  G[88+NA*30];
G[32+NA*87] =  G[89+NA*30];
G[33+NA*87] =  G[87+NA*33];
G[34+NA*87] =  G[88+NA*33];
G[35+NA*87] =  G[89+NA*33];
G[36+NA*87] =  G[87+NA*36];
G[37+NA*87] =  G[88+NA*36];
G[38+NA*87] =  G[89+NA*36];
G[39+NA*87] =  G[87+NA*39];
G[40+NA*87] =  G[88+NA*39];
G[41+NA*87] =  G[89+NA*39];
G[42+NA*87] =  G[87+NA*42];
G[43+NA*87] =  G[88+NA*42];
G[44+NA*87] =  G[89+NA*42];
G[45+NA*87] =  G[87+NA*45];
G[46+NA*87] =  G[88+NA*45];
G[47+NA*87] =  G[89+NA*45];
G[48+NA*87] = -G[87+NA*48];
G[49+NA*87] = -G[88+NA*48];
G[50+NA*87] = -G[89+NA*48];
G[51+NA*87] = -G[87+NA*51];
G[52+NA*87] = -G[88+NA*51];
G[53+NA*87] = -G[89+NA*51];
G[54+NA*87] = -G[87+NA*54];
G[55+NA*87] = -G[88+NA*54];
G[56+NA*87] = -G[89+NA*54];
G[57+NA*87] = -G[87+NA*57];
G[58+NA*87] = -G[88+NA*57];
G[59+NA*87] = -G[89+NA*57];
G[60+NA*87] = -G[87+NA*60];
G[61+NA*87] = -G[88+NA*60];
G[62+NA*87] = -G[89+NA*60];
G[63+NA*87] = -G[87+NA*63];
G[64+NA*87] = -G[88+NA*63];
G[65+NA*87] = -G[89+NA*63];
G[66+NA*87] = -G[87+NA*66];
G[67+NA*87] = -G[88+NA*66];
G[68+NA*87] = -G[89+NA*66];
G[69+NA*87] = -G[87+NA*69];
G[70+NA*87] = -G[88+NA*69];
G[71+NA*87] = -G[89+NA*69];
G[72+NA*87] = -G[87+NA*72];
G[73+NA*87] = -G[88+NA*72];
G[74+NA*87] = -G[89+NA*72];
G[75+NA*87] =  G[87+NA*75];
G[76+NA*87] =  G[88+NA*75];
G[77+NA*87] =  G[89+NA*75];
G[75+NA*87] =  G[87+NA*75];
G[76+NA*87] =  G[88+NA*75];
G[77+NA*87] =  G[89+NA*75];
G[78+NA*87] =  G[87+NA*78];
G[79+NA*87] =  G[88+NA*78];
G[80+NA*87] =  G[89+NA*78];
G[78+NA*87] =  G[87+NA*78];
G[79+NA*87] =  G[88+NA*78];
G[80+NA*87] =  G[89+NA*78];
G[81+NA*87] =  G[87+NA*81];
G[82+NA*87] =  G[88+NA*81];
G[83+NA*87] =  G[89+NA*81];
G[81+NA*87] =  G[87+NA*81];
G[82+NA*87] =  G[88+NA*81];
G[83+NA*87] =  G[89+NA*81];
G[84+NA*87] =  G[87+NA*84];
G[85+NA*87] =  G[88+NA*84];
G[86+NA*87] =  G[89+NA*84];
G[84+NA*87] =  G[87+NA*84];
G[85+NA*87] =  G[88+NA*84];
G[86+NA*87] =  G[89+NA*84];
G[87+NA*87] = tcrd[0]*X[29+NA*29] + (-1.440164599646191e+00*X[29+NA*18])+(5.443310539518174e-01*X[29+NA*22]);
G[88+NA*87] = tcrd[1]*X[29+NA*29] + (-1.440164599646191e+00*X[29+NA*17])+(-5.443310539518174e-01*X[29+NA*21]);
G[89+NA*87] = tcrd[2]*X[29+NA*29] + (-2.036700308869262e+00*X[29+NA*20]);
G[90+NA*87] = tcrd[0]*X[30+NA*29] + (-8.314794192830980e-01*X[29+NA*19])+(1.571348402636772e-01*X[29+NA*23])+(-7.200822998230956e-01*X[30+NA*18])+(2.721655269759087e-01*X[30+NA*22]);
G[91+NA*87] = tcrd[1]*X[30+NA*29] + (8.314794192830980e-01*X[29+NA*20])+(1.571348402636772e-01*X[29+NA*24])+(-7.200822998230956e-01*X[30+NA*17])+(-2.721655269759087e-01*X[30+NA*21]);
G[92+NA*87] = tcrd[2]*X[30+NA*29] + (-8.888888888888888e-01*X[29+NA*21])+(-1.018350154434631e+00*X[30+NA*20]);
G[93+NA*87] = tcrd[0]*X[31+NA*29] + (-8.314794192830980e-01*X[29+NA*20])+(1.571348402636772e-01*X[29+NA*24])+(-7.200822998230956e-01*X[31+NA*18])+(2.721655269759087e-01*X[31+NA*22]);
G[94+NA*87] = tcrd[1]*X[31+NA*29] + (-8.314794192830980e-01*X[29+NA*19])+(-1.571348402636772e-01*X[29+NA*23])+(-7.200822998230956e-01*X[31+NA*17])+(-2.721655269759087e-01*X[31+NA*21]);
G[95+NA*87] = tcrd[2]*X[31+NA*29] + (-8.888888888888888e-01*X[29+NA*22])+(-1.018350154434631e+00*X[31+NA*20]);
G[96+NA*87] = tcrd[0]*X[32+NA*29] + (-9.428090415820635e-01*X[29+NA*21])+(-7.200822998230956e-01*X[32+NA*18])+(2.721655269759087e-01*X[32+NA*22]);
G[97+NA*87] = tcrd[1]*X[32+NA*29] + (9.428090415820635e-01*X[29+NA*22])+(-7.200822998230956e-01*X[32+NA*17])+(-2.721655269759087e-01*X[32+NA*21]);
G[98+NA*87] = tcrd[2]*X[32+NA*29] + (-6.666666666666667e-01*X[29+NA*23])+(-1.018350154434631e+00*X[32+NA*20]);
G[99+NA*87] = tcrd[0]*X[33+NA*29] + (-9.428090415820635e-01*X[29+NA*22])+(-7.200822998230956e-01*X[33+NA*18])+(2.721655269759087e-01*X[33+NA*22]);
G[100+NA*87] = tcrd[1]*X[33+NA*29] + (-9.428090415820635e-01*X[29+NA*21])+(-7.200822998230956e-01*X[33+NA*17])+(-2.721655269759087e-01*X[33+NA*21]);
G[101+NA*87] = tcrd[2]*X[33+NA*29] + (-6.666666666666667e-01*X[29+NA*24])+(-1.018350154434631e+00*X[33+NA*20]);
G[102+NA*87] = tcrd[0]*X[34+NA*29] + (-1.054092553389460e+00*X[29+NA*23])+(-7.200822998230956e-01*X[34+NA*18])+(2.721655269759087e-01*X[34+NA*22]);
G[103+NA*87] = tcrd[1]*X[34+NA*29] + (1.054092553389460e+00*X[29+NA*24])+(-7.200822998230956e-01*X[34+NA*17])+(-2.721655269759087e-01*X[34+NA*21]);
G[104+NA*87] = tcrd[2]*X[34+NA*29] + (-1.018350154434631e+00*X[34+NA*20]);
G[105+NA*87] = tcrd[0]*X[35+NA*29] + (-1.054092553389460e+00*X[29+NA*24])+(-7.200822998230956e-01*X[35+NA*18])+(2.721655269759087e-01*X[35+NA*22]);
G[106+NA*87] = tcrd[1]*X[35+NA*29] + (-1.054092553389460e+00*X[29+NA*23])+(-7.200822998230956e-01*X[35+NA*17])+(-2.721655269759087e-01*X[35+NA*21]);
G[107+NA*87] = tcrd[2]*X[35+NA*29] + (-1.018350154434631e+00*X[35+NA*20]);
G[0+NA*90] = -G[90];
G[1+NA*90] = -G[91];
G[2+NA*90] = -G[92];
G[3+NA*90] =  G[90+NA*3];
G[4+NA*90] =  G[91+NA*3];
G[5+NA*90] =  G[92+NA*3];
G[6+NA*90] =  G[90+NA*6];
G[7+NA*90] =  G[91+NA*6];
G[8+NA*90] =  G[92+NA*6];
G[9+NA*90] =  G[90+NA*9];
G[10+NA*90] =  G[91+NA*9];
G[11+NA*90] =  G[92+NA*9];
G[12+NA*90] = -G[90+NA*12];
G[13+NA*90] = -G[91+NA*12];
G[14+NA*90] = -G[92+NA*12];
G[15+NA*90] = -G[90+NA*15];
G[16+NA*90] = -G[91+NA*15];
G[17+NA*90] = -G[92+NA*15];
G[18+NA*90] = -G[90+NA*18];
G[19+NA*90] = -G[91+NA*18];
G[20+NA*90] = -G[92+NA*18];
G[21+NA*90] = -G[90+NA*21];
G[22+NA*90] = -G[91+NA*21];
G[23+NA*90] = -G[92+NA*21];
G[24+NA*90] = -G[90+NA*24];
G[25+NA*90] = -G[91+NA*24];
G[26+NA*90] = -G[92+NA*24];
G[27+NA*90] =  G[90+NA*27];
G[28+NA*90] =  G[91+NA*27];
G[29+NA*90] =  G[92+NA*27];
G[30+NA*90] =  G[90+NA*30];
G[31+NA*90] =  G[91+NA*30];
G[32+NA*90] =  G[92+NA*30];
G[33+NA*90] =  G[90+NA*33];
G[34+NA*90] =  G[91+NA*33];
G[35+NA*90] =  G[92+NA*33];
G[36+NA*90] =  G[90+NA*36];
G[37+NA*90] =  G[91+NA*36];
G[38+NA*90] =  G[92+NA*36];
G[39+NA*90] =  G[90+NA*39];
G[40+NA*90] =  G[91+NA*39];
G[41+NA*90] =  G[92+NA*39];
G[42+NA*90] =  G[90+NA*42];
G[43+NA*90] =  G[91+NA*42];
G[44+NA*90] =  G[92+NA*42];
G[45+NA*90] =  G[90+NA*45];
G[46+NA*90] =  G[91+NA*45];
G[47+NA*90] =  G[92+NA*45];
G[48+NA*90] = -G[90+NA*48];
G[49+NA*90] = -G[91+NA*48];
G[50+NA*90] = -G[92+NA*48];
G[51+NA*90] = -G[90+NA*51];
G[52+NA*90] = -G[91+NA*51];
G[53+NA*90] = -G[92+NA*51];
G[54+NA*90] = -G[90+NA*54];
G[55+NA*90] = -G[91+NA*54];
G[56+NA*90] = -G[92+NA*54];
G[57+NA*90] = -G[90+NA*57];
G[58+NA*90] = -G[91+NA*57];
G[59+NA*90] = -G[92+NA*57];
G[60+NA*90] = -G[90+NA*60];
G[61+NA*90] = -G[91+NA*60];
G[62+NA*90] = -G[92+NA*60];
G[63+NA*90] = -G[90+NA*63];
G[64+NA*90] = -G[91+NA*63];
G[65+NA*90] = -G[92+NA*63];
G[66+NA*90] = -G[90+NA*66];
G[67+NA*90] = -G[91+NA*66];
G[68+NA*90] = -G[92+NA*66];
G[69+NA*90] = -G[90+NA*69];
G[70+NA*90] = -G[91+NA*69];
G[71+NA*90] = -G[92+NA*69];
G[72+NA*90] = -G[90+NA*72];
G[73+NA*90] = -G[91+NA*72];
G[74+NA*90] = -G[92+NA*72];
G[75+NA*90] =  G[90+NA*75];
G[76+NA*90] =  G[91+NA*75];
G[77+NA*90] =  G[92+NA*75];
G[75+NA*90] =  G[90+NA*75];
G[76+NA*90] =  G[91+NA*75];
G[77+NA*90] =  G[92+NA*75];
G[78+NA*90] =  G[90+NA*78];
G[79+NA*90] =  G[91+NA*78];
G[80+NA*90] =  G[92+NA*78];
G[78+NA*90] =  G[90+NA*78];
G[79+NA*90] =  G[91+NA*78];
G[80+NA*90] =  G[92+NA*78];
G[81+NA*90] =  G[90+NA*81];
G[82+NA*90] =  G[91+NA*81];
G[83+NA*90] =  G[92+NA*81];
G[81+NA*90] =  G[90+NA*81];
G[82+NA*90] =  G[91+NA*81];
G[83+NA*90] =  G[92+NA*81];
G[84+NA*90] =  G[90+NA*84];
G[85+NA*90] =  G[91+NA*84];
G[86+NA*90] =  G[92+NA*84];
G[84+NA*90] =  G[90+NA*84];
G[85+NA*90] =  G[91+NA*84];
G[86+NA*90] =  G[92+NA*84];
G[87+NA*90] =  G[90+NA*87];
G[88+NA*90] =  G[91+NA*87];
G[89+NA*90] =  G[92+NA*87];
G[87+NA*90] =  G[90+NA*87];
G[88+NA*90] =  G[91+NA*87];
G[89+NA*90] =  G[92+NA*87];
G[90+NA*90] = tcrd[0]*X[30+NA*30] + (-1.662958838566196e+00*X[30+NA*19])+(3.142696805273544e-01*X[30+NA*23]);
G[91+NA*90] = tcrd[1]*X[30+NA*30] + (1.662958838566196e+00*X[30+NA*20])+(3.142696805273544e-01*X[30+NA*24]);
G[92+NA*90] = tcrd[2]*X[30+NA*30] + (-1.777777777777778e+00*X[30+NA*21]);
G[93+NA*90] = tcrd[0]*X[31+NA*30] + (-8.314794192830980e-01*X[30+NA*20])+(1.571348402636772e-01*X[30+NA*24])+(-8.314794192830980e-01*X[31+NA*19])+(1.571348402636772e-01*X[31+NA*23]);
G[94+NA*90] = tcrd[1]*X[31+NA*30] + (-8.314794192830980e-01*X[30+NA*19])+(-1.571348402636772e-01*X[30+NA*23])+(8.314794192830980e-01*X[31+NA*20])+(1.571348402636772e-01*X[31+NA*24]);
G[95+NA*90] = tcrd[2]*X[31+NA*30] + (-8.888888888888888e-01*X[30+NA*22])+(-8.888888888888888e-01*X[31+NA*21]);
G[96+NA*90] = tcrd[0]*X[32+NA*30] + (-9.428090415820635e-01*X[30+NA*21])+(-8.314794192830980e-01*X[32+NA*19])+(1.571348402636772e-01*X[32+NA*23]);
G[97+NA*90] = tcrd[1]*X[32+NA*30] + (9.428090415820635e-01*X[30+NA*22])+(8.314794192830980e-01*X[32+NA*20])+(1.571348402636772e-01*X[32+NA*24]);
G[98+NA*90] = tcrd[2]*X[32+NA*30] + (-6.666666666666667e-01*X[30+NA*23])+(-8.888888888888888e-01*X[32+NA*21]);
G[99+NA*90] = tcrd[0]*X[33+NA*30] + (-9.428090415820635e-01*X[30+NA*22])+(-8.314794192830980e-01*X[33+NA*19])+(1.571348402636772e-01*X[33+NA*23]);
G[100+NA*90] = tcrd[1]*X[33+NA*30] + (-9.428090415820635e-01*X[30+NA*21])+(8.314794192830980e-01*X[33+NA*20])+(1.571348402636772e-01*X[33+NA*24]);
G[101+NA*90] = tcrd[2]*X[33+NA*30] + (-6.666666666666667e-01*X[30+NA*24])+(-8.888888888888888e-01*X[33+NA*21]);
G[102+NA*90] = tcrd[0]*X[34+NA*30] + (-1.054092553389460e+00*X[30+NA*23])+(-8.314794192830980e-01*X[34+NA*19])+(1.571348402636772e-01*X[34+NA*23]);
G[103+NA*90] = tcrd[1]*X[34+NA*30] + (1.054092553389460e+00*X[30+NA*24])+(8.314794192830980e-01*X[34+NA*20])+(1.571348402636772e-01*X[34+NA*24]);
G[104+NA*90] = tcrd[2]*X[34+NA*30] + (-8.888888888888888e-01*X[34+NA*21]);
G[105+NA*90] = tcrd[0]*X[35+NA*30] + (-1.054092553389460e+00*X[30+NA*24])+(-8.314794192830980e-01*X[35+NA*19])+(1.571348402636772e-01*X[35+NA*23]);
G[106+NA*90] = tcrd[1]*X[35+NA*30] + (-1.054092553389460e+00*X[30+NA*23])+(8.314794192830980e-01*X[35+NA*20])+(1.571348402636772e-01*X[35+NA*24]);
G[107+NA*90] = tcrd[2]*X[35+NA*30] + (-8.888888888888888e-01*X[35+NA*21]);
G[0+NA*93] = -G[93];
G[1+NA*93] = -G[94];
G[2+NA*93] = -G[95];
G[3+NA*93] =  G[93+NA*3];
G[4+NA*93] =  G[94+NA*3];
G[5+NA*93] =  G[95+NA*3];
G[6+NA*93] =  G[93+NA*6];
G[7+NA*93] =  G[94+NA*6];
G[8+NA*93] =  G[95+NA*6];
G[9+NA*93] =  G[93+NA*9];
G[10+NA*93] =  G[94+NA*9];
G[11+NA*93] =  G[95+NA*9];
G[12+NA*93] = -G[93+NA*12];
G[13+NA*93] = -G[94+NA*12];
G[14+NA*93] = -G[95+NA*12];
G[15+NA*93] = -G[93+NA*15];
G[16+NA*93] = -G[94+NA*15];
G[17+NA*93] = -G[95+NA*15];
G[18+NA*93] = -G[93+NA*18];
G[19+NA*93] = -G[94+NA*18];
G[20+NA*93] = -G[95+NA*18];
G[21+NA*93] = -G[93+NA*21];
G[22+NA*93] = -G[94+NA*21];
G[23+NA*93] = -G[95+NA*21];
G[24+NA*93] = -G[93+NA*24];
G[25+NA*93] = -G[94+NA*24];
G[26+NA*93] = -G[95+NA*24];
G[27+NA*93] =  G[93+NA*27];
G[28+NA*93] =  G[94+NA*27];
G[29+NA*93] =  G[95+NA*27];
G[30+NA*93] =  G[93+NA*30];
G[31+NA*93] =  G[94+NA*30];
G[32+NA*93] =  G[95+NA*30];
G[33+NA*93] =  G[93+NA*33];
G[34+NA*93] =  G[94+NA*33];
G[35+NA*93] =  G[95+NA*33];
G[36+NA*93] =  G[93+NA*36];
G[37+NA*93] =  G[94+NA*36];
G[38+NA*93] =  G[95+NA*36];
G[39+NA*93] =  G[93+NA*39];
G[40+NA*93] =  G[94+NA*39];
G[41+NA*93] =  G[95+NA*39];
G[42+NA*93] =  G[93+NA*42];
G[43+NA*93] =  G[94+NA*42];
G[44+NA*93] =  G[95+NA*42];
G[45+NA*93] =  G[93+NA*45];
G[46+NA*93] =  G[94+NA*45];
G[47+NA*93] =  G[95+NA*45];
G[48+NA*93] = -G[93+NA*48];
G[49+NA*93] = -G[94+NA*48];
G[50+NA*93] = -G[95+NA*48];
G[51+NA*93] = -G[93+NA*51];
G[52+NA*93] = -G[94+NA*51];
G[53+NA*93] = -G[95+NA*51];
G[54+NA*93] = -G[93+NA*54];
G[55+NA*93] = -G[94+NA*54];
G[56+NA*93] = -G[95+NA*54];
G[57+NA*93] = -G[93+NA*57];
G[58+NA*93] = -G[94+NA*57];
G[59+NA*93] = -G[95+NA*57];
G[60+NA*93] = -G[93+NA*60];
G[61+NA*93] = -G[94+NA*60];
G[62+NA*93] = -G[95+NA*60];
G[63+NA*93] = -G[93+NA*63];
G[64+NA*93] = -G[94+NA*63];
G[65+NA*93] = -G[95+NA*63];
G[66+NA*93] = -G[93+NA*66];
G[67+NA*93] = -G[94+NA*66];
G[68+NA*93] = -G[95+NA*66];
G[69+NA*93] = -G[93+NA*69];
G[70+NA*93] = -G[94+NA*69];
G[71+NA*93] = -G[95+NA*69];
G[72+NA*93] = -G[93+NA*72];
G[73+NA*93] = -G[94+NA*72];
G[74+NA*93] = -G[95+NA*72];
G[75+NA*93] =  G[93+NA*75];
G[76+NA*93] =  G[94+NA*75];
G[77+NA*93] =  G[95+NA*75];
G[75+NA*93] =  G[93+NA*75];
G[76+NA*93] =  G[94+NA*75];
G[77+NA*93] =  G[95+NA*75];
G[78+NA*93] =  G[93+NA*78];
G[79+NA*93] =  G[94+NA*78];
G[80+NA*93] =  G[95+NA*78];
G[78+NA*93] =  G[93+NA*78];
G[79+NA*93] =  G[94+NA*78];
G[80+NA*93] =  G[95+NA*78];
G[81+NA*93] =  G[93+NA*81];
G[82+NA*93] =  G[94+NA*81];
G[83+NA*93] =  G[95+NA*81];
G[81+NA*93] =  G[93+NA*81];
G[82+NA*93] =  G[94+NA*81];
G[83+NA*93] =  G[95+NA*81];
G[84+NA*93] =  G[93+NA*84];
G[85+NA*93] =  G[94+NA*84];
G[86+NA*93] =  G[95+NA*84];
G[84+NA*93] =  G[93+NA*84];
G[85+NA*93] =  G[94+NA*84];
G[86+NA*93] =  G[95+NA*84];
G[87+NA*93] =  G[93+NA*87];
G[88+NA*93] =  G[94+NA*87];
G[89+NA*93] =  G[95+NA*87];
G[87+NA*93] =  G[93+NA*87];
G[88+NA*93] =  G[94+NA*87];
G[89+NA*93] =  G[95+NA*87];
G[90+NA*93] =  G[93+NA*90];
G[91+NA*93] =  G[94+NA*90];
G[92+NA*93] =  G[95+NA*90];
G[90+NA*93] =  G[93+NA*90];
G[91+NA*93] =  G[94+NA*90];
G[92+NA*93] =  G[95+NA*90];
G[93+NA*93] = tcrd[0]*X[31+NA*31] + (-1.662958838566196e+00*X[31+NA*20])+(3.142696805273544e-01*X[31+NA*24]);
G[94+NA*93] = tcrd[1]*X[31+NA*31] + (-1.662958838566196e+00*X[31+NA*19])+(-3.142696805273544e-01*X[31+NA*23]);
G[95+NA*93] = tcrd[2]*X[31+NA*31] + (-1.777777777777778e+00*X[31+NA*22]);
G[96+NA*93] = tcrd[0]*X[32+NA*31] + (-9.428090415820635e-01*X[31+NA*21])+(-8.314794192830980e-01*X[32+NA*20])+(1.571348402636772e-01*X[32+NA*24]);
G[97+NA*93] = tcrd[1]*X[32+NA*31] + (9.428090415820635e-01*X[31+NA*22])+(-8.314794192830980e-01*X[32+NA*19])+(-1.571348402636772e-01*X[32+NA*23]);
G[98+NA*93] = tcrd[2]*X[32+NA*31] + (-6.666666666666667e-01*X[31+NA*23])+(-8.888888888888888e-01*X[32+NA*22]);
G[99+NA*93] = tcrd[0]*X[33+NA*31] + (-9.428090415820635e-01*X[31+NA*22])+(-8.314794192830980e-01*X[33+NA*20])+(1.571348402636772e-01*X[33+NA*24]);
G[100+NA*93] = tcrd[1]*X[33+NA*31] + (-9.428090415820635e-01*X[31+NA*21])+(-8.314794192830980e-01*X[33+NA*19])+(-1.571348402636772e-01*X[33+NA*23]);
G[101+NA*93] = tcrd[2]*X[33+NA*31] + (-6.666666666666667e-01*X[31+NA*24])+(-8.888888888888888e-01*X[33+NA*22]);
G[102+NA*93] = tcrd[0]*X[34+NA*31] + (-1.054092553389460e+00*X[31+NA*23])+(-8.314794192830980e-01*X[34+NA*20])+(1.571348402636772e-01*X[34+NA*24]);
G[103+NA*93] = tcrd[1]*X[34+NA*31] + (1.054092553389460e+00*X[31+NA*24])+(-8.314794192830980e-01*X[34+NA*19])+(-1.571348402636772e-01*X[34+NA*23]);
G[104+NA*93] = tcrd[2]*X[34+NA*31] + (-8.888888888888888e-01*X[34+NA*22]);
G[105+NA*93] = tcrd[0]*X[35+NA*31] + (-1.054092553389460e+00*X[31+NA*24])+(-8.314794192830980e-01*X[35+NA*20])+(1.571348402636772e-01*X[35+NA*24]);
G[106+NA*93] = tcrd[1]*X[35+NA*31] + (-1.054092553389460e+00*X[31+NA*23])+(-8.314794192830980e-01*X[35+NA*19])+(-1.571348402636772e-01*X[35+NA*23]);
G[107+NA*93] = tcrd[2]*X[35+NA*31] + (-8.888888888888888e-01*X[35+NA*22]);
G[0+NA*96] = -G[96];
G[1+NA*96] = -G[97];
G[2+NA*96] = -G[98];
G[3+NA*96] =  G[96+NA*3];
G[4+NA*96] =  G[97+NA*3];
G[5+NA*96] =  G[98+NA*3];
G[6+NA*96] =  G[96+NA*6];
G[7+NA*96] =  G[97+NA*6];
G[8+NA*96] =  G[98+NA*6];
G[9+NA*96] =  G[96+NA*9];
G[10+NA*96] =  G[97+NA*9];
G[11+NA*96] =  G[98+NA*9];
G[12+NA*96] = -G[96+NA*12];
G[13+NA*96] = -G[97+NA*12];
G[14+NA*96] = -G[98+NA*12];
G[15+NA*96] = -G[96+NA*15];
G[16+NA*96] = -G[97+NA*15];
G[17+NA*96] = -G[98+NA*15];
G[18+NA*96] = -G[96+NA*18];
G[19+NA*96] = -G[97+NA*18];
G[20+NA*96] = -G[98+NA*18];
G[21+NA*96] = -G[96+NA*21];
G[22+NA*96] = -G[97+NA*21];
G[23+NA*96] = -G[98+NA*21];
G[24+NA*96] = -G[96+NA*24];
G[25+NA*96] = -G[97+NA*24];
G[26+NA*96] = -G[98+NA*24];
G[27+NA*96] =  G[96+NA*27];
G[28+NA*96] =  G[97+NA*27];
G[29+NA*96] =  G[98+NA*27];
G[30+NA*96] =  G[96+NA*30];
G[31+NA*96] =  G[97+NA*30];
G[32+NA*96] =  G[98+NA*30];
G[33+NA*96] =  G[96+NA*33];
G[34+NA*96] =  G[97+NA*33];
G[35+NA*96] =  G[98+NA*33];
G[36+NA*96] =  G[96+NA*36];
G[37+NA*96] =  G[97+NA*36];
G[38+NA*96] =  G[98+NA*36];
G[39+NA*96] =  G[96+NA*39];
G[40+NA*96] =  G[97+NA*39];
G[41+NA*96] =  G[98+NA*39];
G[42+NA*96] =  G[96+NA*42];
G[43+NA*96] =  G[97+NA*42];
G[44+NA*96] =  G[98+NA*42];
G[45+NA*96] =  G[96+NA*45];
G[46+NA*96] =  G[97+NA*45];
G[47+NA*96] =  G[98+NA*45];
G[48+NA*96] = -G[96+NA*48];
G[49+NA*96] = -G[97+NA*48];
G[50+NA*96] = -G[98+NA*48];
G[51+NA*96] = -G[96+NA*51];
G[52+NA*96] = -G[97+NA*51];
G[53+NA*96] = -G[98+NA*51];
G[54+NA*96] = -G[96+NA*54];
G[55+NA*96] = -G[97+NA*54];
G[56+NA*96] = -G[98+NA*54];
G[57+NA*96] = -G[96+NA*57];
G[58+NA*96] = -G[97+NA*57];
G[59+NA*96] = -G[98+NA*57];
G[60+NA*96] = -G[96+NA*60];
G[61+NA*96] = -G[97+NA*60];
G[62+NA*96] = -G[98+NA*60];
G[63+NA*96] = -G[96+NA*63];
G[64+NA*96] = -G[97+NA*63];
G[65+NA*96] = -G[98+NA*63];
G[66+NA*96] = -G[96+NA*66];
G[67+NA*96] = -G[97+NA*66];
G[68+NA*96] = -G[98+NA*66];
G[69+NA*96] = -G[96+NA*69];
G[70+NA*96] = -G[97+NA*69];
G[71+NA*96] = -G[98+NA*69];
G[72+NA*96] = -G[96+NA*72];
G[73+NA*96] = -G[97+NA*72];
G[74+NA*96] = -G[98+NA*72];
G[75+NA*96] =  G[96+NA*75];
G[76+NA*96] =  G[97+NA*75];
G[77+NA*96] =  G[98+NA*75];
G[75+NA*96] =  G[96+NA*75];
G[76+NA*96] =  G[97+NA*75];
G[77+NA*96] =  G[98+NA*75];
G[78+NA*96] =  G[96+NA*78];
G[79+NA*96] =  G[97+NA*78];
G[80+NA*96] =  G[98+NA*78];
G[78+NA*96] =  G[96+NA*78];
G[79+NA*96] =  G[97+NA*78];
G[80+NA*96] =  G[98+NA*78];
G[81+NA*96] =  G[96+NA*81];
G[82+NA*96] =  G[97+NA*81];
G[83+NA*96] =  G[98+NA*81];
G[81+NA*96] =  G[96+NA*81];
G[82+NA*96] =  G[97+NA*81];
G[83+NA*96] =  G[98+NA*81];
G[84+NA*96] =  G[96+NA*84];
G[85+NA*96] =  G[97+NA*84];
G[86+NA*96] =  G[98+NA*84];
G[84+NA*96] =  G[96+NA*84];
G[85+NA*96] =  G[97+NA*84];
G[86+NA*96] =  G[98+NA*84];
G[87+NA*96] =  G[96+NA*87];
G[88+NA*96] =  G[97+NA*87];
G[89+NA*96] =  G[98+NA*87];
G[87+NA*96] =  G[96+NA*87];
G[88+NA*96] =  G[97+NA*87];
G[89+NA*96] =  G[98+NA*87];
G[90+NA*96] =  G[96+NA*90];
G[91+NA*96] =  G[97+NA*90];
G[92+NA*96] =  G[98+NA*90];
G[90+NA*96] =  G[96+NA*90];
G[91+NA*96] =  G[97+NA*90];
G[92+NA*96] =  G[98+NA*90];
G[93+NA*96] =  G[96+NA*93];
G[94+NA*96] =  G[97+NA*93];
G[95+NA*96] =  G[98+NA*93];
G[93+NA*96] =  G[96+NA*93];
G[94+NA*96] =  G[97+NA*93];
G[95+NA*96] =  G[98+NA*93];
G[96+NA*96] = tcrd[0]*X[32+NA*32] + (-1.885618083164127e+00*X[32+NA*21]);
G[97+NA*96] = tcrd[1]*X[32+NA*32] + (1.885618083164127e+00*X[32+NA*22]);
G[98+NA*96] = tcrd[2]*X[32+NA*32] + (-1.333333333333333e+00*X[32+NA*23]);
G[99+NA*96] = tcrd[0]*X[33+NA*32] + (-9.428090415820635e-01*X[32+NA*22])+(-9.428090415820635e-01*X[33+NA*21]);
G[100+NA*96] = tcrd[1]*X[33+NA*32] + (-9.428090415820635e-01*X[32+NA*21])+(9.428090415820635e-01*X[33+NA*22]);
G[101+NA*96] = tcrd[2]*X[33+NA*32] + (-6.666666666666667e-01*X[32+NA*24])+(-6.666666666666667e-01*X[33+NA*23]);
G[102+NA*96] = tcrd[0]*X[34+NA*32] + (-1.054092553389460e+00*X[32+NA*23])+(-9.428090415820635e-01*X[34+NA*21]);
G[103+NA*96] = tcrd[1]*X[34+NA*32] + (1.054092553389460e+00*X[32+NA*24])+(9.428090415820635e-01*X[34+NA*22]);
G[104+NA*96] = tcrd[2]*X[34+NA*32] + (-6.666666666666667e-01*X[34+NA*23]);
G[105+NA*96] = tcrd[0]*X[35+NA*32] + (-1.054092553389460e+00*X[32+NA*24])+(-9.428090415820635e-01*X[35+NA*21]);
G[106+NA*96] = tcrd[1]*X[35+NA*32] + (-1.054092553389460e+00*X[32+NA*23])+(9.428090415820635e-01*X[35+NA*22]);
G[107+NA*96] = tcrd[2]*X[35+NA*32] + (-6.666666666666667e-01*X[35+NA*23]);
G[0+NA*99] = -G[99];
G[1+NA*99] = -G[100];
G[2+NA*99] = -G[101];
G[3+NA*99] =  G[99+NA*3];
G[4+NA*99] =  G[100+NA*3];
G[5+NA*99] =  G[101+NA*3];
G[6+NA*99] =  G[99+NA*6];
G[7+NA*99] =  G[100+NA*6];
G[8+NA*99] =  G[101+NA*6];
G[9+NA*99] =  G[99+NA*9];
G[10+NA*99] =  G[100+NA*9];
G[11+NA*99] =  G[101+NA*9];
G[12+NA*99] = -G[99+NA*12];
G[13+NA*99] = -G[100+NA*12];
G[14+NA*99] = -G[101+NA*12];
G[15+NA*99] = -G[99+NA*15];
G[16+NA*99] = -G[100+NA*15];
G[17+NA*99] = -G[101+NA*15];
G[18+NA*99] = -G[99+NA*18];
G[19+NA*99] = -G[100+NA*18];
G[20+NA*99] = -G[101+NA*18];
G[21+NA*99] = -G[99+NA*21];
G[22+NA*99] = -G[100+NA*21];
G[23+NA*99] = -G[101+NA*21];
G[24+NA*99] = -G[99+NA*24];
G[25+NA*99] = -G[100+NA*24];
G[26+NA*99] = -G[101+NA*24];
G[27+NA*99] =  G[99+NA*27];
G[28+NA*99] =  G[100+NA*27];
G[29+NA*99] =  G[101+NA*27];
G[30+NA*99] =  G[99+NA*30];
G[31+NA*99] =  G[100+NA*30];
G[32+NA*99] =  G[101+NA*30];
G[33+NA*99] =  G[99+NA*33];
G[34+NA*99] =  G[100+NA*33];
G[35+NA*99] =  G[101+NA*33];
G[36+NA*99] =  G[99+NA*36];
G[37+NA*99] =  G[100+NA*36];
G[38+NA*99] =  G[101+NA*36];
G[39+NA*99] =  G[99+NA*39];
G[40+NA*99] =  G[100+NA*39];
G[41+NA*99] =  G[101+NA*39];
G[42+NA*99] =  G[99+NA*42];
G[43+NA*99] =  G[100+NA*42];
G[44+NA*99] =  G[101+NA*42];
G[45+NA*99] =  G[99+NA*45];
G[46+NA*99] =  G[100+NA*45];
G[47+NA*99] =  G[101+NA*45];
G[48+NA*99] = -G[99+NA*48];
G[49+NA*99] = -G[100+NA*48];
G[50+NA*99] = -G[101+NA*48];
G[51+NA*99] = -G[99+NA*51];
G[52+NA*99] = -G[100+NA*51];
G[53+NA*99] = -G[101+NA*51];
G[54+NA*99] = -G[99+NA*54];
G[55+NA*99] = -G[100+NA*54];
G[56+NA*99] = -G[101+NA*54];
G[57+NA*99] = -G[99+NA*57];
G[58+NA*99] = -G[100+NA*57];
G[59+NA*99] = -G[101+NA*57];
G[60+NA*99] = -G[99+NA*60];
G[61+NA*99] = -G[100+NA*60];
G[62+NA*99] = -G[101+NA*60];
G[63+NA*99] = -G[99+NA*63];
G[64+NA*99] = -G[100+NA*63];
G[65+NA*99] = -G[101+NA*63];
G[66+NA*99] = -G[99+NA*66];
G[67+NA*99] = -G[100+NA*66];
G[68+NA*99] = -G[101+NA*66];
G[69+NA*99] = -G[99+NA*69];
G[70+NA*99] = -G[100+NA*69];
G[71+NA*99] = -G[101+NA*69];
G[72+NA*99] = -G[99+NA*72];
G[73+NA*99] = -G[100+NA*72];
G[74+NA*99] = -G[101+NA*72];
G[75+NA*99] =  G[99+NA*75];
G[76+NA*99] =  G[100+NA*75];
G[77+NA*99] =  G[101+NA*75];
G[75+NA*99] =  G[99+NA*75];
G[76+NA*99] =  G[100+NA*75];
G[77+NA*99] =  G[101+NA*75];
G[78+NA*99] =  G[99+NA*78];
G[79+NA*99] =  G[100+NA*78];
G[80+NA*99] =  G[101+NA*78];
G[78+NA*99] =  G[99+NA*78];
G[79+NA*99] =  G[100+NA*78];
G[80+NA*99] =  G[101+NA*78];
G[81+NA*99] =  G[99+NA*81];
G[82+NA*99] =  G[100+NA*81];
G[83+NA*99] =  G[101+NA*81];
G[81+NA*99] =  G[99+NA*81];
G[82+NA*99] =  G[100+NA*81];
G[83+NA*99] =  G[101+NA*81];
G[84+NA*99] =  G[99+NA*84];
G[85+NA*99] =  G[100+NA*84];
G[86+NA*99] =  G[101+NA*84];
G[84+NA*99] =  G[99+NA*84];
G[85+NA*99] =  G[100+NA*84];
G[86+NA*99] =  G[101+NA*84];
G[87+NA*99] =  G[99+NA*87];
G[88+NA*99] =  G[100+NA*87];
G[89+NA*99] =  G[101+NA*87];
G[87+NA*99] =  G[99+NA*87];
G[88+NA*99] =  G[100+NA*87];
G[89+NA*99] =  G[101+NA*87];
G[90+NA*99] =  G[99+NA*90];
G[91+NA*99] =  G[100+NA*90];
G[92+NA*99] =  G[101+NA*90];
G[90+NA*99] =  G[99+NA*90];
G[91+NA*99] =  G[100+NA*90];
G[92+NA*99] =  G[101+NA*90];
G[93+NA*99] =  G[99+NA*93];
G[94+NA*99] =  G[100+NA*93];
G[95+NA*99] =  G[101+NA*93];
G[93+NA*99] =  G[99+NA*93];
G[94+NA*99] =  G[100+NA*93];
G[95+NA*99] =  G[101+NA*93];
G[96+NA*99] =  G[99+NA*96];
G[97+NA*99] =  G[100+NA*96];
G[98+NA*99] =  G[101+NA*96];
G[96+NA*99] =  G[99+NA*96];
G[97+NA*99] =  G[100+NA*96];
G[98+NA*99] =  G[101+NA*96];
G[99+NA*99] = tcrd[0]*X[33+NA*33] + (-1.885618083164127e+00*X[33+NA*22]);
G[100+NA*99] = tcrd[1]*X[33+NA*33] + (-1.885618083164127e+00*X[33+NA*21]);
G[101+NA*99] = tcrd[2]*X[33+NA*33] + (-1.333333333333333e+00*X[33+NA*24]);
G[102+NA*99] = tcrd[0]*X[34+NA*33] + (-1.054092553389460e+00*X[33+NA*23])+(-9.428090415820635e-01*X[34+NA*22]);
G[103+NA*99] = tcrd[1]*X[34+NA*33] + (1.054092553389460e+00*X[33+NA*24])+(-9.428090415820635e-01*X[34+NA*21]);
G[104+NA*99] = tcrd[2]*X[34+NA*33] + (-6.666666666666667e-01*X[34+NA*24]);
G[105+NA*99] = tcrd[0]*X[35+NA*33] + (-1.054092553389460e+00*X[33+NA*24])+(-9.428090415820635e-01*X[35+NA*22]);
G[106+NA*99] = tcrd[1]*X[35+NA*33] + (-1.054092553389460e+00*X[33+NA*23])+(-9.428090415820635e-01*X[35+NA*21]);
G[107+NA*99] = tcrd[2]*X[35+NA*33] + (-6.666666666666667e-01*X[35+NA*24]);
G[0+NA*102] = -G[102];
G[1+NA*102] = -G[103];
G[2+NA*102] = -G[104];
G[3+NA*102] =  G[102+NA*3];
G[4+NA*102] =  G[103+NA*3];
G[5+NA*102] =  G[104+NA*3];
G[6+NA*102] =  G[102+NA*6];
G[7+NA*102] =  G[103+NA*6];
G[8+NA*102] =  G[104+NA*6];
G[9+NA*102] =  G[102+NA*9];
G[10+NA*102] =  G[103+NA*9];
G[11+NA*102] =  G[104+NA*9];
G[12+NA*102] = -G[102+NA*12];
G[13+NA*102] = -G[103+NA*12];
G[14+NA*102] = -G[104+NA*12];
G[15+NA*102] = -G[102+NA*15];
G[16+NA*102] = -G[103+NA*15];
G[17+NA*102] = -G[104+NA*15];
G[18+NA*102] = -G[102+NA*18];
G[19+NA*102] = -G[103+NA*18];
G[20+NA*102] = -G[104+NA*18];
G[21+NA*102] = -G[102+NA*21];
G[22+NA*102] = -G[103+NA*21];
G[23+NA*102] = -G[104+NA*21];
G[24+NA*102] = -G[102+NA*24];
G[25+NA*102] = -G[103+NA*24];
G[26+NA*102] = -G[104+NA*24];
G[27+NA*102] =  G[102+NA*27];
G[28+NA*102] =  G[103+NA*27];
G[29+NA*102] =  G[104+NA*27];
G[30+NA*102] =  G[102+NA*30];
G[31+NA*102] =  G[103+NA*30];
G[32+NA*102] =  G[104+NA*30];
G[33+NA*102] =  G[102+NA*33];
G[34+NA*102] =  G[103+NA*33];
G[35+NA*102] =  G[104+NA*33];
G[36+NA*102] =  G[102+NA*36];
G[37+NA*102] =  G[103+NA*36];
G[38+NA*102] =  G[104+NA*36];
G[39+NA*102] =  G[102+NA*39];
G[40+NA*102] =  G[103+NA*39];
G[41+NA*102] =  G[104+NA*39];
G[42+NA*102] =  G[102+NA*42];
G[43+NA*102] =  G[103+NA*42];
G[44+NA*102] =  G[104+NA*42];
G[45+NA*102] =  G[102+NA*45];
G[46+NA*102] =  G[103+NA*45];
G[47+NA*102] =  G[104+NA*45];
G[48+NA*102] = -G[102+NA*48];
G[49+NA*102] = -G[103+NA*48];
G[50+NA*102] = -G[104+NA*48];
G[51+NA*102] = -G[102+NA*51];
G[52+NA*102] = -G[103+NA*51];
G[53+NA*102] = -G[104+NA*51];
G[54+NA*102] = -G[102+NA*54];
G[55+NA*102] = -G[103+NA*54];
G[56+NA*102] = -G[104+NA*54];
G[57+NA*102] = -G[102+NA*57];
G[58+NA*102] = -G[103+NA*57];
G[59+NA*102] = -G[104+NA*57];
G[60+NA*102] = -G[102+NA*60];
G[61+NA*102] = -G[103+NA*60];
G[62+NA*102] = -G[104+NA*60];
G[63+NA*102] = -G[102+NA*63];
G[64+NA*102] = -G[103+NA*63];
G[65+NA*102] = -G[104+NA*63];
G[66+NA*102] = -G[102+NA*66];
G[67+NA*102] = -G[103+NA*66];
G[68+NA*102] = -G[104+NA*66];
G[69+NA*102] = -G[102+NA*69];
G[70+NA*102] = -G[103+NA*69];
G[71+NA*102] = -G[104+NA*69];
G[72+NA*102] = -G[102+NA*72];
G[73+NA*102] = -G[103+NA*72];
G[74+NA*102] = -G[104+NA*72];
G[75+NA*102] =  G[102+NA*75];
G[76+NA*102] =  G[103+NA*75];
G[77+NA*102] =  G[104+NA*75];
G[75+NA*102] =  G[102+NA*75];
G[76+NA*102] =  G[103+NA*75];
G[77+NA*102] =  G[104+NA*75];
G[78+NA*102] =  G[102+NA*78];
G[79+NA*102] =  G[103+NA*78];
G[80+NA*102] =  G[104+NA*78];
G[78+NA*102] =  G[102+NA*78];
G[79+NA*102] =  G[103+NA*78];
G[80+NA*102] =  G[104+NA*78];
G[81+NA*102] =  G[102+NA*81];
G[82+NA*102] =  G[103+NA*81];
G[83+NA*102] =  G[104+NA*81];
G[81+NA*102] =  G[102+NA*81];
G[82+NA*102] =  G[103+NA*81];
G[83+NA*102] =  G[104+NA*81];
G[84+NA*102] =  G[102+NA*84];
G[85+NA*102] =  G[103+NA*84];
G[86+NA*102] =  G[104+NA*84];
G[84+NA*102] =  G[102+NA*84];
G[85+NA*102] =  G[103+NA*84];
G[86+NA*102] =  G[104+NA*84];
G[87+NA*102] =  G[102+NA*87];
G[88+NA*102] =  G[103+NA*87];
G[89+NA*102] =  G[104+NA*87];
G[87+NA*102] =  G[102+NA*87];
G[88+NA*102] =  G[103+NA*87];
G[89+NA*102] =  G[104+NA*87];
G[90+NA*102] =  G[102+NA*90];
G[91+NA*102] =  G[103+NA*90];
G[92+NA*102] =  G[104+NA*90];
G[90+NA*102] =  G[102+NA*90];
G[91+NA*102] =  G[103+NA*90];
G[92+NA*102] =  G[104+NA*90];
G[93+NA*102] =  G[102+NA*93];
G[94+NA*102] =  G[103+NA*93];
G[95+NA*102] =  G[104+NA*93];
G[93+NA*102] =  G[102+NA*93];
G[94+NA*102] =  G[103+NA*93];
G[95+NA*102] =  G[104+NA*93];
G[96+NA*102] =  G[102+NA*96];
G[97+NA*102] =  G[103+NA*96];
G[98+NA*102] =  G[104+NA*96];
G[96+NA*102] =  G[102+NA*96];
G[97+NA*102] =  G[103+NA*96];
G[98+NA*102] =  G[104+NA*96];
G[99+NA*102] =  G[102+NA*99];
G[100+NA*102] =  G[103+NA*99];
G[101+NA*102] =  G[104+NA*99];
G[99+NA*102] =  G[102+NA*99];
G[100+NA*102] =  G[103+NA*99];
G[101+NA*102] =  G[104+NA*99];
G[102+NA*102] = tcrd[0]*X[34+NA*34] + (-2.108185106778919e+00*X[34+NA*23]);
G[103+NA*102] = tcrd[1]*X[34+NA*34] + (2.108185106778919e+00*X[34+NA*24]);
G[104+NA*102] = tcrd[2]*X[34+NA*34];
G[105+NA*102] = tcrd[0]*X[35+NA*34] + (-1.054092553389460e+00*X[34+NA*24])+(-1.054092553389460e+00*X[35+NA*23]);
G[106+NA*102] = tcrd[1]*X[35+NA*34] + (-1.054092553389460e+00*X[34+NA*23])+(1.054092553389460e+00*X[35+NA*24]);
G[107+NA*102] = tcrd[2]*X[35+NA*34];
G[0+NA*105] = -G[105];
G[1+NA*105] = -G[106];
G[2+NA*105] = -G[107];
G[3+NA*105] =  G[105+NA*3];
G[4+NA*105] =  G[106+NA*3];
G[5+NA*105] =  G[107+NA*3];
G[6+NA*105] =  G[105+NA*6];
G[7+NA*105] =  G[106+NA*6];
G[8+NA*105] =  G[107+NA*6];
G[9+NA*105] =  G[105+NA*9];
G[10+NA*105] =  G[106+NA*9];
G[11+NA*105] =  G[107+NA*9];
G[12+NA*105] = -G[105+NA*12];
G[13+NA*105] = -G[106+NA*12];
G[14+NA*105] = -G[107+NA*12];
G[15+NA*105] = -G[105+NA*15];
G[16+NA*105] = -G[106+NA*15];
G[17+NA*105] = -G[107+NA*15];
G[18+NA*105] = -G[105+NA*18];
G[19+NA*105] = -G[106+NA*18];
G[20+NA*105] = -G[107+NA*18];
G[21+NA*105] = -G[105+NA*21];
G[22+NA*105] = -G[106+NA*21];
G[23+NA*105] = -G[107+NA*21];
G[24+NA*105] = -G[105+NA*24];
G[25+NA*105] = -G[106+NA*24];
G[26+NA*105] = -G[107+NA*24];
G[27+NA*105] =  G[105+NA*27];
G[28+NA*105] =  G[106+NA*27];
G[29+NA*105] =  G[107+NA*27];
G[30+NA*105] =  G[105+NA*30];
G[31+NA*105] =  G[106+NA*30];
G[32+NA*105] =  G[107+NA*30];
G[33+NA*105] =  G[105+NA*33];
G[34+NA*105] =  G[106+NA*33];
G[35+NA*105] =  G[107+NA*33];
G[36+NA*105] =  G[105+NA*36];
G[37+NA*105] =  G[106+NA*36];
G[38+NA*105] =  G[107+NA*36];
G[39+NA*105] =  G[105+NA*39];
G[40+NA*105] =  G[106+NA*39];
G[41+NA*105] =  G[107+NA*39];
G[42+NA*105] =  G[105+NA*42];
G[43+NA*105] =  G[106+NA*42];
G[44+NA*105] =  G[107+NA*42];
G[45+NA*105] =  G[105+NA*45];
G[46+NA*105] =  G[106+NA*45];
G[47+NA*105] =  G[107+NA*45];
G[48+NA*105] = -G[105+NA*48];
G[49+NA*105] = -G[106+NA*48];
G[50+NA*105] = -G[107+NA*48];
G[51+NA*105] = -G[105+NA*51];
G[52+NA*105] = -G[106+NA*51];
G[53+NA*105] = -G[107+NA*51];
G[54+NA*105] = -G[105+NA*54];
G[55+NA*105] = -G[106+NA*54];
G[56+NA*105] = -G[107+NA*54];
G[57+NA*105] = -G[105+NA*57];
G[58+NA*105] = -G[106+NA*57];
G[59+NA*105] = -G[107+NA*57];
G[60+NA*105] = -G[105+NA*60];
G[61+NA*105] = -G[106+NA*60];
G[62+NA*105] = -G[107+NA*60];
G[63+NA*105] = -G[105+NA*63];
G[64+NA*105] = -G[106+NA*63];
G[65+NA*105] = -G[107+NA*63];
G[66+NA*105] = -G[105+NA*66];
G[67+NA*105] = -G[106+NA*66];
G[68+NA*105] = -G[107+NA*66];
G[69+NA*105] = -G[105+NA*69];
G[70+NA*105] = -G[106+NA*69];
G[71+NA*105] = -G[107+NA*69];
G[72+NA*105] = -G[105+NA*72];
G[73+NA*105] = -G[106+NA*72];
G[74+NA*105] = -G[107+NA*72];
G[75+NA*105] =  G[105+NA*75];
G[76+NA*105] =  G[106+NA*75];
G[77+NA*105] =  G[107+NA*75];
G[75+NA*105] =  G[105+NA*75];
G[76+NA*105] =  G[106+NA*75];
G[77+NA*105] =  G[107+NA*75];
G[78+NA*105] =  G[105+NA*78];
G[79+NA*105] =  G[106+NA*78];
G[80+NA*105] =  G[107+NA*78];
G[78+NA*105] =  G[105+NA*78];
G[79+NA*105] =  G[106+NA*78];
G[80+NA*105] =  G[107+NA*78];
G[81+NA*105] =  G[105+NA*81];
G[82+NA*105] =  G[106+NA*81];
G[83+NA*105] =  G[107+NA*81];
G[81+NA*105] =  G[105+NA*81];
G[82+NA*105] =  G[106+NA*81];
G[83+NA*105] =  G[107+NA*81];
G[84+NA*105] =  G[105+NA*84];
G[85+NA*105] =  G[106+NA*84];
G[86+NA*105] =  G[107+NA*84];
G[84+NA*105] =  G[105+NA*84];
G[85+NA*105] =  G[106+NA*84];
G[86+NA*105] =  G[107+NA*84];
G[87+NA*105] =  G[105+NA*87];
G[88+NA*105] =  G[106+NA*87];
G[89+NA*105] =  G[107+NA*87];
G[87+NA*105] =  G[105+NA*87];
G[88+NA*105] =  G[106+NA*87];
G[89+NA*105] =  G[107+NA*87];
G[90+NA*105] =  G[105+NA*90];
G[91+NA*105] =  G[106+NA*90];
G[92+NA*105] =  G[107+NA*90];
G[90+NA*105] =  G[105+NA*90];
G[91+NA*105] =  G[106+NA*90];
G[92+NA*105] =  G[107+NA*90];
G[93+NA*105] =  G[105+NA*93];
G[94+NA*105] =  G[106+NA*93];
G[95+NA*105] =  G[107+NA*93];
G[93+NA*105] =  G[105+NA*93];
G[94+NA*105] =  G[106+NA*93];
G[95+NA*105] =  G[107+NA*93];
G[96+NA*105] =  G[105+NA*96];
G[97+NA*105] =  G[106+NA*96];
G[98+NA*105] =  G[107+NA*96];
G[96+NA*105] =  G[105+NA*96];
G[97+NA*105] =  G[106+NA*96];
G[98+NA*105] =  G[107+NA*96];
G[99+NA*105] =  G[105+NA*99];
G[100+NA*105] =  G[106+NA*99];
G[101+NA*105] =  G[107+NA*99];
G[99+NA*105] =  G[105+NA*99];
G[100+NA*105] =  G[106+NA*99];
G[101+NA*105] =  G[107+NA*99];
G[102+NA*105] =  G[105+NA*102];
G[103+NA*105] =  G[106+NA*102];
G[104+NA*105] =  G[107+NA*102];
G[102+NA*105] =  G[105+NA*102];
G[103+NA*105] =  G[106+NA*102];
G[104+NA*105] =  G[107+NA*102];
G[105+NA*105] = tcrd[0]*X[35+NA*35] + (-2.108185106778919e+00*X[35+NA*24]);
G[106+NA*105] = tcrd[1]*X[35+NA*35] + (-2.108185106778919e+00*X[35+NA*23]);
G[107+NA*105] = tcrd[2]*X[35+NA*35];
}

template <int NA,int LB>
inline void ExpHobGrdAcc_SS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[0]*qb[0];
G[0] += qq * ( tcrd[0]*X[0] );
G[1] += qq * ( tcrd[1]*X[0] );
G[2] += qq * ( tcrd[2]*X[0] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_PS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 0 ) { qq = qa[1]*qb[0] - qa[0]*qb[1]; } else { qq = qa[1]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[1] );
G[1] += qq * ( tcrd[1]*X[1] );
G[2] += qq * ( tcrd[2]*X[1] + (2.000000000000000e+00*X[0]) );
if ( LB > 0 ) { qq = qa[2]*qb[0] - qa[0]*qb[2]; } else { qq = qa[2]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[2] + (2.000000000000000e+00*X[0]) );
G[1] += qq * ( tcrd[1]*X[2] );
G[2] += qq * ( tcrd[2]*X[2] );
if ( LB > 0 ) { qq = qa[3]*qb[0] - qa[0]*qb[3]; } else { qq = qa[3]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[3] );
G[1] += qq * ( tcrd[1]*X[3] + (2.000000000000000e+00*X[0]) );
G[2] += qq * ( tcrd[2]*X[3] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_PP( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[1]*qb[1];
G[0] += qq * ( tcrd[0]*X[1+NA] );
G[1] += qq * ( tcrd[1]*X[1+NA] );
G[2] += qq * ( tcrd[2]*X[1+NA] + (-4.000000000000000e+00*X[1]) );
qq = qa[2]*qb[1] + qa[1]*qb[2];
G[0] += qq * ( tcrd[0]*X[2+NA] + (-2.000000000000000e+00*X[1]) );
G[1] += qq * ( tcrd[1]*X[2+NA] );
G[2] += qq * ( tcrd[2]*X[2+NA] + (-2.000000000000000e+00*X[2]) );
qq = qa[3]*qb[1] + qa[1]*qb[3];
G[0] += qq * ( tcrd[0]*X[3+NA] );
G[1] += qq * ( tcrd[1]*X[3+NA] + (-2.000000000000000e+00*X[1]) );
G[2] += qq * ( tcrd[2]*X[3+NA] + (-2.000000000000000e+00*X[3]) );
qq = qa[2]*qb[2];
G[0] += qq * ( tcrd[0]*X[2+NA*2] + (-4.000000000000000e+00*X[2]) );
G[1] += qq * ( tcrd[1]*X[2+NA*2] );
G[2] += qq * ( tcrd[2]*X[2+NA*2] );
qq = qa[3]*qb[2] + qa[2]*qb[3];
G[0] += qq * ( tcrd[0]*X[3+NA*2] + (-2.000000000000000e+00*X[3]) );
G[1] += qq * ( tcrd[1]*X[3+NA*2] + (-2.000000000000000e+00*X[2]) );
G[2] += qq * ( tcrd[2]*X[3+NA*2] );
qq = qa[3]*qb[3];
G[0] += qq * ( tcrd[0]*X[3+NA*3] );
G[1] += qq * ( tcrd[1]*X[3+NA*3] + (-4.000000000000000e+00*X[3]) );
G[2] += qq * ( tcrd[2]*X[3+NA*3] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_DS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 1 ) { qq = qa[4]*qb[0] + qa[0]*qb[4]; } else { qq = qa[4]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[4] + (-6.666666666666666e-01*X[2]) );
G[1] += qq * ( tcrd[1]*X[4] + (-6.666666666666666e-01*X[3]) );
G[2] += qq * ( tcrd[2]*X[4] + (1.333333333333333e+00*X[1]) );
if ( LB > 1 ) { qq = qa[5]*qb[0] + qa[0]*qb[5]; } else { qq = qa[5]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[5] + (1.154700538379251e+00*X[1]) );
G[1] += qq * ( tcrd[1]*X[5] );
G[2] += qq * ( tcrd[2]*X[5] + (1.154700538379251e+00*X[2]) );
if ( LB > 1 ) { qq = qa[6]*qb[0] + qa[0]*qb[6]; } else { qq = qa[6]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[6] );
G[1] += qq * ( tcrd[1]*X[6] + (1.154700538379251e+00*X[1]) );
G[2] += qq * ( tcrd[2]*X[6] + (1.154700538379251e+00*X[3]) );
if ( LB > 1 ) { qq = qa[7]*qb[0] + qa[0]*qb[7]; } else { qq = qa[7]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[7] + (1.154700538379251e+00*X[2]) );
G[1] += qq * ( tcrd[1]*X[7] + (-1.154700538379251e+00*X[3]) );
G[2] += qq * ( tcrd[2]*X[7] );
if ( LB > 1 ) { qq = qa[8]*qb[0] + qa[0]*qb[8]; } else { qq = qa[8]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[8] + (1.154700538379251e+00*X[3]) );
G[1] += qq * ( tcrd[1]*X[8] + (1.154700538379251e+00*X[2]) );
G[2] += qq * ( tcrd[2]*X[8] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_DP( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 1 ) { qq = qa[4]*qb[1] - qa[1]*qb[4]; } else { qq = qa[4]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[4+NA] + (-6.666666666666666e-01*X[2+NA]) );
G[1] += qq * ( tcrd[1]*X[4+NA] + (-6.666666666666666e-01*X[3+NA]) );
G[2] += qq * ( tcrd[2]*X[4+NA] + (1.333333333333333e+00*X[1+NA])+(-2.000000000000000e+00*X[4]) );
if ( LB > 1 ) { qq = qa[5]*qb[1] - qa[1]*qb[5]; } else { qq = qa[5]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[5+NA] + (1.154700538379251e+00*X[1+NA]) );
G[1] += qq * ( tcrd[1]*X[5+NA] );
G[2] += qq * ( tcrd[2]*X[5+NA] + (1.154700538379251e+00*X[2+NA])+(-2.000000000000000e+00*X[5]) );
if ( LB > 1 ) { qq = qa[6]*qb[1] - qa[1]*qb[6]; } else { qq = qa[6]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[6+NA] );
G[1] += qq * ( tcrd[1]*X[6+NA] + (1.154700538379251e+00*X[1+NA]) );
G[2] += qq * ( tcrd[2]*X[6+NA] + (1.154700538379251e+00*X[3+NA])+(-2.000000000000000e+00*X[6]) );
if ( LB > 1 ) { qq = qa[7]*qb[1] - qa[1]*qb[7]; } else { qq = qa[7]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[7+NA] + (1.154700538379251e+00*X[2+NA]) );
G[1] += qq * ( tcrd[1]*X[7+NA] + (-1.154700538379251e+00*X[3+NA]) );
G[2] += qq * ( tcrd[2]*X[7+NA] + (-2.000000000000000e+00*X[7]) );
if ( LB > 1 ) { qq = qa[8]*qb[1] - qa[1]*qb[8]; } else { qq = qa[8]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[8+NA] + (1.154700538379251e+00*X[3+NA]) );
G[1] += qq * ( tcrd[1]*X[8+NA] + (1.154700538379251e+00*X[2+NA]) );
G[2] += qq * ( tcrd[2]*X[8+NA] + (-2.000000000000000e+00*X[8]) );
if ( LB > 1 ) { qq = qa[4]*qb[2] - qa[2]*qb[4]; } else { qq = qa[4]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[4+NA*2] + (-6.666666666666666e-01*X[2+NA*2])+(-2.000000000000000e+00*X[4]) );
G[1] += qq * ( tcrd[1]*X[4+NA*2] + (-6.666666666666666e-01*X[3+NA*2]) );
G[2] += qq * ( tcrd[2]*X[4+NA*2] + (1.333333333333333e+00*X[2+NA]) );
if ( LB > 1 ) { qq = qa[5]*qb[2] - qa[2]*qb[5]; } else { qq = qa[5]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[5+NA*2] + (1.154700538379251e+00*X[2+NA])+(-2.000000000000000e+00*X[5]) );
G[1] += qq * ( tcrd[1]*X[5+NA*2] );
G[2] += qq * ( tcrd[2]*X[5+NA*2] + (1.154700538379251e+00*X[2+NA*2]) );
if ( LB > 1 ) { qq = qa[6]*qb[2] - qa[2]*qb[6]; } else { qq = qa[6]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[6+NA*2] + (-2.000000000000000e+00*X[6]) );
G[1] += qq * ( tcrd[1]*X[6+NA*2] + (1.154700538379251e+00*X[2+NA]) );
G[2] += qq * ( tcrd[2]*X[6+NA*2] + (1.154700538379251e+00*X[3+NA*2]) );
if ( LB > 1 ) { qq = qa[7]*qb[2] - qa[2]*qb[7]; } else { qq = qa[7]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[7+NA*2] + (1.154700538379251e+00*X[2+NA*2])+(-2.000000000000000e+00*X[7]) );
G[1] += qq * ( tcrd[1]*X[7+NA*2] + (-1.154700538379251e+00*X[3+NA*2]) );
G[2] += qq * ( tcrd[2]*X[7+NA*2] );
if ( LB > 1 ) { qq = qa[8]*qb[2] - qa[2]*qb[8]; } else { qq = qa[8]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[8+NA*2] + (1.154700538379251e+00*X[3+NA*2])+(-2.000000000000000e+00*X[8]) );
G[1] += qq * ( tcrd[1]*X[8+NA*2] + (1.154700538379251e+00*X[2+NA*2]) );
G[2] += qq * ( tcrd[2]*X[8+NA*2] );
if ( LB > 1 ) { qq = qa[4]*qb[3] - qa[3]*qb[4]; } else { qq = qa[4]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[4+NA*3] + (-6.666666666666666e-01*X[3+NA*2]) );
G[1] += qq * ( tcrd[1]*X[4+NA*3] + (-6.666666666666666e-01*X[3+NA*3])+(-2.000000000000000e+00*X[4]) );
G[2] += qq * ( tcrd[2]*X[4+NA*3] + (1.333333333333333e+00*X[3+NA]) );
if ( LB > 1 ) { qq = qa[5]*qb[3] - qa[3]*qb[5]; } else { qq = qa[5]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[5+NA*3] + (1.154700538379251e+00*X[3+NA]) );
G[1] += qq * ( tcrd[1]*X[5+NA*3] + (-2.000000000000000e+00*X[5]) );
G[2] += qq * ( tcrd[2]*X[5+NA*3] + (1.154700538379251e+00*X[3+NA*2]) );
if ( LB > 1 ) { qq = qa[6]*qb[3] - qa[3]*qb[6]; } else { qq = qa[6]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[6+NA*3] );
G[1] += qq * ( tcrd[1]*X[6+NA*3] + (1.154700538379251e+00*X[3+NA])+(-2.000000000000000e+00*X[6]) );
G[2] += qq * ( tcrd[2]*X[6+NA*3] + (1.154700538379251e+00*X[3+NA*3]) );
if ( LB > 1 ) { qq = qa[7]*qb[3] - qa[3]*qb[7]; } else { qq = qa[7]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[7+NA*3] + (1.154700538379251e+00*X[3+NA*2]) );
G[1] += qq * ( tcrd[1]*X[7+NA*3] + (-1.154700538379251e+00*X[3+NA*3])+(-2.000000000000000e+00*X[7]) );
G[2] += qq * ( tcrd[2]*X[7+NA*3] );
if ( LB > 1 ) { qq = qa[8]*qb[3] - qa[3]*qb[8]; } else { qq = qa[8]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[8+NA*3] + (1.154700538379251e+00*X[3+NA*3]) );
G[1] += qq * ( tcrd[1]*X[8+NA*3] + (1.154700538379251e+00*X[3+NA*2])+(-2.000000000000000e+00*X[8]) );
G[2] += qq * ( tcrd[2]*X[8+NA*3] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_DD( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[4]*qb[4];
G[0] += qq * ( tcrd[0]*X[4+NA*4] + (1.333333333333333e+00*X[4+NA*2]) );
G[1] += qq * ( tcrd[1]*X[4+NA*4] + (1.333333333333333e+00*X[4+NA*3]) );
G[2] += qq * ( tcrd[2]*X[4+NA*4] + (-2.666666666666667e+00*X[4+NA]) );
qq = qa[5]*qb[4] + qa[4]*qb[5];
G[0] += qq * ( tcrd[0]*X[5+NA*4] + (-1.154700538379251e+00*X[4+NA])+(6.666666666666666e-01*X[5+NA*2]) );
G[1] += qq * ( tcrd[1]*X[5+NA*4] + (6.666666666666666e-01*X[5+NA*3]) );
G[2] += qq * ( tcrd[2]*X[5+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(-1.333333333333333e+00*X[5+NA]) );
qq = qa[6]*qb[4] + qa[4]*qb[6];
G[0] += qq * ( tcrd[0]*X[6+NA*4] + (6.666666666666666e-01*X[6+NA*2]) );
G[1] += qq * ( tcrd[1]*X[6+NA*4] + (-1.154700538379251e+00*X[4+NA])+(6.666666666666666e-01*X[6+NA*3]) );
G[2] += qq * ( tcrd[2]*X[6+NA*4] + (-1.154700538379251e+00*X[4+NA*3])+(-1.333333333333333e+00*X[6+NA]) );
qq = qa[7]*qb[4] + qa[4]*qb[7];
G[0] += qq * ( tcrd[0]*X[7+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(6.666666666666666e-01*X[7+NA*2]) );
G[1] += qq * ( tcrd[1]*X[7+NA*4] + (1.154700538379251e+00*X[4+NA*3])+(6.666666666666666e-01*X[7+NA*3]) );
G[2] += qq * ( tcrd[2]*X[7+NA*4] + (-1.333333333333333e+00*X[7+NA]) );
qq = qa[8]*qb[4] + qa[4]*qb[8];
G[0] += qq * ( tcrd[0]*X[8+NA*4] + (-1.154700538379251e+00*X[4+NA*3])+(6.666666666666666e-01*X[8+NA*2]) );
G[1] += qq * ( tcrd[1]*X[8+NA*4] + (-1.154700538379251e+00*X[4+NA*2])+(6.666666666666666e-01*X[8+NA*3]) );
G[2] += qq * ( tcrd[2]*X[8+NA*4] + (-1.333333333333333e+00*X[8+NA]) );
qq = qa[5]*qb[5];
G[0] += qq * ( tcrd[0]*X[5+NA*5] + (-2.309401076758503e+00*X[5+NA]) );
G[1] += qq * ( tcrd[1]*X[5+NA*5] );
G[2] += qq * ( tcrd[2]*X[5+NA*5] + (-2.309401076758503e+00*X[5+NA*2]) );
qq = qa[6]*qb[5] + qa[5]*qb[6];
G[0] += qq * ( tcrd[0]*X[6+NA*5] + (-1.154700538379251e+00*X[6+NA]) );
G[1] += qq * ( tcrd[1]*X[6+NA*5] + (-1.154700538379251e+00*X[5+NA]) );
G[2] += qq * ( tcrd[2]*X[6+NA*5] + (-1.154700538379251e+00*X[5+NA*3])+(-1.154700538379251e+00*X[6+NA*2]) );
qq = qa[7]*qb[5] + qa[5]*qb[7];
G[0] += qq * ( tcrd[0]*X[7+NA*5] + (-1.154700538379251e+00*X[5+NA*2])+(-1.154700538379251e+00*X[7+NA]) );
G[1] += qq * ( tcrd[1]*X[7+NA*5] + (1.154700538379251e+00*X[5+NA*3]) );
G[2] += qq * ( tcrd[2]*X[7+NA*5] + (-1.154700538379251e+00*X[7+NA*2]) );
qq = qa[8]*qb[5] + qa[5]*qb[8];
G[0] += qq * ( tcrd[0]*X[8+NA*5] + (-1.154700538379251e+00*X[5+NA*3])+(-1.154700538379251e+00*X[8+NA]) );
G[1] += qq * ( tcrd[1]*X[8+NA*5] + (-1.154700538379251e+00*X[5+NA*2]) );
G[2] += qq * ( tcrd[2]*X[8+NA*5] + (-1.154700538379251e+00*X[8+NA*2]) );
qq = qa[6]*qb[6];
G[0] += qq * ( tcrd[0]*X[6+NA*6] );
G[1] += qq * ( tcrd[1]*X[6+NA*6] + (-2.309401076758503e+00*X[6+NA]) );
G[2] += qq * ( tcrd[2]*X[6+NA*6] + (-2.309401076758503e+00*X[6+NA*3]) );
qq = qa[7]*qb[6] + qa[6]*qb[7];
G[0] += qq * ( tcrd[0]*X[7+NA*6] + (-1.154700538379251e+00*X[6+NA*2]) );
G[1] += qq * ( tcrd[1]*X[7+NA*6] + (1.154700538379251e+00*X[6+NA*3])+(-1.154700538379251e+00*X[7+NA]) );
G[2] += qq * ( tcrd[2]*X[7+NA*6] + (-1.154700538379251e+00*X[7+NA*3]) );
qq = qa[8]*qb[6] + qa[6]*qb[8];
G[0] += qq * ( tcrd[0]*X[8+NA*6] + (-1.154700538379251e+00*X[6+NA*3]) );
G[1] += qq * ( tcrd[1]*X[8+NA*6] + (-1.154700538379251e+00*X[6+NA*2])+(-1.154700538379251e+00*X[8+NA]) );
G[2] += qq * ( tcrd[2]*X[8+NA*6] + (-1.154700538379251e+00*X[8+NA*3]) );
qq = qa[7]*qb[7];
G[0] += qq * ( tcrd[0]*X[7+NA*7] + (-2.309401076758503e+00*X[7+NA*2]) );
G[1] += qq * ( tcrd[1]*X[7+NA*7] + (2.309401076758503e+00*X[7+NA*3]) );
G[2] += qq * ( tcrd[2]*X[7+NA*7] );
qq = qa[8]*qb[7] + qa[7]*qb[8];
G[0] += qq * ( tcrd[0]*X[8+NA*7] + (-1.154700538379251e+00*X[7+NA*3])+(-1.154700538379251e+00*X[8+NA*2]) );
G[1] += qq * ( tcrd[1]*X[8+NA*7] + (-1.154700538379251e+00*X[7+NA*2])+(1.154700538379251e+00*X[8+NA*3]) );
G[2] += qq * ( tcrd[2]*X[8+NA*7] );
qq = qa[8]*qb[8];
G[0] += qq * ( tcrd[0]*X[8+NA*8] + (-2.309401076758503e+00*X[8+NA*3]) );
G[1] += qq * ( tcrd[1]*X[8+NA*8] + (-2.309401076758503e+00*X[8+NA*2]) );
G[2] += qq * ( tcrd[2]*X[8+NA*8] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_FS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 2 ) { qq = qa[9]*qb[0] - qa[0]*qb[9]; } else { qq = qa[9]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[9] + (-6.928203230275510e-01*X[5]) );
G[1] += qq * ( tcrd[1]*X[9] + (-6.928203230275510e-01*X[6]) );
G[2] += qq * ( tcrd[2]*X[9] + (1.200000000000000e+00*X[4]) );
if ( LB > 2 ) { qq = qa[10]*qb[0] - qa[0]*qb[10]; } else { qq = qa[10]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[10] + (9.797958971132712e-01*X[4])+(-2.828427124746190e-01*X[7]) );
G[1] += qq * ( tcrd[1]*X[10] + (-2.828427124746190e-01*X[8]) );
G[2] += qq * ( tcrd[2]*X[10] + (1.131370849898476e+00*X[5]) );
if ( LB > 2 ) { qq = qa[11]*qb[0] - qa[0]*qb[11]; } else { qq = qa[11]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[11] + (-2.828427124746190e-01*X[8]) );
G[1] += qq * ( tcrd[1]*X[11] + (9.797958971132712e-01*X[4])+(2.828427124746190e-01*X[7]) );
G[2] += qq * ( tcrd[2]*X[11] + (1.131370849898476e+00*X[6]) );
if ( LB > 2 ) { qq = qa[12]*qb[0] - qa[0]*qb[12]; } else { qq = qa[12]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[12] + (8.944271909999160e-01*X[5]) );
G[1] += qq * ( tcrd[1]*X[12] + (-8.944271909999160e-01*X[6]) );
G[2] += qq * ( tcrd[2]*X[12] + (8.944271909999160e-01*X[7]) );
if ( LB > 2 ) { qq = qa[13]*qb[0] - qa[0]*qb[13]; } else { qq = qa[13]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[13] + (8.944271909999160e-01*X[6]) );
G[1] += qq * ( tcrd[1]*X[13] + (8.944271909999160e-01*X[5]) );
G[2] += qq * ( tcrd[2]*X[13] + (8.944271909999160e-01*X[8]) );
if ( LB > 2 ) { qq = qa[14]*qb[0] - qa[0]*qb[14]; } else { qq = qa[14]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[14] + (1.095445115010332e+00*X[7]) );
G[1] += qq * ( tcrd[1]*X[14] + (-1.095445115010332e+00*X[8]) );
G[2] += qq * ( tcrd[2]*X[14] );
if ( LB > 2 ) { qq = qa[15]*qb[0] - qa[0]*qb[15]; } else { qq = qa[15]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[15] + (1.095445115010332e+00*X[8]) );
G[1] += qq * ( tcrd[1]*X[15] + (1.095445115010332e+00*X[7]) );
G[2] += qq * ( tcrd[2]*X[15] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_FP( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 2 ) { qq = qa[9]*qb[1] + qa[1]*qb[9]; } else { qq = qa[9]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[9+NA] + (-6.928203230275510e-01*X[5+NA]) );
G[1] += qq * ( tcrd[1]*X[9+NA] + (-6.928203230275510e-01*X[6+NA]) );
G[2] += qq * ( tcrd[2]*X[9+NA] + (1.200000000000000e+00*X[4+NA])+(-2.000000000000000e+00*X[9]) );
if ( LB > 2 ) { qq = qa[10]*qb[1] + qa[1]*qb[10]; } else { qq = qa[10]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[10+NA] + (9.797958971132712e-01*X[4+NA])+(-2.828427124746190e-01*X[7+NA]) );
G[1] += qq * ( tcrd[1]*X[10+NA] + (-2.828427124746190e-01*X[8+NA]) );
G[2] += qq * ( tcrd[2]*X[10+NA] + (1.131370849898476e+00*X[5+NA])+(-2.000000000000000e+00*X[10]) );
if ( LB > 2 ) { qq = qa[11]*qb[1] + qa[1]*qb[11]; } else { qq = qa[11]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[11+NA] + (-2.828427124746190e-01*X[8+NA]) );
G[1] += qq * ( tcrd[1]*X[11+NA] + (9.797958971132712e-01*X[4+NA])+(2.828427124746190e-01*X[7+NA]) );
G[2] += qq * ( tcrd[2]*X[11+NA] + (1.131370849898476e+00*X[6+NA])+(-2.000000000000000e+00*X[11]) );
if ( LB > 2 ) { qq = qa[12]*qb[1] + qa[1]*qb[12]; } else { qq = qa[12]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[12+NA] + (8.944271909999160e-01*X[5+NA]) );
G[1] += qq * ( tcrd[1]*X[12+NA] + (-8.944271909999160e-01*X[6+NA]) );
G[2] += qq * ( tcrd[2]*X[12+NA] + (8.944271909999160e-01*X[7+NA])+(-2.000000000000000e+00*X[12]) );
if ( LB > 2 ) { qq = qa[13]*qb[1] + qa[1]*qb[13]; } else { qq = qa[13]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[13+NA] + (8.944271909999160e-01*X[6+NA]) );
G[1] += qq * ( tcrd[1]*X[13+NA] + (8.944271909999160e-01*X[5+NA]) );
G[2] += qq * ( tcrd[2]*X[13+NA] + (8.944271909999160e-01*X[8+NA])+(-2.000000000000000e+00*X[13]) );
if ( LB > 2 ) { qq = qa[14]*qb[1] + qa[1]*qb[14]; } else { qq = qa[14]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[14+NA] + (1.095445115010332e+00*X[7+NA]) );
G[1] += qq * ( tcrd[1]*X[14+NA] + (-1.095445115010332e+00*X[8+NA]) );
G[2] += qq * ( tcrd[2]*X[14+NA] + (-2.000000000000000e+00*X[14]) );
if ( LB > 2 ) { qq = qa[15]*qb[1] + qa[1]*qb[15]; } else { qq = qa[15]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[15+NA] + (1.095445115010332e+00*X[8+NA]) );
G[1] += qq * ( tcrd[1]*X[15+NA] + (1.095445115010332e+00*X[7+NA]) );
G[2] += qq * ( tcrd[2]*X[15+NA] + (-2.000000000000000e+00*X[15]) );
if ( LB > 2 ) { qq = qa[9]*qb[2] + qa[2]*qb[9]; } else { qq = qa[9]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[9+NA*2] + (-6.928203230275510e-01*X[5+NA*2])+(-2.000000000000000e+00*X[9]) );
G[1] += qq * ( tcrd[1]*X[9+NA*2] + (-6.928203230275510e-01*X[6+NA*2]) );
G[2] += qq * ( tcrd[2]*X[9+NA*2] + (1.200000000000000e+00*X[4+NA*2]) );
if ( LB > 2 ) { qq = qa[10]*qb[2] + qa[2]*qb[10]; } else { qq = qa[10]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[10+NA*2] + (9.797958971132712e-01*X[4+NA*2])+(-2.828427124746190e-01*X[7+NA*2])+(-2.000000000000000e+00*X[10]) );
G[1] += qq * ( tcrd[1]*X[10+NA*2] + (-2.828427124746190e-01*X[8+NA*2]) );
G[2] += qq * ( tcrd[2]*X[10+NA*2] + (1.131370849898476e+00*X[5+NA*2]) );
if ( LB > 2 ) { qq = qa[11]*qb[2] + qa[2]*qb[11]; } else { qq = qa[11]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[11+NA*2] + (-2.828427124746190e-01*X[8+NA*2])+(-2.000000000000000e+00*X[11]) );
G[1] += qq * ( tcrd[1]*X[11+NA*2] + (9.797958971132712e-01*X[4+NA*2])+(2.828427124746190e-01*X[7+NA*2]) );
G[2] += qq * ( tcrd[2]*X[11+NA*2] + (1.131370849898476e+00*X[6+NA*2]) );
if ( LB > 2 ) { qq = qa[12]*qb[2] + qa[2]*qb[12]; } else { qq = qa[12]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[12+NA*2] + (8.944271909999160e-01*X[5+NA*2])+(-2.000000000000000e+00*X[12]) );
G[1] += qq * ( tcrd[1]*X[12+NA*2] + (-8.944271909999160e-01*X[6+NA*2]) );
G[2] += qq * ( tcrd[2]*X[12+NA*2] + (8.944271909999160e-01*X[7+NA*2]) );
if ( LB > 2 ) { qq = qa[13]*qb[2] + qa[2]*qb[13]; } else { qq = qa[13]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[13+NA*2] + (8.944271909999160e-01*X[6+NA*2])+(-2.000000000000000e+00*X[13]) );
G[1] += qq * ( tcrd[1]*X[13+NA*2] + (8.944271909999160e-01*X[5+NA*2]) );
G[2] += qq * ( tcrd[2]*X[13+NA*2] + (8.944271909999160e-01*X[8+NA*2]) );
if ( LB > 2 ) { qq = qa[14]*qb[2] + qa[2]*qb[14]; } else { qq = qa[14]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[14+NA*2] + (1.095445115010332e+00*X[7+NA*2])+(-2.000000000000000e+00*X[14]) );
G[1] += qq * ( tcrd[1]*X[14+NA*2] + (-1.095445115010332e+00*X[8+NA*2]) );
G[2] += qq * ( tcrd[2]*X[14+NA*2] );
if ( LB > 2 ) { qq = qa[15]*qb[2] + qa[2]*qb[15]; } else { qq = qa[15]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[15+NA*2] + (1.095445115010332e+00*X[8+NA*2])+(-2.000000000000000e+00*X[15]) );
G[1] += qq * ( tcrd[1]*X[15+NA*2] + (1.095445115010332e+00*X[7+NA*2]) );
G[2] += qq * ( tcrd[2]*X[15+NA*2] );
if ( LB > 2 ) { qq = qa[9]*qb[3] + qa[3]*qb[9]; } else { qq = qa[9]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[9+NA*3] + (-6.928203230275510e-01*X[5+NA*3]) );
G[1] += qq * ( tcrd[1]*X[9+NA*3] + (-6.928203230275510e-01*X[6+NA*3])+(-2.000000000000000e+00*X[9]) );
G[2] += qq * ( tcrd[2]*X[9+NA*3] + (1.200000000000000e+00*X[4+NA*3]) );
if ( LB > 2 ) { qq = qa[10]*qb[3] + qa[3]*qb[10]; } else { qq = qa[10]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[10+NA*3] + (9.797958971132712e-01*X[4+NA*3])+(-2.828427124746190e-01*X[7+NA*3]) );
G[1] += qq * ( tcrd[1]*X[10+NA*3] + (-2.828427124746190e-01*X[8+NA*3])+(-2.000000000000000e+00*X[10]) );
G[2] += qq * ( tcrd[2]*X[10+NA*3] + (1.131370849898476e+00*X[5+NA*3]) );
if ( LB > 2 ) { qq = qa[11]*qb[3] + qa[3]*qb[11]; } else { qq = qa[11]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[11+NA*3] + (-2.828427124746190e-01*X[8+NA*3]) );
G[1] += qq * ( tcrd[1]*X[11+NA*3] + (9.797958971132712e-01*X[4+NA*3])+(2.828427124746190e-01*X[7+NA*3])+(-2.000000000000000e+00*X[11]) );
G[2] += qq * ( tcrd[2]*X[11+NA*3] + (1.131370849898476e+00*X[6+NA*3]) );
if ( LB > 2 ) { qq = qa[12]*qb[3] + qa[3]*qb[12]; } else { qq = qa[12]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[12+NA*3] + (8.944271909999160e-01*X[5+NA*3]) );
G[1] += qq * ( tcrd[1]*X[12+NA*3] + (-8.944271909999160e-01*X[6+NA*3])+(-2.000000000000000e+00*X[12]) );
G[2] += qq * ( tcrd[2]*X[12+NA*3] + (8.944271909999160e-01*X[7+NA*3]) );
if ( LB > 2 ) { qq = qa[13]*qb[3] + qa[3]*qb[13]; } else { qq = qa[13]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[13+NA*3] + (8.944271909999160e-01*X[6+NA*3]) );
G[1] += qq * ( tcrd[1]*X[13+NA*3] + (8.944271909999160e-01*X[5+NA*3])+(-2.000000000000000e+00*X[13]) );
G[2] += qq * ( tcrd[2]*X[13+NA*3] + (8.944271909999160e-01*X[8+NA*3]) );
if ( LB > 2 ) { qq = qa[14]*qb[3] + qa[3]*qb[14]; } else { qq = qa[14]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[14+NA*3] + (1.095445115010332e+00*X[7+NA*3]) );
G[1] += qq * ( tcrd[1]*X[14+NA*3] + (-1.095445115010332e+00*X[8+NA*3])+(-2.000000000000000e+00*X[14]) );
G[2] += qq * ( tcrd[2]*X[14+NA*3] );
if ( LB > 2 ) { qq = qa[15]*qb[3] + qa[3]*qb[15]; } else { qq = qa[15]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[15+NA*3] + (1.095445115010332e+00*X[8+NA*3]) );
G[1] += qq * ( tcrd[1]*X[15+NA*3] + (1.095445115010332e+00*X[7+NA*3])+(-2.000000000000000e+00*X[15]) );
G[2] += qq * ( tcrd[2]*X[15+NA*3] );
}

template <int NA,int LB>
void ExpHobGrdAcc_FD( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 2 ) { qq = qa[9]*qb[4] - qa[4]*qb[9]; } else { qq = qa[9]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[9+NA*4] + (-6.928203230275510e-01*X[5+NA*4])+(6.666666666666666e-01*X[9+NA*2]) );
G[1] += qq * ( tcrd[1]*X[9+NA*4] + (-6.928203230275510e-01*X[6+NA*4])+(6.666666666666666e-01*X[9+NA*3]) );
G[2] += qq * ( tcrd[2]*X[9+NA*4] + (1.200000000000000e+00*X[4+NA*4])+(-1.333333333333333e+00*X[9+NA]) );
if ( LB > 2 ) { qq = qa[10]*qb[4] - qa[4]*qb[10]; } else { qq = qa[10]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[10+NA*4] + (9.797958971132712e-01*X[4+NA*4])+(-2.828427124746190e-01*X[7+NA*4])+(6.666666666666666e-01*X[10+NA*2]) );
G[1] += qq * ( tcrd[1]*X[10+NA*4] + (-2.828427124746190e-01*X[8+NA*4])+(6.666666666666666e-01*X[10+NA*3]) );
G[2] += qq * ( tcrd[2]*X[10+NA*4] + (1.131370849898476e+00*X[5+NA*4])+(-1.333333333333333e+00*X[10+NA]) );
if ( LB > 2 ) { qq = qa[11]*qb[4] - qa[4]*qb[11]; } else { qq = qa[11]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[11+NA*4] + (-2.828427124746190e-01*X[8+NA*4])+(6.666666666666666e-01*X[11+NA*2]) );
G[1] += qq * ( tcrd[1]*X[11+NA*4] + (9.797958971132712e-01*X[4+NA*4])+(2.828427124746190e-01*X[7+NA*4])+(6.666666666666666e-01*X[11+NA*3]) );
G[2] += qq * ( tcrd[2]*X[11+NA*4] + (1.131370849898476e+00*X[6+NA*4])+(-1.333333333333333e+00*X[11+NA]) );
if ( LB > 2 ) { qq = qa[12]*qb[4] - qa[4]*qb[12]; } else { qq = qa[12]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[12+NA*4] + (8.944271909999160e-01*X[5+NA*4])+(6.666666666666666e-01*X[12+NA*2]) );
G[1] += qq * ( tcrd[1]*X[12+NA*4] + (-8.944271909999160e-01*X[6+NA*4])+(6.666666666666666e-01*X[12+NA*3]) );
G[2] += qq * ( tcrd[2]*X[12+NA*4] + (8.944271909999160e-01*X[7+NA*4])+(-1.333333333333333e+00*X[12+NA]) );
if ( LB > 2 ) { qq = qa[13]*qb[4] - qa[4]*qb[13]; } else { qq = qa[13]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[13+NA*4] + (8.944271909999160e-01*X[6+NA*4])+(6.666666666666666e-01*X[13+NA*2]) );
G[1] += qq * ( tcrd[1]*X[13+NA*4] + (8.944271909999160e-01*X[5+NA*4])+(6.666666666666666e-01*X[13+NA*3]) );
G[2] += qq * ( tcrd[2]*X[13+NA*4] + (8.944271909999160e-01*X[8+NA*4])+(-1.333333333333333e+00*X[13+NA]) );
if ( LB > 2 ) { qq = qa[14]*qb[4] - qa[4]*qb[14]; } else { qq = qa[14]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[14+NA*4] + (1.095445115010332e+00*X[7+NA*4])+(6.666666666666666e-01*X[14+NA*2]) );
G[1] += qq * ( tcrd[1]*X[14+NA*4] + (-1.095445115010332e+00*X[8+NA*4])+(6.666666666666666e-01*X[14+NA*3]) );
G[2] += qq * ( tcrd[2]*X[14+NA*4] + (-1.333333333333333e+00*X[14+NA]) );
if ( LB > 2 ) { qq = qa[15]*qb[4] - qa[4]*qb[15]; } else { qq = qa[15]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[15+NA*4] + (1.095445115010332e+00*X[8+NA*4])+(6.666666666666666e-01*X[15+NA*2]) );
G[1] += qq * ( tcrd[1]*X[15+NA*4] + (1.095445115010332e+00*X[7+NA*4])+(6.666666666666666e-01*X[15+NA*3]) );
G[2] += qq * ( tcrd[2]*X[15+NA*4] + (-1.333333333333333e+00*X[15+NA]) );
if ( LB > 2 ) { qq = qa[9]*qb[5] - qa[5]*qb[9]; } else { qq = qa[9]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[9+NA*5] + (-6.928203230275510e-01*X[5+NA*5])+(-1.154700538379251e+00*X[9+NA]) );
G[1] += qq * ( tcrd[1]*X[9+NA*5] + (-6.928203230275510e-01*X[6+NA*5]) );
G[2] += qq * ( tcrd[2]*X[9+NA*5] + (1.200000000000000e+00*X[5+NA*4])+(-1.154700538379251e+00*X[9+NA*2]) );
if ( LB > 2 ) { qq = qa[10]*qb[5] - qa[5]*qb[10]; } else { qq = qa[10]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[10+NA*5] + (9.797958971132712e-01*X[5+NA*4])+(-2.828427124746190e-01*X[7+NA*5])+(-1.154700538379251e+00*X[10+NA]) );
G[1] += qq * ( tcrd[1]*X[10+NA*5] + (-2.828427124746190e-01*X[8+NA*5]) );
G[2] += qq * ( tcrd[2]*X[10+NA*5] + (1.131370849898476e+00*X[5+NA*5])+(-1.154700538379251e+00*X[10+NA*2]) );
if ( LB > 2 ) { qq = qa[11]*qb[5] - qa[5]*qb[11]; } else { qq = qa[11]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[11+NA*5] + (-2.828427124746190e-01*X[8+NA*5])+(-1.154700538379251e+00*X[11+NA]) );
G[1] += qq * ( tcrd[1]*X[11+NA*5] + (9.797958971132712e-01*X[5+NA*4])+(2.828427124746190e-01*X[7+NA*5]) );
G[2] += qq * ( tcrd[2]*X[11+NA*5] + (1.131370849898476e+00*X[6+NA*5])+(-1.154700538379251e+00*X[11+NA*2]) );
if ( LB > 2 ) { qq = qa[12]*qb[5] - qa[5]*qb[12]; } else { qq = qa[12]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[12+NA*5] + (8.944271909999160e-01*X[5+NA*5])+(-1.154700538379251e+00*X[12+NA]) );
G[1] += qq * ( tcrd[1]*X[12+NA*5] + (-8.944271909999160e-01*X[6+NA*5]) );
G[2] += qq * ( tcrd[2]*X[12+NA*5] + (8.944271909999160e-01*X[7+NA*5])+(-1.154700538379251e+00*X[12+NA*2]) );
if ( LB > 2 ) { qq = qa[13]*qb[5] - qa[5]*qb[13]; } else { qq = qa[13]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[13+NA*5] + (8.944271909999160e-01*X[6+NA*5])+(-1.154700538379251e+00*X[13+NA]) );
G[1] += qq * ( tcrd[1]*X[13+NA*5] + (8.944271909999160e-01*X[5+NA*5]) );
G[2] += qq * ( tcrd[2]*X[13+NA*5] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[13+NA*2]) );
if ( LB > 2 ) { qq = qa[14]*qb[5] - qa[5]*qb[14]; } else { qq = qa[14]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[14+NA*5] + (1.095445115010332e+00*X[7+NA*5])+(-1.154700538379251e+00*X[14+NA]) );
G[1] += qq * ( tcrd[1]*X[14+NA*5] + (-1.095445115010332e+00*X[8+NA*5]) );
G[2] += qq * ( tcrd[2]*X[14+NA*5] + (-1.154700538379251e+00*X[14+NA*2]) );
if ( LB > 2 ) { qq = qa[15]*qb[5] - qa[5]*qb[15]; } else { qq = qa[15]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[15+NA*5] + (1.095445115010332e+00*X[8+NA*5])+(-1.154700538379251e+00*X[15+NA]) );
G[1] += qq * ( tcrd[1]*X[15+NA*5] + (1.095445115010332e+00*X[7+NA*5]) );
G[2] += qq * ( tcrd[2]*X[15+NA*5] + (-1.154700538379251e+00*X[15+NA*2]) );
if ( LB > 2 ) { qq = qa[9]*qb[6] - qa[6]*qb[9]; } else { qq = qa[9]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[9+NA*6] + (-6.928203230275510e-01*X[6+NA*5]) );
G[1] += qq * ( tcrd[1]*X[9+NA*6] + (-6.928203230275510e-01*X[6+NA*6])+(-1.154700538379251e+00*X[9+NA]) );
G[2] += qq * ( tcrd[2]*X[9+NA*6] + (1.200000000000000e+00*X[6+NA*4])+(-1.154700538379251e+00*X[9+NA*3]) );
if ( LB > 2 ) { qq = qa[10]*qb[6] - qa[6]*qb[10]; } else { qq = qa[10]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[10+NA*6] + (9.797958971132712e-01*X[6+NA*4])+(-2.828427124746190e-01*X[7+NA*6]) );
G[1] += qq * ( tcrd[1]*X[10+NA*6] + (-2.828427124746190e-01*X[8+NA*6])+(-1.154700538379251e+00*X[10+NA]) );
G[2] += qq * ( tcrd[2]*X[10+NA*6] + (1.131370849898476e+00*X[6+NA*5])+(-1.154700538379251e+00*X[10+NA*3]) );
if ( LB > 2 ) { qq = qa[11]*qb[6] - qa[6]*qb[11]; } else { qq = qa[11]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[11+NA*6] + (-2.828427124746190e-01*X[8+NA*6]) );
G[1] += qq * ( tcrd[1]*X[11+NA*6] + (9.797958971132712e-01*X[6+NA*4])+(2.828427124746190e-01*X[7+NA*6])+(-1.154700538379251e+00*X[11+NA]) );
G[2] += qq * ( tcrd[2]*X[11+NA*6] + (1.131370849898476e+00*X[6+NA*6])+(-1.154700538379251e+00*X[11+NA*3]) );
if ( LB > 2 ) { qq = qa[12]*qb[6] - qa[6]*qb[12]; } else { qq = qa[12]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[12+NA*6] + (8.944271909999160e-01*X[6+NA*5]) );
G[1] += qq * ( tcrd[1]*X[12+NA*6] + (-8.944271909999160e-01*X[6+NA*6])+(-1.154700538379251e+00*X[12+NA]) );
G[2] += qq * ( tcrd[2]*X[12+NA*6] + (8.944271909999160e-01*X[7+NA*6])+(-1.154700538379251e+00*X[12+NA*3]) );
if ( LB > 2 ) { qq = qa[13]*qb[6] - qa[6]*qb[13]; } else { qq = qa[13]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[13+NA*6] + (8.944271909999160e-01*X[6+NA*6]) );
G[1] += qq * ( tcrd[1]*X[13+NA*6] + (8.944271909999160e-01*X[6+NA*5])+(-1.154700538379251e+00*X[13+NA]) );
G[2] += qq * ( tcrd[2]*X[13+NA*6] + (8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[13+NA*3]) );
if ( LB > 2 ) { qq = qa[14]*qb[6] - qa[6]*qb[14]; } else { qq = qa[14]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[14+NA*6] + (1.095445115010332e+00*X[7+NA*6]) );
G[1] += qq * ( tcrd[1]*X[14+NA*6] + (-1.095445115010332e+00*X[8+NA*6])+(-1.154700538379251e+00*X[14+NA]) );
G[2] += qq * ( tcrd[2]*X[14+NA*6] + (-1.154700538379251e+00*X[14+NA*3]) );
if ( LB > 2 ) { qq = qa[15]*qb[6] - qa[6]*qb[15]; } else { qq = qa[15]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[15+NA*6] + (1.095445115010332e+00*X[8+NA*6]) );
G[1] += qq * ( tcrd[1]*X[15+NA*6] + (1.095445115010332e+00*X[7+NA*6])+(-1.154700538379251e+00*X[15+NA]) );
G[2] += qq * ( tcrd[2]*X[15+NA*6] + (-1.154700538379251e+00*X[15+NA*3]) );
if ( LB > 2 ) { qq = qa[9]*qb[7] - qa[7]*qb[9]; } else { qq = qa[9]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[9+NA*7] + (-6.928203230275510e-01*X[7+NA*5])+(-1.154700538379251e+00*X[9+NA*2]) );
G[1] += qq * ( tcrd[1]*X[9+NA*7] + (-6.928203230275510e-01*X[7+NA*6])+(1.154700538379251e+00*X[9+NA*3]) );
G[2] += qq * ( tcrd[2]*X[9+NA*7] + (1.200000000000000e+00*X[7+NA*4]) );
if ( LB > 2 ) { qq = qa[10]*qb[7] - qa[7]*qb[10]; } else { qq = qa[10]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[10+NA*7] + (9.797958971132712e-01*X[7+NA*4])+(-2.828427124746190e-01*X[7+NA*7])+(-1.154700538379251e+00*X[10+NA*2]) );
G[1] += qq * ( tcrd[1]*X[10+NA*7] + (-2.828427124746190e-01*X[8+NA*7])+(1.154700538379251e+00*X[10+NA*3]) );
G[2] += qq * ( tcrd[2]*X[10+NA*7] + (1.131370849898476e+00*X[7+NA*5]) );
if ( LB > 2 ) { qq = qa[11]*qb[7] - qa[7]*qb[11]; } else { qq = qa[11]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[11+NA*7] + (-2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[11+NA*2]) );
G[1] += qq * ( tcrd[1]*X[11+NA*7] + (9.797958971132712e-01*X[7+NA*4])+(2.828427124746190e-01*X[7+NA*7])+(1.154700538379251e+00*X[11+NA*3]) );
G[2] += qq * ( tcrd[2]*X[11+NA*7] + (1.131370849898476e+00*X[7+NA*6]) );
if ( LB > 2 ) { qq = qa[12]*qb[7] - qa[7]*qb[12]; } else { qq = qa[12]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[12+NA*7] + (8.944271909999160e-01*X[7+NA*5])+(-1.154700538379251e+00*X[12+NA*2]) );
G[1] += qq * ( tcrd[1]*X[12+NA*7] + (-8.944271909999160e-01*X[7+NA*6])+(1.154700538379251e+00*X[12+NA*3]) );
G[2] += qq * ( tcrd[2]*X[12+NA*7] + (8.944271909999160e-01*X[7+NA*7]) );
if ( LB > 2 ) { qq = qa[13]*qb[7] - qa[7]*qb[13]; } else { qq = qa[13]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[13+NA*7] + (8.944271909999160e-01*X[7+NA*6])+(-1.154700538379251e+00*X[13+NA*2]) );
G[1] += qq * ( tcrd[1]*X[13+NA*7] + (8.944271909999160e-01*X[7+NA*5])+(1.154700538379251e+00*X[13+NA*3]) );
G[2] += qq * ( tcrd[2]*X[13+NA*7] + (8.944271909999160e-01*X[8+NA*7]) );
if ( LB > 2 ) { qq = qa[14]*qb[7] - qa[7]*qb[14]; } else { qq = qa[14]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[14+NA*7] + (1.095445115010332e+00*X[7+NA*7])+(-1.154700538379251e+00*X[14+NA*2]) );
G[1] += qq * ( tcrd[1]*X[14+NA*7] + (-1.095445115010332e+00*X[8+NA*7])+(1.154700538379251e+00*X[14+NA*3]) );
G[2] += qq * ( tcrd[2]*X[14+NA*7] );
if ( LB > 2 ) { qq = qa[15]*qb[7] - qa[7]*qb[15]; } else { qq = qa[15]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[15+NA*7] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[15+NA*2]) );
G[1] += qq * ( tcrd[1]*X[15+NA*7] + (1.095445115010332e+00*X[7+NA*7])+(1.154700538379251e+00*X[15+NA*3]) );
G[2] += qq * ( tcrd[2]*X[15+NA*7] );
if ( LB > 2 ) { qq = qa[9]*qb[8] - qa[8]*qb[9]; } else { qq = qa[9]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[9+NA*8] + (-6.928203230275510e-01*X[8+NA*5])+(-1.154700538379251e+00*X[9+NA*3]) );
G[1] += qq * ( tcrd[1]*X[9+NA*8] + (-6.928203230275510e-01*X[8+NA*6])+(-1.154700538379251e+00*X[9+NA*2]) );
G[2] += qq * ( tcrd[2]*X[9+NA*8] + (1.200000000000000e+00*X[8+NA*4]) );
if ( LB > 2 ) { qq = qa[10]*qb[8] - qa[8]*qb[10]; } else { qq = qa[10]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[10+NA*8] + (9.797958971132712e-01*X[8+NA*4])+(-2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[10+NA*3]) );
G[1] += qq * ( tcrd[1]*X[10+NA*8] + (-2.828427124746190e-01*X[8+NA*8])+(-1.154700538379251e+00*X[10+NA*2]) );
G[2] += qq * ( tcrd[2]*X[10+NA*8] + (1.131370849898476e+00*X[8+NA*5]) );
if ( LB > 2 ) { qq = qa[11]*qb[8] - qa[8]*qb[11]; } else { qq = qa[11]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[11+NA*8] + (-2.828427124746190e-01*X[8+NA*8])+(-1.154700538379251e+00*X[11+NA*3]) );
G[1] += qq * ( tcrd[1]*X[11+NA*8] + (9.797958971132712e-01*X[8+NA*4])+(2.828427124746190e-01*X[8+NA*7])+(-1.154700538379251e+00*X[11+NA*2]) );
G[2] += qq * ( tcrd[2]*X[11+NA*8] + (1.131370849898476e+00*X[8+NA*6]) );
if ( LB > 2 ) { qq = qa[12]*qb[8] - qa[8]*qb[12]; } else { qq = qa[12]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[12+NA*8] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[12+NA*3]) );
G[1] += qq * ( tcrd[1]*X[12+NA*8] + (-8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[12+NA*2]) );
G[2] += qq * ( tcrd[2]*X[12+NA*8] + (8.944271909999160e-01*X[8+NA*7]) );
if ( LB > 2 ) { qq = qa[13]*qb[8] - qa[8]*qb[13]; } else { qq = qa[13]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*6])+(-1.154700538379251e+00*X[13+NA*3]) );
G[1] += qq * ( tcrd[1]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*5])+(-1.154700538379251e+00*X[13+NA*2]) );
G[2] += qq * ( tcrd[2]*X[13+NA*8] + (8.944271909999160e-01*X[8+NA*8]) );
if ( LB > 2 ) { qq = qa[14]*qb[8] - qa[8]*qb[14]; } else { qq = qa[14]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[14+NA*8] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[14+NA*3]) );
G[1] += qq * ( tcrd[1]*X[14+NA*8] + (-1.095445115010332e+00*X[8+NA*8])+(-1.154700538379251e+00*X[14+NA*2]) );
G[2] += qq * ( tcrd[2]*X[14+NA*8] );
if ( LB > 2 ) { qq = qa[15]*qb[8] - qa[8]*qb[15]; } else { qq = qa[15]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[15+NA*8] + (1.095445115010332e+00*X[8+NA*8])+(-1.154700538379251e+00*X[15+NA*3]) );
G[1] += qq * ( tcrd[1]*X[15+NA*8] + (1.095445115010332e+00*X[8+NA*7])+(-1.154700538379251e+00*X[15+NA*2]) );
G[2] += qq * ( tcrd[2]*X[15+NA*8] );
}

template <int NA,int LB>
void ExpHobGrdAcc_FF( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[9]*qb[9];
G[0] += qq * ( tcrd[0]*X[9+NA*9] + (1.385640646055102e+00*X[9+NA*5]) );
G[1] += qq * ( tcrd[1]*X[9+NA*9] + (1.385640646055102e+00*X[9+NA*6]) );
G[2] += qq * ( tcrd[2]*X[9+NA*9] + (-2.400000000000000e+00*X[9+NA*4]) );
qq = qa[10]*qb[9] + qa[9]*qb[10];
G[0] += qq * ( tcrd[0]*X[10+NA*9] + (-9.797958971132712e-01*X[9+NA*4])+(2.828427124746190e-01*X[9+NA*7])+(6.928203230275510e-01*X[10+NA*5]) );
G[1] += qq * ( tcrd[1]*X[10+NA*9] + (2.828427124746190e-01*X[9+NA*8])+(6.928203230275510e-01*X[10+NA*6]) );
G[2] += qq * ( tcrd[2]*X[10+NA*9] + (-1.131370849898476e+00*X[9+NA*5])+(-1.200000000000000e+00*X[10+NA*4]) );
qq = qa[11]*qb[9] + qa[9]*qb[11];
G[0] += qq * ( tcrd[0]*X[11+NA*9] + (2.828427124746190e-01*X[9+NA*8])+(6.928203230275510e-01*X[11+NA*5]) );
G[1] += qq * ( tcrd[1]*X[11+NA*9] + (-9.797958971132712e-01*X[9+NA*4])+(-2.828427124746190e-01*X[9+NA*7])+(6.928203230275510e-01*X[11+NA*6]) );
G[2] += qq * ( tcrd[2]*X[11+NA*9] + (-1.131370849898476e+00*X[9+NA*6])+(-1.200000000000000e+00*X[11+NA*4]) );
qq = qa[12]*qb[9] + qa[9]*qb[12];
G[0] += qq * ( tcrd[0]*X[12+NA*9] + (-8.944271909999160e-01*X[9+NA*5])+(6.928203230275510e-01*X[12+NA*5]) );
G[1] += qq * ( tcrd[1]*X[12+NA*9] + (8.944271909999160e-01*X[9+NA*6])+(6.928203230275510e-01*X[12+NA*6]) );
G[2] += qq * ( tcrd[2]*X[12+NA*9] + (-8.944271909999160e-01*X[9+NA*7])+(-1.200000000000000e+00*X[12+NA*4]) );
qq = qa[13]*qb[9] + qa[9]*qb[13];
G[0] += qq * ( tcrd[0]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*6])+(6.928203230275510e-01*X[13+NA*5]) );
G[1] += qq * ( tcrd[1]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*5])+(6.928203230275510e-01*X[13+NA*6]) );
G[2] += qq * ( tcrd[2]*X[13+NA*9] + (-8.944271909999160e-01*X[9+NA*8])+(-1.200000000000000e+00*X[13+NA*4]) );
qq = qa[14]*qb[9] + qa[9]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*9] + (-1.095445115010332e+00*X[9+NA*7])+(6.928203230275510e-01*X[14+NA*5]) );
G[1] += qq * ( tcrd[1]*X[14+NA*9] + (1.095445115010332e+00*X[9+NA*8])+(6.928203230275510e-01*X[14+NA*6]) );
G[2] += qq * ( tcrd[2]*X[14+NA*9] + (-1.200000000000000e+00*X[14+NA*4]) );
qq = qa[15]*qb[9] + qa[9]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*9] + (-1.095445115010332e+00*X[9+NA*8])+(6.928203230275510e-01*X[15+NA*5]) );
G[1] += qq * ( tcrd[1]*X[15+NA*9] + (-1.095445115010332e+00*X[9+NA*7])+(6.928203230275510e-01*X[15+NA*6]) );
G[2] += qq * ( tcrd[2]*X[15+NA*9] + (-1.200000000000000e+00*X[15+NA*4]) );
qq = qa[10]*qb[10];
G[0] += qq * ( tcrd[0]*X[10+NA*10] + (-1.959591794226542e+00*X[10+NA*4])+(5.656854249492380e-01*X[10+NA*7]) );
G[1] += qq * ( tcrd[1]*X[10+NA*10] + (5.656854249492380e-01*X[10+NA*8]) );
G[2] += qq * ( tcrd[2]*X[10+NA*10] + (-2.262741699796952e+00*X[10+NA*5]) );
qq = qa[11]*qb[10] + qa[10]*qb[11];
G[0] += qq * ( tcrd[0]*X[11+NA*10] + (2.828427124746190e-01*X[10+NA*8])+(-9.797958971132712e-01*X[11+NA*4])+(2.828427124746190e-01*X[11+NA*7]) );
G[1] += qq * ( tcrd[1]*X[11+NA*10] + (-9.797958971132712e-01*X[10+NA*4])+(-2.828427124746190e-01*X[10+NA*7])+(2.828427124746190e-01*X[11+NA*8]) );
G[2] += qq * ( tcrd[2]*X[11+NA*10] + (-1.131370849898476e+00*X[10+NA*6])+(-1.131370849898476e+00*X[11+NA*5]) );
qq = qa[12]*qb[10] + qa[10]*qb[12];
G[0] += qq * ( tcrd[0]*X[12+NA*10] + (-8.944271909999160e-01*X[10+NA*5])+(-9.797958971132712e-01*X[12+NA*4])+(2.828427124746190e-01*X[12+NA*7]) );
G[1] += qq * ( tcrd[1]*X[12+NA*10] + (8.944271909999160e-01*X[10+NA*6])+(2.828427124746190e-01*X[12+NA*8]) );
G[2] += qq * ( tcrd[2]*X[12+NA*10] + (-8.944271909999160e-01*X[10+NA*7])+(-1.131370849898476e+00*X[12+NA*5]) );
qq = qa[13]*qb[10] + qa[10]*qb[13];
G[0] += qq * ( tcrd[0]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*6])+(-9.797958971132712e-01*X[13+NA*4])+(2.828427124746190e-01*X[13+NA*7]) );
G[1] += qq * ( tcrd[1]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*5])+(2.828427124746190e-01*X[13+NA*8]) );
G[2] += qq * ( tcrd[2]*X[13+NA*10] + (-8.944271909999160e-01*X[10+NA*8])+(-1.131370849898476e+00*X[13+NA*5]) );
qq = qa[14]*qb[10] + qa[10]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*10] + (-1.095445115010332e+00*X[10+NA*7])+(-9.797958971132712e-01*X[14+NA*4])+(2.828427124746190e-01*X[14+NA*7]) );
G[1] += qq * ( tcrd[1]*X[14+NA*10] + (1.095445115010332e+00*X[10+NA*8])+(2.828427124746190e-01*X[14+NA*8]) );
G[2] += qq * ( tcrd[2]*X[14+NA*10] + (-1.131370849898476e+00*X[14+NA*5]) );
qq = qa[15]*qb[10] + qa[10]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*10] + (-1.095445115010332e+00*X[10+NA*8])+(-9.797958971132712e-01*X[15+NA*4])+(2.828427124746190e-01*X[15+NA*7]) );
G[1] += qq * ( tcrd[1]*X[15+NA*10] + (-1.095445115010332e+00*X[10+NA*7])+(2.828427124746190e-01*X[15+NA*8]) );
G[2] += qq * ( tcrd[2]*X[15+NA*10] + (-1.131370849898476e+00*X[15+NA*5]) );
qq = qa[11]*qb[11];
G[0] += qq * ( tcrd[0]*X[11+NA*11] + (5.656854249492380e-01*X[11+NA*8]) );
G[1] += qq * ( tcrd[1]*X[11+NA*11] + (-1.959591794226542e+00*X[11+NA*4])+(-5.656854249492380e-01*X[11+NA*7]) );
G[2] += qq * ( tcrd[2]*X[11+NA*11] + (-2.262741699796952e+00*X[11+NA*6]) );
qq = qa[12]*qb[11] + qa[11]*qb[12];
G[0] += qq * ( tcrd[0]*X[12+NA*11] + (-8.944271909999160e-01*X[11+NA*5])+(2.828427124746190e-01*X[12+NA*8]) );
G[1] += qq * ( tcrd[1]*X[12+NA*11] + (8.944271909999160e-01*X[11+NA*6])+(-9.797958971132712e-01*X[12+NA*4])+(-2.828427124746190e-01*X[12+NA*7]) );
G[2] += qq * ( tcrd[2]*X[12+NA*11] + (-8.944271909999160e-01*X[11+NA*7])+(-1.131370849898476e+00*X[12+NA*6]) );
qq = qa[13]*qb[11] + qa[11]*qb[13];
G[0] += qq * ( tcrd[0]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*6])+(2.828427124746190e-01*X[13+NA*8]) );
G[1] += qq * ( tcrd[1]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*5])+(-9.797958971132712e-01*X[13+NA*4])+(-2.828427124746190e-01*X[13+NA*7]) );
G[2] += qq * ( tcrd[2]*X[13+NA*11] + (-8.944271909999160e-01*X[11+NA*8])+(-1.131370849898476e+00*X[13+NA*6]) );
qq = qa[14]*qb[11] + qa[11]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*11] + (-1.095445115010332e+00*X[11+NA*7])+(2.828427124746190e-01*X[14+NA*8]) );
G[1] += qq * ( tcrd[1]*X[14+NA*11] + (1.095445115010332e+00*X[11+NA*8])+(-9.797958971132712e-01*X[14+NA*4])+(-2.828427124746190e-01*X[14+NA*7]) );
G[2] += qq * ( tcrd[2]*X[14+NA*11] + (-1.131370849898476e+00*X[14+NA*6]) );
qq = qa[15]*qb[11] + qa[11]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*11] + (-1.095445115010332e+00*X[11+NA*8])+(2.828427124746190e-01*X[15+NA*8]) );
G[1] += qq * ( tcrd[1]*X[15+NA*11] + (-1.095445115010332e+00*X[11+NA*7])+(-9.797958971132712e-01*X[15+NA*4])+(-2.828427124746190e-01*X[15+NA*7]) );
G[2] += qq * ( tcrd[2]*X[15+NA*11] + (-1.131370849898476e+00*X[15+NA*6]) );
qq = qa[12]*qb[12];
G[0] += qq * ( tcrd[0]*X[12+NA*12] + (-1.788854381999832e+00*X[12+NA*5]) );
G[1] += qq * ( tcrd[1]*X[12+NA*12] + (1.788854381999832e+00*X[12+NA*6]) );
G[2] += qq * ( tcrd[2]*X[12+NA*12] + (-1.788854381999832e+00*X[12+NA*7]) );
qq = qa[13]*qb[12] + qa[12]*qb[13];
G[0] += qq * ( tcrd[0]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*6])+(-8.944271909999160e-01*X[13+NA*5]) );
G[1] += qq * ( tcrd[1]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*5])+(8.944271909999160e-01*X[13+NA*6]) );
G[2] += qq * ( tcrd[2]*X[13+NA*12] + (-8.944271909999160e-01*X[12+NA*8])+(-8.944271909999160e-01*X[13+NA*7]) );
qq = qa[14]*qb[12] + qa[12]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*12] + (-1.095445115010332e+00*X[12+NA*7])+(-8.944271909999160e-01*X[14+NA*5]) );
G[1] += qq * ( tcrd[1]*X[14+NA*12] + (1.095445115010332e+00*X[12+NA*8])+(8.944271909999160e-01*X[14+NA*6]) );
G[2] += qq * ( tcrd[2]*X[14+NA*12] + (-8.944271909999160e-01*X[14+NA*7]) );
qq = qa[15]*qb[12] + qa[12]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*12] + (-1.095445115010332e+00*X[12+NA*8])+(-8.944271909999160e-01*X[15+NA*5]) );
G[1] += qq * ( tcrd[1]*X[15+NA*12] + (-1.095445115010332e+00*X[12+NA*7])+(8.944271909999160e-01*X[15+NA*6]) );
G[2] += qq * ( tcrd[2]*X[15+NA*12] + (-8.944271909999160e-01*X[15+NA*7]) );
qq = qa[13]*qb[13];
G[0] += qq * ( tcrd[0]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*6]) );
G[1] += qq * ( tcrd[1]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*5]) );
G[2] += qq * ( tcrd[2]*X[13+NA*13] + (-1.788854381999832e+00*X[13+NA*8]) );
qq = qa[14]*qb[13] + qa[13]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*13] + (-1.095445115010332e+00*X[13+NA*7])+(-8.944271909999160e-01*X[14+NA*6]) );
G[1] += qq * ( tcrd[1]*X[14+NA*13] + (1.095445115010332e+00*X[13+NA*8])+(-8.944271909999160e-01*X[14+NA*5]) );
G[2] += qq * ( tcrd[2]*X[14+NA*13] + (-8.944271909999160e-01*X[14+NA*8]) );
qq = qa[15]*qb[13] + qa[13]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*13] + (-1.095445115010332e+00*X[13+NA*8])+(-8.944271909999160e-01*X[15+NA*6]) );
G[1] += qq * ( tcrd[1]*X[15+NA*13] + (-1.095445115010332e+00*X[13+NA*7])+(-8.944271909999160e-01*X[15+NA*5]) );
G[2] += qq * ( tcrd[2]*X[15+NA*13] + (-8.944271909999160e-01*X[15+NA*8]) );
qq = qa[14]*qb[14];
G[0] += qq * ( tcrd[0]*X[14+NA*14] + (-2.190890230020665e+00*X[14+NA*7]) );
G[1] += qq * ( tcrd[1]*X[14+NA*14] + (2.190890230020665e+00*X[14+NA*8]) );
G[2] += qq * ( tcrd[2]*X[14+NA*14] );
qq = qa[15]*qb[14] + qa[14]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*14] + (-1.095445115010332e+00*X[14+NA*8])+(-1.095445115010332e+00*X[15+NA*7]) );
G[1] += qq * ( tcrd[1]*X[15+NA*14] + (-1.095445115010332e+00*X[14+NA*7])+(1.095445115010332e+00*X[15+NA*8]) );
G[2] += qq * ( tcrd[2]*X[15+NA*14] );
qq = qa[15]*qb[15];
G[0] += qq * ( tcrd[0]*X[15+NA*15] + (-2.190890230020665e+00*X[15+NA*8]) );
G[1] += qq * ( tcrd[1]*X[15+NA*15] + (-2.190890230020665e+00*X[15+NA*7]) );
G[2] += qq * ( tcrd[2]*X[15+NA*15] );
}

template <int NA,int LB>
inline void ExpHobGrdAcc_GS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 3 ) { qq = qa[16]*qb[0] + qa[0]*qb[16]; } else { qq = qa[16]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[16] + (-6.998542122237653e-01*X[10]) );
G[1] += qq * ( tcrd[1]*X[16] + (-6.998542122237653e-01*X[11]) );
G[2] += qq * ( tcrd[2]*X[16] + (1.142857142857143e+00*X[9]) );
if ( LB > 3 ) { qq = qa[17]*qb[0] + qa[0]*qb[17]; } else { qq = qa[17]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[17] + (9.035079029052513e-01*X[9])+(-3.499271061118825e-01*X[12]) );
G[1] += qq * ( tcrd[1]*X[17] + (-3.499271061118825e-01*X[13]) );
G[2] += qq * ( tcrd[2]*X[17] + (1.106566670344976e+00*X[10]) );
if ( LB > 3 ) { qq = qa[18]*qb[0] + qa[0]*qb[18]; } else { qq = qa[18]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[18] + (-3.499271061118825e-01*X[13]) );
G[1] += qq * ( tcrd[1]*X[18] + (9.035079029052513e-01*X[9])+(3.499271061118825e-01*X[12]) );
G[2] += qq * ( tcrd[2]*X[18] + (1.106566670344976e+00*X[11]) );
if ( LB > 3 ) { qq = qa[19]*qb[0] + qa[0]*qb[19]; } else { qq = qa[19]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[19] + (7.824607964359518e-01*X[10])+(-2.020305089104422e-01*X[14]) );
G[1] += qq * ( tcrd[1]*X[19] + (-7.824607964359518e-01*X[11])+(-2.020305089104422e-01*X[15]) );
G[2] += qq * ( tcrd[2]*X[19] + (9.897433186107870e-01*X[12]) );
if ( LB > 3 ) { qq = qa[20]*qb[0] + qa[0]*qb[20]; } else { qq = qa[20]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[20] + (7.824607964359518e-01*X[11])+(-2.020305089104422e-01*X[15]) );
G[1] += qq * ( tcrd[1]*X[20] + (7.824607964359518e-01*X[10])+(2.020305089104422e-01*X[14]) );
G[2] += qq * ( tcrd[2]*X[20] + (9.897433186107870e-01*X[13]) );
if ( LB > 3 ) { qq = qa[21]*qb[0] + qa[0]*qb[21]; } else { qq = qa[21]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[21] + (9.258200997725513e-01*X[12]) );
G[1] += qq * ( tcrd[1]*X[21] + (-9.258200997725513e-01*X[13]) );
G[2] += qq * ( tcrd[2]*X[21] + (7.559289460184544e-01*X[14]) );
if ( LB > 3 ) { qq = qa[22]*qb[0] + qa[0]*qb[22]; } else { qq = qa[22]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[22] + (9.258200997725513e-01*X[13]) );
G[1] += qq * ( tcrd[1]*X[22] + (9.258200997725513e-01*X[12]) );
G[2] += qq * ( tcrd[2]*X[22] + (7.559289460184544e-01*X[15]) );
if ( LB > 3 ) { qq = qa[23]*qb[0] + qa[0]*qb[23]; } else { qq = qa[23]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[23] + (1.069044967649698e+00*X[14]) );
G[1] += qq * ( tcrd[1]*X[23] + (-1.069044967649698e+00*X[15]) );
G[2] += qq * ( tcrd[2]*X[23] );
if ( LB > 3 ) { qq = qa[24]*qb[0] + qa[0]*qb[24]; } else { qq = qa[24]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[24] + (1.069044967649698e+00*X[15]) );
G[1] += qq * ( tcrd[1]*X[24] + (1.069044967649698e+00*X[14]) );
G[2] += qq * ( tcrd[2]*X[24] );
}

template <int NA,int LB>
void ExpHobGrdAcc_GP( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 3 ) { qq = qa[16]*qb[1] - qa[1]*qb[16]; } else { qq = qa[16]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[16+NA] + (-6.998542122237653e-01*X[10+NA]) );
G[1] += qq * ( tcrd[1]*X[16+NA] + (-6.998542122237653e-01*X[11+NA]) );
G[2] += qq * ( tcrd[2]*X[16+NA] + (1.142857142857143e+00*X[9+NA])+(-2.000000000000000e+00*X[16]) );
if ( LB > 3 ) { qq = qa[17]*qb[1] - qa[1]*qb[17]; } else { qq = qa[17]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[17+NA] + (9.035079029052513e-01*X[9+NA])+(-3.499271061118825e-01*X[12+NA]) );
G[1] += qq * ( tcrd[1]*X[17+NA] + (-3.499271061118825e-01*X[13+NA]) );
G[2] += qq * ( tcrd[2]*X[17+NA] + (1.106566670344976e+00*X[10+NA])+(-2.000000000000000e+00*X[17]) );
if ( LB > 3 ) { qq = qa[18]*qb[1] - qa[1]*qb[18]; } else { qq = qa[18]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[18+NA] + (-3.499271061118825e-01*X[13+NA]) );
G[1] += qq * ( tcrd[1]*X[18+NA] + (9.035079029052513e-01*X[9+NA])+(3.499271061118825e-01*X[12+NA]) );
G[2] += qq * ( tcrd[2]*X[18+NA] + (1.106566670344976e+00*X[11+NA])+(-2.000000000000000e+00*X[18]) );
if ( LB > 3 ) { qq = qa[19]*qb[1] - qa[1]*qb[19]; } else { qq = qa[19]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[19+NA] + (7.824607964359518e-01*X[10+NA])+(-2.020305089104422e-01*X[14+NA]) );
G[1] += qq * ( tcrd[1]*X[19+NA] + (-7.824607964359518e-01*X[11+NA])+(-2.020305089104422e-01*X[15+NA]) );
G[2] += qq * ( tcrd[2]*X[19+NA] + (9.897433186107870e-01*X[12+NA])+(-2.000000000000000e+00*X[19]) );
if ( LB > 3 ) { qq = qa[20]*qb[1] - qa[1]*qb[20]; } else { qq = qa[20]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[20+NA] + (7.824607964359518e-01*X[11+NA])+(-2.020305089104422e-01*X[15+NA]) );
G[1] += qq * ( tcrd[1]*X[20+NA] + (7.824607964359518e-01*X[10+NA])+(2.020305089104422e-01*X[14+NA]) );
G[2] += qq * ( tcrd[2]*X[20+NA] + (9.897433186107870e-01*X[13+NA])+(-2.000000000000000e+00*X[20]) );
if ( LB > 3 ) { qq = qa[21]*qb[1] - qa[1]*qb[21]; } else { qq = qa[21]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[21+NA] + (9.258200997725513e-01*X[12+NA]) );
G[1] += qq * ( tcrd[1]*X[21+NA] + (-9.258200997725513e-01*X[13+NA]) );
G[2] += qq * ( tcrd[2]*X[21+NA] + (7.559289460184544e-01*X[14+NA])+(-2.000000000000000e+00*X[21]) );
if ( LB > 3 ) { qq = qa[22]*qb[1] - qa[1]*qb[22]; } else { qq = qa[22]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[22+NA] + (9.258200997725513e-01*X[13+NA]) );
G[1] += qq * ( tcrd[1]*X[22+NA] + (9.258200997725513e-01*X[12+NA]) );
G[2] += qq * ( tcrd[2]*X[22+NA] + (7.559289460184544e-01*X[15+NA])+(-2.000000000000000e+00*X[22]) );
if ( LB > 3 ) { qq = qa[23]*qb[1] - qa[1]*qb[23]; } else { qq = qa[23]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[23+NA] + (1.069044967649698e+00*X[14+NA]) );
G[1] += qq * ( tcrd[1]*X[23+NA] + (-1.069044967649698e+00*X[15+NA]) );
G[2] += qq * ( tcrd[2]*X[23+NA] + (-2.000000000000000e+00*X[23]) );
if ( LB > 3 ) { qq = qa[24]*qb[1] - qa[1]*qb[24]; } else { qq = qa[24]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[24+NA] + (1.069044967649698e+00*X[15+NA]) );
G[1] += qq * ( tcrd[1]*X[24+NA] + (1.069044967649698e+00*X[14+NA]) );
G[2] += qq * ( tcrd[2]*X[24+NA] + (-2.000000000000000e+00*X[24]) );
if ( LB > 3 ) { qq = qa[16]*qb[2] - qa[2]*qb[16]; } else { qq = qa[16]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[16+NA*2] + (-6.998542122237653e-01*X[10+NA*2])+(-2.000000000000000e+00*X[16]) );
G[1] += qq * ( tcrd[1]*X[16+NA*2] + (-6.998542122237653e-01*X[11+NA*2]) );
G[2] += qq * ( tcrd[2]*X[16+NA*2] + (1.142857142857143e+00*X[9+NA*2]) );
if ( LB > 3 ) { qq = qa[17]*qb[2] - qa[2]*qb[17]; } else { qq = qa[17]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[17+NA*2] + (9.035079029052513e-01*X[9+NA*2])+(-3.499271061118825e-01*X[12+NA*2])+(-2.000000000000000e+00*X[17]) );
G[1] += qq * ( tcrd[1]*X[17+NA*2] + (-3.499271061118825e-01*X[13+NA*2]) );
G[2] += qq * ( tcrd[2]*X[17+NA*2] + (1.106566670344976e+00*X[10+NA*2]) );
if ( LB > 3 ) { qq = qa[18]*qb[2] - qa[2]*qb[18]; } else { qq = qa[18]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[18+NA*2] + (-3.499271061118825e-01*X[13+NA*2])+(-2.000000000000000e+00*X[18]) );
G[1] += qq * ( tcrd[1]*X[18+NA*2] + (9.035079029052513e-01*X[9+NA*2])+(3.499271061118825e-01*X[12+NA*2]) );
G[2] += qq * ( tcrd[2]*X[18+NA*2] + (1.106566670344976e+00*X[11+NA*2]) );
if ( LB > 3 ) { qq = qa[19]*qb[2] - qa[2]*qb[19]; } else { qq = qa[19]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[19+NA*2] + (7.824607964359518e-01*X[10+NA*2])+(-2.020305089104422e-01*X[14+NA*2])+(-2.000000000000000e+00*X[19]) );
G[1] += qq * ( tcrd[1]*X[19+NA*2] + (-7.824607964359518e-01*X[11+NA*2])+(-2.020305089104422e-01*X[15+NA*2]) );
G[2] += qq * ( tcrd[2]*X[19+NA*2] + (9.897433186107870e-01*X[12+NA*2]) );
if ( LB > 3 ) { qq = qa[20]*qb[2] - qa[2]*qb[20]; } else { qq = qa[20]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[20+NA*2] + (7.824607964359518e-01*X[11+NA*2])+(-2.020305089104422e-01*X[15+NA*2])+(-2.000000000000000e+00*X[20]) );
G[1] += qq * ( tcrd[1]*X[20+NA*2] + (7.824607964359518e-01*X[10+NA*2])+(2.020305089104422e-01*X[14+NA*2]) );
G[2] += qq * ( tcrd[2]*X[20+NA*2] + (9.897433186107870e-01*X[13+NA*2]) );
if ( LB > 3 ) { qq = qa[21]*qb[2] - qa[2]*qb[21]; } else { qq = qa[21]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[21+NA*2] + (9.258200997725513e-01*X[12+NA*2])+(-2.000000000000000e+00*X[21]) );
G[1] += qq * ( tcrd[1]*X[21+NA*2] + (-9.258200997725513e-01*X[13+NA*2]) );
G[2] += qq * ( tcrd[2]*X[21+NA*2] + (7.559289460184544e-01*X[14+NA*2]) );
if ( LB > 3 ) { qq = qa[22]*qb[2] - qa[2]*qb[22]; } else { qq = qa[22]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[22+NA*2] + (9.258200997725513e-01*X[13+NA*2])+(-2.000000000000000e+00*X[22]) );
G[1] += qq * ( tcrd[1]*X[22+NA*2] + (9.258200997725513e-01*X[12+NA*2]) );
G[2] += qq * ( tcrd[2]*X[22+NA*2] + (7.559289460184544e-01*X[15+NA*2]) );
if ( LB > 3 ) { qq = qa[23]*qb[2] - qa[2]*qb[23]; } else { qq = qa[23]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[23+NA*2] + (1.069044967649698e+00*X[14+NA*2])+(-2.000000000000000e+00*X[23]) );
G[1] += qq * ( tcrd[1]*X[23+NA*2] + (-1.069044967649698e+00*X[15+NA*2]) );
G[2] += qq * ( tcrd[2]*X[23+NA*2] );
if ( LB > 3 ) { qq = qa[24]*qb[2] - qa[2]*qb[24]; } else { qq = qa[24]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[24+NA*2] + (1.069044967649698e+00*X[15+NA*2])+(-2.000000000000000e+00*X[24]) );
G[1] += qq * ( tcrd[1]*X[24+NA*2] + (1.069044967649698e+00*X[14+NA*2]) );
G[2] += qq * ( tcrd[2]*X[24+NA*2] );
if ( LB > 3 ) { qq = qa[16]*qb[3] - qa[3]*qb[16]; } else { qq = qa[16]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[16+NA*3] + (-6.998542122237653e-01*X[10+NA*3]) );
G[1] += qq * ( tcrd[1]*X[16+NA*3] + (-6.998542122237653e-01*X[11+NA*3])+(-2.000000000000000e+00*X[16]) );
G[2] += qq * ( tcrd[2]*X[16+NA*3] + (1.142857142857143e+00*X[9+NA*3]) );
if ( LB > 3 ) { qq = qa[17]*qb[3] - qa[3]*qb[17]; } else { qq = qa[17]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[17+NA*3] + (9.035079029052513e-01*X[9+NA*3])+(-3.499271061118825e-01*X[12+NA*3]) );
G[1] += qq * ( tcrd[1]*X[17+NA*3] + (-3.499271061118825e-01*X[13+NA*3])+(-2.000000000000000e+00*X[17]) );
G[2] += qq * ( tcrd[2]*X[17+NA*3] + (1.106566670344976e+00*X[10+NA*3]) );
if ( LB > 3 ) { qq = qa[18]*qb[3] - qa[3]*qb[18]; } else { qq = qa[18]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[18+NA*3] + (-3.499271061118825e-01*X[13+NA*3]) );
G[1] += qq * ( tcrd[1]*X[18+NA*3] + (9.035079029052513e-01*X[9+NA*3])+(3.499271061118825e-01*X[12+NA*3])+(-2.000000000000000e+00*X[18]) );
G[2] += qq * ( tcrd[2]*X[18+NA*3] + (1.106566670344976e+00*X[11+NA*3]) );
if ( LB > 3 ) { qq = qa[19]*qb[3] - qa[3]*qb[19]; } else { qq = qa[19]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[19+NA*3] + (7.824607964359518e-01*X[10+NA*3])+(-2.020305089104422e-01*X[14+NA*3]) );
G[1] += qq * ( tcrd[1]*X[19+NA*3] + (-7.824607964359518e-01*X[11+NA*3])+(-2.020305089104422e-01*X[15+NA*3])+(-2.000000000000000e+00*X[19]) );
G[2] += qq * ( tcrd[2]*X[19+NA*3] + (9.897433186107870e-01*X[12+NA*3]) );
if ( LB > 3 ) { qq = qa[20]*qb[3] - qa[3]*qb[20]; } else { qq = qa[20]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[20+NA*3] + (7.824607964359518e-01*X[11+NA*3])+(-2.020305089104422e-01*X[15+NA*3]) );
G[1] += qq * ( tcrd[1]*X[20+NA*3] + (7.824607964359518e-01*X[10+NA*3])+(2.020305089104422e-01*X[14+NA*3])+(-2.000000000000000e+00*X[20]) );
G[2] += qq * ( tcrd[2]*X[20+NA*3] + (9.897433186107870e-01*X[13+NA*3]) );
if ( LB > 3 ) { qq = qa[21]*qb[3] - qa[3]*qb[21]; } else { qq = qa[21]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[21+NA*3] + (9.258200997725513e-01*X[12+NA*3]) );
G[1] += qq * ( tcrd[1]*X[21+NA*3] + (-9.258200997725513e-01*X[13+NA*3])+(-2.000000000000000e+00*X[21]) );
G[2] += qq * ( tcrd[2]*X[21+NA*3] + (7.559289460184544e-01*X[14+NA*3]) );
if ( LB > 3 ) { qq = qa[22]*qb[3] - qa[3]*qb[22]; } else { qq = qa[22]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[22+NA*3] + (9.258200997725513e-01*X[13+NA*3]) );
G[1] += qq * ( tcrd[1]*X[22+NA*3] + (9.258200997725513e-01*X[12+NA*3])+(-2.000000000000000e+00*X[22]) );
G[2] += qq * ( tcrd[2]*X[22+NA*3] + (7.559289460184544e-01*X[15+NA*3]) );
if ( LB > 3 ) { qq = qa[23]*qb[3] - qa[3]*qb[23]; } else { qq = qa[23]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[23+NA*3] + (1.069044967649698e+00*X[14+NA*3]) );
G[1] += qq * ( tcrd[1]*X[23+NA*3] + (-1.069044967649698e+00*X[15+NA*3])+(-2.000000000000000e+00*X[23]) );
G[2] += qq * ( tcrd[2]*X[23+NA*3] );
if ( LB > 3 ) { qq = qa[24]*qb[3] - qa[3]*qb[24]; } else { qq = qa[24]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[24+NA*3] + (1.069044967649698e+00*X[15+NA*3]) );
G[1] += qq * ( tcrd[1]*X[24+NA*3] + (1.069044967649698e+00*X[14+NA*3])+(-2.000000000000000e+00*X[24]) );
G[2] += qq * ( tcrd[2]*X[24+NA*3] );
}

template <int NA,int LB>
void ExpHobGrdAcc_GD( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 3 ) { qq = qa[16]*qb[4] + qa[4]*qb[16]; } else { qq = qa[16]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[16+NA*4] + (-6.998542122237653e-01*X[10+NA*4])+(6.666666666666666e-01*X[16+NA*2]) );
G[1] += qq * ( tcrd[1]*X[16+NA*4] + (-6.998542122237653e-01*X[11+NA*4])+(6.666666666666666e-01*X[16+NA*3]) );
G[2] += qq * ( tcrd[2]*X[16+NA*4] + (1.142857142857143e+00*X[9+NA*4])+(-1.333333333333333e+00*X[16+NA]) );
if ( LB > 3 ) { qq = qa[17]*qb[4] + qa[4]*qb[17]; } else { qq = qa[17]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[17+NA*4] + (9.035079029052513e-01*X[9+NA*4])+(-3.499271061118825e-01*X[12+NA*4])+(6.666666666666666e-01*X[17+NA*2]) );
G[1] += qq * ( tcrd[1]*X[17+NA*4] + (-3.499271061118825e-01*X[13+NA*4])+(6.666666666666666e-01*X[17+NA*3]) );
G[2] += qq * ( tcrd[2]*X[17+NA*4] + (1.106566670344976e+00*X[10+NA*4])+(-1.333333333333333e+00*X[17+NA]) );
if ( LB > 3 ) { qq = qa[18]*qb[4] + qa[4]*qb[18]; } else { qq = qa[18]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[18+NA*4] + (-3.499271061118825e-01*X[13+NA*4])+(6.666666666666666e-01*X[18+NA*2]) );
G[1] += qq * ( tcrd[1]*X[18+NA*4] + (9.035079029052513e-01*X[9+NA*4])+(3.499271061118825e-01*X[12+NA*4])+(6.666666666666666e-01*X[18+NA*3]) );
G[2] += qq * ( tcrd[2]*X[18+NA*4] + (1.106566670344976e+00*X[11+NA*4])+(-1.333333333333333e+00*X[18+NA]) );
if ( LB > 3 ) { qq = qa[19]*qb[4] + qa[4]*qb[19]; } else { qq = qa[19]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[19+NA*4] + (7.824607964359518e-01*X[10+NA*4])+(-2.020305089104422e-01*X[14+NA*4])+(6.666666666666666e-01*X[19+NA*2]) );
G[1] += qq * ( tcrd[1]*X[19+NA*4] + (-7.824607964359518e-01*X[11+NA*4])+(-2.020305089104422e-01*X[15+NA*4])+(6.666666666666666e-01*X[19+NA*3]) );
G[2] += qq * ( tcrd[2]*X[19+NA*4] + (9.897433186107870e-01*X[12+NA*4])+(-1.333333333333333e+00*X[19+NA]) );
if ( LB > 3 ) { qq = qa[20]*qb[4] + qa[4]*qb[20]; } else { qq = qa[20]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[20+NA*4] + (7.824607964359518e-01*X[11+NA*4])+(-2.020305089104422e-01*X[15+NA*4])+(6.666666666666666e-01*X[20+NA*2]) );
G[1] += qq * ( tcrd[1]*X[20+NA*4] + (7.824607964359518e-01*X[10+NA*4])+(2.020305089104422e-01*X[14+NA*4])+(6.666666666666666e-01*X[20+NA*3]) );
G[2] += qq * ( tcrd[2]*X[20+NA*4] + (9.897433186107870e-01*X[13+NA*4])+(-1.333333333333333e+00*X[20+NA]) );
if ( LB > 3 ) { qq = qa[21]*qb[4] + qa[4]*qb[21]; } else { qq = qa[21]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[21+NA*4] + (9.258200997725513e-01*X[12+NA*4])+(6.666666666666666e-01*X[21+NA*2]) );
G[1] += qq * ( tcrd[1]*X[21+NA*4] + (-9.258200997725513e-01*X[13+NA*4])+(6.666666666666666e-01*X[21+NA*3]) );
G[2] += qq * ( tcrd[2]*X[21+NA*4] + (7.559289460184544e-01*X[14+NA*4])+(-1.333333333333333e+00*X[21+NA]) );
if ( LB > 3 ) { qq = qa[22]*qb[4] + qa[4]*qb[22]; } else { qq = qa[22]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[22+NA*4] + (9.258200997725513e-01*X[13+NA*4])+(6.666666666666666e-01*X[22+NA*2]) );
G[1] += qq * ( tcrd[1]*X[22+NA*4] + (9.258200997725513e-01*X[12+NA*4])+(6.666666666666666e-01*X[22+NA*3]) );
G[2] += qq * ( tcrd[2]*X[22+NA*4] + (7.559289460184544e-01*X[15+NA*4])+(-1.333333333333333e+00*X[22+NA]) );
if ( LB > 3 ) { qq = qa[23]*qb[4] + qa[4]*qb[23]; } else { qq = qa[23]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[23+NA*4] + (1.069044967649698e+00*X[14+NA*4])+(6.666666666666666e-01*X[23+NA*2]) );
G[1] += qq * ( tcrd[1]*X[23+NA*4] + (-1.069044967649698e+00*X[15+NA*4])+(6.666666666666666e-01*X[23+NA*3]) );
G[2] += qq * ( tcrd[2]*X[23+NA*4] + (-1.333333333333333e+00*X[23+NA]) );
if ( LB > 3 ) { qq = qa[24]*qb[4] + qa[4]*qb[24]; } else { qq = qa[24]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[24+NA*4] + (1.069044967649698e+00*X[15+NA*4])+(6.666666666666666e-01*X[24+NA*2]) );
G[1] += qq * ( tcrd[1]*X[24+NA*4] + (1.069044967649698e+00*X[14+NA*4])+(6.666666666666666e-01*X[24+NA*3]) );
G[2] += qq * ( tcrd[2]*X[24+NA*4] + (-1.333333333333333e+00*X[24+NA]) );
if ( LB > 3 ) { qq = qa[16]*qb[5] + qa[5]*qb[16]; } else { qq = qa[16]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[16+NA*5] + (-6.998542122237653e-01*X[10+NA*5])+(-1.154700538379251e+00*X[16+NA]) );
G[1] += qq * ( tcrd[1]*X[16+NA*5] + (-6.998542122237653e-01*X[11+NA*5]) );
G[2] += qq * ( tcrd[2]*X[16+NA*5] + (1.142857142857143e+00*X[9+NA*5])+(-1.154700538379251e+00*X[16+NA*2]) );
if ( LB > 3 ) { qq = qa[17]*qb[5] + qa[5]*qb[17]; } else { qq = qa[17]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[17+NA*5] + (9.035079029052513e-01*X[9+NA*5])+(-3.499271061118825e-01*X[12+NA*5])+(-1.154700538379251e+00*X[17+NA]) );
G[1] += qq * ( tcrd[1]*X[17+NA*5] + (-3.499271061118825e-01*X[13+NA*5]) );
G[2] += qq * ( tcrd[2]*X[17+NA*5] + (1.106566670344976e+00*X[10+NA*5])+(-1.154700538379251e+00*X[17+NA*2]) );
if ( LB > 3 ) { qq = qa[18]*qb[5] + qa[5]*qb[18]; } else { qq = qa[18]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[18+NA*5] + (-3.499271061118825e-01*X[13+NA*5])+(-1.154700538379251e+00*X[18+NA]) );
G[1] += qq * ( tcrd[1]*X[18+NA*5] + (9.035079029052513e-01*X[9+NA*5])+(3.499271061118825e-01*X[12+NA*5]) );
G[2] += qq * ( tcrd[2]*X[18+NA*5] + (1.106566670344976e+00*X[11+NA*5])+(-1.154700538379251e+00*X[18+NA*2]) );
if ( LB > 3 ) { qq = qa[19]*qb[5] + qa[5]*qb[19]; } else { qq = qa[19]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[19+NA*5] + (7.824607964359518e-01*X[10+NA*5])+(-2.020305089104422e-01*X[14+NA*5])+(-1.154700538379251e+00*X[19+NA]) );
G[1] += qq * ( tcrd[1]*X[19+NA*5] + (-7.824607964359518e-01*X[11+NA*5])+(-2.020305089104422e-01*X[15+NA*5]) );
G[2] += qq * ( tcrd[2]*X[19+NA*5] + (9.897433186107870e-01*X[12+NA*5])+(-1.154700538379251e+00*X[19+NA*2]) );
if ( LB > 3 ) { qq = qa[20]*qb[5] + qa[5]*qb[20]; } else { qq = qa[20]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[20+NA*5] + (7.824607964359518e-01*X[11+NA*5])+(-2.020305089104422e-01*X[15+NA*5])+(-1.154700538379251e+00*X[20+NA]) );
G[1] += qq * ( tcrd[1]*X[20+NA*5] + (7.824607964359518e-01*X[10+NA*5])+(2.020305089104422e-01*X[14+NA*5]) );
G[2] += qq * ( tcrd[2]*X[20+NA*5] + (9.897433186107870e-01*X[13+NA*5])+(-1.154700538379251e+00*X[20+NA*2]) );
if ( LB > 3 ) { qq = qa[21]*qb[5] + qa[5]*qb[21]; } else { qq = qa[21]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[21+NA*5] + (9.258200997725513e-01*X[12+NA*5])+(-1.154700538379251e+00*X[21+NA]) );
G[1] += qq * ( tcrd[1]*X[21+NA*5] + (-9.258200997725513e-01*X[13+NA*5]) );
G[2] += qq * ( tcrd[2]*X[21+NA*5] + (7.559289460184544e-01*X[14+NA*5])+(-1.154700538379251e+00*X[21+NA*2]) );
if ( LB > 3 ) { qq = qa[22]*qb[5] + qa[5]*qb[22]; } else { qq = qa[22]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[22+NA*5] + (9.258200997725513e-01*X[13+NA*5])+(-1.154700538379251e+00*X[22+NA]) );
G[1] += qq * ( tcrd[1]*X[22+NA*5] + (9.258200997725513e-01*X[12+NA*5]) );
G[2] += qq * ( tcrd[2]*X[22+NA*5] + (7.559289460184544e-01*X[15+NA*5])+(-1.154700538379251e+00*X[22+NA*2]) );
if ( LB > 3 ) { qq = qa[23]*qb[5] + qa[5]*qb[23]; } else { qq = qa[23]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[23+NA*5] + (1.069044967649698e+00*X[14+NA*5])+(-1.154700538379251e+00*X[23+NA]) );
G[1] += qq * ( tcrd[1]*X[23+NA*5] + (-1.069044967649698e+00*X[15+NA*5]) );
G[2] += qq * ( tcrd[2]*X[23+NA*5] + (-1.154700538379251e+00*X[23+NA*2]) );
if ( LB > 3 ) { qq = qa[24]*qb[5] + qa[5]*qb[24]; } else { qq = qa[24]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[24+NA*5] + (1.069044967649698e+00*X[15+NA*5])+(-1.154700538379251e+00*X[24+NA]) );
G[1] += qq * ( tcrd[1]*X[24+NA*5] + (1.069044967649698e+00*X[14+NA*5]) );
G[2] += qq * ( tcrd[2]*X[24+NA*5] + (-1.154700538379251e+00*X[24+NA*2]) );
if ( LB > 3 ) { qq = qa[16]*qb[6] + qa[6]*qb[16]; } else { qq = qa[16]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[16+NA*6] + (-6.998542122237653e-01*X[10+NA*6]) );
G[1] += qq * ( tcrd[1]*X[16+NA*6] + (-6.998542122237653e-01*X[11+NA*6])+(-1.154700538379251e+00*X[16+NA]) );
G[2] += qq * ( tcrd[2]*X[16+NA*6] + (1.142857142857143e+00*X[9+NA*6])+(-1.154700538379251e+00*X[16+NA*3]) );
if ( LB > 3 ) { qq = qa[17]*qb[6] + qa[6]*qb[17]; } else { qq = qa[17]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[17+NA*6] + (9.035079029052513e-01*X[9+NA*6])+(-3.499271061118825e-01*X[12+NA*6]) );
G[1] += qq * ( tcrd[1]*X[17+NA*6] + (-3.499271061118825e-01*X[13+NA*6])+(-1.154700538379251e+00*X[17+NA]) );
G[2] += qq * ( tcrd[2]*X[17+NA*6] + (1.106566670344976e+00*X[10+NA*6])+(-1.154700538379251e+00*X[17+NA*3]) );
if ( LB > 3 ) { qq = qa[18]*qb[6] + qa[6]*qb[18]; } else { qq = qa[18]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[18+NA*6] + (-3.499271061118825e-01*X[13+NA*6]) );
G[1] += qq * ( tcrd[1]*X[18+NA*6] + (9.035079029052513e-01*X[9+NA*6])+(3.499271061118825e-01*X[12+NA*6])+(-1.154700538379251e+00*X[18+NA]) );
G[2] += qq * ( tcrd[2]*X[18+NA*6] + (1.106566670344976e+00*X[11+NA*6])+(-1.154700538379251e+00*X[18+NA*3]) );
if ( LB > 3 ) { qq = qa[19]*qb[6] + qa[6]*qb[19]; } else { qq = qa[19]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[19+NA*6] + (7.824607964359518e-01*X[10+NA*6])+(-2.020305089104422e-01*X[14+NA*6]) );
G[1] += qq * ( tcrd[1]*X[19+NA*6] + (-7.824607964359518e-01*X[11+NA*6])+(-2.020305089104422e-01*X[15+NA*6])+(-1.154700538379251e+00*X[19+NA]) );
G[2] += qq * ( tcrd[2]*X[19+NA*6] + (9.897433186107870e-01*X[12+NA*6])+(-1.154700538379251e+00*X[19+NA*3]) );
if ( LB > 3 ) { qq = qa[20]*qb[6] + qa[6]*qb[20]; } else { qq = qa[20]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[20+NA*6] + (7.824607964359518e-01*X[11+NA*6])+(-2.020305089104422e-01*X[15+NA*6]) );
G[1] += qq * ( tcrd[1]*X[20+NA*6] + (7.824607964359518e-01*X[10+NA*6])+(2.020305089104422e-01*X[14+NA*6])+(-1.154700538379251e+00*X[20+NA]) );
G[2] += qq * ( tcrd[2]*X[20+NA*6] + (9.897433186107870e-01*X[13+NA*6])+(-1.154700538379251e+00*X[20+NA*3]) );
if ( LB > 3 ) { qq = qa[21]*qb[6] + qa[6]*qb[21]; } else { qq = qa[21]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[21+NA*6] + (9.258200997725513e-01*X[12+NA*6]) );
G[1] += qq * ( tcrd[1]*X[21+NA*6] + (-9.258200997725513e-01*X[13+NA*6])+(-1.154700538379251e+00*X[21+NA]) );
G[2] += qq * ( tcrd[2]*X[21+NA*6] + (7.559289460184544e-01*X[14+NA*6])+(-1.154700538379251e+00*X[21+NA*3]) );
if ( LB > 3 ) { qq = qa[22]*qb[6] + qa[6]*qb[22]; } else { qq = qa[22]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[22+NA*6] + (9.258200997725513e-01*X[13+NA*6]) );
G[1] += qq * ( tcrd[1]*X[22+NA*6] + (9.258200997725513e-01*X[12+NA*6])+(-1.154700538379251e+00*X[22+NA]) );
G[2] += qq * ( tcrd[2]*X[22+NA*6] + (7.559289460184544e-01*X[15+NA*6])+(-1.154700538379251e+00*X[22+NA*3]) );
if ( LB > 3 ) { qq = qa[23]*qb[6] + qa[6]*qb[23]; } else { qq = qa[23]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[23+NA*6] + (1.069044967649698e+00*X[14+NA*6]) );
G[1] += qq * ( tcrd[1]*X[23+NA*6] + (-1.069044967649698e+00*X[15+NA*6])+(-1.154700538379251e+00*X[23+NA]) );
G[2] += qq * ( tcrd[2]*X[23+NA*6] + (-1.154700538379251e+00*X[23+NA*3]) );
if ( LB > 3 ) { qq = qa[24]*qb[6] + qa[6]*qb[24]; } else { qq = qa[24]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[24+NA*6] + (1.069044967649698e+00*X[15+NA*6]) );
G[1] += qq * ( tcrd[1]*X[24+NA*6] + (1.069044967649698e+00*X[14+NA*6])+(-1.154700538379251e+00*X[24+NA]) );
G[2] += qq * ( tcrd[2]*X[24+NA*6] + (-1.154700538379251e+00*X[24+NA*3]) );
if ( LB > 3 ) { qq = qa[16]*qb[7] + qa[7]*qb[16]; } else { qq = qa[16]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[16+NA*7] + (-6.998542122237653e-01*X[10+NA*7])+(-1.154700538379251e+00*X[16+NA*2]) );
G[1] += qq * ( tcrd[1]*X[16+NA*7] + (-6.998542122237653e-01*X[11+NA*7])+(1.154700538379251e+00*X[16+NA*3]) );
G[2] += qq * ( tcrd[2]*X[16+NA*7] + (1.142857142857143e+00*X[9+NA*7]) );
if ( LB > 3 ) { qq = qa[17]*qb[7] + qa[7]*qb[17]; } else { qq = qa[17]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[17+NA*7] + (9.035079029052513e-01*X[9+NA*7])+(-3.499271061118825e-01*X[12+NA*7])+(-1.154700538379251e+00*X[17+NA*2]) );
G[1] += qq * ( tcrd[1]*X[17+NA*7] + (-3.499271061118825e-01*X[13+NA*7])+(1.154700538379251e+00*X[17+NA*3]) );
G[2] += qq * ( tcrd[2]*X[17+NA*7] + (1.106566670344976e+00*X[10+NA*7]) );
if ( LB > 3 ) { qq = qa[18]*qb[7] + qa[7]*qb[18]; } else { qq = qa[18]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[18+NA*7] + (-3.499271061118825e-01*X[13+NA*7])+(-1.154700538379251e+00*X[18+NA*2]) );
G[1] += qq * ( tcrd[1]*X[18+NA*7] + (9.035079029052513e-01*X[9+NA*7])+(3.499271061118825e-01*X[12+NA*7])+(1.154700538379251e+00*X[18+NA*3]) );
G[2] += qq * ( tcrd[2]*X[18+NA*7] + (1.106566670344976e+00*X[11+NA*7]) );
if ( LB > 3 ) { qq = qa[19]*qb[7] + qa[7]*qb[19]; } else { qq = qa[19]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[19+NA*7] + (7.824607964359518e-01*X[10+NA*7])+(-2.020305089104422e-01*X[14+NA*7])+(-1.154700538379251e+00*X[19+NA*2]) );
G[1] += qq * ( tcrd[1]*X[19+NA*7] + (-7.824607964359518e-01*X[11+NA*7])+(-2.020305089104422e-01*X[15+NA*7])+(1.154700538379251e+00*X[19+NA*3]) );
G[2] += qq * ( tcrd[2]*X[19+NA*7] + (9.897433186107870e-01*X[12+NA*7]) );
if ( LB > 3 ) { qq = qa[20]*qb[7] + qa[7]*qb[20]; } else { qq = qa[20]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[20+NA*7] + (7.824607964359518e-01*X[11+NA*7])+(-2.020305089104422e-01*X[15+NA*7])+(-1.154700538379251e+00*X[20+NA*2]) );
G[1] += qq * ( tcrd[1]*X[20+NA*7] + (7.824607964359518e-01*X[10+NA*7])+(2.020305089104422e-01*X[14+NA*7])+(1.154700538379251e+00*X[20+NA*3]) );
G[2] += qq * ( tcrd[2]*X[20+NA*7] + (9.897433186107870e-01*X[13+NA*7]) );
if ( LB > 3 ) { qq = qa[21]*qb[7] + qa[7]*qb[21]; } else { qq = qa[21]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[21+NA*7] + (9.258200997725513e-01*X[12+NA*7])+(-1.154700538379251e+00*X[21+NA*2]) );
G[1] += qq * ( tcrd[1]*X[21+NA*7] + (-9.258200997725513e-01*X[13+NA*7])+(1.154700538379251e+00*X[21+NA*3]) );
G[2] += qq * ( tcrd[2]*X[21+NA*7] + (7.559289460184544e-01*X[14+NA*7]) );
if ( LB > 3 ) { qq = qa[22]*qb[7] + qa[7]*qb[22]; } else { qq = qa[22]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[22+NA*7] + (9.258200997725513e-01*X[13+NA*7])+(-1.154700538379251e+00*X[22+NA*2]) );
G[1] += qq * ( tcrd[1]*X[22+NA*7] + (9.258200997725513e-01*X[12+NA*7])+(1.154700538379251e+00*X[22+NA*3]) );
G[2] += qq * ( tcrd[2]*X[22+NA*7] + (7.559289460184544e-01*X[15+NA*7]) );
if ( LB > 3 ) { qq = qa[23]*qb[7] + qa[7]*qb[23]; } else { qq = qa[23]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[23+NA*7] + (1.069044967649698e+00*X[14+NA*7])+(-1.154700538379251e+00*X[23+NA*2]) );
G[1] += qq * ( tcrd[1]*X[23+NA*7] + (-1.069044967649698e+00*X[15+NA*7])+(1.154700538379251e+00*X[23+NA*3]) );
G[2] += qq * ( tcrd[2]*X[23+NA*7] );
if ( LB > 3 ) { qq = qa[24]*qb[7] + qa[7]*qb[24]; } else { qq = qa[24]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[24+NA*7] + (1.069044967649698e+00*X[15+NA*7])+(-1.154700538379251e+00*X[24+NA*2]) );
G[1] += qq * ( tcrd[1]*X[24+NA*7] + (1.069044967649698e+00*X[14+NA*7])+(1.154700538379251e+00*X[24+NA*3]) );
G[2] += qq * ( tcrd[2]*X[24+NA*7] );
if ( LB > 3 ) { qq = qa[16]*qb[8] + qa[8]*qb[16]; } else { qq = qa[16]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[16+NA*8] + (-6.998542122237653e-01*X[10+NA*8])+(-1.154700538379251e+00*X[16+NA*3]) );
G[1] += qq * ( tcrd[1]*X[16+NA*8] + (-6.998542122237653e-01*X[11+NA*8])+(-1.154700538379251e+00*X[16+NA*2]) );
G[2] += qq * ( tcrd[2]*X[16+NA*8] + (1.142857142857143e+00*X[9+NA*8]) );
if ( LB > 3 ) { qq = qa[17]*qb[8] + qa[8]*qb[17]; } else { qq = qa[17]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[17+NA*8] + (9.035079029052513e-01*X[9+NA*8])+(-3.499271061118825e-01*X[12+NA*8])+(-1.154700538379251e+00*X[17+NA*3]) );
G[1] += qq * ( tcrd[1]*X[17+NA*8] + (-3.499271061118825e-01*X[13+NA*8])+(-1.154700538379251e+00*X[17+NA*2]) );
G[2] += qq * ( tcrd[2]*X[17+NA*8] + (1.106566670344976e+00*X[10+NA*8]) );
if ( LB > 3 ) { qq = qa[18]*qb[8] + qa[8]*qb[18]; } else { qq = qa[18]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[18+NA*8] + (-3.499271061118825e-01*X[13+NA*8])+(-1.154700538379251e+00*X[18+NA*3]) );
G[1] += qq * ( tcrd[1]*X[18+NA*8] + (9.035079029052513e-01*X[9+NA*8])+(3.499271061118825e-01*X[12+NA*8])+(-1.154700538379251e+00*X[18+NA*2]) );
G[2] += qq * ( tcrd[2]*X[18+NA*8] + (1.106566670344976e+00*X[11+NA*8]) );
if ( LB > 3 ) { qq = qa[19]*qb[8] + qa[8]*qb[19]; } else { qq = qa[19]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[19+NA*8] + (7.824607964359518e-01*X[10+NA*8])+(-2.020305089104422e-01*X[14+NA*8])+(-1.154700538379251e+00*X[19+NA*3]) );
G[1] += qq * ( tcrd[1]*X[19+NA*8] + (-7.824607964359518e-01*X[11+NA*8])+(-2.020305089104422e-01*X[15+NA*8])+(-1.154700538379251e+00*X[19+NA*2]) );
G[2] += qq * ( tcrd[2]*X[19+NA*8] + (9.897433186107870e-01*X[12+NA*8]) );
if ( LB > 3 ) { qq = qa[20]*qb[8] + qa[8]*qb[20]; } else { qq = qa[20]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[20+NA*8] + (7.824607964359518e-01*X[11+NA*8])+(-2.020305089104422e-01*X[15+NA*8])+(-1.154700538379251e+00*X[20+NA*3]) );
G[1] += qq * ( tcrd[1]*X[20+NA*8] + (7.824607964359518e-01*X[10+NA*8])+(2.020305089104422e-01*X[14+NA*8])+(-1.154700538379251e+00*X[20+NA*2]) );
G[2] += qq * ( tcrd[2]*X[20+NA*8] + (9.897433186107870e-01*X[13+NA*8]) );
if ( LB > 3 ) { qq = qa[21]*qb[8] + qa[8]*qb[21]; } else { qq = qa[21]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[21+NA*8] + (9.258200997725513e-01*X[12+NA*8])+(-1.154700538379251e+00*X[21+NA*3]) );
G[1] += qq * ( tcrd[1]*X[21+NA*8] + (-9.258200997725513e-01*X[13+NA*8])+(-1.154700538379251e+00*X[21+NA*2]) );
G[2] += qq * ( tcrd[2]*X[21+NA*8] + (7.559289460184544e-01*X[14+NA*8]) );
if ( LB > 3 ) { qq = qa[22]*qb[8] + qa[8]*qb[22]; } else { qq = qa[22]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[22+NA*8] + (9.258200997725513e-01*X[13+NA*8])+(-1.154700538379251e+00*X[22+NA*3]) );
G[1] += qq * ( tcrd[1]*X[22+NA*8] + (9.258200997725513e-01*X[12+NA*8])+(-1.154700538379251e+00*X[22+NA*2]) );
G[2] += qq * ( tcrd[2]*X[22+NA*8] + (7.559289460184544e-01*X[15+NA*8]) );
if ( LB > 3 ) { qq = qa[23]*qb[8] + qa[8]*qb[23]; } else { qq = qa[23]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[23+NA*8] + (1.069044967649698e+00*X[14+NA*8])+(-1.154700538379251e+00*X[23+NA*3]) );
G[1] += qq * ( tcrd[1]*X[23+NA*8] + (-1.069044967649698e+00*X[15+NA*8])+(-1.154700538379251e+00*X[23+NA*2]) );
G[2] += qq * ( tcrd[2]*X[23+NA*8] );
if ( LB > 3 ) { qq = qa[24]*qb[8] + qa[8]*qb[24]; } else { qq = qa[24]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[24+NA*8] + (1.069044967649698e+00*X[15+NA*8])+(-1.154700538379251e+00*X[24+NA*3]) );
G[1] += qq * ( tcrd[1]*X[24+NA*8] + (1.069044967649698e+00*X[14+NA*8])+(-1.154700538379251e+00*X[24+NA*2]) );
G[2] += qq * ( tcrd[2]*X[24+NA*8] );
}

template <int NA,int LB>
void ExpHobGrdAcc_GF( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 3 ) { qq = qa[16]*qb[9] - qa[9]*qb[16]; } else { qq = qa[16]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[16+NA*9] + (-6.998542122237653e-01*X[10+NA*9])+(6.928203230275510e-01*X[16+NA*5]) );
G[1] += qq * ( tcrd[1]*X[16+NA*9] + (-6.998542122237653e-01*X[11+NA*9])+(6.928203230275510e-01*X[16+NA*6]) );
G[2] += qq * ( tcrd[2]*X[16+NA*9] + (1.142857142857143e+00*X[9+NA*9])+(-1.200000000000000e+00*X[16+NA*4]) );
if ( LB > 3 ) { qq = qa[17]*qb[9] - qa[9]*qb[17]; } else { qq = qa[17]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[17+NA*9] + (9.035079029052513e-01*X[9+NA*9])+(-3.499271061118825e-01*X[12+NA*9])+(6.928203230275510e-01*X[17+NA*5]) );
G[1] += qq * ( tcrd[1]*X[17+NA*9] + (-3.499271061118825e-01*X[13+NA*9])+(6.928203230275510e-01*X[17+NA*6]) );
G[2] += qq * ( tcrd[2]*X[17+NA*9] + (1.106566670344976e+00*X[10+NA*9])+(-1.200000000000000e+00*X[17+NA*4]) );
if ( LB > 3 ) { qq = qa[18]*qb[9] - qa[9]*qb[18]; } else { qq = qa[18]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[18+NA*9] + (-3.499271061118825e-01*X[13+NA*9])+(6.928203230275510e-01*X[18+NA*5]) );
G[1] += qq * ( tcrd[1]*X[18+NA*9] + (9.035079029052513e-01*X[9+NA*9])+(3.499271061118825e-01*X[12+NA*9])+(6.928203230275510e-01*X[18+NA*6]) );
G[2] += qq * ( tcrd[2]*X[18+NA*9] + (1.106566670344976e+00*X[11+NA*9])+(-1.200000000000000e+00*X[18+NA*4]) );
if ( LB > 3 ) { qq = qa[19]*qb[9] - qa[9]*qb[19]; } else { qq = qa[19]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[19+NA*9] + (7.824607964359518e-01*X[10+NA*9])+(-2.020305089104422e-01*X[14+NA*9])+(6.928203230275510e-01*X[19+NA*5]) );
G[1] += qq * ( tcrd[1]*X[19+NA*9] + (-7.824607964359518e-01*X[11+NA*9])+(-2.020305089104422e-01*X[15+NA*9])+(6.928203230275510e-01*X[19+NA*6]) );
G[2] += qq * ( tcrd[2]*X[19+NA*9] + (9.897433186107870e-01*X[12+NA*9])+(-1.200000000000000e+00*X[19+NA*4]) );
if ( LB > 3 ) { qq = qa[20]*qb[9] - qa[9]*qb[20]; } else { qq = qa[20]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[20+NA*9] + (7.824607964359518e-01*X[11+NA*9])+(-2.020305089104422e-01*X[15+NA*9])+(6.928203230275510e-01*X[20+NA*5]) );
G[1] += qq * ( tcrd[1]*X[20+NA*9] + (7.824607964359518e-01*X[10+NA*9])+(2.020305089104422e-01*X[14+NA*9])+(6.928203230275510e-01*X[20+NA*6]) );
G[2] += qq * ( tcrd[2]*X[20+NA*9] + (9.897433186107870e-01*X[13+NA*9])+(-1.200000000000000e+00*X[20+NA*4]) );
if ( LB > 3 ) { qq = qa[21]*qb[9] - qa[9]*qb[21]; } else { qq = qa[21]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[21+NA*9] + (9.258200997725513e-01*X[12+NA*9])+(6.928203230275510e-01*X[21+NA*5]) );
G[1] += qq * ( tcrd[1]*X[21+NA*9] + (-9.258200997725513e-01*X[13+NA*9])+(6.928203230275510e-01*X[21+NA*6]) );
G[2] += qq * ( tcrd[2]*X[21+NA*9] + (7.559289460184544e-01*X[14+NA*9])+(-1.200000000000000e+00*X[21+NA*4]) );
if ( LB > 3 ) { qq = qa[22]*qb[9] - qa[9]*qb[22]; } else { qq = qa[22]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[22+NA*9] + (9.258200997725513e-01*X[13+NA*9])+(6.928203230275510e-01*X[22+NA*5]) );
G[1] += qq * ( tcrd[1]*X[22+NA*9] + (9.258200997725513e-01*X[12+NA*9])+(6.928203230275510e-01*X[22+NA*6]) );
G[2] += qq * ( tcrd[2]*X[22+NA*9] + (7.559289460184544e-01*X[15+NA*9])+(-1.200000000000000e+00*X[22+NA*4]) );
if ( LB > 3 ) { qq = qa[23]*qb[9] - qa[9]*qb[23]; } else { qq = qa[23]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[23+NA*9] + (1.069044967649698e+00*X[14+NA*9])+(6.928203230275510e-01*X[23+NA*5]) );
G[1] += qq * ( tcrd[1]*X[23+NA*9] + (-1.069044967649698e+00*X[15+NA*9])+(6.928203230275510e-01*X[23+NA*6]) );
G[2] += qq * ( tcrd[2]*X[23+NA*9] + (-1.200000000000000e+00*X[23+NA*4]) );
if ( LB > 3 ) { qq = qa[24]*qb[9] - qa[9]*qb[24]; } else { qq = qa[24]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[24+NA*9] + (1.069044967649698e+00*X[15+NA*9])+(6.928203230275510e-01*X[24+NA*5]) );
G[1] += qq * ( tcrd[1]*X[24+NA*9] + (1.069044967649698e+00*X[14+NA*9])+(6.928203230275510e-01*X[24+NA*6]) );
G[2] += qq * ( tcrd[2]*X[24+NA*9] + (-1.200000000000000e+00*X[24+NA*4]) );
if ( LB > 3 ) { qq = qa[16]*qb[10] - qa[10]*qb[16]; } else { qq = qa[16]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[16+NA*10] + (-6.998542122237653e-01*X[10+NA*10])+(-9.797958971132712e-01*X[16+NA*4])+(2.828427124746190e-01*X[16+NA*7]) );
G[1] += qq * ( tcrd[1]*X[16+NA*10] + (-6.998542122237653e-01*X[11+NA*10])+(2.828427124746190e-01*X[16+NA*8]) );
G[2] += qq * ( tcrd[2]*X[16+NA*10] + (1.142857142857143e+00*X[10+NA*9])+(-1.131370849898476e+00*X[16+NA*5]) );
if ( LB > 3 ) { qq = qa[17]*qb[10] - qa[10]*qb[17]; } else { qq = qa[17]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[17+NA*10] + (9.035079029052513e-01*X[10+NA*9])+(-3.499271061118825e-01*X[12+NA*10])+(-9.797958971132712e-01*X[17+NA*4])+(2.828427124746190e-01*X[17+NA*7]) );
G[1] += qq * ( tcrd[1]*X[17+NA*10] + (-3.499271061118825e-01*X[13+NA*10])+(2.828427124746190e-01*X[17+NA*8]) );
G[2] += qq * ( tcrd[2]*X[17+NA*10] + (1.106566670344976e+00*X[10+NA*10])+(-1.131370849898476e+00*X[17+NA*5]) );
if ( LB > 3 ) { qq = qa[18]*qb[10] - qa[10]*qb[18]; } else { qq = qa[18]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[18+NA*10] + (-3.499271061118825e-01*X[13+NA*10])+(-9.797958971132712e-01*X[18+NA*4])+(2.828427124746190e-01*X[18+NA*7]) );
G[1] += qq * ( tcrd[1]*X[18+NA*10] + (9.035079029052513e-01*X[10+NA*9])+(3.499271061118825e-01*X[12+NA*10])+(2.828427124746190e-01*X[18+NA*8]) );
G[2] += qq * ( tcrd[2]*X[18+NA*10] + (1.106566670344976e+00*X[11+NA*10])+(-1.131370849898476e+00*X[18+NA*5]) );
if ( LB > 3 ) { qq = qa[19]*qb[10] - qa[10]*qb[19]; } else { qq = qa[19]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[19+NA*10] + (7.824607964359518e-01*X[10+NA*10])+(-2.020305089104422e-01*X[14+NA*10])+(-9.797958971132712e-01*X[19+NA*4])+(2.828427124746190e-01*X[19+NA*7]) );
G[1] += qq * ( tcrd[1]*X[19+NA*10] + (-7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[15+NA*10])+(2.828427124746190e-01*X[19+NA*8]) );
G[2] += qq * ( tcrd[2]*X[19+NA*10] + (9.897433186107870e-01*X[12+NA*10])+(-1.131370849898476e+00*X[19+NA*5]) );
if ( LB > 3 ) { qq = qa[20]*qb[10] - qa[10]*qb[20]; } else { qq = qa[20]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[20+NA*10] + (7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[15+NA*10])+(-9.797958971132712e-01*X[20+NA*4])+(2.828427124746190e-01*X[20+NA*7]) );
G[1] += qq * ( tcrd[1]*X[20+NA*10] + (7.824607964359518e-01*X[10+NA*10])+(2.020305089104422e-01*X[14+NA*10])+(2.828427124746190e-01*X[20+NA*8]) );
G[2] += qq * ( tcrd[2]*X[20+NA*10] + (9.897433186107870e-01*X[13+NA*10])+(-1.131370849898476e+00*X[20+NA*5]) );
if ( LB > 3 ) { qq = qa[21]*qb[10] - qa[10]*qb[21]; } else { qq = qa[21]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[21+NA*10] + (9.258200997725513e-01*X[12+NA*10])+(-9.797958971132712e-01*X[21+NA*4])+(2.828427124746190e-01*X[21+NA*7]) );
G[1] += qq * ( tcrd[1]*X[21+NA*10] + (-9.258200997725513e-01*X[13+NA*10])+(2.828427124746190e-01*X[21+NA*8]) );
G[2] += qq * ( tcrd[2]*X[21+NA*10] + (7.559289460184544e-01*X[14+NA*10])+(-1.131370849898476e+00*X[21+NA*5]) );
if ( LB > 3 ) { qq = qa[22]*qb[10] - qa[10]*qb[22]; } else { qq = qa[22]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[22+NA*10] + (9.258200997725513e-01*X[13+NA*10])+(-9.797958971132712e-01*X[22+NA*4])+(2.828427124746190e-01*X[22+NA*7]) );
G[1] += qq * ( tcrd[1]*X[22+NA*10] + (9.258200997725513e-01*X[12+NA*10])+(2.828427124746190e-01*X[22+NA*8]) );
G[2] += qq * ( tcrd[2]*X[22+NA*10] + (7.559289460184544e-01*X[15+NA*10])+(-1.131370849898476e+00*X[22+NA*5]) );
if ( LB > 3 ) { qq = qa[23]*qb[10] - qa[10]*qb[23]; } else { qq = qa[23]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[23+NA*10] + (1.069044967649698e+00*X[14+NA*10])+(-9.797958971132712e-01*X[23+NA*4])+(2.828427124746190e-01*X[23+NA*7]) );
G[1] += qq * ( tcrd[1]*X[23+NA*10] + (-1.069044967649698e+00*X[15+NA*10])+(2.828427124746190e-01*X[23+NA*8]) );
G[2] += qq * ( tcrd[2]*X[23+NA*10] + (-1.131370849898476e+00*X[23+NA*5]) );
if ( LB > 3 ) { qq = qa[24]*qb[10] - qa[10]*qb[24]; } else { qq = qa[24]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[24+NA*10] + (1.069044967649698e+00*X[15+NA*10])+(-9.797958971132712e-01*X[24+NA*4])+(2.828427124746190e-01*X[24+NA*7]) );
G[1] += qq * ( tcrd[1]*X[24+NA*10] + (1.069044967649698e+00*X[14+NA*10])+(2.828427124746190e-01*X[24+NA*8]) );
G[2] += qq * ( tcrd[2]*X[24+NA*10] + (-1.131370849898476e+00*X[24+NA*5]) );
if ( LB > 3 ) { qq = qa[16]*qb[11] - qa[11]*qb[16]; } else { qq = qa[16]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[16+NA*11] + (-6.998542122237653e-01*X[11+NA*10])+(2.828427124746190e-01*X[16+NA*8]) );
G[1] += qq * ( tcrd[1]*X[16+NA*11] + (-6.998542122237653e-01*X[11+NA*11])+(-9.797958971132712e-01*X[16+NA*4])+(-2.828427124746190e-01*X[16+NA*7]) );
G[2] += qq * ( tcrd[2]*X[16+NA*11] + (1.142857142857143e+00*X[11+NA*9])+(-1.131370849898476e+00*X[16+NA*6]) );
if ( LB > 3 ) { qq = qa[17]*qb[11] - qa[11]*qb[17]; } else { qq = qa[17]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[17+NA*11] + (9.035079029052513e-01*X[11+NA*9])+(-3.499271061118825e-01*X[12+NA*11])+(2.828427124746190e-01*X[17+NA*8]) );
G[1] += qq * ( tcrd[1]*X[17+NA*11] + (-3.499271061118825e-01*X[13+NA*11])+(-9.797958971132712e-01*X[17+NA*4])+(-2.828427124746190e-01*X[17+NA*7]) );
G[2] += qq * ( tcrd[2]*X[17+NA*11] + (1.106566670344976e+00*X[11+NA*10])+(-1.131370849898476e+00*X[17+NA*6]) );
if ( LB > 3 ) { qq = qa[18]*qb[11] - qa[11]*qb[18]; } else { qq = qa[18]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[18+NA*11] + (-3.499271061118825e-01*X[13+NA*11])+(2.828427124746190e-01*X[18+NA*8]) );
G[1] += qq * ( tcrd[1]*X[18+NA*11] + (9.035079029052513e-01*X[11+NA*9])+(3.499271061118825e-01*X[12+NA*11])+(-9.797958971132712e-01*X[18+NA*4])+(-2.828427124746190e-01*X[18+NA*7]) );
G[2] += qq * ( tcrd[2]*X[18+NA*11] + (1.106566670344976e+00*X[11+NA*11])+(-1.131370849898476e+00*X[18+NA*6]) );
if ( LB > 3 ) { qq = qa[19]*qb[11] - qa[11]*qb[19]; } else { qq = qa[19]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[19+NA*11] + (7.824607964359518e-01*X[11+NA*10])+(-2.020305089104422e-01*X[14+NA*11])+(2.828427124746190e-01*X[19+NA*8]) );
G[1] += qq * ( tcrd[1]*X[19+NA*11] + (-7.824607964359518e-01*X[11+NA*11])+(-2.020305089104422e-01*X[15+NA*11])+(-9.797958971132712e-01*X[19+NA*4])+(-2.828427124746190e-01*X[19+NA*7]) );
G[2] += qq * ( tcrd[2]*X[19+NA*11] + (9.897433186107870e-01*X[12+NA*11])+(-1.131370849898476e+00*X[19+NA*6]) );
if ( LB > 3 ) { qq = qa[20]*qb[11] - qa[11]*qb[20]; } else { qq = qa[20]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[20+NA*11] + (7.824607964359518e-01*X[11+NA*11])+(-2.020305089104422e-01*X[15+NA*11])+(2.828427124746190e-01*X[20+NA*8]) );
G[1] += qq * ( tcrd[1]*X[20+NA*11] + (7.824607964359518e-01*X[11+NA*10])+(2.020305089104422e-01*X[14+NA*11])+(-9.797958971132712e-01*X[20+NA*4])+(-2.828427124746190e-01*X[20+NA*7]) );
G[2] += qq * ( tcrd[2]*X[20+NA*11] + (9.897433186107870e-01*X[13+NA*11])+(-1.131370849898476e+00*X[20+NA*6]) );
if ( LB > 3 ) { qq = qa[21]*qb[11] - qa[11]*qb[21]; } else { qq = qa[21]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[21+NA*11] + (9.258200997725513e-01*X[12+NA*11])+(2.828427124746190e-01*X[21+NA*8]) );
G[1] += qq * ( tcrd[1]*X[21+NA*11] + (-9.258200997725513e-01*X[13+NA*11])+(-9.797958971132712e-01*X[21+NA*4])+(-2.828427124746190e-01*X[21+NA*7]) );
G[2] += qq * ( tcrd[2]*X[21+NA*11] + (7.559289460184544e-01*X[14+NA*11])+(-1.131370849898476e+00*X[21+NA*6]) );
if ( LB > 3 ) { qq = qa[22]*qb[11] - qa[11]*qb[22]; } else { qq = qa[22]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[22+NA*11] + (9.258200997725513e-01*X[13+NA*11])+(2.828427124746190e-01*X[22+NA*8]) );
G[1] += qq * ( tcrd[1]*X[22+NA*11] + (9.258200997725513e-01*X[12+NA*11])+(-9.797958971132712e-01*X[22+NA*4])+(-2.828427124746190e-01*X[22+NA*7]) );
G[2] += qq * ( tcrd[2]*X[22+NA*11] + (7.559289460184544e-01*X[15+NA*11])+(-1.131370849898476e+00*X[22+NA*6]) );
if ( LB > 3 ) { qq = qa[23]*qb[11] - qa[11]*qb[23]; } else { qq = qa[23]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[23+NA*11] + (1.069044967649698e+00*X[14+NA*11])+(2.828427124746190e-01*X[23+NA*8]) );
G[1] += qq * ( tcrd[1]*X[23+NA*11] + (-1.069044967649698e+00*X[15+NA*11])+(-9.797958971132712e-01*X[23+NA*4])+(-2.828427124746190e-01*X[23+NA*7]) );
G[2] += qq * ( tcrd[2]*X[23+NA*11] + (-1.131370849898476e+00*X[23+NA*6]) );
if ( LB > 3 ) { qq = qa[24]*qb[11] - qa[11]*qb[24]; } else { qq = qa[24]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[24+NA*11] + (1.069044967649698e+00*X[15+NA*11])+(2.828427124746190e-01*X[24+NA*8]) );
G[1] += qq * ( tcrd[1]*X[24+NA*11] + (1.069044967649698e+00*X[14+NA*11])+(-9.797958971132712e-01*X[24+NA*4])+(-2.828427124746190e-01*X[24+NA*7]) );
G[2] += qq * ( tcrd[2]*X[24+NA*11] + (-1.131370849898476e+00*X[24+NA*6]) );
if ( LB > 3 ) { qq = qa[16]*qb[12] - qa[12]*qb[16]; } else { qq = qa[16]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[16+NA*12] + (-6.998542122237653e-01*X[12+NA*10])+(-8.944271909999160e-01*X[16+NA*5]) );
G[1] += qq * ( tcrd[1]*X[16+NA*12] + (-6.998542122237653e-01*X[12+NA*11])+(8.944271909999160e-01*X[16+NA*6]) );
G[2] += qq * ( tcrd[2]*X[16+NA*12] + (1.142857142857143e+00*X[12+NA*9])+(-8.944271909999160e-01*X[16+NA*7]) );
if ( LB > 3 ) { qq = qa[17]*qb[12] - qa[12]*qb[17]; } else { qq = qa[17]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[17+NA*12] + (9.035079029052513e-01*X[12+NA*9])+(-3.499271061118825e-01*X[12+NA*12])+(-8.944271909999160e-01*X[17+NA*5]) );
G[1] += qq * ( tcrd[1]*X[17+NA*12] + (-3.499271061118825e-01*X[13+NA*12])+(8.944271909999160e-01*X[17+NA*6]) );
G[2] += qq * ( tcrd[2]*X[17+NA*12] + (1.106566670344976e+00*X[12+NA*10])+(-8.944271909999160e-01*X[17+NA*7]) );
if ( LB > 3 ) { qq = qa[18]*qb[12] - qa[12]*qb[18]; } else { qq = qa[18]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[18+NA*12] + (-3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[18+NA*5]) );
G[1] += qq * ( tcrd[1]*X[18+NA*12] + (9.035079029052513e-01*X[12+NA*9])+(3.499271061118825e-01*X[12+NA*12])+(8.944271909999160e-01*X[18+NA*6]) );
G[2] += qq * ( tcrd[2]*X[18+NA*12] + (1.106566670344976e+00*X[12+NA*11])+(-8.944271909999160e-01*X[18+NA*7]) );
if ( LB > 3 ) { qq = qa[19]*qb[12] - qa[12]*qb[19]; } else { qq = qa[19]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[19+NA*12] + (7.824607964359518e-01*X[12+NA*10])+(-2.020305089104422e-01*X[14+NA*12])+(-8.944271909999160e-01*X[19+NA*5]) );
G[1] += qq * ( tcrd[1]*X[19+NA*12] + (-7.824607964359518e-01*X[12+NA*11])+(-2.020305089104422e-01*X[15+NA*12])+(8.944271909999160e-01*X[19+NA*6]) );
G[2] += qq * ( tcrd[2]*X[19+NA*12] + (9.897433186107870e-01*X[12+NA*12])+(-8.944271909999160e-01*X[19+NA*7]) );
if ( LB > 3 ) { qq = qa[20]*qb[12] - qa[12]*qb[20]; } else { qq = qa[20]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[20+NA*12] + (7.824607964359518e-01*X[12+NA*11])+(-2.020305089104422e-01*X[15+NA*12])+(-8.944271909999160e-01*X[20+NA*5]) );
G[1] += qq * ( tcrd[1]*X[20+NA*12] + (7.824607964359518e-01*X[12+NA*10])+(2.020305089104422e-01*X[14+NA*12])+(8.944271909999160e-01*X[20+NA*6]) );
G[2] += qq * ( tcrd[2]*X[20+NA*12] + (9.897433186107870e-01*X[13+NA*12])+(-8.944271909999160e-01*X[20+NA*7]) );
if ( LB > 3 ) { qq = qa[21]*qb[12] - qa[12]*qb[21]; } else { qq = qa[21]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[21+NA*12] + (9.258200997725513e-01*X[12+NA*12])+(-8.944271909999160e-01*X[21+NA*5]) );
G[1] += qq * ( tcrd[1]*X[21+NA*12] + (-9.258200997725513e-01*X[13+NA*12])+(8.944271909999160e-01*X[21+NA*6]) );
G[2] += qq * ( tcrd[2]*X[21+NA*12] + (7.559289460184544e-01*X[14+NA*12])+(-8.944271909999160e-01*X[21+NA*7]) );
if ( LB > 3 ) { qq = qa[22]*qb[12] - qa[12]*qb[22]; } else { qq = qa[22]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[22+NA*12] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[22+NA*5]) );
G[1] += qq * ( tcrd[1]*X[22+NA*12] + (9.258200997725513e-01*X[12+NA*12])+(8.944271909999160e-01*X[22+NA*6]) );
G[2] += qq * ( tcrd[2]*X[22+NA*12] + (7.559289460184544e-01*X[15+NA*12])+(-8.944271909999160e-01*X[22+NA*7]) );
if ( LB > 3 ) { qq = qa[23]*qb[12] - qa[12]*qb[23]; } else { qq = qa[23]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[23+NA*12] + (1.069044967649698e+00*X[14+NA*12])+(-8.944271909999160e-01*X[23+NA*5]) );
G[1] += qq * ( tcrd[1]*X[23+NA*12] + (-1.069044967649698e+00*X[15+NA*12])+(8.944271909999160e-01*X[23+NA*6]) );
G[2] += qq * ( tcrd[2]*X[23+NA*12] + (-8.944271909999160e-01*X[23+NA*7]) );
if ( LB > 3 ) { qq = qa[24]*qb[12] - qa[12]*qb[24]; } else { qq = qa[24]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[24+NA*12] + (1.069044967649698e+00*X[15+NA*12])+(-8.944271909999160e-01*X[24+NA*5]) );
G[1] += qq * ( tcrd[1]*X[24+NA*12] + (1.069044967649698e+00*X[14+NA*12])+(8.944271909999160e-01*X[24+NA*6]) );
G[2] += qq * ( tcrd[2]*X[24+NA*12] + (-8.944271909999160e-01*X[24+NA*7]) );
if ( LB > 3 ) { qq = qa[16]*qb[13] - qa[13]*qb[16]; } else { qq = qa[16]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[16+NA*13] + (-6.998542122237653e-01*X[13+NA*10])+(-8.944271909999160e-01*X[16+NA*6]) );
G[1] += qq * ( tcrd[1]*X[16+NA*13] + (-6.998542122237653e-01*X[13+NA*11])+(-8.944271909999160e-01*X[16+NA*5]) );
G[2] += qq * ( tcrd[2]*X[16+NA*13] + (1.142857142857143e+00*X[13+NA*9])+(-8.944271909999160e-01*X[16+NA*8]) );
if ( LB > 3 ) { qq = qa[17]*qb[13] - qa[13]*qb[17]; } else { qq = qa[17]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[17+NA*13] + (9.035079029052513e-01*X[13+NA*9])+(-3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[17+NA*6]) );
G[1] += qq * ( tcrd[1]*X[17+NA*13] + (-3.499271061118825e-01*X[13+NA*13])+(-8.944271909999160e-01*X[17+NA*5]) );
G[2] += qq * ( tcrd[2]*X[17+NA*13] + (1.106566670344976e+00*X[13+NA*10])+(-8.944271909999160e-01*X[17+NA*8]) );
if ( LB > 3 ) { qq = qa[18]*qb[13] - qa[13]*qb[18]; } else { qq = qa[18]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[18+NA*13] + (-3.499271061118825e-01*X[13+NA*13])+(-8.944271909999160e-01*X[18+NA*6]) );
G[1] += qq * ( tcrd[1]*X[18+NA*13] + (9.035079029052513e-01*X[13+NA*9])+(3.499271061118825e-01*X[13+NA*12])+(-8.944271909999160e-01*X[18+NA*5]) );
G[2] += qq * ( tcrd[2]*X[18+NA*13] + (1.106566670344976e+00*X[13+NA*11])+(-8.944271909999160e-01*X[18+NA*8]) );
if ( LB > 3 ) { qq = qa[19]*qb[13] - qa[13]*qb[19]; } else { qq = qa[19]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[19+NA*13] + (7.824607964359518e-01*X[13+NA*10])+(-2.020305089104422e-01*X[14+NA*13])+(-8.944271909999160e-01*X[19+NA*6]) );
G[1] += qq * ( tcrd[1]*X[19+NA*13] + (-7.824607964359518e-01*X[13+NA*11])+(-2.020305089104422e-01*X[15+NA*13])+(-8.944271909999160e-01*X[19+NA*5]) );
G[2] += qq * ( tcrd[2]*X[19+NA*13] + (9.897433186107870e-01*X[13+NA*12])+(-8.944271909999160e-01*X[19+NA*8]) );
if ( LB > 3 ) { qq = qa[20]*qb[13] - qa[13]*qb[20]; } else { qq = qa[20]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[20+NA*13] + (7.824607964359518e-01*X[13+NA*11])+(-2.020305089104422e-01*X[15+NA*13])+(-8.944271909999160e-01*X[20+NA*6]) );
G[1] += qq * ( tcrd[1]*X[20+NA*13] + (7.824607964359518e-01*X[13+NA*10])+(2.020305089104422e-01*X[14+NA*13])+(-8.944271909999160e-01*X[20+NA*5]) );
G[2] += qq * ( tcrd[2]*X[20+NA*13] + (9.897433186107870e-01*X[13+NA*13])+(-8.944271909999160e-01*X[20+NA*8]) );
if ( LB > 3 ) { qq = qa[21]*qb[13] - qa[13]*qb[21]; } else { qq = qa[21]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[21+NA*13] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[21+NA*6]) );
G[1] += qq * ( tcrd[1]*X[21+NA*13] + (-9.258200997725513e-01*X[13+NA*13])+(-8.944271909999160e-01*X[21+NA*5]) );
G[2] += qq * ( tcrd[2]*X[21+NA*13] + (7.559289460184544e-01*X[14+NA*13])+(-8.944271909999160e-01*X[21+NA*8]) );
if ( LB > 3 ) { qq = qa[22]*qb[13] - qa[13]*qb[22]; } else { qq = qa[22]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[22+NA*13] + (9.258200997725513e-01*X[13+NA*13])+(-8.944271909999160e-01*X[22+NA*6]) );
G[1] += qq * ( tcrd[1]*X[22+NA*13] + (9.258200997725513e-01*X[13+NA*12])+(-8.944271909999160e-01*X[22+NA*5]) );
G[2] += qq * ( tcrd[2]*X[22+NA*13] + (7.559289460184544e-01*X[15+NA*13])+(-8.944271909999160e-01*X[22+NA*8]) );
if ( LB > 3 ) { qq = qa[23]*qb[13] - qa[13]*qb[23]; } else { qq = qa[23]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[23+NA*13] + (1.069044967649698e+00*X[14+NA*13])+(-8.944271909999160e-01*X[23+NA*6]) );
G[1] += qq * ( tcrd[1]*X[23+NA*13] + (-1.069044967649698e+00*X[15+NA*13])+(-8.944271909999160e-01*X[23+NA*5]) );
G[2] += qq * ( tcrd[2]*X[23+NA*13] + (-8.944271909999160e-01*X[23+NA*8]) );
if ( LB > 3 ) { qq = qa[24]*qb[13] - qa[13]*qb[24]; } else { qq = qa[24]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[24+NA*13] + (1.069044967649698e+00*X[15+NA*13])+(-8.944271909999160e-01*X[24+NA*6]) );
G[1] += qq * ( tcrd[1]*X[24+NA*13] + (1.069044967649698e+00*X[14+NA*13])+(-8.944271909999160e-01*X[24+NA*5]) );
G[2] += qq * ( tcrd[2]*X[24+NA*13] + (-8.944271909999160e-01*X[24+NA*8]) );
if ( LB > 3 ) { qq = qa[16]*qb[14] - qa[14]*qb[16]; } else { qq = qa[16]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[16+NA*14] + (-6.998542122237653e-01*X[14+NA*10])+(-1.095445115010332e+00*X[16+NA*7]) );
G[1] += qq * ( tcrd[1]*X[16+NA*14] + (-6.998542122237653e-01*X[14+NA*11])+(1.095445115010332e+00*X[16+NA*8]) );
G[2] += qq * ( tcrd[2]*X[16+NA*14] + (1.142857142857143e+00*X[14+NA*9]) );
if ( LB > 3 ) { qq = qa[17]*qb[14] - qa[14]*qb[17]; } else { qq = qa[17]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[17+NA*14] + (9.035079029052513e-01*X[14+NA*9])+(-3.499271061118825e-01*X[14+NA*12])+(-1.095445115010332e+00*X[17+NA*7]) );
G[1] += qq * ( tcrd[1]*X[17+NA*14] + (-3.499271061118825e-01*X[14+NA*13])+(1.095445115010332e+00*X[17+NA*8]) );
G[2] += qq * ( tcrd[2]*X[17+NA*14] + (1.106566670344976e+00*X[14+NA*10]) );
if ( LB > 3 ) { qq = qa[18]*qb[14] - qa[14]*qb[18]; } else { qq = qa[18]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[18+NA*14] + (-3.499271061118825e-01*X[14+NA*13])+(-1.095445115010332e+00*X[18+NA*7]) );
G[1] += qq * ( tcrd[1]*X[18+NA*14] + (9.035079029052513e-01*X[14+NA*9])+(3.499271061118825e-01*X[14+NA*12])+(1.095445115010332e+00*X[18+NA*8]) );
G[2] += qq * ( tcrd[2]*X[18+NA*14] + (1.106566670344976e+00*X[14+NA*11]) );
if ( LB > 3 ) { qq = qa[19]*qb[14] - qa[14]*qb[19]; } else { qq = qa[19]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[19+NA*14] + (7.824607964359518e-01*X[14+NA*10])+(-2.020305089104422e-01*X[14+NA*14])+(-1.095445115010332e+00*X[19+NA*7]) );
G[1] += qq * ( tcrd[1]*X[19+NA*14] + (-7.824607964359518e-01*X[14+NA*11])+(-2.020305089104422e-01*X[15+NA*14])+(1.095445115010332e+00*X[19+NA*8]) );
G[2] += qq * ( tcrd[2]*X[19+NA*14] + (9.897433186107870e-01*X[14+NA*12]) );
if ( LB > 3 ) { qq = qa[20]*qb[14] - qa[14]*qb[20]; } else { qq = qa[20]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[20+NA*14] + (7.824607964359518e-01*X[14+NA*11])+(-2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[20+NA*7]) );
G[1] += qq * ( tcrd[1]*X[20+NA*14] + (7.824607964359518e-01*X[14+NA*10])+(2.020305089104422e-01*X[14+NA*14])+(1.095445115010332e+00*X[20+NA*8]) );
G[2] += qq * ( tcrd[2]*X[20+NA*14] + (9.897433186107870e-01*X[14+NA*13]) );
if ( LB > 3 ) { qq = qa[21]*qb[14] - qa[14]*qb[21]; } else { qq = qa[21]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[21+NA*14] + (9.258200997725513e-01*X[14+NA*12])+(-1.095445115010332e+00*X[21+NA*7]) );
G[1] += qq * ( tcrd[1]*X[21+NA*14] + (-9.258200997725513e-01*X[14+NA*13])+(1.095445115010332e+00*X[21+NA*8]) );
G[2] += qq * ( tcrd[2]*X[21+NA*14] + (7.559289460184544e-01*X[14+NA*14]) );
if ( LB > 3 ) { qq = qa[22]*qb[14] - qa[14]*qb[22]; } else { qq = qa[22]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[22+NA*14] + (9.258200997725513e-01*X[14+NA*13])+(-1.095445115010332e+00*X[22+NA*7]) );
G[1] += qq * ( tcrd[1]*X[22+NA*14] + (9.258200997725513e-01*X[14+NA*12])+(1.095445115010332e+00*X[22+NA*8]) );
G[2] += qq * ( tcrd[2]*X[22+NA*14] + (7.559289460184544e-01*X[15+NA*14]) );
if ( LB > 3 ) { qq = qa[23]*qb[14] - qa[14]*qb[23]; } else { qq = qa[23]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[23+NA*14] + (1.069044967649698e+00*X[14+NA*14])+(-1.095445115010332e+00*X[23+NA*7]) );
G[1] += qq * ( tcrd[1]*X[23+NA*14] + (-1.069044967649698e+00*X[15+NA*14])+(1.095445115010332e+00*X[23+NA*8]) );
G[2] += qq * ( tcrd[2]*X[23+NA*14] );
if ( LB > 3 ) { qq = qa[24]*qb[14] - qa[14]*qb[24]; } else { qq = qa[24]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[24+NA*14] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[24+NA*7]) );
G[1] += qq * ( tcrd[1]*X[24+NA*14] + (1.069044967649698e+00*X[14+NA*14])+(1.095445115010332e+00*X[24+NA*8]) );
G[2] += qq * ( tcrd[2]*X[24+NA*14] );
if ( LB > 3 ) { qq = qa[16]*qb[15] - qa[15]*qb[16]; } else { qq = qa[16]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[16+NA*15] + (-6.998542122237653e-01*X[15+NA*10])+(-1.095445115010332e+00*X[16+NA*8]) );
G[1] += qq * ( tcrd[1]*X[16+NA*15] + (-6.998542122237653e-01*X[15+NA*11])+(-1.095445115010332e+00*X[16+NA*7]) );
G[2] += qq * ( tcrd[2]*X[16+NA*15] + (1.142857142857143e+00*X[15+NA*9]) );
if ( LB > 3 ) { qq = qa[17]*qb[15] - qa[15]*qb[17]; } else { qq = qa[17]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[17+NA*15] + (9.035079029052513e-01*X[15+NA*9])+(-3.499271061118825e-01*X[15+NA*12])+(-1.095445115010332e+00*X[17+NA*8]) );
G[1] += qq * ( tcrd[1]*X[17+NA*15] + (-3.499271061118825e-01*X[15+NA*13])+(-1.095445115010332e+00*X[17+NA*7]) );
G[2] += qq * ( tcrd[2]*X[17+NA*15] + (1.106566670344976e+00*X[15+NA*10]) );
if ( LB > 3 ) { qq = qa[18]*qb[15] - qa[15]*qb[18]; } else { qq = qa[18]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[18+NA*15] + (-3.499271061118825e-01*X[15+NA*13])+(-1.095445115010332e+00*X[18+NA*8]) );
G[1] += qq * ( tcrd[1]*X[18+NA*15] + (9.035079029052513e-01*X[15+NA*9])+(3.499271061118825e-01*X[15+NA*12])+(-1.095445115010332e+00*X[18+NA*7]) );
G[2] += qq * ( tcrd[2]*X[18+NA*15] + (1.106566670344976e+00*X[15+NA*11]) );
if ( LB > 3 ) { qq = qa[19]*qb[15] - qa[15]*qb[19]; } else { qq = qa[19]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[19+NA*15] + (7.824607964359518e-01*X[15+NA*10])+(-2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[19+NA*8]) );
G[1] += qq * ( tcrd[1]*X[19+NA*15] + (-7.824607964359518e-01*X[15+NA*11])+(-2.020305089104422e-01*X[15+NA*15])+(-1.095445115010332e+00*X[19+NA*7]) );
G[2] += qq * ( tcrd[2]*X[19+NA*15] + (9.897433186107870e-01*X[15+NA*12]) );
if ( LB > 3 ) { qq = qa[20]*qb[15] - qa[15]*qb[20]; } else { qq = qa[20]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[20+NA*15] + (7.824607964359518e-01*X[15+NA*11])+(-2.020305089104422e-01*X[15+NA*15])+(-1.095445115010332e+00*X[20+NA*8]) );
G[1] += qq * ( tcrd[1]*X[20+NA*15] + (7.824607964359518e-01*X[15+NA*10])+(2.020305089104422e-01*X[15+NA*14])+(-1.095445115010332e+00*X[20+NA*7]) );
G[2] += qq * ( tcrd[2]*X[20+NA*15] + (9.897433186107870e-01*X[15+NA*13]) );
if ( LB > 3 ) { qq = qa[21]*qb[15] - qa[15]*qb[21]; } else { qq = qa[21]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[21+NA*15] + (9.258200997725513e-01*X[15+NA*12])+(-1.095445115010332e+00*X[21+NA*8]) );
G[1] += qq * ( tcrd[1]*X[21+NA*15] + (-9.258200997725513e-01*X[15+NA*13])+(-1.095445115010332e+00*X[21+NA*7]) );
G[2] += qq * ( tcrd[2]*X[21+NA*15] + (7.559289460184544e-01*X[15+NA*14]) );
if ( LB > 3 ) { qq = qa[22]*qb[15] - qa[15]*qb[22]; } else { qq = qa[22]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[22+NA*15] + (9.258200997725513e-01*X[15+NA*13])+(-1.095445115010332e+00*X[22+NA*8]) );
G[1] += qq * ( tcrd[1]*X[22+NA*15] + (9.258200997725513e-01*X[15+NA*12])+(-1.095445115010332e+00*X[22+NA*7]) );
G[2] += qq * ( tcrd[2]*X[22+NA*15] + (7.559289460184544e-01*X[15+NA*15]) );
if ( LB > 3 ) { qq = qa[23]*qb[15] - qa[15]*qb[23]; } else { qq = qa[23]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[23+NA*15] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[23+NA*8]) );
G[1] += qq * ( tcrd[1]*X[23+NA*15] + (-1.069044967649698e+00*X[15+NA*15])+(-1.095445115010332e+00*X[23+NA*7]) );
G[2] += qq * ( tcrd[2]*X[23+NA*15] );
if ( LB > 3 ) { qq = qa[24]*qb[15] - qa[15]*qb[24]; } else { qq = qa[24]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[24+NA*15] + (1.069044967649698e+00*X[15+NA*15])+(-1.095445115010332e+00*X[24+NA*8]) );
G[1] += qq * ( tcrd[1]*X[24+NA*15] + (1.069044967649698e+00*X[15+NA*14])+(-1.095445115010332e+00*X[24+NA*7]) );
G[2] += qq * ( tcrd[2]*X[24+NA*15] );
}

template <int NA,int LB>
void ExpHobGrdAcc_GG( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[16]*qb[16];
G[0] += qq * ( tcrd[0]*X[16+NA*16] + (1.399708424447531e+00*X[16+NA*10]) );
G[1] += qq * ( tcrd[1]*X[16+NA*16] + (1.399708424447531e+00*X[16+NA*11]) );
G[2] += qq * ( tcrd[2]*X[16+NA*16] + (-2.285714285714286e+00*X[16+NA*9]) );
qq = qa[17]*qb[16] + qa[16]*qb[17];
G[0] += qq * ( tcrd[0]*X[17+NA*16] + (-9.035079029052513e-01*X[16+NA*9])+(3.499271061118825e-01*X[16+NA*12])+(6.998542122237653e-01*X[17+NA*10]) );
G[1] += qq * ( tcrd[1]*X[17+NA*16] + (3.499271061118825e-01*X[16+NA*13])+(6.998542122237653e-01*X[17+NA*11]) );
G[2] += qq * ( tcrd[2]*X[17+NA*16] + (-1.106566670344976e+00*X[16+NA*10])+(-1.142857142857143e+00*X[17+NA*9]) );
qq = qa[18]*qb[16] + qa[16]*qb[18];
G[0] += qq * ( tcrd[0]*X[18+NA*16] + (3.499271061118825e-01*X[16+NA*13])+(6.998542122237653e-01*X[18+NA*10]) );
G[1] += qq * ( tcrd[1]*X[18+NA*16] + (-9.035079029052513e-01*X[16+NA*9])+(-3.499271061118825e-01*X[16+NA*12])+(6.998542122237653e-01*X[18+NA*11]) );
G[2] += qq * ( tcrd[2]*X[18+NA*16] + (-1.106566670344976e+00*X[16+NA*11])+(-1.142857142857143e+00*X[18+NA*9]) );
qq = qa[19]*qb[16] + qa[16]*qb[19];
G[0] += qq * ( tcrd[0]*X[19+NA*16] + (-7.824607964359518e-01*X[16+NA*10])+(2.020305089104422e-01*X[16+NA*14])+(6.998542122237653e-01*X[19+NA*10]) );
G[1] += qq * ( tcrd[1]*X[19+NA*16] + (7.824607964359518e-01*X[16+NA*11])+(2.020305089104422e-01*X[16+NA*15])+(6.998542122237653e-01*X[19+NA*11]) );
G[2] += qq * ( tcrd[2]*X[19+NA*16] + (-9.897433186107870e-01*X[16+NA*12])+(-1.142857142857143e+00*X[19+NA*9]) );
qq = qa[20]*qb[16] + qa[16]*qb[20];
G[0] += qq * ( tcrd[0]*X[20+NA*16] + (-7.824607964359518e-01*X[16+NA*11])+(2.020305089104422e-01*X[16+NA*15])+(6.998542122237653e-01*X[20+NA*10]) );
G[1] += qq * ( tcrd[1]*X[20+NA*16] + (-7.824607964359518e-01*X[16+NA*10])+(-2.020305089104422e-01*X[16+NA*14])+(6.998542122237653e-01*X[20+NA*11]) );
G[2] += qq * ( tcrd[2]*X[20+NA*16] + (-9.897433186107870e-01*X[16+NA*13])+(-1.142857142857143e+00*X[20+NA*9]) );
qq = qa[21]*qb[16] + qa[16]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*16] + (-9.258200997725513e-01*X[16+NA*12])+(6.998542122237653e-01*X[21+NA*10]) );
G[1] += qq * ( tcrd[1]*X[21+NA*16] + (9.258200997725513e-01*X[16+NA*13])+(6.998542122237653e-01*X[21+NA*11]) );
G[2] += qq * ( tcrd[2]*X[21+NA*16] + (-7.559289460184544e-01*X[16+NA*14])+(-1.142857142857143e+00*X[21+NA*9]) );
qq = qa[22]*qb[16] + qa[16]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*16] + (-9.258200997725513e-01*X[16+NA*13])+(6.998542122237653e-01*X[22+NA*10]) );
G[1] += qq * ( tcrd[1]*X[22+NA*16] + (-9.258200997725513e-01*X[16+NA*12])+(6.998542122237653e-01*X[22+NA*11]) );
G[2] += qq * ( tcrd[2]*X[22+NA*16] + (-7.559289460184544e-01*X[16+NA*15])+(-1.142857142857143e+00*X[22+NA*9]) );
qq = qa[23]*qb[16] + qa[16]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*16] + (-1.069044967649698e+00*X[16+NA*14])+(6.998542122237653e-01*X[23+NA*10]) );
G[1] += qq * ( tcrd[1]*X[23+NA*16] + (1.069044967649698e+00*X[16+NA*15])+(6.998542122237653e-01*X[23+NA*11]) );
G[2] += qq * ( tcrd[2]*X[23+NA*16] + (-1.142857142857143e+00*X[23+NA*9]) );
qq = qa[24]*qb[16] + qa[16]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*16] + (-1.069044967649698e+00*X[16+NA*15])+(6.998542122237653e-01*X[24+NA*10]) );
G[1] += qq * ( tcrd[1]*X[24+NA*16] + (-1.069044967649698e+00*X[16+NA*14])+(6.998542122237653e-01*X[24+NA*11]) );
G[2] += qq * ( tcrd[2]*X[24+NA*16] + (-1.142857142857143e+00*X[24+NA*9]) );
qq = qa[17]*qb[17];
G[0] += qq * ( tcrd[0]*X[17+NA*17] + (-1.807015805810503e+00*X[17+NA*9])+(6.998542122237651e-01*X[17+NA*12]) );
G[1] += qq * ( tcrd[1]*X[17+NA*17] + (6.998542122237651e-01*X[17+NA*13]) );
G[2] += qq * ( tcrd[2]*X[17+NA*17] + (-2.213133340689953e+00*X[17+NA*10]) );
qq = qa[18]*qb[17] + qa[17]*qb[18];
G[0] += qq * ( tcrd[0]*X[18+NA*17] + (3.499271061118825e-01*X[17+NA*13])+(-9.035079029052513e-01*X[18+NA*9])+(3.499271061118825e-01*X[18+NA*12]) );
G[1] += qq * ( tcrd[1]*X[18+NA*17] + (-9.035079029052513e-01*X[17+NA*9])+(-3.499271061118825e-01*X[17+NA*12])+(3.499271061118825e-01*X[18+NA*13]) );
G[2] += qq * ( tcrd[2]*X[18+NA*17] + (-1.106566670344976e+00*X[17+NA*11])+(-1.106566670344976e+00*X[18+NA*10]) );
qq = qa[19]*qb[17] + qa[17]*qb[19];
G[0] += qq * ( tcrd[0]*X[19+NA*17] + (-7.824607964359518e-01*X[17+NA*10])+(2.020305089104422e-01*X[17+NA*14])+(-9.035079029052513e-01*X[19+NA*9])+(3.499271061118825e-01*X[19+NA*12]) );
G[1] += qq * ( tcrd[1]*X[19+NA*17] + (7.824607964359518e-01*X[17+NA*11])+(2.020305089104422e-01*X[17+NA*15])+(3.499271061118825e-01*X[19+NA*13]) );
G[2] += qq * ( tcrd[2]*X[19+NA*17] + (-9.897433186107870e-01*X[17+NA*12])+(-1.106566670344976e+00*X[19+NA*10]) );
qq = qa[20]*qb[17] + qa[17]*qb[20];
G[0] += qq * ( tcrd[0]*X[20+NA*17] + (-7.824607964359518e-01*X[17+NA*11])+(2.020305089104422e-01*X[17+NA*15])+(-9.035079029052513e-01*X[20+NA*9])+(3.499271061118825e-01*X[20+NA*12]) );
G[1] += qq * ( tcrd[1]*X[20+NA*17] + (-7.824607964359518e-01*X[17+NA*10])+(-2.020305089104422e-01*X[17+NA*14])+(3.499271061118825e-01*X[20+NA*13]) );
G[2] += qq * ( tcrd[2]*X[20+NA*17] + (-9.897433186107870e-01*X[17+NA*13])+(-1.106566670344976e+00*X[20+NA*10]) );
qq = qa[21]*qb[17] + qa[17]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*17] + (-9.258200997725513e-01*X[17+NA*12])+(-9.035079029052513e-01*X[21+NA*9])+(3.499271061118825e-01*X[21+NA*12]) );
G[1] += qq * ( tcrd[1]*X[21+NA*17] + (9.258200997725513e-01*X[17+NA*13])+(3.499271061118825e-01*X[21+NA*13]) );
G[2] += qq * ( tcrd[2]*X[21+NA*17] + (-7.559289460184544e-01*X[17+NA*14])+(-1.106566670344976e+00*X[21+NA*10]) );
qq = qa[22]*qb[17] + qa[17]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*17] + (-9.258200997725513e-01*X[17+NA*13])+(-9.035079029052513e-01*X[22+NA*9])+(3.499271061118825e-01*X[22+NA*12]) );
G[1] += qq * ( tcrd[1]*X[22+NA*17] + (-9.258200997725513e-01*X[17+NA*12])+(3.499271061118825e-01*X[22+NA*13]) );
G[2] += qq * ( tcrd[2]*X[22+NA*17] + (-7.559289460184544e-01*X[17+NA*15])+(-1.106566670344976e+00*X[22+NA*10]) );
qq = qa[23]*qb[17] + qa[17]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*17] + (-1.069044967649698e+00*X[17+NA*14])+(-9.035079029052513e-01*X[23+NA*9])+(3.499271061118825e-01*X[23+NA*12]) );
G[1] += qq * ( tcrd[1]*X[23+NA*17] + (1.069044967649698e+00*X[17+NA*15])+(3.499271061118825e-01*X[23+NA*13]) );
G[2] += qq * ( tcrd[2]*X[23+NA*17] + (-1.106566670344976e+00*X[23+NA*10]) );
qq = qa[24]*qb[17] + qa[17]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*17] + (-1.069044967649698e+00*X[17+NA*15])+(-9.035079029052513e-01*X[24+NA*9])+(3.499271061118825e-01*X[24+NA*12]) );
G[1] += qq * ( tcrd[1]*X[24+NA*17] + (-1.069044967649698e+00*X[17+NA*14])+(3.499271061118825e-01*X[24+NA*13]) );
G[2] += qq * ( tcrd[2]*X[24+NA*17] + (-1.106566670344976e+00*X[24+NA*10]) );
qq = qa[18]*qb[18];
G[0] += qq * ( tcrd[0]*X[18+NA*18] + (6.998542122237651e-01*X[18+NA*13]) );
G[1] += qq * ( tcrd[1]*X[18+NA*18] + (-1.807015805810503e+00*X[18+NA*9])+(-6.998542122237651e-01*X[18+NA*12]) );
G[2] += qq * ( tcrd[2]*X[18+NA*18] + (-2.213133340689953e+00*X[18+NA*11]) );
qq = qa[19]*qb[18] + qa[18]*qb[19];
G[0] += qq * ( tcrd[0]*X[19+NA*18] + (-7.824607964359518e-01*X[18+NA*10])+(2.020305089104422e-01*X[18+NA*14])+(3.499271061118825e-01*X[19+NA*13]) );
G[1] += qq * ( tcrd[1]*X[19+NA*18] + (7.824607964359518e-01*X[18+NA*11])+(2.020305089104422e-01*X[18+NA*15])+(-9.035079029052513e-01*X[19+NA*9])+(-3.499271061118825e-01*X[19+NA*12]) );
G[2] += qq * ( tcrd[2]*X[19+NA*18] + (-9.897433186107870e-01*X[18+NA*12])+(-1.106566670344976e+00*X[19+NA*11]) );
qq = qa[20]*qb[18] + qa[18]*qb[20];
G[0] += qq * ( tcrd[0]*X[20+NA*18] + (-7.824607964359518e-01*X[18+NA*11])+(2.020305089104422e-01*X[18+NA*15])+(3.499271061118825e-01*X[20+NA*13]) );
G[1] += qq * ( tcrd[1]*X[20+NA*18] + (-7.824607964359518e-01*X[18+NA*10])+(-2.020305089104422e-01*X[18+NA*14])+(-9.035079029052513e-01*X[20+NA*9])+(-3.499271061118825e-01*X[20+NA*12]) );
G[2] += qq * ( tcrd[2]*X[20+NA*18] + (-9.897433186107870e-01*X[18+NA*13])+(-1.106566670344976e+00*X[20+NA*11]) );
qq = qa[21]*qb[18] + qa[18]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*18] + (-9.258200997725513e-01*X[18+NA*12])+(3.499271061118825e-01*X[21+NA*13]) );
G[1] += qq * ( tcrd[1]*X[21+NA*18] + (9.258200997725513e-01*X[18+NA*13])+(-9.035079029052513e-01*X[21+NA*9])+(-3.499271061118825e-01*X[21+NA*12]) );
G[2] += qq * ( tcrd[2]*X[21+NA*18] + (-7.559289460184544e-01*X[18+NA*14])+(-1.106566670344976e+00*X[21+NA*11]) );
qq = qa[22]*qb[18] + qa[18]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*18] + (-9.258200997725513e-01*X[18+NA*13])+(3.499271061118825e-01*X[22+NA*13]) );
G[1] += qq * ( tcrd[1]*X[22+NA*18] + (-9.258200997725513e-01*X[18+NA*12])+(-9.035079029052513e-01*X[22+NA*9])+(-3.499271061118825e-01*X[22+NA*12]) );
G[2] += qq * ( tcrd[2]*X[22+NA*18] + (-7.559289460184544e-01*X[18+NA*15])+(-1.106566670344976e+00*X[22+NA*11]) );
qq = qa[23]*qb[18] + qa[18]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*18] + (-1.069044967649698e+00*X[18+NA*14])+(3.499271061118825e-01*X[23+NA*13]) );
G[1] += qq * ( tcrd[1]*X[23+NA*18] + (1.069044967649698e+00*X[18+NA*15])+(-9.035079029052513e-01*X[23+NA*9])+(-3.499271061118825e-01*X[23+NA*12]) );
G[2] += qq * ( tcrd[2]*X[23+NA*18] + (-1.106566670344976e+00*X[23+NA*11]) );
qq = qa[24]*qb[18] + qa[18]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*18] + (-1.069044967649698e+00*X[18+NA*15])+(3.499271061118825e-01*X[24+NA*13]) );
G[1] += qq * ( tcrd[1]*X[24+NA*18] + (-1.069044967649698e+00*X[18+NA*14])+(-9.035079029052513e-01*X[24+NA*9])+(-3.499271061118825e-01*X[24+NA*12]) );
G[2] += qq * ( tcrd[2]*X[24+NA*18] + (-1.106566670344976e+00*X[24+NA*11]) );
qq = qa[19]*qb[19];
G[0] += qq * ( tcrd[0]*X[19+NA*19] + (-1.564921592871904e+00*X[19+NA*10])+(4.040610178208843e-01*X[19+NA*14]) );
G[1] += qq * ( tcrd[1]*X[19+NA*19] + (1.564921592871904e+00*X[19+NA*11])+(4.040610178208843e-01*X[19+NA*15]) );
G[2] += qq * ( tcrd[2]*X[19+NA*19] + (-1.979486637221574e+00*X[19+NA*12]) );
qq = qa[20]*qb[19] + qa[19]*qb[20];
G[0] += qq * ( tcrd[0]*X[20+NA*19] + (-7.824607964359518e-01*X[19+NA*11])+(2.020305089104422e-01*X[19+NA*15])+(-7.824607964359518e-01*X[20+NA*10])+(2.020305089104422e-01*X[20+NA*14]) );
G[1] += qq * ( tcrd[1]*X[20+NA*19] + (-7.824607964359518e-01*X[19+NA*10])+(-2.020305089104422e-01*X[19+NA*14])+(7.824607964359518e-01*X[20+NA*11])+(2.020305089104422e-01*X[20+NA*15]) );
G[2] += qq * ( tcrd[2]*X[20+NA*19] + (-9.897433186107870e-01*X[19+NA*13])+(-9.897433186107870e-01*X[20+NA*12]) );
qq = qa[21]*qb[19] + qa[19]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*19] + (-9.258200997725513e-01*X[19+NA*12])+(-7.824607964359518e-01*X[21+NA*10])+(2.020305089104422e-01*X[21+NA*14]) );
G[1] += qq * ( tcrd[1]*X[21+NA*19] + (9.258200997725513e-01*X[19+NA*13])+(7.824607964359518e-01*X[21+NA*11])+(2.020305089104422e-01*X[21+NA*15]) );
G[2] += qq * ( tcrd[2]*X[21+NA*19] + (-7.559289460184544e-01*X[19+NA*14])+(-9.897433186107870e-01*X[21+NA*12]) );
qq = qa[22]*qb[19] + qa[19]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*19] + (-9.258200997725513e-01*X[19+NA*13])+(-7.824607964359518e-01*X[22+NA*10])+(2.020305089104422e-01*X[22+NA*14]) );
G[1] += qq * ( tcrd[1]*X[22+NA*19] + (-9.258200997725513e-01*X[19+NA*12])+(7.824607964359518e-01*X[22+NA*11])+(2.020305089104422e-01*X[22+NA*15]) );
G[2] += qq * ( tcrd[2]*X[22+NA*19] + (-7.559289460184544e-01*X[19+NA*15])+(-9.897433186107870e-01*X[22+NA*12]) );
qq = qa[23]*qb[19] + qa[19]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*19] + (-1.069044967649698e+00*X[19+NA*14])+(-7.824607964359518e-01*X[23+NA*10])+(2.020305089104422e-01*X[23+NA*14]) );
G[1] += qq * ( tcrd[1]*X[23+NA*19] + (1.069044967649698e+00*X[19+NA*15])+(7.824607964359518e-01*X[23+NA*11])+(2.020305089104422e-01*X[23+NA*15]) );
G[2] += qq * ( tcrd[2]*X[23+NA*19] + (-9.897433186107870e-01*X[23+NA*12]) );
qq = qa[24]*qb[19] + qa[19]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*19] + (-1.069044967649698e+00*X[19+NA*15])+(-7.824607964359518e-01*X[24+NA*10])+(2.020305089104422e-01*X[24+NA*14]) );
G[1] += qq * ( tcrd[1]*X[24+NA*19] + (-1.069044967649698e+00*X[19+NA*14])+(7.824607964359518e-01*X[24+NA*11])+(2.020305089104422e-01*X[24+NA*15]) );
G[2] += qq * ( tcrd[2]*X[24+NA*19] + (-9.897433186107870e-01*X[24+NA*12]) );
qq = qa[20]*qb[20];
G[0] += qq * ( tcrd[0]*X[20+NA*20] + (-1.564921592871904e+00*X[20+NA*11])+(4.040610178208843e-01*X[20+NA*15]) );
G[1] += qq * ( tcrd[1]*X[20+NA*20] + (-1.564921592871904e+00*X[20+NA*10])+(-4.040610178208843e-01*X[20+NA*14]) );
G[2] += qq * ( tcrd[2]*X[20+NA*20] + (-1.979486637221574e+00*X[20+NA*13]) );
qq = qa[21]*qb[20] + qa[20]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*20] + (-9.258200997725513e-01*X[20+NA*12])+(-7.824607964359518e-01*X[21+NA*11])+(2.020305089104422e-01*X[21+NA*15]) );
G[1] += qq * ( tcrd[1]*X[21+NA*20] + (9.258200997725513e-01*X[20+NA*13])+(-7.824607964359518e-01*X[21+NA*10])+(-2.020305089104422e-01*X[21+NA*14]) );
G[2] += qq * ( tcrd[2]*X[21+NA*20] + (-7.559289460184544e-01*X[20+NA*14])+(-9.897433186107870e-01*X[21+NA*13]) );
qq = qa[22]*qb[20] + qa[20]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*20] + (-9.258200997725513e-01*X[20+NA*13])+(-7.824607964359518e-01*X[22+NA*11])+(2.020305089104422e-01*X[22+NA*15]) );
G[1] += qq * ( tcrd[1]*X[22+NA*20] + (-9.258200997725513e-01*X[20+NA*12])+(-7.824607964359518e-01*X[22+NA*10])+(-2.020305089104422e-01*X[22+NA*14]) );
G[2] += qq * ( tcrd[2]*X[22+NA*20] + (-7.559289460184544e-01*X[20+NA*15])+(-9.897433186107870e-01*X[22+NA*13]) );
qq = qa[23]*qb[20] + qa[20]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*20] + (-1.069044967649698e+00*X[20+NA*14])+(-7.824607964359518e-01*X[23+NA*11])+(2.020305089104422e-01*X[23+NA*15]) );
G[1] += qq * ( tcrd[1]*X[23+NA*20] + (1.069044967649698e+00*X[20+NA*15])+(-7.824607964359518e-01*X[23+NA*10])+(-2.020305089104422e-01*X[23+NA*14]) );
G[2] += qq * ( tcrd[2]*X[23+NA*20] + (-9.897433186107870e-01*X[23+NA*13]) );
qq = qa[24]*qb[20] + qa[20]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*20] + (-1.069044967649698e+00*X[20+NA*15])+(-7.824607964359518e-01*X[24+NA*11])+(2.020305089104422e-01*X[24+NA*15]) );
G[1] += qq * ( tcrd[1]*X[24+NA*20] + (-1.069044967649698e+00*X[20+NA*14])+(-7.824607964359518e-01*X[24+NA*10])+(-2.020305089104422e-01*X[24+NA*14]) );
G[2] += qq * ( tcrd[2]*X[24+NA*20] + (-9.897433186107870e-01*X[24+NA*13]) );
qq = qa[21]*qb[21];
G[0] += qq * ( tcrd[0]*X[21+NA*21] + (-1.851640199545103e+00*X[21+NA*12]) );
G[1] += qq * ( tcrd[1]*X[21+NA*21] + (1.851640199545103e+00*X[21+NA*13]) );
G[2] += qq * ( tcrd[2]*X[21+NA*21] + (-1.511857892036909e+00*X[21+NA*14]) );
qq = qa[22]*qb[21] + qa[21]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*21] + (-9.258200997725513e-01*X[21+NA*13])+(-9.258200997725513e-01*X[22+NA*12]) );
G[1] += qq * ( tcrd[1]*X[22+NA*21] + (-9.258200997725513e-01*X[21+NA*12])+(9.258200997725513e-01*X[22+NA*13]) );
G[2] += qq * ( tcrd[2]*X[22+NA*21] + (-7.559289460184544e-01*X[21+NA*15])+(-7.559289460184544e-01*X[22+NA*14]) );
qq = qa[23]*qb[21] + qa[21]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*21] + (-1.069044967649698e+00*X[21+NA*14])+(-9.258200997725513e-01*X[23+NA*12]) );
G[1] += qq * ( tcrd[1]*X[23+NA*21] + (1.069044967649698e+00*X[21+NA*15])+(9.258200997725513e-01*X[23+NA*13]) );
G[2] += qq * ( tcrd[2]*X[23+NA*21] + (-7.559289460184544e-01*X[23+NA*14]) );
qq = qa[24]*qb[21] + qa[21]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*21] + (-1.069044967649698e+00*X[21+NA*15])+(-9.258200997725513e-01*X[24+NA*12]) );
G[1] += qq * ( tcrd[1]*X[24+NA*21] + (-1.069044967649698e+00*X[21+NA*14])+(9.258200997725513e-01*X[24+NA*13]) );
G[2] += qq * ( tcrd[2]*X[24+NA*21] + (-7.559289460184544e-01*X[24+NA*14]) );
qq = qa[22]*qb[22];
G[0] += qq * ( tcrd[0]*X[22+NA*22] + (-1.851640199545103e+00*X[22+NA*13]) );
G[1] += qq * ( tcrd[1]*X[22+NA*22] + (-1.851640199545103e+00*X[22+NA*12]) );
G[2] += qq * ( tcrd[2]*X[22+NA*22] + (-1.511857892036909e+00*X[22+NA*15]) );
qq = qa[23]*qb[22] + qa[22]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*22] + (-1.069044967649698e+00*X[22+NA*14])+(-9.258200997725513e-01*X[23+NA*13]) );
G[1] += qq * ( tcrd[1]*X[23+NA*22] + (1.069044967649698e+00*X[22+NA*15])+(-9.258200997725513e-01*X[23+NA*12]) );
G[2] += qq * ( tcrd[2]*X[23+NA*22] + (-7.559289460184544e-01*X[23+NA*15]) );
qq = qa[24]*qb[22] + qa[22]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*22] + (-1.069044967649698e+00*X[22+NA*15])+(-9.258200997725513e-01*X[24+NA*13]) );
G[1] += qq * ( tcrd[1]*X[24+NA*22] + (-1.069044967649698e+00*X[22+NA*14])+(-9.258200997725513e-01*X[24+NA*12]) );
G[2] += qq * ( tcrd[2]*X[24+NA*22] + (-7.559289460184544e-01*X[24+NA*15]) );
qq = qa[23]*qb[23];
G[0] += qq * ( tcrd[0]*X[23+NA*23] + (-2.138089935299395e+00*X[23+NA*14]) );
G[1] += qq * ( tcrd[1]*X[23+NA*23] + (2.138089935299395e+00*X[23+NA*15]) );
G[2] += qq * ( tcrd[2]*X[23+NA*23] );
qq = qa[24]*qb[23] + qa[23]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*23] + (-1.069044967649698e+00*X[23+NA*15])+(-1.069044967649698e+00*X[24+NA*14]) );
G[1] += qq * ( tcrd[1]*X[24+NA*23] + (-1.069044967649698e+00*X[23+NA*14])+(1.069044967649698e+00*X[24+NA*15]) );
G[2] += qq * ( tcrd[2]*X[24+NA*23] );
qq = qa[24]*qb[24];
G[0] += qq * ( tcrd[0]*X[24+NA*24] + (-2.138089935299395e+00*X[24+NA*15]) );
G[1] += qq * ( tcrd[1]*X[24+NA*24] + (-2.138089935299395e+00*X[24+NA*14]) );
G[2] += qq * ( tcrd[2]*X[24+NA*24] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HS( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 4 ) { qq = qa[25]*qb[0] - qa[0]*qb[25]; } else { qq = qa[25]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[25] + (-7.027283689263065e-01*X[17]) );
G[1] += qq * ( tcrd[1]*X[25] + (-7.027283689263065e-01*X[18]) );
G[2] += qq * ( tcrd[2]*X[25] + (1.111111111111111e+00*X[16]) );
if ( LB > 4 ) { qq = qa[26]*qb[0] - qa[0]*qb[26]; } else { qq = qa[26]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[26] + (8.606629658238704e-01*X[16])+(-3.849001794597505e-01*X[19]) );
G[1] += qq * ( tcrd[1]*X[26] + (-3.849001794597505e-01*X[20]) );
G[2] += qq * ( tcrd[2]*X[26] + (1.088662107903635e+00*X[17]) );
if ( LB > 4 ) { qq = qa[27]*qb[0] - qa[0]*qb[27]; } else { qq = qa[27]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[27] + (-3.849001794597505e-01*X[20]) );
G[1] += qq * ( tcrd[1]*X[27] + (8.606629658238704e-01*X[16])+(3.849001794597505e-01*X[19]) );
G[2] += qq * ( tcrd[2]*X[27] + (1.088662107903635e+00*X[18]) );
if ( LB > 4 ) { qq = qa[28]*qb[0] - qa[0]*qb[28]; } else { qq = qa[28]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[28] + (7.200822998230956e-01*X[17])+(-2.721655269759087e-01*X[21]) );
G[1] += qq * ( tcrd[1]*X[28] + (-7.200822998230956e-01*X[18])+(-2.721655269759087e-01*X[22]) );
G[2] += qq * ( tcrd[2]*X[28] + (1.018350154434631e+00*X[19]) );
if ( LB > 4 ) { qq = qa[29]*qb[0] - qa[0]*qb[29]; } else { qq = qa[29]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[29] + (7.200822998230956e-01*X[18])+(-2.721655269759087e-01*X[22]) );
G[1] += qq * ( tcrd[1]*X[29] + (7.200822998230956e-01*X[17])+(2.721655269759087e-01*X[21]) );
G[2] += qq * ( tcrd[2]*X[29] + (1.018350154434631e+00*X[20]) );
if ( LB > 4 ) { qq = qa[30]*qb[0] - qa[0]*qb[30]; } else { qq = qa[30]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[30] + (8.314794192830980e-01*X[19])+(-1.571348402636772e-01*X[23]) );
G[1] += qq * ( tcrd[1]*X[30] + (-8.314794192830980e-01*X[20])+(-1.571348402636772e-01*X[24]) );
G[2] += qq * ( tcrd[2]*X[30] + (8.888888888888888e-01*X[21]) );
if ( LB > 4 ) { qq = qa[31]*qb[0] - qa[0]*qb[31]; } else { qq = qa[31]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[31] + (8.314794192830980e-01*X[20])+(-1.571348402636772e-01*X[24]) );
G[1] += qq * ( tcrd[1]*X[31] + (8.314794192830980e-01*X[19])+(1.571348402636772e-01*X[23]) );
G[2] += qq * ( tcrd[2]*X[31] + (8.888888888888888e-01*X[22]) );
if ( LB > 4 ) { qq = qa[32]*qb[0] - qa[0]*qb[32]; } else { qq = qa[32]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[32] + (9.428090415820635e-01*X[21]) );
G[1] += qq * ( tcrd[1]*X[32] + (-9.428090415820635e-01*X[22]) );
G[2] += qq * ( tcrd[2]*X[32] + (6.666666666666667e-01*X[23]) );
if ( LB > 4 ) { qq = qa[33]*qb[0] - qa[0]*qb[33]; } else { qq = qa[33]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[33] + (9.428090415820635e-01*X[22]) );
G[1] += qq * ( tcrd[1]*X[33] + (9.428090415820635e-01*X[21]) );
G[2] += qq * ( tcrd[2]*X[33] + (6.666666666666667e-01*X[24]) );
if ( LB > 4 ) { qq = qa[34]*qb[0] - qa[0]*qb[34]; } else { qq = qa[34]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[34] + (1.054092553389460e+00*X[23]) );
G[1] += qq * ( tcrd[1]*X[34] + (-1.054092553389460e+00*X[24]) );
G[2] += qq * ( tcrd[2]*X[34] );
if ( LB > 4 ) { qq = qa[35]*qb[0] - qa[0]*qb[35]; } else { qq = qa[35]*qb[0]; };
G[0] += qq * ( tcrd[0]*X[35] + (1.054092553389460e+00*X[24]) );
G[1] += qq * ( tcrd[1]*X[35] + (1.054092553389460e+00*X[23]) );
G[2] += qq * ( tcrd[2]*X[35] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HP( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 4 ) { qq = qa[25]*qb[1] + qa[1]*qb[25]; } else { qq = qa[25]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[25+NA] + (-7.027283689263065e-01*X[17+NA]) );
G[1] += qq * ( tcrd[1]*X[25+NA] + (-7.027283689263065e-01*X[18+NA]) );
G[2] += qq * ( tcrd[2]*X[25+NA] + (1.111111111111111e+00*X[16+NA])+(-2.000000000000000e+00*X[25]) );
if ( LB > 4 ) { qq = qa[26]*qb[1] + qa[1]*qb[26]; } else { qq = qa[26]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[26+NA] + (8.606629658238704e-01*X[16+NA])+(-3.849001794597505e-01*X[19+NA]) );
G[1] += qq * ( tcrd[1]*X[26+NA] + (-3.849001794597505e-01*X[20+NA]) );
G[2] += qq * ( tcrd[2]*X[26+NA] + (1.088662107903635e+00*X[17+NA])+(-2.000000000000000e+00*X[26]) );
if ( LB > 4 ) { qq = qa[27]*qb[1] + qa[1]*qb[27]; } else { qq = qa[27]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[27+NA] + (-3.849001794597505e-01*X[20+NA]) );
G[1] += qq * ( tcrd[1]*X[27+NA] + (8.606629658238704e-01*X[16+NA])+(3.849001794597505e-01*X[19+NA]) );
G[2] += qq * ( tcrd[2]*X[27+NA] + (1.088662107903635e+00*X[18+NA])+(-2.000000000000000e+00*X[27]) );
if ( LB > 4 ) { qq = qa[28]*qb[1] + qa[1]*qb[28]; } else { qq = qa[28]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[28+NA] + (7.200822998230956e-01*X[17+NA])+(-2.721655269759087e-01*X[21+NA]) );
G[1] += qq * ( tcrd[1]*X[28+NA] + (-7.200822998230956e-01*X[18+NA])+(-2.721655269759087e-01*X[22+NA]) );
G[2] += qq * ( tcrd[2]*X[28+NA] + (1.018350154434631e+00*X[19+NA])+(-2.000000000000000e+00*X[28]) );
if ( LB > 4 ) { qq = qa[29]*qb[1] + qa[1]*qb[29]; } else { qq = qa[29]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[29+NA] + (7.200822998230956e-01*X[18+NA])+(-2.721655269759087e-01*X[22+NA]) );
G[1] += qq * ( tcrd[1]*X[29+NA] + (7.200822998230956e-01*X[17+NA])+(2.721655269759087e-01*X[21+NA]) );
G[2] += qq * ( tcrd[2]*X[29+NA] + (1.018350154434631e+00*X[20+NA])+(-2.000000000000000e+00*X[29]) );
if ( LB > 4 ) { qq = qa[30]*qb[1] + qa[1]*qb[30]; } else { qq = qa[30]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[30+NA] + (8.314794192830980e-01*X[19+NA])+(-1.571348402636772e-01*X[23+NA]) );
G[1] += qq * ( tcrd[1]*X[30+NA] + (-8.314794192830980e-01*X[20+NA])+(-1.571348402636772e-01*X[24+NA]) );
G[2] += qq * ( tcrd[2]*X[30+NA] + (8.888888888888888e-01*X[21+NA])+(-2.000000000000000e+00*X[30]) );
if ( LB > 4 ) { qq = qa[31]*qb[1] + qa[1]*qb[31]; } else { qq = qa[31]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[31+NA] + (8.314794192830980e-01*X[20+NA])+(-1.571348402636772e-01*X[24+NA]) );
G[1] += qq * ( tcrd[1]*X[31+NA] + (8.314794192830980e-01*X[19+NA])+(1.571348402636772e-01*X[23+NA]) );
G[2] += qq * ( tcrd[2]*X[31+NA] + (8.888888888888888e-01*X[22+NA])+(-2.000000000000000e+00*X[31]) );
if ( LB > 4 ) { qq = qa[32]*qb[1] + qa[1]*qb[32]; } else { qq = qa[32]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[32+NA] + (9.428090415820635e-01*X[21+NA]) );
G[1] += qq * ( tcrd[1]*X[32+NA] + (-9.428090415820635e-01*X[22+NA]) );
G[2] += qq * ( tcrd[2]*X[32+NA] + (6.666666666666667e-01*X[23+NA])+(-2.000000000000000e+00*X[32]) );
if ( LB > 4 ) { qq = qa[33]*qb[1] + qa[1]*qb[33]; } else { qq = qa[33]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[33+NA] + (9.428090415820635e-01*X[22+NA]) );
G[1] += qq * ( tcrd[1]*X[33+NA] + (9.428090415820635e-01*X[21+NA]) );
G[2] += qq * ( tcrd[2]*X[33+NA] + (6.666666666666667e-01*X[24+NA])+(-2.000000000000000e+00*X[33]) );
if ( LB > 4 ) { qq = qa[34]*qb[1] + qa[1]*qb[34]; } else { qq = qa[34]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[34+NA] + (1.054092553389460e+00*X[23+NA]) );
G[1] += qq * ( tcrd[1]*X[34+NA] + (-1.054092553389460e+00*X[24+NA]) );
G[2] += qq * ( tcrd[2]*X[34+NA] + (-2.000000000000000e+00*X[34]) );
if ( LB > 4 ) { qq = qa[35]*qb[1] + qa[1]*qb[35]; } else { qq = qa[35]*qb[1]; };
G[0] += qq * ( tcrd[0]*X[35+NA] + (1.054092553389460e+00*X[24+NA]) );
G[1] += qq * ( tcrd[1]*X[35+NA] + (1.054092553389460e+00*X[23+NA]) );
G[2] += qq * ( tcrd[2]*X[35+NA] + (-2.000000000000000e+00*X[35]) );
if ( LB > 4 ) { qq = qa[25]*qb[2] + qa[2]*qb[25]; } else { qq = qa[25]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[25+NA*2] + (-7.027283689263065e-01*X[17+NA*2])+(-2.000000000000000e+00*X[25]) );
G[1] += qq * ( tcrd[1]*X[25+NA*2] + (-7.027283689263065e-01*X[18+NA*2]) );
G[2] += qq * ( tcrd[2]*X[25+NA*2] + (1.111111111111111e+00*X[16+NA*2]) );
if ( LB > 4 ) { qq = qa[26]*qb[2] + qa[2]*qb[26]; } else { qq = qa[26]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[26+NA*2] + (8.606629658238704e-01*X[16+NA*2])+(-3.849001794597505e-01*X[19+NA*2])+(-2.000000000000000e+00*X[26]) );
G[1] += qq * ( tcrd[1]*X[26+NA*2] + (-3.849001794597505e-01*X[20+NA*2]) );
G[2] += qq * ( tcrd[2]*X[26+NA*2] + (1.088662107903635e+00*X[17+NA*2]) );
if ( LB > 4 ) { qq = qa[27]*qb[2] + qa[2]*qb[27]; } else { qq = qa[27]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[27+NA*2] + (-3.849001794597505e-01*X[20+NA*2])+(-2.000000000000000e+00*X[27]) );
G[1] += qq * ( tcrd[1]*X[27+NA*2] + (8.606629658238704e-01*X[16+NA*2])+(3.849001794597505e-01*X[19+NA*2]) );
G[2] += qq * ( tcrd[2]*X[27+NA*2] + (1.088662107903635e+00*X[18+NA*2]) );
if ( LB > 4 ) { qq = qa[28]*qb[2] + qa[2]*qb[28]; } else { qq = qa[28]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[28+NA*2] + (7.200822998230956e-01*X[17+NA*2])+(-2.721655269759087e-01*X[21+NA*2])+(-2.000000000000000e+00*X[28]) );
G[1] += qq * ( tcrd[1]*X[28+NA*2] + (-7.200822998230956e-01*X[18+NA*2])+(-2.721655269759087e-01*X[22+NA*2]) );
G[2] += qq * ( tcrd[2]*X[28+NA*2] + (1.018350154434631e+00*X[19+NA*2]) );
if ( LB > 4 ) { qq = qa[29]*qb[2] + qa[2]*qb[29]; } else { qq = qa[29]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[29+NA*2] + (7.200822998230956e-01*X[18+NA*2])+(-2.721655269759087e-01*X[22+NA*2])+(-2.000000000000000e+00*X[29]) );
G[1] += qq * ( tcrd[1]*X[29+NA*2] + (7.200822998230956e-01*X[17+NA*2])+(2.721655269759087e-01*X[21+NA*2]) );
G[2] += qq * ( tcrd[2]*X[29+NA*2] + (1.018350154434631e+00*X[20+NA*2]) );
if ( LB > 4 ) { qq = qa[30]*qb[2] + qa[2]*qb[30]; } else { qq = qa[30]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[30+NA*2] + (8.314794192830980e-01*X[19+NA*2])+(-1.571348402636772e-01*X[23+NA*2])+(-2.000000000000000e+00*X[30]) );
G[1] += qq * ( tcrd[1]*X[30+NA*2] + (-8.314794192830980e-01*X[20+NA*2])+(-1.571348402636772e-01*X[24+NA*2]) );
G[2] += qq * ( tcrd[2]*X[30+NA*2] + (8.888888888888888e-01*X[21+NA*2]) );
if ( LB > 4 ) { qq = qa[31]*qb[2] + qa[2]*qb[31]; } else { qq = qa[31]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[31+NA*2] + (8.314794192830980e-01*X[20+NA*2])+(-1.571348402636772e-01*X[24+NA*2])+(-2.000000000000000e+00*X[31]) );
G[1] += qq * ( tcrd[1]*X[31+NA*2] + (8.314794192830980e-01*X[19+NA*2])+(1.571348402636772e-01*X[23+NA*2]) );
G[2] += qq * ( tcrd[2]*X[31+NA*2] + (8.888888888888888e-01*X[22+NA*2]) );
if ( LB > 4 ) { qq = qa[32]*qb[2] + qa[2]*qb[32]; } else { qq = qa[32]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[32+NA*2] + (9.428090415820635e-01*X[21+NA*2])+(-2.000000000000000e+00*X[32]) );
G[1] += qq * ( tcrd[1]*X[32+NA*2] + (-9.428090415820635e-01*X[22+NA*2]) );
G[2] += qq * ( tcrd[2]*X[32+NA*2] + (6.666666666666667e-01*X[23+NA*2]) );
if ( LB > 4 ) { qq = qa[33]*qb[2] + qa[2]*qb[33]; } else { qq = qa[33]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[33+NA*2] + (9.428090415820635e-01*X[22+NA*2])+(-2.000000000000000e+00*X[33]) );
G[1] += qq * ( tcrd[1]*X[33+NA*2] + (9.428090415820635e-01*X[21+NA*2]) );
G[2] += qq * ( tcrd[2]*X[33+NA*2] + (6.666666666666667e-01*X[24+NA*2]) );
if ( LB > 4 ) { qq = qa[34]*qb[2] + qa[2]*qb[34]; } else { qq = qa[34]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[34+NA*2] + (1.054092553389460e+00*X[23+NA*2])+(-2.000000000000000e+00*X[34]) );
G[1] += qq * ( tcrd[1]*X[34+NA*2] + (-1.054092553389460e+00*X[24+NA*2]) );
G[2] += qq * ( tcrd[2]*X[34+NA*2] );
if ( LB > 4 ) { qq = qa[35]*qb[2] + qa[2]*qb[35]; } else { qq = qa[35]*qb[2]; };
G[0] += qq * ( tcrd[0]*X[35+NA*2] + (1.054092553389460e+00*X[24+NA*2])+(-2.000000000000000e+00*X[35]) );
G[1] += qq * ( tcrd[1]*X[35+NA*2] + (1.054092553389460e+00*X[23+NA*2]) );
G[2] += qq * ( tcrd[2]*X[35+NA*2] );
if ( LB > 4 ) { qq = qa[25]*qb[3] + qa[3]*qb[25]; } else { qq = qa[25]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[25+NA*3] + (-7.027283689263065e-01*X[17+NA*3]) );
G[1] += qq * ( tcrd[1]*X[25+NA*3] + (-7.027283689263065e-01*X[18+NA*3])+(-2.000000000000000e+00*X[25]) );
G[2] += qq * ( tcrd[2]*X[25+NA*3] + (1.111111111111111e+00*X[16+NA*3]) );
if ( LB > 4 ) { qq = qa[26]*qb[3] + qa[3]*qb[26]; } else { qq = qa[26]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[26+NA*3] + (8.606629658238704e-01*X[16+NA*3])+(-3.849001794597505e-01*X[19+NA*3]) );
G[1] += qq * ( tcrd[1]*X[26+NA*3] + (-3.849001794597505e-01*X[20+NA*3])+(-2.000000000000000e+00*X[26]) );
G[2] += qq * ( tcrd[2]*X[26+NA*3] + (1.088662107903635e+00*X[17+NA*3]) );
if ( LB > 4 ) { qq = qa[27]*qb[3] + qa[3]*qb[27]; } else { qq = qa[27]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[27+NA*3] + (-3.849001794597505e-01*X[20+NA*3]) );
G[1] += qq * ( tcrd[1]*X[27+NA*3] + (8.606629658238704e-01*X[16+NA*3])+(3.849001794597505e-01*X[19+NA*3])+(-2.000000000000000e+00*X[27]) );
G[2] += qq * ( tcrd[2]*X[27+NA*3] + (1.088662107903635e+00*X[18+NA*3]) );
if ( LB > 4 ) { qq = qa[28]*qb[3] + qa[3]*qb[28]; } else { qq = qa[28]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[28+NA*3] + (7.200822998230956e-01*X[17+NA*3])+(-2.721655269759087e-01*X[21+NA*3]) );
G[1] += qq * ( tcrd[1]*X[28+NA*3] + (-7.200822998230956e-01*X[18+NA*3])+(-2.721655269759087e-01*X[22+NA*3])+(-2.000000000000000e+00*X[28]) );
G[2] += qq * ( tcrd[2]*X[28+NA*3] + (1.018350154434631e+00*X[19+NA*3]) );
if ( LB > 4 ) { qq = qa[29]*qb[3] + qa[3]*qb[29]; } else { qq = qa[29]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[29+NA*3] + (7.200822998230956e-01*X[18+NA*3])+(-2.721655269759087e-01*X[22+NA*3]) );
G[1] += qq * ( tcrd[1]*X[29+NA*3] + (7.200822998230956e-01*X[17+NA*3])+(2.721655269759087e-01*X[21+NA*3])+(-2.000000000000000e+00*X[29]) );
G[2] += qq * ( tcrd[2]*X[29+NA*3] + (1.018350154434631e+00*X[20+NA*3]) );
if ( LB > 4 ) { qq = qa[30]*qb[3] + qa[3]*qb[30]; } else { qq = qa[30]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[30+NA*3] + (8.314794192830980e-01*X[19+NA*3])+(-1.571348402636772e-01*X[23+NA*3]) );
G[1] += qq * ( tcrd[1]*X[30+NA*3] + (-8.314794192830980e-01*X[20+NA*3])+(-1.571348402636772e-01*X[24+NA*3])+(-2.000000000000000e+00*X[30]) );
G[2] += qq * ( tcrd[2]*X[30+NA*3] + (8.888888888888888e-01*X[21+NA*3]) );
if ( LB > 4 ) { qq = qa[31]*qb[3] + qa[3]*qb[31]; } else { qq = qa[31]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[31+NA*3] + (8.314794192830980e-01*X[20+NA*3])+(-1.571348402636772e-01*X[24+NA*3]) );
G[1] += qq * ( tcrd[1]*X[31+NA*3] + (8.314794192830980e-01*X[19+NA*3])+(1.571348402636772e-01*X[23+NA*3])+(-2.000000000000000e+00*X[31]) );
G[2] += qq * ( tcrd[2]*X[31+NA*3] + (8.888888888888888e-01*X[22+NA*3]) );
if ( LB > 4 ) { qq = qa[32]*qb[3] + qa[3]*qb[32]; } else { qq = qa[32]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[32+NA*3] + (9.428090415820635e-01*X[21+NA*3]) );
G[1] += qq * ( tcrd[1]*X[32+NA*3] + (-9.428090415820635e-01*X[22+NA*3])+(-2.000000000000000e+00*X[32]) );
G[2] += qq * ( tcrd[2]*X[32+NA*3] + (6.666666666666667e-01*X[23+NA*3]) );
if ( LB > 4 ) { qq = qa[33]*qb[3] + qa[3]*qb[33]; } else { qq = qa[33]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[33+NA*3] + (9.428090415820635e-01*X[22+NA*3]) );
G[1] += qq * ( tcrd[1]*X[33+NA*3] + (9.428090415820635e-01*X[21+NA*3])+(-2.000000000000000e+00*X[33]) );
G[2] += qq * ( tcrd[2]*X[33+NA*3] + (6.666666666666667e-01*X[24+NA*3]) );
if ( LB > 4 ) { qq = qa[34]*qb[3] + qa[3]*qb[34]; } else { qq = qa[34]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[34+NA*3] + (1.054092553389460e+00*X[23+NA*3]) );
G[1] += qq * ( tcrd[1]*X[34+NA*3] + (-1.054092553389460e+00*X[24+NA*3])+(-2.000000000000000e+00*X[34]) );
G[2] += qq * ( tcrd[2]*X[34+NA*3] );
if ( LB > 4 ) { qq = qa[35]*qb[3] + qa[3]*qb[35]; } else { qq = qa[35]*qb[3]; };
G[0] += qq * ( tcrd[0]*X[35+NA*3] + (1.054092553389460e+00*X[24+NA*3]) );
G[1] += qq * ( tcrd[1]*X[35+NA*3] + (1.054092553389460e+00*X[23+NA*3])+(-2.000000000000000e+00*X[35]) );
G[2] += qq * ( tcrd[2]*X[35+NA*3] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HD( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 4 ) { qq = qa[25]*qb[4] - qa[4]*qb[25]; } else { qq = qa[25]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[25+NA*4] + (-7.027283689263065e-01*X[17+NA*4])+(6.666666666666666e-01*X[25+NA*2]) );
G[1] += qq * ( tcrd[1]*X[25+NA*4] + (-7.027283689263065e-01*X[18+NA*4])+(6.666666666666666e-01*X[25+NA*3]) );
G[2] += qq * ( tcrd[2]*X[25+NA*4] + (1.111111111111111e+00*X[16+NA*4])+(-1.333333333333333e+00*X[25+NA]) );
if ( LB > 4 ) { qq = qa[26]*qb[4] - qa[4]*qb[26]; } else { qq = qa[26]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[26+NA*4] + (8.606629658238704e-01*X[16+NA*4])+(-3.849001794597505e-01*X[19+NA*4])+(6.666666666666666e-01*X[26+NA*2]) );
G[1] += qq * ( tcrd[1]*X[26+NA*4] + (-3.849001794597505e-01*X[20+NA*4])+(6.666666666666666e-01*X[26+NA*3]) );
G[2] += qq * ( tcrd[2]*X[26+NA*4] + (1.088662107903635e+00*X[17+NA*4])+(-1.333333333333333e+00*X[26+NA]) );
if ( LB > 4 ) { qq = qa[27]*qb[4] - qa[4]*qb[27]; } else { qq = qa[27]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[27+NA*4] + (-3.849001794597505e-01*X[20+NA*4])+(6.666666666666666e-01*X[27+NA*2]) );
G[1] += qq * ( tcrd[1]*X[27+NA*4] + (8.606629658238704e-01*X[16+NA*4])+(3.849001794597505e-01*X[19+NA*4])+(6.666666666666666e-01*X[27+NA*3]) );
G[2] += qq * ( tcrd[2]*X[27+NA*4] + (1.088662107903635e+00*X[18+NA*4])+(-1.333333333333333e+00*X[27+NA]) );
if ( LB > 4 ) { qq = qa[28]*qb[4] - qa[4]*qb[28]; } else { qq = qa[28]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[28+NA*4] + (7.200822998230956e-01*X[17+NA*4])+(-2.721655269759087e-01*X[21+NA*4])+(6.666666666666666e-01*X[28+NA*2]) );
G[1] += qq * ( tcrd[1]*X[28+NA*4] + (-7.200822998230956e-01*X[18+NA*4])+(-2.721655269759087e-01*X[22+NA*4])+(6.666666666666666e-01*X[28+NA*3]) );
G[2] += qq * ( tcrd[2]*X[28+NA*4] + (1.018350154434631e+00*X[19+NA*4])+(-1.333333333333333e+00*X[28+NA]) );
if ( LB > 4 ) { qq = qa[29]*qb[4] - qa[4]*qb[29]; } else { qq = qa[29]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[29+NA*4] + (7.200822998230956e-01*X[18+NA*4])+(-2.721655269759087e-01*X[22+NA*4])+(6.666666666666666e-01*X[29+NA*2]) );
G[1] += qq * ( tcrd[1]*X[29+NA*4] + (7.200822998230956e-01*X[17+NA*4])+(2.721655269759087e-01*X[21+NA*4])+(6.666666666666666e-01*X[29+NA*3]) );
G[2] += qq * ( tcrd[2]*X[29+NA*4] + (1.018350154434631e+00*X[20+NA*4])+(-1.333333333333333e+00*X[29+NA]) );
if ( LB > 4 ) { qq = qa[30]*qb[4] - qa[4]*qb[30]; } else { qq = qa[30]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[30+NA*4] + (8.314794192830980e-01*X[19+NA*4])+(-1.571348402636772e-01*X[23+NA*4])+(6.666666666666666e-01*X[30+NA*2]) );
G[1] += qq * ( tcrd[1]*X[30+NA*4] + (-8.314794192830980e-01*X[20+NA*4])+(-1.571348402636772e-01*X[24+NA*4])+(6.666666666666666e-01*X[30+NA*3]) );
G[2] += qq * ( tcrd[2]*X[30+NA*4] + (8.888888888888888e-01*X[21+NA*4])+(-1.333333333333333e+00*X[30+NA]) );
if ( LB > 4 ) { qq = qa[31]*qb[4] - qa[4]*qb[31]; } else { qq = qa[31]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[31+NA*4] + (8.314794192830980e-01*X[20+NA*4])+(-1.571348402636772e-01*X[24+NA*4])+(6.666666666666666e-01*X[31+NA*2]) );
G[1] += qq * ( tcrd[1]*X[31+NA*4] + (8.314794192830980e-01*X[19+NA*4])+(1.571348402636772e-01*X[23+NA*4])+(6.666666666666666e-01*X[31+NA*3]) );
G[2] += qq * ( tcrd[2]*X[31+NA*4] + (8.888888888888888e-01*X[22+NA*4])+(-1.333333333333333e+00*X[31+NA]) );
if ( LB > 4 ) { qq = qa[32]*qb[4] - qa[4]*qb[32]; } else { qq = qa[32]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[32+NA*4] + (9.428090415820635e-01*X[21+NA*4])+(6.666666666666666e-01*X[32+NA*2]) );
G[1] += qq * ( tcrd[1]*X[32+NA*4] + (-9.428090415820635e-01*X[22+NA*4])+(6.666666666666666e-01*X[32+NA*3]) );
G[2] += qq * ( tcrd[2]*X[32+NA*4] + (6.666666666666667e-01*X[23+NA*4])+(-1.333333333333333e+00*X[32+NA]) );
if ( LB > 4 ) { qq = qa[33]*qb[4] - qa[4]*qb[33]; } else { qq = qa[33]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[33+NA*4] + (9.428090415820635e-01*X[22+NA*4])+(6.666666666666666e-01*X[33+NA*2]) );
G[1] += qq * ( tcrd[1]*X[33+NA*4] + (9.428090415820635e-01*X[21+NA*4])+(6.666666666666666e-01*X[33+NA*3]) );
G[2] += qq * ( tcrd[2]*X[33+NA*4] + (6.666666666666667e-01*X[24+NA*4])+(-1.333333333333333e+00*X[33+NA]) );
if ( LB > 4 ) { qq = qa[34]*qb[4] - qa[4]*qb[34]; } else { qq = qa[34]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[34+NA*4] + (1.054092553389460e+00*X[23+NA*4])+(6.666666666666666e-01*X[34+NA*2]) );
G[1] += qq * ( tcrd[1]*X[34+NA*4] + (-1.054092553389460e+00*X[24+NA*4])+(6.666666666666666e-01*X[34+NA*3]) );
G[2] += qq * ( tcrd[2]*X[34+NA*4] + (-1.333333333333333e+00*X[34+NA]) );
if ( LB > 4 ) { qq = qa[35]*qb[4] - qa[4]*qb[35]; } else { qq = qa[35]*qb[4]; };
G[0] += qq * ( tcrd[0]*X[35+NA*4] + (1.054092553389460e+00*X[24+NA*4])+(6.666666666666666e-01*X[35+NA*2]) );
G[1] += qq * ( tcrd[1]*X[35+NA*4] + (1.054092553389460e+00*X[23+NA*4])+(6.666666666666666e-01*X[35+NA*3]) );
G[2] += qq * ( tcrd[2]*X[35+NA*4] + (-1.333333333333333e+00*X[35+NA]) );
if ( LB > 4 ) { qq = qa[25]*qb[5] - qa[5]*qb[25]; } else { qq = qa[25]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[25+NA*5] + (-7.027283689263065e-01*X[17+NA*5])+(-1.154700538379251e+00*X[25+NA]) );
G[1] += qq * ( tcrd[1]*X[25+NA*5] + (-7.027283689263065e-01*X[18+NA*5]) );
G[2] += qq * ( tcrd[2]*X[25+NA*5] + (1.111111111111111e+00*X[16+NA*5])+(-1.154700538379251e+00*X[25+NA*2]) );
if ( LB > 4 ) { qq = qa[26]*qb[5] - qa[5]*qb[26]; } else { qq = qa[26]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[26+NA*5] + (8.606629658238704e-01*X[16+NA*5])+(-3.849001794597505e-01*X[19+NA*5])+(-1.154700538379251e+00*X[26+NA]) );
G[1] += qq * ( tcrd[1]*X[26+NA*5] + (-3.849001794597505e-01*X[20+NA*5]) );
G[2] += qq * ( tcrd[2]*X[26+NA*5] + (1.088662107903635e+00*X[17+NA*5])+(-1.154700538379251e+00*X[26+NA*2]) );
if ( LB > 4 ) { qq = qa[27]*qb[5] - qa[5]*qb[27]; } else { qq = qa[27]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[27+NA*5] + (-3.849001794597505e-01*X[20+NA*5])+(-1.154700538379251e+00*X[27+NA]) );
G[1] += qq * ( tcrd[1]*X[27+NA*5] + (8.606629658238704e-01*X[16+NA*5])+(3.849001794597505e-01*X[19+NA*5]) );
G[2] += qq * ( tcrd[2]*X[27+NA*5] + (1.088662107903635e+00*X[18+NA*5])+(-1.154700538379251e+00*X[27+NA*2]) );
if ( LB > 4 ) { qq = qa[28]*qb[5] - qa[5]*qb[28]; } else { qq = qa[28]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[28+NA*5] + (7.200822998230956e-01*X[17+NA*5])+(-2.721655269759087e-01*X[21+NA*5])+(-1.154700538379251e+00*X[28+NA]) );
G[1] += qq * ( tcrd[1]*X[28+NA*5] + (-7.200822998230956e-01*X[18+NA*5])+(-2.721655269759087e-01*X[22+NA*5]) );
G[2] += qq * ( tcrd[2]*X[28+NA*5] + (1.018350154434631e+00*X[19+NA*5])+(-1.154700538379251e+00*X[28+NA*2]) );
if ( LB > 4 ) { qq = qa[29]*qb[5] - qa[5]*qb[29]; } else { qq = qa[29]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[29+NA*5] + (7.200822998230956e-01*X[18+NA*5])+(-2.721655269759087e-01*X[22+NA*5])+(-1.154700538379251e+00*X[29+NA]) );
G[1] += qq * ( tcrd[1]*X[29+NA*5] + (7.200822998230956e-01*X[17+NA*5])+(2.721655269759087e-01*X[21+NA*5]) );
G[2] += qq * ( tcrd[2]*X[29+NA*5] + (1.018350154434631e+00*X[20+NA*5])+(-1.154700538379251e+00*X[29+NA*2]) );
if ( LB > 4 ) { qq = qa[30]*qb[5] - qa[5]*qb[30]; } else { qq = qa[30]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[30+NA*5] + (8.314794192830980e-01*X[19+NA*5])+(-1.571348402636772e-01*X[23+NA*5])+(-1.154700538379251e+00*X[30+NA]) );
G[1] += qq * ( tcrd[1]*X[30+NA*5] + (-8.314794192830980e-01*X[20+NA*5])+(-1.571348402636772e-01*X[24+NA*5]) );
G[2] += qq * ( tcrd[2]*X[30+NA*5] + (8.888888888888888e-01*X[21+NA*5])+(-1.154700538379251e+00*X[30+NA*2]) );
if ( LB > 4 ) { qq = qa[31]*qb[5] - qa[5]*qb[31]; } else { qq = qa[31]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[31+NA*5] + (8.314794192830980e-01*X[20+NA*5])+(-1.571348402636772e-01*X[24+NA*5])+(-1.154700538379251e+00*X[31+NA]) );
G[1] += qq * ( tcrd[1]*X[31+NA*5] + (8.314794192830980e-01*X[19+NA*5])+(1.571348402636772e-01*X[23+NA*5]) );
G[2] += qq * ( tcrd[2]*X[31+NA*5] + (8.888888888888888e-01*X[22+NA*5])+(-1.154700538379251e+00*X[31+NA*2]) );
if ( LB > 4 ) { qq = qa[32]*qb[5] - qa[5]*qb[32]; } else { qq = qa[32]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[32+NA*5] + (9.428090415820635e-01*X[21+NA*5])+(-1.154700538379251e+00*X[32+NA]) );
G[1] += qq * ( tcrd[1]*X[32+NA*5] + (-9.428090415820635e-01*X[22+NA*5]) );
G[2] += qq * ( tcrd[2]*X[32+NA*5] + (6.666666666666667e-01*X[23+NA*5])+(-1.154700538379251e+00*X[32+NA*2]) );
if ( LB > 4 ) { qq = qa[33]*qb[5] - qa[5]*qb[33]; } else { qq = qa[33]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[33+NA*5] + (9.428090415820635e-01*X[22+NA*5])+(-1.154700538379251e+00*X[33+NA]) );
G[1] += qq * ( tcrd[1]*X[33+NA*5] + (9.428090415820635e-01*X[21+NA*5]) );
G[2] += qq * ( tcrd[2]*X[33+NA*5] + (6.666666666666667e-01*X[24+NA*5])+(-1.154700538379251e+00*X[33+NA*2]) );
if ( LB > 4 ) { qq = qa[34]*qb[5] - qa[5]*qb[34]; } else { qq = qa[34]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[34+NA*5] + (1.054092553389460e+00*X[23+NA*5])+(-1.154700538379251e+00*X[34+NA]) );
G[1] += qq * ( tcrd[1]*X[34+NA*5] + (-1.054092553389460e+00*X[24+NA*5]) );
G[2] += qq * ( tcrd[2]*X[34+NA*5] + (-1.154700538379251e+00*X[34+NA*2]) );
if ( LB > 4 ) { qq = qa[35]*qb[5] - qa[5]*qb[35]; } else { qq = qa[35]*qb[5]; };
G[0] += qq * ( tcrd[0]*X[35+NA*5] + (1.054092553389460e+00*X[24+NA*5])+(-1.154700538379251e+00*X[35+NA]) );
G[1] += qq * ( tcrd[1]*X[35+NA*5] + (1.054092553389460e+00*X[23+NA*5]) );
G[2] += qq * ( tcrd[2]*X[35+NA*5] + (-1.154700538379251e+00*X[35+NA*2]) );
if ( LB > 4 ) { qq = qa[25]*qb[6] - qa[6]*qb[25]; } else { qq = qa[25]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[25+NA*6] + (-7.027283689263065e-01*X[17+NA*6]) );
G[1] += qq * ( tcrd[1]*X[25+NA*6] + (-7.027283689263065e-01*X[18+NA*6])+(-1.154700538379251e+00*X[25+NA]) );
G[2] += qq * ( tcrd[2]*X[25+NA*6] + (1.111111111111111e+00*X[16+NA*6])+(-1.154700538379251e+00*X[25+NA*3]) );
if ( LB > 4 ) { qq = qa[26]*qb[6] - qa[6]*qb[26]; } else { qq = qa[26]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[26+NA*6] + (8.606629658238704e-01*X[16+NA*6])+(-3.849001794597505e-01*X[19+NA*6]) );
G[1] += qq * ( tcrd[1]*X[26+NA*6] + (-3.849001794597505e-01*X[20+NA*6])+(-1.154700538379251e+00*X[26+NA]) );
G[2] += qq * ( tcrd[2]*X[26+NA*6] + (1.088662107903635e+00*X[17+NA*6])+(-1.154700538379251e+00*X[26+NA*3]) );
if ( LB > 4 ) { qq = qa[27]*qb[6] - qa[6]*qb[27]; } else { qq = qa[27]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[27+NA*6] + (-3.849001794597505e-01*X[20+NA*6]) );
G[1] += qq * ( tcrd[1]*X[27+NA*6] + (8.606629658238704e-01*X[16+NA*6])+(3.849001794597505e-01*X[19+NA*6])+(-1.154700538379251e+00*X[27+NA]) );
G[2] += qq * ( tcrd[2]*X[27+NA*6] + (1.088662107903635e+00*X[18+NA*6])+(-1.154700538379251e+00*X[27+NA*3]) );
if ( LB > 4 ) { qq = qa[28]*qb[6] - qa[6]*qb[28]; } else { qq = qa[28]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[28+NA*6] + (7.200822998230956e-01*X[17+NA*6])+(-2.721655269759087e-01*X[21+NA*6]) );
G[1] += qq * ( tcrd[1]*X[28+NA*6] + (-7.200822998230956e-01*X[18+NA*6])+(-2.721655269759087e-01*X[22+NA*6])+(-1.154700538379251e+00*X[28+NA]) );
G[2] += qq * ( tcrd[2]*X[28+NA*6] + (1.018350154434631e+00*X[19+NA*6])+(-1.154700538379251e+00*X[28+NA*3]) );
if ( LB > 4 ) { qq = qa[29]*qb[6] - qa[6]*qb[29]; } else { qq = qa[29]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[29+NA*6] + (7.200822998230956e-01*X[18+NA*6])+(-2.721655269759087e-01*X[22+NA*6]) );
G[1] += qq * ( tcrd[1]*X[29+NA*6] + (7.200822998230956e-01*X[17+NA*6])+(2.721655269759087e-01*X[21+NA*6])+(-1.154700538379251e+00*X[29+NA]) );
G[2] += qq * ( tcrd[2]*X[29+NA*6] + (1.018350154434631e+00*X[20+NA*6])+(-1.154700538379251e+00*X[29+NA*3]) );
if ( LB > 4 ) { qq = qa[30]*qb[6] - qa[6]*qb[30]; } else { qq = qa[30]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[30+NA*6] + (8.314794192830980e-01*X[19+NA*6])+(-1.571348402636772e-01*X[23+NA*6]) );
G[1] += qq * ( tcrd[1]*X[30+NA*6] + (-8.314794192830980e-01*X[20+NA*6])+(-1.571348402636772e-01*X[24+NA*6])+(-1.154700538379251e+00*X[30+NA]) );
G[2] += qq * ( tcrd[2]*X[30+NA*6] + (8.888888888888888e-01*X[21+NA*6])+(-1.154700538379251e+00*X[30+NA*3]) );
if ( LB > 4 ) { qq = qa[31]*qb[6] - qa[6]*qb[31]; } else { qq = qa[31]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[31+NA*6] + (8.314794192830980e-01*X[20+NA*6])+(-1.571348402636772e-01*X[24+NA*6]) );
G[1] += qq * ( tcrd[1]*X[31+NA*6] + (8.314794192830980e-01*X[19+NA*6])+(1.571348402636772e-01*X[23+NA*6])+(-1.154700538379251e+00*X[31+NA]) );
G[2] += qq * ( tcrd[2]*X[31+NA*6] + (8.888888888888888e-01*X[22+NA*6])+(-1.154700538379251e+00*X[31+NA*3]) );
if ( LB > 4 ) { qq = qa[32]*qb[6] - qa[6]*qb[32]; } else { qq = qa[32]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[32+NA*6] + (9.428090415820635e-01*X[21+NA*6]) );
G[1] += qq * ( tcrd[1]*X[32+NA*6] + (-9.428090415820635e-01*X[22+NA*6])+(-1.154700538379251e+00*X[32+NA]) );
G[2] += qq * ( tcrd[2]*X[32+NA*6] + (6.666666666666667e-01*X[23+NA*6])+(-1.154700538379251e+00*X[32+NA*3]) );
if ( LB > 4 ) { qq = qa[33]*qb[6] - qa[6]*qb[33]; } else { qq = qa[33]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[33+NA*6] + (9.428090415820635e-01*X[22+NA*6]) );
G[1] += qq * ( tcrd[1]*X[33+NA*6] + (9.428090415820635e-01*X[21+NA*6])+(-1.154700538379251e+00*X[33+NA]) );
G[2] += qq * ( tcrd[2]*X[33+NA*6] + (6.666666666666667e-01*X[24+NA*6])+(-1.154700538379251e+00*X[33+NA*3]) );
if ( LB > 4 ) { qq = qa[34]*qb[6] - qa[6]*qb[34]; } else { qq = qa[34]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[34+NA*6] + (1.054092553389460e+00*X[23+NA*6]) );
G[1] += qq * ( tcrd[1]*X[34+NA*6] + (-1.054092553389460e+00*X[24+NA*6])+(-1.154700538379251e+00*X[34+NA]) );
G[2] += qq * ( tcrd[2]*X[34+NA*6] + (-1.154700538379251e+00*X[34+NA*3]) );
if ( LB > 4 ) { qq = qa[35]*qb[6] - qa[6]*qb[35]; } else { qq = qa[35]*qb[6]; };
G[0] += qq * ( tcrd[0]*X[35+NA*6] + (1.054092553389460e+00*X[24+NA*6]) );
G[1] += qq * ( tcrd[1]*X[35+NA*6] + (1.054092553389460e+00*X[23+NA*6])+(-1.154700538379251e+00*X[35+NA]) );
G[2] += qq * ( tcrd[2]*X[35+NA*6] + (-1.154700538379251e+00*X[35+NA*3]) );
if ( LB > 4 ) { qq = qa[25]*qb[7] - qa[7]*qb[25]; } else { qq = qa[25]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[25+NA*7] + (-7.027283689263065e-01*X[17+NA*7])+(-1.154700538379251e+00*X[25+NA*2]) );
G[1] += qq * ( tcrd[1]*X[25+NA*7] + (-7.027283689263065e-01*X[18+NA*7])+(1.154700538379251e+00*X[25+NA*3]) );
G[2] += qq * ( tcrd[2]*X[25+NA*7] + (1.111111111111111e+00*X[16+NA*7]) );
if ( LB > 4 ) { qq = qa[26]*qb[7] - qa[7]*qb[26]; } else { qq = qa[26]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[26+NA*7] + (8.606629658238704e-01*X[16+NA*7])+(-3.849001794597505e-01*X[19+NA*7])+(-1.154700538379251e+00*X[26+NA*2]) );
G[1] += qq * ( tcrd[1]*X[26+NA*7] + (-3.849001794597505e-01*X[20+NA*7])+(1.154700538379251e+00*X[26+NA*3]) );
G[2] += qq * ( tcrd[2]*X[26+NA*7] + (1.088662107903635e+00*X[17+NA*7]) );
if ( LB > 4 ) { qq = qa[27]*qb[7] - qa[7]*qb[27]; } else { qq = qa[27]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[27+NA*7] + (-3.849001794597505e-01*X[20+NA*7])+(-1.154700538379251e+00*X[27+NA*2]) );
G[1] += qq * ( tcrd[1]*X[27+NA*7] + (8.606629658238704e-01*X[16+NA*7])+(3.849001794597505e-01*X[19+NA*7])+(1.154700538379251e+00*X[27+NA*3]) );
G[2] += qq * ( tcrd[2]*X[27+NA*7] + (1.088662107903635e+00*X[18+NA*7]) );
if ( LB > 4 ) { qq = qa[28]*qb[7] - qa[7]*qb[28]; } else { qq = qa[28]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[28+NA*7] + (7.200822998230956e-01*X[17+NA*7])+(-2.721655269759087e-01*X[21+NA*7])+(-1.154700538379251e+00*X[28+NA*2]) );
G[1] += qq * ( tcrd[1]*X[28+NA*7] + (-7.200822998230956e-01*X[18+NA*7])+(-2.721655269759087e-01*X[22+NA*7])+(1.154700538379251e+00*X[28+NA*3]) );
G[2] += qq * ( tcrd[2]*X[28+NA*7] + (1.018350154434631e+00*X[19+NA*7]) );
if ( LB > 4 ) { qq = qa[29]*qb[7] - qa[7]*qb[29]; } else { qq = qa[29]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[29+NA*7] + (7.200822998230956e-01*X[18+NA*7])+(-2.721655269759087e-01*X[22+NA*7])+(-1.154700538379251e+00*X[29+NA*2]) );
G[1] += qq * ( tcrd[1]*X[29+NA*7] + (7.200822998230956e-01*X[17+NA*7])+(2.721655269759087e-01*X[21+NA*7])+(1.154700538379251e+00*X[29+NA*3]) );
G[2] += qq * ( tcrd[2]*X[29+NA*7] + (1.018350154434631e+00*X[20+NA*7]) );
if ( LB > 4 ) { qq = qa[30]*qb[7] - qa[7]*qb[30]; } else { qq = qa[30]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[30+NA*7] + (8.314794192830980e-01*X[19+NA*7])+(-1.571348402636772e-01*X[23+NA*7])+(-1.154700538379251e+00*X[30+NA*2]) );
G[1] += qq * ( tcrd[1]*X[30+NA*7] + (-8.314794192830980e-01*X[20+NA*7])+(-1.571348402636772e-01*X[24+NA*7])+(1.154700538379251e+00*X[30+NA*3]) );
G[2] += qq * ( tcrd[2]*X[30+NA*7] + (8.888888888888888e-01*X[21+NA*7]) );
if ( LB > 4 ) { qq = qa[31]*qb[7] - qa[7]*qb[31]; } else { qq = qa[31]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[31+NA*7] + (8.314794192830980e-01*X[20+NA*7])+(-1.571348402636772e-01*X[24+NA*7])+(-1.154700538379251e+00*X[31+NA*2]) );
G[1] += qq * ( tcrd[1]*X[31+NA*7] + (8.314794192830980e-01*X[19+NA*7])+(1.571348402636772e-01*X[23+NA*7])+(1.154700538379251e+00*X[31+NA*3]) );
G[2] += qq * ( tcrd[2]*X[31+NA*7] + (8.888888888888888e-01*X[22+NA*7]) );
if ( LB > 4 ) { qq = qa[32]*qb[7] - qa[7]*qb[32]; } else { qq = qa[32]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[32+NA*7] + (9.428090415820635e-01*X[21+NA*7])+(-1.154700538379251e+00*X[32+NA*2]) );
G[1] += qq * ( tcrd[1]*X[32+NA*7] + (-9.428090415820635e-01*X[22+NA*7])+(1.154700538379251e+00*X[32+NA*3]) );
G[2] += qq * ( tcrd[2]*X[32+NA*7] + (6.666666666666667e-01*X[23+NA*7]) );
if ( LB > 4 ) { qq = qa[33]*qb[7] - qa[7]*qb[33]; } else { qq = qa[33]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[33+NA*7] + (9.428090415820635e-01*X[22+NA*7])+(-1.154700538379251e+00*X[33+NA*2]) );
G[1] += qq * ( tcrd[1]*X[33+NA*7] + (9.428090415820635e-01*X[21+NA*7])+(1.154700538379251e+00*X[33+NA*3]) );
G[2] += qq * ( tcrd[2]*X[33+NA*7] + (6.666666666666667e-01*X[24+NA*7]) );
if ( LB > 4 ) { qq = qa[34]*qb[7] - qa[7]*qb[34]; } else { qq = qa[34]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[34+NA*7] + (1.054092553389460e+00*X[23+NA*7])+(-1.154700538379251e+00*X[34+NA*2]) );
G[1] += qq * ( tcrd[1]*X[34+NA*7] + (-1.054092553389460e+00*X[24+NA*7])+(1.154700538379251e+00*X[34+NA*3]) );
G[2] += qq * ( tcrd[2]*X[34+NA*7] );
if ( LB > 4 ) { qq = qa[35]*qb[7] - qa[7]*qb[35]; } else { qq = qa[35]*qb[7]; };
G[0] += qq * ( tcrd[0]*X[35+NA*7] + (1.054092553389460e+00*X[24+NA*7])+(-1.154700538379251e+00*X[35+NA*2]) );
G[1] += qq * ( tcrd[1]*X[35+NA*7] + (1.054092553389460e+00*X[23+NA*7])+(1.154700538379251e+00*X[35+NA*3]) );
G[2] += qq * ( tcrd[2]*X[35+NA*7] );
if ( LB > 4 ) { qq = qa[25]*qb[8] - qa[8]*qb[25]; } else { qq = qa[25]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[25+NA*8] + (-7.027283689263065e-01*X[17+NA*8])+(-1.154700538379251e+00*X[25+NA*3]) );
G[1] += qq * ( tcrd[1]*X[25+NA*8] + (-7.027283689263065e-01*X[18+NA*8])+(-1.154700538379251e+00*X[25+NA*2]) );
G[2] += qq * ( tcrd[2]*X[25+NA*8] + (1.111111111111111e+00*X[16+NA*8]) );
if ( LB > 4 ) { qq = qa[26]*qb[8] - qa[8]*qb[26]; } else { qq = qa[26]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[26+NA*8] + (8.606629658238704e-01*X[16+NA*8])+(-3.849001794597505e-01*X[19+NA*8])+(-1.154700538379251e+00*X[26+NA*3]) );
G[1] += qq * ( tcrd[1]*X[26+NA*8] + (-3.849001794597505e-01*X[20+NA*8])+(-1.154700538379251e+00*X[26+NA*2]) );
G[2] += qq * ( tcrd[2]*X[26+NA*8] + (1.088662107903635e+00*X[17+NA*8]) );
if ( LB > 4 ) { qq = qa[27]*qb[8] - qa[8]*qb[27]; } else { qq = qa[27]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[27+NA*8] + (-3.849001794597505e-01*X[20+NA*8])+(-1.154700538379251e+00*X[27+NA*3]) );
G[1] += qq * ( tcrd[1]*X[27+NA*8] + (8.606629658238704e-01*X[16+NA*8])+(3.849001794597505e-01*X[19+NA*8])+(-1.154700538379251e+00*X[27+NA*2]) );
G[2] += qq * ( tcrd[2]*X[27+NA*8] + (1.088662107903635e+00*X[18+NA*8]) );
if ( LB > 4 ) { qq = qa[28]*qb[8] - qa[8]*qb[28]; } else { qq = qa[28]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[28+NA*8] + (7.200822998230956e-01*X[17+NA*8])+(-2.721655269759087e-01*X[21+NA*8])+(-1.154700538379251e+00*X[28+NA*3]) );
G[1] += qq * ( tcrd[1]*X[28+NA*8] + (-7.200822998230956e-01*X[18+NA*8])+(-2.721655269759087e-01*X[22+NA*8])+(-1.154700538379251e+00*X[28+NA*2]) );
G[2] += qq * ( tcrd[2]*X[28+NA*8] + (1.018350154434631e+00*X[19+NA*8]) );
if ( LB > 4 ) { qq = qa[29]*qb[8] - qa[8]*qb[29]; } else { qq = qa[29]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[29+NA*8] + (7.200822998230956e-01*X[18+NA*8])+(-2.721655269759087e-01*X[22+NA*8])+(-1.154700538379251e+00*X[29+NA*3]) );
G[1] += qq * ( tcrd[1]*X[29+NA*8] + (7.200822998230956e-01*X[17+NA*8])+(2.721655269759087e-01*X[21+NA*8])+(-1.154700538379251e+00*X[29+NA*2]) );
G[2] += qq * ( tcrd[2]*X[29+NA*8] + (1.018350154434631e+00*X[20+NA*8]) );
if ( LB > 4 ) { qq = qa[30]*qb[8] - qa[8]*qb[30]; } else { qq = qa[30]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[30+NA*8] + (8.314794192830980e-01*X[19+NA*8])+(-1.571348402636772e-01*X[23+NA*8])+(-1.154700538379251e+00*X[30+NA*3]) );
G[1] += qq * ( tcrd[1]*X[30+NA*8] + (-8.314794192830980e-01*X[20+NA*8])+(-1.571348402636772e-01*X[24+NA*8])+(-1.154700538379251e+00*X[30+NA*2]) );
G[2] += qq * ( tcrd[2]*X[30+NA*8] + (8.888888888888888e-01*X[21+NA*8]) );
if ( LB > 4 ) { qq = qa[31]*qb[8] - qa[8]*qb[31]; } else { qq = qa[31]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[31+NA*8] + (8.314794192830980e-01*X[20+NA*8])+(-1.571348402636772e-01*X[24+NA*8])+(-1.154700538379251e+00*X[31+NA*3]) );
G[1] += qq * ( tcrd[1]*X[31+NA*8] + (8.314794192830980e-01*X[19+NA*8])+(1.571348402636772e-01*X[23+NA*8])+(-1.154700538379251e+00*X[31+NA*2]) );
G[2] += qq * ( tcrd[2]*X[31+NA*8] + (8.888888888888888e-01*X[22+NA*8]) );
if ( LB > 4 ) { qq = qa[32]*qb[8] - qa[8]*qb[32]; } else { qq = qa[32]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[32+NA*8] + (9.428090415820635e-01*X[21+NA*8])+(-1.154700538379251e+00*X[32+NA*3]) );
G[1] += qq * ( tcrd[1]*X[32+NA*8] + (-9.428090415820635e-01*X[22+NA*8])+(-1.154700538379251e+00*X[32+NA*2]) );
G[2] += qq * ( tcrd[2]*X[32+NA*8] + (6.666666666666667e-01*X[23+NA*8]) );
if ( LB > 4 ) { qq = qa[33]*qb[8] - qa[8]*qb[33]; } else { qq = qa[33]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[33+NA*8] + (9.428090415820635e-01*X[22+NA*8])+(-1.154700538379251e+00*X[33+NA*3]) );
G[1] += qq * ( tcrd[1]*X[33+NA*8] + (9.428090415820635e-01*X[21+NA*8])+(-1.154700538379251e+00*X[33+NA*2]) );
G[2] += qq * ( tcrd[2]*X[33+NA*8] + (6.666666666666667e-01*X[24+NA*8]) );
if ( LB > 4 ) { qq = qa[34]*qb[8] - qa[8]*qb[34]; } else { qq = qa[34]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[34+NA*8] + (1.054092553389460e+00*X[23+NA*8])+(-1.154700538379251e+00*X[34+NA*3]) );
G[1] += qq * ( tcrd[1]*X[34+NA*8] + (-1.054092553389460e+00*X[24+NA*8])+(-1.154700538379251e+00*X[34+NA*2]) );
G[2] += qq * ( tcrd[2]*X[34+NA*8] );
if ( LB > 4 ) { qq = qa[35]*qb[8] - qa[8]*qb[35]; } else { qq = qa[35]*qb[8]; };
G[0] += qq * ( tcrd[0]*X[35+NA*8] + (1.054092553389460e+00*X[24+NA*8])+(-1.154700538379251e+00*X[35+NA*3]) );
G[1] += qq * ( tcrd[1]*X[35+NA*8] + (1.054092553389460e+00*X[23+NA*8])+(-1.154700538379251e+00*X[35+NA*2]) );
G[2] += qq * ( tcrd[2]*X[35+NA*8] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HF( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 4 ) { qq = qa[25]*qb[9] + qa[9]*qb[25]; } else { qq = qa[25]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[25+NA*9] + (-7.027283689263065e-01*X[17+NA*9])+(6.928203230275510e-01*X[25+NA*5]) );
G[1] += qq * ( tcrd[1]*X[25+NA*9] + (-7.027283689263065e-01*X[18+NA*9])+(6.928203230275510e-01*X[25+NA*6]) );
G[2] += qq * ( tcrd[2]*X[25+NA*9] + (1.111111111111111e+00*X[16+NA*9])+(-1.200000000000000e+00*X[25+NA*4]) );
if ( LB > 4 ) { qq = qa[26]*qb[9] + qa[9]*qb[26]; } else { qq = qa[26]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[26+NA*9] + (8.606629658238704e-01*X[16+NA*9])+(-3.849001794597505e-01*X[19+NA*9])+(6.928203230275510e-01*X[26+NA*5]) );
G[1] += qq * ( tcrd[1]*X[26+NA*9] + (-3.849001794597505e-01*X[20+NA*9])+(6.928203230275510e-01*X[26+NA*6]) );
G[2] += qq * ( tcrd[2]*X[26+NA*9] + (1.088662107903635e+00*X[17+NA*9])+(-1.200000000000000e+00*X[26+NA*4]) );
if ( LB > 4 ) { qq = qa[27]*qb[9] + qa[9]*qb[27]; } else { qq = qa[27]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[27+NA*9] + (-3.849001794597505e-01*X[20+NA*9])+(6.928203230275510e-01*X[27+NA*5]) );
G[1] += qq * ( tcrd[1]*X[27+NA*9] + (8.606629658238704e-01*X[16+NA*9])+(3.849001794597505e-01*X[19+NA*9])+(6.928203230275510e-01*X[27+NA*6]) );
G[2] += qq * ( tcrd[2]*X[27+NA*9] + (1.088662107903635e+00*X[18+NA*9])+(-1.200000000000000e+00*X[27+NA*4]) );
if ( LB > 4 ) { qq = qa[28]*qb[9] + qa[9]*qb[28]; } else { qq = qa[28]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[28+NA*9] + (7.200822998230956e-01*X[17+NA*9])+(-2.721655269759087e-01*X[21+NA*9])+(6.928203230275510e-01*X[28+NA*5]) );
G[1] += qq * ( tcrd[1]*X[28+NA*9] + (-7.200822998230956e-01*X[18+NA*9])+(-2.721655269759087e-01*X[22+NA*9])+(6.928203230275510e-01*X[28+NA*6]) );
G[2] += qq * ( tcrd[2]*X[28+NA*9] + (1.018350154434631e+00*X[19+NA*9])+(-1.200000000000000e+00*X[28+NA*4]) );
if ( LB > 4 ) { qq = qa[29]*qb[9] + qa[9]*qb[29]; } else { qq = qa[29]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[29+NA*9] + (7.200822998230956e-01*X[18+NA*9])+(-2.721655269759087e-01*X[22+NA*9])+(6.928203230275510e-01*X[29+NA*5]) );
G[1] += qq * ( tcrd[1]*X[29+NA*9] + (7.200822998230956e-01*X[17+NA*9])+(2.721655269759087e-01*X[21+NA*9])+(6.928203230275510e-01*X[29+NA*6]) );
G[2] += qq * ( tcrd[2]*X[29+NA*9] + (1.018350154434631e+00*X[20+NA*9])+(-1.200000000000000e+00*X[29+NA*4]) );
if ( LB > 4 ) { qq = qa[30]*qb[9] + qa[9]*qb[30]; } else { qq = qa[30]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[30+NA*9] + (8.314794192830980e-01*X[19+NA*9])+(-1.571348402636772e-01*X[23+NA*9])+(6.928203230275510e-01*X[30+NA*5]) );
G[1] += qq * ( tcrd[1]*X[30+NA*9] + (-8.314794192830980e-01*X[20+NA*9])+(-1.571348402636772e-01*X[24+NA*9])+(6.928203230275510e-01*X[30+NA*6]) );
G[2] += qq * ( tcrd[2]*X[30+NA*9] + (8.888888888888888e-01*X[21+NA*9])+(-1.200000000000000e+00*X[30+NA*4]) );
if ( LB > 4 ) { qq = qa[31]*qb[9] + qa[9]*qb[31]; } else { qq = qa[31]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[31+NA*9] + (8.314794192830980e-01*X[20+NA*9])+(-1.571348402636772e-01*X[24+NA*9])+(6.928203230275510e-01*X[31+NA*5]) );
G[1] += qq * ( tcrd[1]*X[31+NA*9] + (8.314794192830980e-01*X[19+NA*9])+(1.571348402636772e-01*X[23+NA*9])+(6.928203230275510e-01*X[31+NA*6]) );
G[2] += qq * ( tcrd[2]*X[31+NA*9] + (8.888888888888888e-01*X[22+NA*9])+(-1.200000000000000e+00*X[31+NA*4]) );
if ( LB > 4 ) { qq = qa[32]*qb[9] + qa[9]*qb[32]; } else { qq = qa[32]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[32+NA*9] + (9.428090415820635e-01*X[21+NA*9])+(6.928203230275510e-01*X[32+NA*5]) );
G[1] += qq * ( tcrd[1]*X[32+NA*9] + (-9.428090415820635e-01*X[22+NA*9])+(6.928203230275510e-01*X[32+NA*6]) );
G[2] += qq * ( tcrd[2]*X[32+NA*9] + (6.666666666666667e-01*X[23+NA*9])+(-1.200000000000000e+00*X[32+NA*4]) );
if ( LB > 4 ) { qq = qa[33]*qb[9] + qa[9]*qb[33]; } else { qq = qa[33]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[33+NA*9] + (9.428090415820635e-01*X[22+NA*9])+(6.928203230275510e-01*X[33+NA*5]) );
G[1] += qq * ( tcrd[1]*X[33+NA*9] + (9.428090415820635e-01*X[21+NA*9])+(6.928203230275510e-01*X[33+NA*6]) );
G[2] += qq * ( tcrd[2]*X[33+NA*9] + (6.666666666666667e-01*X[24+NA*9])+(-1.200000000000000e+00*X[33+NA*4]) );
if ( LB > 4 ) { qq = qa[34]*qb[9] + qa[9]*qb[34]; } else { qq = qa[34]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[34+NA*9] + (1.054092553389460e+00*X[23+NA*9])+(6.928203230275510e-01*X[34+NA*5]) );
G[1] += qq * ( tcrd[1]*X[34+NA*9] + (-1.054092553389460e+00*X[24+NA*9])+(6.928203230275510e-01*X[34+NA*6]) );
G[2] += qq * ( tcrd[2]*X[34+NA*9] + (-1.200000000000000e+00*X[34+NA*4]) );
if ( LB > 4 ) { qq = qa[35]*qb[9] + qa[9]*qb[35]; } else { qq = qa[35]*qb[9]; };
G[0] += qq * ( tcrd[0]*X[35+NA*9] + (1.054092553389460e+00*X[24+NA*9])+(6.928203230275510e-01*X[35+NA*5]) );
G[1] += qq * ( tcrd[1]*X[35+NA*9] + (1.054092553389460e+00*X[23+NA*9])+(6.928203230275510e-01*X[35+NA*6]) );
G[2] += qq * ( tcrd[2]*X[35+NA*9] + (-1.200000000000000e+00*X[35+NA*4]) );
if ( LB > 4 ) { qq = qa[25]*qb[10] + qa[10]*qb[25]; } else { qq = qa[25]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[25+NA*10] + (-7.027283689263065e-01*X[17+NA*10])+(-9.797958971132712e-01*X[25+NA*4])+(2.828427124746190e-01*X[25+NA*7]) );
G[1] += qq * ( tcrd[1]*X[25+NA*10] + (-7.027283689263065e-01*X[18+NA*10])+(2.828427124746190e-01*X[25+NA*8]) );
G[2] += qq * ( tcrd[2]*X[25+NA*10] + (1.111111111111111e+00*X[16+NA*10])+(-1.131370849898476e+00*X[25+NA*5]) );
if ( LB > 4 ) { qq = qa[26]*qb[10] + qa[10]*qb[26]; } else { qq = qa[26]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[26+NA*10] + (8.606629658238704e-01*X[16+NA*10])+(-3.849001794597505e-01*X[19+NA*10])+(-9.797958971132712e-01*X[26+NA*4])+(2.828427124746190e-01*X[26+NA*7]) );
G[1] += qq * ( tcrd[1]*X[26+NA*10] + (-3.849001794597505e-01*X[20+NA*10])+(2.828427124746190e-01*X[26+NA*8]) );
G[2] += qq * ( tcrd[2]*X[26+NA*10] + (1.088662107903635e+00*X[17+NA*10])+(-1.131370849898476e+00*X[26+NA*5]) );
if ( LB > 4 ) { qq = qa[27]*qb[10] + qa[10]*qb[27]; } else { qq = qa[27]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[27+NA*10] + (-3.849001794597505e-01*X[20+NA*10])+(-9.797958971132712e-01*X[27+NA*4])+(2.828427124746190e-01*X[27+NA*7]) );
G[1] += qq * ( tcrd[1]*X[27+NA*10] + (8.606629658238704e-01*X[16+NA*10])+(3.849001794597505e-01*X[19+NA*10])+(2.828427124746190e-01*X[27+NA*8]) );
G[2] += qq * ( tcrd[2]*X[27+NA*10] + (1.088662107903635e+00*X[18+NA*10])+(-1.131370849898476e+00*X[27+NA*5]) );
if ( LB > 4 ) { qq = qa[28]*qb[10] + qa[10]*qb[28]; } else { qq = qa[28]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[28+NA*10] + (7.200822998230956e-01*X[17+NA*10])+(-2.721655269759087e-01*X[21+NA*10])+(-9.797958971132712e-01*X[28+NA*4])+(2.828427124746190e-01*X[28+NA*7]) );
G[1] += qq * ( tcrd[1]*X[28+NA*10] + (-7.200822998230956e-01*X[18+NA*10])+(-2.721655269759087e-01*X[22+NA*10])+(2.828427124746190e-01*X[28+NA*8]) );
G[2] += qq * ( tcrd[2]*X[28+NA*10] + (1.018350154434631e+00*X[19+NA*10])+(-1.131370849898476e+00*X[28+NA*5]) );
if ( LB > 4 ) { qq = qa[29]*qb[10] + qa[10]*qb[29]; } else { qq = qa[29]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[29+NA*10] + (7.200822998230956e-01*X[18+NA*10])+(-2.721655269759087e-01*X[22+NA*10])+(-9.797958971132712e-01*X[29+NA*4])+(2.828427124746190e-01*X[29+NA*7]) );
G[1] += qq * ( tcrd[1]*X[29+NA*10] + (7.200822998230956e-01*X[17+NA*10])+(2.721655269759087e-01*X[21+NA*10])+(2.828427124746190e-01*X[29+NA*8]) );
G[2] += qq * ( tcrd[2]*X[29+NA*10] + (1.018350154434631e+00*X[20+NA*10])+(-1.131370849898476e+00*X[29+NA*5]) );
if ( LB > 4 ) { qq = qa[30]*qb[10] + qa[10]*qb[30]; } else { qq = qa[30]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[30+NA*10] + (8.314794192830980e-01*X[19+NA*10])+(-1.571348402636772e-01*X[23+NA*10])+(-9.797958971132712e-01*X[30+NA*4])+(2.828427124746190e-01*X[30+NA*7]) );
G[1] += qq * ( tcrd[1]*X[30+NA*10] + (-8.314794192830980e-01*X[20+NA*10])+(-1.571348402636772e-01*X[24+NA*10])+(2.828427124746190e-01*X[30+NA*8]) );
G[2] += qq * ( tcrd[2]*X[30+NA*10] + (8.888888888888888e-01*X[21+NA*10])+(-1.131370849898476e+00*X[30+NA*5]) );
if ( LB > 4 ) { qq = qa[31]*qb[10] + qa[10]*qb[31]; } else { qq = qa[31]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[31+NA*10] + (8.314794192830980e-01*X[20+NA*10])+(-1.571348402636772e-01*X[24+NA*10])+(-9.797958971132712e-01*X[31+NA*4])+(2.828427124746190e-01*X[31+NA*7]) );
G[1] += qq * ( tcrd[1]*X[31+NA*10] + (8.314794192830980e-01*X[19+NA*10])+(1.571348402636772e-01*X[23+NA*10])+(2.828427124746190e-01*X[31+NA*8]) );
G[2] += qq * ( tcrd[2]*X[31+NA*10] + (8.888888888888888e-01*X[22+NA*10])+(-1.131370849898476e+00*X[31+NA*5]) );
if ( LB > 4 ) { qq = qa[32]*qb[10] + qa[10]*qb[32]; } else { qq = qa[32]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[32+NA*10] + (9.428090415820635e-01*X[21+NA*10])+(-9.797958971132712e-01*X[32+NA*4])+(2.828427124746190e-01*X[32+NA*7]) );
G[1] += qq * ( tcrd[1]*X[32+NA*10] + (-9.428090415820635e-01*X[22+NA*10])+(2.828427124746190e-01*X[32+NA*8]) );
G[2] += qq * ( tcrd[2]*X[32+NA*10] + (6.666666666666667e-01*X[23+NA*10])+(-1.131370849898476e+00*X[32+NA*5]) );
if ( LB > 4 ) { qq = qa[33]*qb[10] + qa[10]*qb[33]; } else { qq = qa[33]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[33+NA*10] + (9.428090415820635e-01*X[22+NA*10])+(-9.797958971132712e-01*X[33+NA*4])+(2.828427124746190e-01*X[33+NA*7]) );
G[1] += qq * ( tcrd[1]*X[33+NA*10] + (9.428090415820635e-01*X[21+NA*10])+(2.828427124746190e-01*X[33+NA*8]) );
G[2] += qq * ( tcrd[2]*X[33+NA*10] + (6.666666666666667e-01*X[24+NA*10])+(-1.131370849898476e+00*X[33+NA*5]) );
if ( LB > 4 ) { qq = qa[34]*qb[10] + qa[10]*qb[34]; } else { qq = qa[34]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[34+NA*10] + (1.054092553389460e+00*X[23+NA*10])+(-9.797958971132712e-01*X[34+NA*4])+(2.828427124746190e-01*X[34+NA*7]) );
G[1] += qq * ( tcrd[1]*X[34+NA*10] + (-1.054092553389460e+00*X[24+NA*10])+(2.828427124746190e-01*X[34+NA*8]) );
G[2] += qq * ( tcrd[2]*X[34+NA*10] + (-1.131370849898476e+00*X[34+NA*5]) );
if ( LB > 4 ) { qq = qa[35]*qb[10] + qa[10]*qb[35]; } else { qq = qa[35]*qb[10]; };
G[0] += qq * ( tcrd[0]*X[35+NA*10] + (1.054092553389460e+00*X[24+NA*10])+(-9.797958971132712e-01*X[35+NA*4])+(2.828427124746190e-01*X[35+NA*7]) );
G[1] += qq * ( tcrd[1]*X[35+NA*10] + (1.054092553389460e+00*X[23+NA*10])+(2.828427124746190e-01*X[35+NA*8]) );
G[2] += qq * ( tcrd[2]*X[35+NA*10] + (-1.131370849898476e+00*X[35+NA*5]) );
if ( LB > 4 ) { qq = qa[25]*qb[11] + qa[11]*qb[25]; } else { qq = qa[25]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[25+NA*11] + (-7.027283689263065e-01*X[17+NA*11])+(2.828427124746190e-01*X[25+NA*8]) );
G[1] += qq * ( tcrd[1]*X[25+NA*11] + (-7.027283689263065e-01*X[18+NA*11])+(-9.797958971132712e-01*X[25+NA*4])+(-2.828427124746190e-01*X[25+NA*7]) );
G[2] += qq * ( tcrd[2]*X[25+NA*11] + (1.111111111111111e+00*X[16+NA*11])+(-1.131370849898476e+00*X[25+NA*6]) );
if ( LB > 4 ) { qq = qa[26]*qb[11] + qa[11]*qb[26]; } else { qq = qa[26]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[26+NA*11] + (8.606629658238704e-01*X[16+NA*11])+(-3.849001794597505e-01*X[19+NA*11])+(2.828427124746190e-01*X[26+NA*8]) );
G[1] += qq * ( tcrd[1]*X[26+NA*11] + (-3.849001794597505e-01*X[20+NA*11])+(-9.797958971132712e-01*X[26+NA*4])+(-2.828427124746190e-01*X[26+NA*7]) );
G[2] += qq * ( tcrd[2]*X[26+NA*11] + (1.088662107903635e+00*X[17+NA*11])+(-1.131370849898476e+00*X[26+NA*6]) );
if ( LB > 4 ) { qq = qa[27]*qb[11] + qa[11]*qb[27]; } else { qq = qa[27]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[27+NA*11] + (-3.849001794597505e-01*X[20+NA*11])+(2.828427124746190e-01*X[27+NA*8]) );
G[1] += qq * ( tcrd[1]*X[27+NA*11] + (8.606629658238704e-01*X[16+NA*11])+(3.849001794597505e-01*X[19+NA*11])+(-9.797958971132712e-01*X[27+NA*4])+(-2.828427124746190e-01*X[27+NA*7]) );
G[2] += qq * ( tcrd[2]*X[27+NA*11] + (1.088662107903635e+00*X[18+NA*11])+(-1.131370849898476e+00*X[27+NA*6]) );
if ( LB > 4 ) { qq = qa[28]*qb[11] + qa[11]*qb[28]; } else { qq = qa[28]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[28+NA*11] + (7.200822998230956e-01*X[17+NA*11])+(-2.721655269759087e-01*X[21+NA*11])+(2.828427124746190e-01*X[28+NA*8]) );
G[1] += qq * ( tcrd[1]*X[28+NA*11] + (-7.200822998230956e-01*X[18+NA*11])+(-2.721655269759087e-01*X[22+NA*11])+(-9.797958971132712e-01*X[28+NA*4])+(-2.828427124746190e-01*X[28+NA*7]) );
G[2] += qq * ( tcrd[2]*X[28+NA*11] + (1.018350154434631e+00*X[19+NA*11])+(-1.131370849898476e+00*X[28+NA*6]) );
if ( LB > 4 ) { qq = qa[29]*qb[11] + qa[11]*qb[29]; } else { qq = qa[29]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[29+NA*11] + (7.200822998230956e-01*X[18+NA*11])+(-2.721655269759087e-01*X[22+NA*11])+(2.828427124746190e-01*X[29+NA*8]) );
G[1] += qq * ( tcrd[1]*X[29+NA*11] + (7.200822998230956e-01*X[17+NA*11])+(2.721655269759087e-01*X[21+NA*11])+(-9.797958971132712e-01*X[29+NA*4])+(-2.828427124746190e-01*X[29+NA*7]) );
G[2] += qq * ( tcrd[2]*X[29+NA*11] + (1.018350154434631e+00*X[20+NA*11])+(-1.131370849898476e+00*X[29+NA*6]) );
if ( LB > 4 ) { qq = qa[30]*qb[11] + qa[11]*qb[30]; } else { qq = qa[30]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[30+NA*11] + (8.314794192830980e-01*X[19+NA*11])+(-1.571348402636772e-01*X[23+NA*11])+(2.828427124746190e-01*X[30+NA*8]) );
G[1] += qq * ( tcrd[1]*X[30+NA*11] + (-8.314794192830980e-01*X[20+NA*11])+(-1.571348402636772e-01*X[24+NA*11])+(-9.797958971132712e-01*X[30+NA*4])+(-2.828427124746190e-01*X[30+NA*7]) );
G[2] += qq * ( tcrd[2]*X[30+NA*11] + (8.888888888888888e-01*X[21+NA*11])+(-1.131370849898476e+00*X[30+NA*6]) );
if ( LB > 4 ) { qq = qa[31]*qb[11] + qa[11]*qb[31]; } else { qq = qa[31]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[31+NA*11] + (8.314794192830980e-01*X[20+NA*11])+(-1.571348402636772e-01*X[24+NA*11])+(2.828427124746190e-01*X[31+NA*8]) );
G[1] += qq * ( tcrd[1]*X[31+NA*11] + (8.314794192830980e-01*X[19+NA*11])+(1.571348402636772e-01*X[23+NA*11])+(-9.797958971132712e-01*X[31+NA*4])+(-2.828427124746190e-01*X[31+NA*7]) );
G[2] += qq * ( tcrd[2]*X[31+NA*11] + (8.888888888888888e-01*X[22+NA*11])+(-1.131370849898476e+00*X[31+NA*6]) );
if ( LB > 4 ) { qq = qa[32]*qb[11] + qa[11]*qb[32]; } else { qq = qa[32]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[32+NA*11] + (9.428090415820635e-01*X[21+NA*11])+(2.828427124746190e-01*X[32+NA*8]) );
G[1] += qq * ( tcrd[1]*X[32+NA*11] + (-9.428090415820635e-01*X[22+NA*11])+(-9.797958971132712e-01*X[32+NA*4])+(-2.828427124746190e-01*X[32+NA*7]) );
G[2] += qq * ( tcrd[2]*X[32+NA*11] + (6.666666666666667e-01*X[23+NA*11])+(-1.131370849898476e+00*X[32+NA*6]) );
if ( LB > 4 ) { qq = qa[33]*qb[11] + qa[11]*qb[33]; } else { qq = qa[33]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[33+NA*11] + (9.428090415820635e-01*X[22+NA*11])+(2.828427124746190e-01*X[33+NA*8]) );
G[1] += qq * ( tcrd[1]*X[33+NA*11] + (9.428090415820635e-01*X[21+NA*11])+(-9.797958971132712e-01*X[33+NA*4])+(-2.828427124746190e-01*X[33+NA*7]) );
G[2] += qq * ( tcrd[2]*X[33+NA*11] + (6.666666666666667e-01*X[24+NA*11])+(-1.131370849898476e+00*X[33+NA*6]) );
if ( LB > 4 ) { qq = qa[34]*qb[11] + qa[11]*qb[34]; } else { qq = qa[34]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[34+NA*11] + (1.054092553389460e+00*X[23+NA*11])+(2.828427124746190e-01*X[34+NA*8]) );
G[1] += qq * ( tcrd[1]*X[34+NA*11] + (-1.054092553389460e+00*X[24+NA*11])+(-9.797958971132712e-01*X[34+NA*4])+(-2.828427124746190e-01*X[34+NA*7]) );
G[2] += qq * ( tcrd[2]*X[34+NA*11] + (-1.131370849898476e+00*X[34+NA*6]) );
if ( LB > 4 ) { qq = qa[35]*qb[11] + qa[11]*qb[35]; } else { qq = qa[35]*qb[11]; };
G[0] += qq * ( tcrd[0]*X[35+NA*11] + (1.054092553389460e+00*X[24+NA*11])+(2.828427124746190e-01*X[35+NA*8]) );
G[1] += qq * ( tcrd[1]*X[35+NA*11] + (1.054092553389460e+00*X[23+NA*11])+(-9.797958971132712e-01*X[35+NA*4])+(-2.828427124746190e-01*X[35+NA*7]) );
G[2] += qq * ( tcrd[2]*X[35+NA*11] + (-1.131370849898476e+00*X[35+NA*6]) );
if ( LB > 4 ) { qq = qa[25]*qb[12] + qa[12]*qb[25]; } else { qq = qa[25]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[25+NA*12] + (-7.027283689263065e-01*X[17+NA*12])+(-8.944271909999160e-01*X[25+NA*5]) );
G[1] += qq * ( tcrd[1]*X[25+NA*12] + (-7.027283689263065e-01*X[18+NA*12])+(8.944271909999160e-01*X[25+NA*6]) );
G[2] += qq * ( tcrd[2]*X[25+NA*12] + (1.111111111111111e+00*X[16+NA*12])+(-8.944271909999160e-01*X[25+NA*7]) );
if ( LB > 4 ) { qq = qa[26]*qb[12] + qa[12]*qb[26]; } else { qq = qa[26]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[26+NA*12] + (8.606629658238704e-01*X[16+NA*12])+(-3.849001794597505e-01*X[19+NA*12])+(-8.944271909999160e-01*X[26+NA*5]) );
G[1] += qq * ( tcrd[1]*X[26+NA*12] + (-3.849001794597505e-01*X[20+NA*12])+(8.944271909999160e-01*X[26+NA*6]) );
G[2] += qq * ( tcrd[2]*X[26+NA*12] + (1.088662107903635e+00*X[17+NA*12])+(-8.944271909999160e-01*X[26+NA*7]) );
if ( LB > 4 ) { qq = qa[27]*qb[12] + qa[12]*qb[27]; } else { qq = qa[27]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[27+NA*12] + (-3.849001794597505e-01*X[20+NA*12])+(-8.944271909999160e-01*X[27+NA*5]) );
G[1] += qq * ( tcrd[1]*X[27+NA*12] + (8.606629658238704e-01*X[16+NA*12])+(3.849001794597505e-01*X[19+NA*12])+(8.944271909999160e-01*X[27+NA*6]) );
G[2] += qq * ( tcrd[2]*X[27+NA*12] + (1.088662107903635e+00*X[18+NA*12])+(-8.944271909999160e-01*X[27+NA*7]) );
if ( LB > 4 ) { qq = qa[28]*qb[12] + qa[12]*qb[28]; } else { qq = qa[28]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[28+NA*12] + (7.200822998230956e-01*X[17+NA*12])+(-2.721655269759087e-01*X[21+NA*12])+(-8.944271909999160e-01*X[28+NA*5]) );
G[1] += qq * ( tcrd[1]*X[28+NA*12] + (-7.200822998230956e-01*X[18+NA*12])+(-2.721655269759087e-01*X[22+NA*12])+(8.944271909999160e-01*X[28+NA*6]) );
G[2] += qq * ( tcrd[2]*X[28+NA*12] + (1.018350154434631e+00*X[19+NA*12])+(-8.944271909999160e-01*X[28+NA*7]) );
if ( LB > 4 ) { qq = qa[29]*qb[12] + qa[12]*qb[29]; } else { qq = qa[29]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[29+NA*12] + (7.200822998230956e-01*X[18+NA*12])+(-2.721655269759087e-01*X[22+NA*12])+(-8.944271909999160e-01*X[29+NA*5]) );
G[1] += qq * ( tcrd[1]*X[29+NA*12] + (7.200822998230956e-01*X[17+NA*12])+(2.721655269759087e-01*X[21+NA*12])+(8.944271909999160e-01*X[29+NA*6]) );
G[2] += qq * ( tcrd[2]*X[29+NA*12] + (1.018350154434631e+00*X[20+NA*12])+(-8.944271909999160e-01*X[29+NA*7]) );
if ( LB > 4 ) { qq = qa[30]*qb[12] + qa[12]*qb[30]; } else { qq = qa[30]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[30+NA*12] + (8.314794192830980e-01*X[19+NA*12])+(-1.571348402636772e-01*X[23+NA*12])+(-8.944271909999160e-01*X[30+NA*5]) );
G[1] += qq * ( tcrd[1]*X[30+NA*12] + (-8.314794192830980e-01*X[20+NA*12])+(-1.571348402636772e-01*X[24+NA*12])+(8.944271909999160e-01*X[30+NA*6]) );
G[2] += qq * ( tcrd[2]*X[30+NA*12] + (8.888888888888888e-01*X[21+NA*12])+(-8.944271909999160e-01*X[30+NA*7]) );
if ( LB > 4 ) { qq = qa[31]*qb[12] + qa[12]*qb[31]; } else { qq = qa[31]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[31+NA*12] + (8.314794192830980e-01*X[20+NA*12])+(-1.571348402636772e-01*X[24+NA*12])+(-8.944271909999160e-01*X[31+NA*5]) );
G[1] += qq * ( tcrd[1]*X[31+NA*12] + (8.314794192830980e-01*X[19+NA*12])+(1.571348402636772e-01*X[23+NA*12])+(8.944271909999160e-01*X[31+NA*6]) );
G[2] += qq * ( tcrd[2]*X[31+NA*12] + (8.888888888888888e-01*X[22+NA*12])+(-8.944271909999160e-01*X[31+NA*7]) );
if ( LB > 4 ) { qq = qa[32]*qb[12] + qa[12]*qb[32]; } else { qq = qa[32]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[32+NA*12] + (9.428090415820635e-01*X[21+NA*12])+(-8.944271909999160e-01*X[32+NA*5]) );
G[1] += qq * ( tcrd[1]*X[32+NA*12] + (-9.428090415820635e-01*X[22+NA*12])+(8.944271909999160e-01*X[32+NA*6]) );
G[2] += qq * ( tcrd[2]*X[32+NA*12] + (6.666666666666667e-01*X[23+NA*12])+(-8.944271909999160e-01*X[32+NA*7]) );
if ( LB > 4 ) { qq = qa[33]*qb[12] + qa[12]*qb[33]; } else { qq = qa[33]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[33+NA*12] + (9.428090415820635e-01*X[22+NA*12])+(-8.944271909999160e-01*X[33+NA*5]) );
G[1] += qq * ( tcrd[1]*X[33+NA*12] + (9.428090415820635e-01*X[21+NA*12])+(8.944271909999160e-01*X[33+NA*6]) );
G[2] += qq * ( tcrd[2]*X[33+NA*12] + (6.666666666666667e-01*X[24+NA*12])+(-8.944271909999160e-01*X[33+NA*7]) );
if ( LB > 4 ) { qq = qa[34]*qb[12] + qa[12]*qb[34]; } else { qq = qa[34]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[34+NA*12] + (1.054092553389460e+00*X[23+NA*12])+(-8.944271909999160e-01*X[34+NA*5]) );
G[1] += qq * ( tcrd[1]*X[34+NA*12] + (-1.054092553389460e+00*X[24+NA*12])+(8.944271909999160e-01*X[34+NA*6]) );
G[2] += qq * ( tcrd[2]*X[34+NA*12] + (-8.944271909999160e-01*X[34+NA*7]) );
if ( LB > 4 ) { qq = qa[35]*qb[12] + qa[12]*qb[35]; } else { qq = qa[35]*qb[12]; };
G[0] += qq * ( tcrd[0]*X[35+NA*12] + (1.054092553389460e+00*X[24+NA*12])+(-8.944271909999160e-01*X[35+NA*5]) );
G[1] += qq * ( tcrd[1]*X[35+NA*12] + (1.054092553389460e+00*X[23+NA*12])+(8.944271909999160e-01*X[35+NA*6]) );
G[2] += qq * ( tcrd[2]*X[35+NA*12] + (-8.944271909999160e-01*X[35+NA*7]) );
if ( LB > 4 ) { qq = qa[25]*qb[13] + qa[13]*qb[25]; } else { qq = qa[25]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[25+NA*13] + (-7.027283689263065e-01*X[17+NA*13])+(-8.944271909999160e-01*X[25+NA*6]) );
G[1] += qq * ( tcrd[1]*X[25+NA*13] + (-7.027283689263065e-01*X[18+NA*13])+(-8.944271909999160e-01*X[25+NA*5]) );
G[2] += qq * ( tcrd[2]*X[25+NA*13] + (1.111111111111111e+00*X[16+NA*13])+(-8.944271909999160e-01*X[25+NA*8]) );
if ( LB > 4 ) { qq = qa[26]*qb[13] + qa[13]*qb[26]; } else { qq = qa[26]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[26+NA*13] + (8.606629658238704e-01*X[16+NA*13])+(-3.849001794597505e-01*X[19+NA*13])+(-8.944271909999160e-01*X[26+NA*6]) );
G[1] += qq * ( tcrd[1]*X[26+NA*13] + (-3.849001794597505e-01*X[20+NA*13])+(-8.944271909999160e-01*X[26+NA*5]) );
G[2] += qq * ( tcrd[2]*X[26+NA*13] + (1.088662107903635e+00*X[17+NA*13])+(-8.944271909999160e-01*X[26+NA*8]) );
if ( LB > 4 ) { qq = qa[27]*qb[13] + qa[13]*qb[27]; } else { qq = qa[27]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[27+NA*13] + (-3.849001794597505e-01*X[20+NA*13])+(-8.944271909999160e-01*X[27+NA*6]) );
G[1] += qq * ( tcrd[1]*X[27+NA*13] + (8.606629658238704e-01*X[16+NA*13])+(3.849001794597505e-01*X[19+NA*13])+(-8.944271909999160e-01*X[27+NA*5]) );
G[2] += qq * ( tcrd[2]*X[27+NA*13] + (1.088662107903635e+00*X[18+NA*13])+(-8.944271909999160e-01*X[27+NA*8]) );
if ( LB > 4 ) { qq = qa[28]*qb[13] + qa[13]*qb[28]; } else { qq = qa[28]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[28+NA*13] + (7.200822998230956e-01*X[17+NA*13])+(-2.721655269759087e-01*X[21+NA*13])+(-8.944271909999160e-01*X[28+NA*6]) );
G[1] += qq * ( tcrd[1]*X[28+NA*13] + (-7.200822998230956e-01*X[18+NA*13])+(-2.721655269759087e-01*X[22+NA*13])+(-8.944271909999160e-01*X[28+NA*5]) );
G[2] += qq * ( tcrd[2]*X[28+NA*13] + (1.018350154434631e+00*X[19+NA*13])+(-8.944271909999160e-01*X[28+NA*8]) );
if ( LB > 4 ) { qq = qa[29]*qb[13] + qa[13]*qb[29]; } else { qq = qa[29]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[29+NA*13] + (7.200822998230956e-01*X[18+NA*13])+(-2.721655269759087e-01*X[22+NA*13])+(-8.944271909999160e-01*X[29+NA*6]) );
G[1] += qq * ( tcrd[1]*X[29+NA*13] + (7.200822998230956e-01*X[17+NA*13])+(2.721655269759087e-01*X[21+NA*13])+(-8.944271909999160e-01*X[29+NA*5]) );
G[2] += qq * ( tcrd[2]*X[29+NA*13] + (1.018350154434631e+00*X[20+NA*13])+(-8.944271909999160e-01*X[29+NA*8]) );
if ( LB > 4 ) { qq = qa[30]*qb[13] + qa[13]*qb[30]; } else { qq = qa[30]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[30+NA*13] + (8.314794192830980e-01*X[19+NA*13])+(-1.571348402636772e-01*X[23+NA*13])+(-8.944271909999160e-01*X[30+NA*6]) );
G[1] += qq * ( tcrd[1]*X[30+NA*13] + (-8.314794192830980e-01*X[20+NA*13])+(-1.571348402636772e-01*X[24+NA*13])+(-8.944271909999160e-01*X[30+NA*5]) );
G[2] += qq * ( tcrd[2]*X[30+NA*13] + (8.888888888888888e-01*X[21+NA*13])+(-8.944271909999160e-01*X[30+NA*8]) );
if ( LB > 4 ) { qq = qa[31]*qb[13] + qa[13]*qb[31]; } else { qq = qa[31]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[31+NA*13] + (8.314794192830980e-01*X[20+NA*13])+(-1.571348402636772e-01*X[24+NA*13])+(-8.944271909999160e-01*X[31+NA*6]) );
G[1] += qq * ( tcrd[1]*X[31+NA*13] + (8.314794192830980e-01*X[19+NA*13])+(1.571348402636772e-01*X[23+NA*13])+(-8.944271909999160e-01*X[31+NA*5]) );
G[2] += qq * ( tcrd[2]*X[31+NA*13] + (8.888888888888888e-01*X[22+NA*13])+(-8.944271909999160e-01*X[31+NA*8]) );
if ( LB > 4 ) { qq = qa[32]*qb[13] + qa[13]*qb[32]; } else { qq = qa[32]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[32+NA*13] + (9.428090415820635e-01*X[21+NA*13])+(-8.944271909999160e-01*X[32+NA*6]) );
G[1] += qq * ( tcrd[1]*X[32+NA*13] + (-9.428090415820635e-01*X[22+NA*13])+(-8.944271909999160e-01*X[32+NA*5]) );
G[2] += qq * ( tcrd[2]*X[32+NA*13] + (6.666666666666667e-01*X[23+NA*13])+(-8.944271909999160e-01*X[32+NA*8]) );
if ( LB > 4 ) { qq = qa[33]*qb[13] + qa[13]*qb[33]; } else { qq = qa[33]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[33+NA*13] + (9.428090415820635e-01*X[22+NA*13])+(-8.944271909999160e-01*X[33+NA*6]) );
G[1] += qq * ( tcrd[1]*X[33+NA*13] + (9.428090415820635e-01*X[21+NA*13])+(-8.944271909999160e-01*X[33+NA*5]) );
G[2] += qq * ( tcrd[2]*X[33+NA*13] + (6.666666666666667e-01*X[24+NA*13])+(-8.944271909999160e-01*X[33+NA*8]) );
if ( LB > 4 ) { qq = qa[34]*qb[13] + qa[13]*qb[34]; } else { qq = qa[34]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[34+NA*13] + (1.054092553389460e+00*X[23+NA*13])+(-8.944271909999160e-01*X[34+NA*6]) );
G[1] += qq * ( tcrd[1]*X[34+NA*13] + (-1.054092553389460e+00*X[24+NA*13])+(-8.944271909999160e-01*X[34+NA*5]) );
G[2] += qq * ( tcrd[2]*X[34+NA*13] + (-8.944271909999160e-01*X[34+NA*8]) );
if ( LB > 4 ) { qq = qa[35]*qb[13] + qa[13]*qb[35]; } else { qq = qa[35]*qb[13]; };
G[0] += qq * ( tcrd[0]*X[35+NA*13] + (1.054092553389460e+00*X[24+NA*13])+(-8.944271909999160e-01*X[35+NA*6]) );
G[1] += qq * ( tcrd[1]*X[35+NA*13] + (1.054092553389460e+00*X[23+NA*13])+(-8.944271909999160e-01*X[35+NA*5]) );
G[2] += qq * ( tcrd[2]*X[35+NA*13] + (-8.944271909999160e-01*X[35+NA*8]) );
if ( LB > 4 ) { qq = qa[25]*qb[14] + qa[14]*qb[25]; } else { qq = qa[25]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[25+NA*14] + (-7.027283689263065e-01*X[17+NA*14])+(-1.095445115010332e+00*X[25+NA*7]) );
G[1] += qq * ( tcrd[1]*X[25+NA*14] + (-7.027283689263065e-01*X[18+NA*14])+(1.095445115010332e+00*X[25+NA*8]) );
G[2] += qq * ( tcrd[2]*X[25+NA*14] + (1.111111111111111e+00*X[16+NA*14]) );
if ( LB > 4 ) { qq = qa[26]*qb[14] + qa[14]*qb[26]; } else { qq = qa[26]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[26+NA*14] + (8.606629658238704e-01*X[16+NA*14])+(-3.849001794597505e-01*X[19+NA*14])+(-1.095445115010332e+00*X[26+NA*7]) );
G[1] += qq * ( tcrd[1]*X[26+NA*14] + (-3.849001794597505e-01*X[20+NA*14])+(1.095445115010332e+00*X[26+NA*8]) );
G[2] += qq * ( tcrd[2]*X[26+NA*14] + (1.088662107903635e+00*X[17+NA*14]) );
if ( LB > 4 ) { qq = qa[27]*qb[14] + qa[14]*qb[27]; } else { qq = qa[27]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[27+NA*14] + (-3.849001794597505e-01*X[20+NA*14])+(-1.095445115010332e+00*X[27+NA*7]) );
G[1] += qq * ( tcrd[1]*X[27+NA*14] + (8.606629658238704e-01*X[16+NA*14])+(3.849001794597505e-01*X[19+NA*14])+(1.095445115010332e+00*X[27+NA*8]) );
G[2] += qq * ( tcrd[2]*X[27+NA*14] + (1.088662107903635e+00*X[18+NA*14]) );
if ( LB > 4 ) { qq = qa[28]*qb[14] + qa[14]*qb[28]; } else { qq = qa[28]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[28+NA*14] + (7.200822998230956e-01*X[17+NA*14])+(-2.721655269759087e-01*X[21+NA*14])+(-1.095445115010332e+00*X[28+NA*7]) );
G[1] += qq * ( tcrd[1]*X[28+NA*14] + (-7.200822998230956e-01*X[18+NA*14])+(-2.721655269759087e-01*X[22+NA*14])+(1.095445115010332e+00*X[28+NA*8]) );
G[2] += qq * ( tcrd[2]*X[28+NA*14] + (1.018350154434631e+00*X[19+NA*14]) );
if ( LB > 4 ) { qq = qa[29]*qb[14] + qa[14]*qb[29]; } else { qq = qa[29]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[29+NA*14] + (7.200822998230956e-01*X[18+NA*14])+(-2.721655269759087e-01*X[22+NA*14])+(-1.095445115010332e+00*X[29+NA*7]) );
G[1] += qq * ( tcrd[1]*X[29+NA*14] + (7.200822998230956e-01*X[17+NA*14])+(2.721655269759087e-01*X[21+NA*14])+(1.095445115010332e+00*X[29+NA*8]) );
G[2] += qq * ( tcrd[2]*X[29+NA*14] + (1.018350154434631e+00*X[20+NA*14]) );
if ( LB > 4 ) { qq = qa[30]*qb[14] + qa[14]*qb[30]; } else { qq = qa[30]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[30+NA*14] + (8.314794192830980e-01*X[19+NA*14])+(-1.571348402636772e-01*X[23+NA*14])+(-1.095445115010332e+00*X[30+NA*7]) );
G[1] += qq * ( tcrd[1]*X[30+NA*14] + (-8.314794192830980e-01*X[20+NA*14])+(-1.571348402636772e-01*X[24+NA*14])+(1.095445115010332e+00*X[30+NA*8]) );
G[2] += qq * ( tcrd[2]*X[30+NA*14] + (8.888888888888888e-01*X[21+NA*14]) );
if ( LB > 4 ) { qq = qa[31]*qb[14] + qa[14]*qb[31]; } else { qq = qa[31]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[31+NA*14] + (8.314794192830980e-01*X[20+NA*14])+(-1.571348402636772e-01*X[24+NA*14])+(-1.095445115010332e+00*X[31+NA*7]) );
G[1] += qq * ( tcrd[1]*X[31+NA*14] + (8.314794192830980e-01*X[19+NA*14])+(1.571348402636772e-01*X[23+NA*14])+(1.095445115010332e+00*X[31+NA*8]) );
G[2] += qq * ( tcrd[2]*X[31+NA*14] + (8.888888888888888e-01*X[22+NA*14]) );
if ( LB > 4 ) { qq = qa[32]*qb[14] + qa[14]*qb[32]; } else { qq = qa[32]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[32+NA*14] + (9.428090415820635e-01*X[21+NA*14])+(-1.095445115010332e+00*X[32+NA*7]) );
G[1] += qq * ( tcrd[1]*X[32+NA*14] + (-9.428090415820635e-01*X[22+NA*14])+(1.095445115010332e+00*X[32+NA*8]) );
G[2] += qq * ( tcrd[2]*X[32+NA*14] + (6.666666666666667e-01*X[23+NA*14]) );
if ( LB > 4 ) { qq = qa[33]*qb[14] + qa[14]*qb[33]; } else { qq = qa[33]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[33+NA*14] + (9.428090415820635e-01*X[22+NA*14])+(-1.095445115010332e+00*X[33+NA*7]) );
G[1] += qq * ( tcrd[1]*X[33+NA*14] + (9.428090415820635e-01*X[21+NA*14])+(1.095445115010332e+00*X[33+NA*8]) );
G[2] += qq * ( tcrd[2]*X[33+NA*14] + (6.666666666666667e-01*X[24+NA*14]) );
if ( LB > 4 ) { qq = qa[34]*qb[14] + qa[14]*qb[34]; } else { qq = qa[34]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[34+NA*14] + (1.054092553389460e+00*X[23+NA*14])+(-1.095445115010332e+00*X[34+NA*7]) );
G[1] += qq * ( tcrd[1]*X[34+NA*14] + (-1.054092553389460e+00*X[24+NA*14])+(1.095445115010332e+00*X[34+NA*8]) );
G[2] += qq * ( tcrd[2]*X[34+NA*14] );
if ( LB > 4 ) { qq = qa[35]*qb[14] + qa[14]*qb[35]; } else { qq = qa[35]*qb[14]; };
G[0] += qq * ( tcrd[0]*X[35+NA*14] + (1.054092553389460e+00*X[24+NA*14])+(-1.095445115010332e+00*X[35+NA*7]) );
G[1] += qq * ( tcrd[1]*X[35+NA*14] + (1.054092553389460e+00*X[23+NA*14])+(1.095445115010332e+00*X[35+NA*8]) );
G[2] += qq * ( tcrd[2]*X[35+NA*14] );
if ( LB > 4 ) { qq = qa[25]*qb[15] + qa[15]*qb[25]; } else { qq = qa[25]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[25+NA*15] + (-7.027283689263065e-01*X[17+NA*15])+(-1.095445115010332e+00*X[25+NA*8]) );
G[1] += qq * ( tcrd[1]*X[25+NA*15] + (-7.027283689263065e-01*X[18+NA*15])+(-1.095445115010332e+00*X[25+NA*7]) );
G[2] += qq * ( tcrd[2]*X[25+NA*15] + (1.111111111111111e+00*X[16+NA*15]) );
if ( LB > 4 ) { qq = qa[26]*qb[15] + qa[15]*qb[26]; } else { qq = qa[26]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[26+NA*15] + (8.606629658238704e-01*X[16+NA*15])+(-3.849001794597505e-01*X[19+NA*15])+(-1.095445115010332e+00*X[26+NA*8]) );
G[1] += qq * ( tcrd[1]*X[26+NA*15] + (-3.849001794597505e-01*X[20+NA*15])+(-1.095445115010332e+00*X[26+NA*7]) );
G[2] += qq * ( tcrd[2]*X[26+NA*15] + (1.088662107903635e+00*X[17+NA*15]) );
if ( LB > 4 ) { qq = qa[27]*qb[15] + qa[15]*qb[27]; } else { qq = qa[27]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[27+NA*15] + (-3.849001794597505e-01*X[20+NA*15])+(-1.095445115010332e+00*X[27+NA*8]) );
G[1] += qq * ( tcrd[1]*X[27+NA*15] + (8.606629658238704e-01*X[16+NA*15])+(3.849001794597505e-01*X[19+NA*15])+(-1.095445115010332e+00*X[27+NA*7]) );
G[2] += qq * ( tcrd[2]*X[27+NA*15] + (1.088662107903635e+00*X[18+NA*15]) );
if ( LB > 4 ) { qq = qa[28]*qb[15] + qa[15]*qb[28]; } else { qq = qa[28]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[28+NA*15] + (7.200822998230956e-01*X[17+NA*15])+(-2.721655269759087e-01*X[21+NA*15])+(-1.095445115010332e+00*X[28+NA*8]) );
G[1] += qq * ( tcrd[1]*X[28+NA*15] + (-7.200822998230956e-01*X[18+NA*15])+(-2.721655269759087e-01*X[22+NA*15])+(-1.095445115010332e+00*X[28+NA*7]) );
G[2] += qq * ( tcrd[2]*X[28+NA*15] + (1.018350154434631e+00*X[19+NA*15]) );
if ( LB > 4 ) { qq = qa[29]*qb[15] + qa[15]*qb[29]; } else { qq = qa[29]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[29+NA*15] + (7.200822998230956e-01*X[18+NA*15])+(-2.721655269759087e-01*X[22+NA*15])+(-1.095445115010332e+00*X[29+NA*8]) );
G[1] += qq * ( tcrd[1]*X[29+NA*15] + (7.200822998230956e-01*X[17+NA*15])+(2.721655269759087e-01*X[21+NA*15])+(-1.095445115010332e+00*X[29+NA*7]) );
G[2] += qq * ( tcrd[2]*X[29+NA*15] + (1.018350154434631e+00*X[20+NA*15]) );
if ( LB > 4 ) { qq = qa[30]*qb[15] + qa[15]*qb[30]; } else { qq = qa[30]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[30+NA*15] + (8.314794192830980e-01*X[19+NA*15])+(-1.571348402636772e-01*X[23+NA*15])+(-1.095445115010332e+00*X[30+NA*8]) );
G[1] += qq * ( tcrd[1]*X[30+NA*15] + (-8.314794192830980e-01*X[20+NA*15])+(-1.571348402636772e-01*X[24+NA*15])+(-1.095445115010332e+00*X[30+NA*7]) );
G[2] += qq * ( tcrd[2]*X[30+NA*15] + (8.888888888888888e-01*X[21+NA*15]) );
if ( LB > 4 ) { qq = qa[31]*qb[15] + qa[15]*qb[31]; } else { qq = qa[31]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[31+NA*15] + (8.314794192830980e-01*X[20+NA*15])+(-1.571348402636772e-01*X[24+NA*15])+(-1.095445115010332e+00*X[31+NA*8]) );
G[1] += qq * ( tcrd[1]*X[31+NA*15] + (8.314794192830980e-01*X[19+NA*15])+(1.571348402636772e-01*X[23+NA*15])+(-1.095445115010332e+00*X[31+NA*7]) );
G[2] += qq * ( tcrd[2]*X[31+NA*15] + (8.888888888888888e-01*X[22+NA*15]) );
if ( LB > 4 ) { qq = qa[32]*qb[15] + qa[15]*qb[32]; } else { qq = qa[32]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[32+NA*15] + (9.428090415820635e-01*X[21+NA*15])+(-1.095445115010332e+00*X[32+NA*8]) );
G[1] += qq * ( tcrd[1]*X[32+NA*15] + (-9.428090415820635e-01*X[22+NA*15])+(-1.095445115010332e+00*X[32+NA*7]) );
G[2] += qq * ( tcrd[2]*X[32+NA*15] + (6.666666666666667e-01*X[23+NA*15]) );
if ( LB > 4 ) { qq = qa[33]*qb[15] + qa[15]*qb[33]; } else { qq = qa[33]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[33+NA*15] + (9.428090415820635e-01*X[22+NA*15])+(-1.095445115010332e+00*X[33+NA*8]) );
G[1] += qq * ( tcrd[1]*X[33+NA*15] + (9.428090415820635e-01*X[21+NA*15])+(-1.095445115010332e+00*X[33+NA*7]) );
G[2] += qq * ( tcrd[2]*X[33+NA*15] + (6.666666666666667e-01*X[24+NA*15]) );
if ( LB > 4 ) { qq = qa[34]*qb[15] + qa[15]*qb[34]; } else { qq = qa[34]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[34+NA*15] + (1.054092553389460e+00*X[23+NA*15])+(-1.095445115010332e+00*X[34+NA*8]) );
G[1] += qq * ( tcrd[1]*X[34+NA*15] + (-1.054092553389460e+00*X[24+NA*15])+(-1.095445115010332e+00*X[34+NA*7]) );
G[2] += qq * ( tcrd[2]*X[34+NA*15] );
if ( LB > 4 ) { qq = qa[35]*qb[15] + qa[15]*qb[35]; } else { qq = qa[35]*qb[15]; };
G[0] += qq * ( tcrd[0]*X[35+NA*15] + (1.054092553389460e+00*X[24+NA*15])+(-1.095445115010332e+00*X[35+NA*8]) );
G[1] += qq * ( tcrd[1]*X[35+NA*15] + (1.054092553389460e+00*X[23+NA*15])+(-1.095445115010332e+00*X[35+NA*7]) );
G[2] += qq * ( tcrd[2]*X[35+NA*15] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HG( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
if ( LB > 4 ) { qq = qa[25]*qb[16] - qa[16]*qb[25]; } else { qq = qa[25]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[25+NA*16] + (-7.027283689263065e-01*X[17+NA*16])+(6.998542122237653e-01*X[25+NA*10]) );
G[1] += qq * ( tcrd[1]*X[25+NA*16] + (-7.027283689263065e-01*X[18+NA*16])+(6.998542122237653e-01*X[25+NA*11]) );
G[2] += qq * ( tcrd[2]*X[25+NA*16] + (1.111111111111111e+00*X[16+NA*16])+(-1.142857142857143e+00*X[25+NA*9]) );
if ( LB > 4 ) { qq = qa[26]*qb[16] - qa[16]*qb[26]; } else { qq = qa[26]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[26+NA*16] + (8.606629658238704e-01*X[16+NA*16])+(-3.849001794597505e-01*X[19+NA*16])+(6.998542122237653e-01*X[26+NA*10]) );
G[1] += qq * ( tcrd[1]*X[26+NA*16] + (-3.849001794597505e-01*X[20+NA*16])+(6.998542122237653e-01*X[26+NA*11]) );
G[2] += qq * ( tcrd[2]*X[26+NA*16] + (1.088662107903635e+00*X[17+NA*16])+(-1.142857142857143e+00*X[26+NA*9]) );
if ( LB > 4 ) { qq = qa[27]*qb[16] - qa[16]*qb[27]; } else { qq = qa[27]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[27+NA*16] + (-3.849001794597505e-01*X[20+NA*16])+(6.998542122237653e-01*X[27+NA*10]) );
G[1] += qq * ( tcrd[1]*X[27+NA*16] + (8.606629658238704e-01*X[16+NA*16])+(3.849001794597505e-01*X[19+NA*16])+(6.998542122237653e-01*X[27+NA*11]) );
G[2] += qq * ( tcrd[2]*X[27+NA*16] + (1.088662107903635e+00*X[18+NA*16])+(-1.142857142857143e+00*X[27+NA*9]) );
if ( LB > 4 ) { qq = qa[28]*qb[16] - qa[16]*qb[28]; } else { qq = qa[28]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[28+NA*16] + (7.200822998230956e-01*X[17+NA*16])+(-2.721655269759087e-01*X[21+NA*16])+(6.998542122237653e-01*X[28+NA*10]) );
G[1] += qq * ( tcrd[1]*X[28+NA*16] + (-7.200822998230956e-01*X[18+NA*16])+(-2.721655269759087e-01*X[22+NA*16])+(6.998542122237653e-01*X[28+NA*11]) );
G[2] += qq * ( tcrd[2]*X[28+NA*16] + (1.018350154434631e+00*X[19+NA*16])+(-1.142857142857143e+00*X[28+NA*9]) );
if ( LB > 4 ) { qq = qa[29]*qb[16] - qa[16]*qb[29]; } else { qq = qa[29]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[29+NA*16] + (7.200822998230956e-01*X[18+NA*16])+(-2.721655269759087e-01*X[22+NA*16])+(6.998542122237653e-01*X[29+NA*10]) );
G[1] += qq * ( tcrd[1]*X[29+NA*16] + (7.200822998230956e-01*X[17+NA*16])+(2.721655269759087e-01*X[21+NA*16])+(6.998542122237653e-01*X[29+NA*11]) );
G[2] += qq * ( tcrd[2]*X[29+NA*16] + (1.018350154434631e+00*X[20+NA*16])+(-1.142857142857143e+00*X[29+NA*9]) );
if ( LB > 4 ) { qq = qa[30]*qb[16] - qa[16]*qb[30]; } else { qq = qa[30]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[30+NA*16] + (8.314794192830980e-01*X[19+NA*16])+(-1.571348402636772e-01*X[23+NA*16])+(6.998542122237653e-01*X[30+NA*10]) );
G[1] += qq * ( tcrd[1]*X[30+NA*16] + (-8.314794192830980e-01*X[20+NA*16])+(-1.571348402636772e-01*X[24+NA*16])+(6.998542122237653e-01*X[30+NA*11]) );
G[2] += qq * ( tcrd[2]*X[30+NA*16] + (8.888888888888888e-01*X[21+NA*16])+(-1.142857142857143e+00*X[30+NA*9]) );
if ( LB > 4 ) { qq = qa[31]*qb[16] - qa[16]*qb[31]; } else { qq = qa[31]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[31+NA*16] + (8.314794192830980e-01*X[20+NA*16])+(-1.571348402636772e-01*X[24+NA*16])+(6.998542122237653e-01*X[31+NA*10]) );
G[1] += qq * ( tcrd[1]*X[31+NA*16] + (8.314794192830980e-01*X[19+NA*16])+(1.571348402636772e-01*X[23+NA*16])+(6.998542122237653e-01*X[31+NA*11]) );
G[2] += qq * ( tcrd[2]*X[31+NA*16] + (8.888888888888888e-01*X[22+NA*16])+(-1.142857142857143e+00*X[31+NA*9]) );
if ( LB > 4 ) { qq = qa[32]*qb[16] - qa[16]*qb[32]; } else { qq = qa[32]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[32+NA*16] + (9.428090415820635e-01*X[21+NA*16])+(6.998542122237653e-01*X[32+NA*10]) );
G[1] += qq * ( tcrd[1]*X[32+NA*16] + (-9.428090415820635e-01*X[22+NA*16])+(6.998542122237653e-01*X[32+NA*11]) );
G[2] += qq * ( tcrd[2]*X[32+NA*16] + (6.666666666666667e-01*X[23+NA*16])+(-1.142857142857143e+00*X[32+NA*9]) );
if ( LB > 4 ) { qq = qa[33]*qb[16] - qa[16]*qb[33]; } else { qq = qa[33]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[33+NA*16] + (9.428090415820635e-01*X[22+NA*16])+(6.998542122237653e-01*X[33+NA*10]) );
G[1] += qq * ( tcrd[1]*X[33+NA*16] + (9.428090415820635e-01*X[21+NA*16])+(6.998542122237653e-01*X[33+NA*11]) );
G[2] += qq * ( tcrd[2]*X[33+NA*16] + (6.666666666666667e-01*X[24+NA*16])+(-1.142857142857143e+00*X[33+NA*9]) );
if ( LB > 4 ) { qq = qa[34]*qb[16] - qa[16]*qb[34]; } else { qq = qa[34]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[34+NA*16] + (1.054092553389460e+00*X[23+NA*16])+(6.998542122237653e-01*X[34+NA*10]) );
G[1] += qq * ( tcrd[1]*X[34+NA*16] + (-1.054092553389460e+00*X[24+NA*16])+(6.998542122237653e-01*X[34+NA*11]) );
G[2] += qq * ( tcrd[2]*X[34+NA*16] + (-1.142857142857143e+00*X[34+NA*9]) );
if ( LB > 4 ) { qq = qa[35]*qb[16] - qa[16]*qb[35]; } else { qq = qa[35]*qb[16]; };
G[0] += qq * ( tcrd[0]*X[35+NA*16] + (1.054092553389460e+00*X[24+NA*16])+(6.998542122237653e-01*X[35+NA*10]) );
G[1] += qq * ( tcrd[1]*X[35+NA*16] + (1.054092553389460e+00*X[23+NA*16])+(6.998542122237653e-01*X[35+NA*11]) );
G[2] += qq * ( tcrd[2]*X[35+NA*16] + (-1.142857142857143e+00*X[35+NA*9]) );
if ( LB > 4 ) { qq = qa[25]*qb[17] - qa[17]*qb[25]; } else { qq = qa[25]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[25+NA*17] + (-7.027283689263065e-01*X[17+NA*17])+(-9.035079029052513e-01*X[25+NA*9])+(3.499271061118825e-01*X[25+NA*12]) );
G[1] += qq * ( tcrd[1]*X[25+NA*17] + (-7.027283689263065e-01*X[18+NA*17])+(3.499271061118825e-01*X[25+NA*13]) );
G[2] += qq * ( tcrd[2]*X[25+NA*17] + (1.111111111111111e+00*X[17+NA*16])+(-1.106566670344976e+00*X[25+NA*10]) );
if ( LB > 4 ) { qq = qa[26]*qb[17] - qa[17]*qb[26]; } else { qq = qa[26]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[26+NA*17] + (8.606629658238704e-01*X[17+NA*16])+(-3.849001794597505e-01*X[19+NA*17])+(-9.035079029052513e-01*X[26+NA*9])+(3.499271061118825e-01*X[26+NA*12]) );
G[1] += qq * ( tcrd[1]*X[26+NA*17] + (-3.849001794597505e-01*X[20+NA*17])+(3.499271061118825e-01*X[26+NA*13]) );
G[2] += qq * ( tcrd[2]*X[26+NA*17] + (1.088662107903635e+00*X[17+NA*17])+(-1.106566670344976e+00*X[26+NA*10]) );
if ( LB > 4 ) { qq = qa[27]*qb[17] - qa[17]*qb[27]; } else { qq = qa[27]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[27+NA*17] + (-3.849001794597505e-01*X[20+NA*17])+(-9.035079029052513e-01*X[27+NA*9])+(3.499271061118825e-01*X[27+NA*12]) );
G[1] += qq * ( tcrd[1]*X[27+NA*17] + (8.606629658238704e-01*X[17+NA*16])+(3.849001794597505e-01*X[19+NA*17])+(3.499271061118825e-01*X[27+NA*13]) );
G[2] += qq * ( tcrd[2]*X[27+NA*17] + (1.088662107903635e+00*X[18+NA*17])+(-1.106566670344976e+00*X[27+NA*10]) );
if ( LB > 4 ) { qq = qa[28]*qb[17] - qa[17]*qb[28]; } else { qq = qa[28]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[28+NA*17] + (7.200822998230956e-01*X[17+NA*17])+(-2.721655269759087e-01*X[21+NA*17])+(-9.035079029052513e-01*X[28+NA*9])+(3.499271061118825e-01*X[28+NA*12]) );
G[1] += qq * ( tcrd[1]*X[28+NA*17] + (-7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[22+NA*17])+(3.499271061118825e-01*X[28+NA*13]) );
G[2] += qq * ( tcrd[2]*X[28+NA*17] + (1.018350154434631e+00*X[19+NA*17])+(-1.106566670344976e+00*X[28+NA*10]) );
if ( LB > 4 ) { qq = qa[29]*qb[17] - qa[17]*qb[29]; } else { qq = qa[29]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[29+NA*17] + (7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[22+NA*17])+(-9.035079029052513e-01*X[29+NA*9])+(3.499271061118825e-01*X[29+NA*12]) );
G[1] += qq * ( tcrd[1]*X[29+NA*17] + (7.200822998230956e-01*X[17+NA*17])+(2.721655269759087e-01*X[21+NA*17])+(3.499271061118825e-01*X[29+NA*13]) );
G[2] += qq * ( tcrd[2]*X[29+NA*17] + (1.018350154434631e+00*X[20+NA*17])+(-1.106566670344976e+00*X[29+NA*10]) );
if ( LB > 4 ) { qq = qa[30]*qb[17] - qa[17]*qb[30]; } else { qq = qa[30]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[30+NA*17] + (8.314794192830980e-01*X[19+NA*17])+(-1.571348402636772e-01*X[23+NA*17])+(-9.035079029052513e-01*X[30+NA*9])+(3.499271061118825e-01*X[30+NA*12]) );
G[1] += qq * ( tcrd[1]*X[30+NA*17] + (-8.314794192830980e-01*X[20+NA*17])+(-1.571348402636772e-01*X[24+NA*17])+(3.499271061118825e-01*X[30+NA*13]) );
G[2] += qq * ( tcrd[2]*X[30+NA*17] + (8.888888888888888e-01*X[21+NA*17])+(-1.106566670344976e+00*X[30+NA*10]) );
if ( LB > 4 ) { qq = qa[31]*qb[17] - qa[17]*qb[31]; } else { qq = qa[31]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[31+NA*17] + (8.314794192830980e-01*X[20+NA*17])+(-1.571348402636772e-01*X[24+NA*17])+(-9.035079029052513e-01*X[31+NA*9])+(3.499271061118825e-01*X[31+NA*12]) );
G[1] += qq * ( tcrd[1]*X[31+NA*17] + (8.314794192830980e-01*X[19+NA*17])+(1.571348402636772e-01*X[23+NA*17])+(3.499271061118825e-01*X[31+NA*13]) );
G[2] += qq * ( tcrd[2]*X[31+NA*17] + (8.888888888888888e-01*X[22+NA*17])+(-1.106566670344976e+00*X[31+NA*10]) );
if ( LB > 4 ) { qq = qa[32]*qb[17] - qa[17]*qb[32]; } else { qq = qa[32]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[32+NA*17] + (9.428090415820635e-01*X[21+NA*17])+(-9.035079029052513e-01*X[32+NA*9])+(3.499271061118825e-01*X[32+NA*12]) );
G[1] += qq * ( tcrd[1]*X[32+NA*17] + (-9.428090415820635e-01*X[22+NA*17])+(3.499271061118825e-01*X[32+NA*13]) );
G[2] += qq * ( tcrd[2]*X[32+NA*17] + (6.666666666666667e-01*X[23+NA*17])+(-1.106566670344976e+00*X[32+NA*10]) );
if ( LB > 4 ) { qq = qa[33]*qb[17] - qa[17]*qb[33]; } else { qq = qa[33]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[33+NA*17] + (9.428090415820635e-01*X[22+NA*17])+(-9.035079029052513e-01*X[33+NA*9])+(3.499271061118825e-01*X[33+NA*12]) );
G[1] += qq * ( tcrd[1]*X[33+NA*17] + (9.428090415820635e-01*X[21+NA*17])+(3.499271061118825e-01*X[33+NA*13]) );
G[2] += qq * ( tcrd[2]*X[33+NA*17] + (6.666666666666667e-01*X[24+NA*17])+(-1.106566670344976e+00*X[33+NA*10]) );
if ( LB > 4 ) { qq = qa[34]*qb[17] - qa[17]*qb[34]; } else { qq = qa[34]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[34+NA*17] + (1.054092553389460e+00*X[23+NA*17])+(-9.035079029052513e-01*X[34+NA*9])+(3.499271061118825e-01*X[34+NA*12]) );
G[1] += qq * ( tcrd[1]*X[34+NA*17] + (-1.054092553389460e+00*X[24+NA*17])+(3.499271061118825e-01*X[34+NA*13]) );
G[2] += qq * ( tcrd[2]*X[34+NA*17] + (-1.106566670344976e+00*X[34+NA*10]) );
if ( LB > 4 ) { qq = qa[35]*qb[17] - qa[17]*qb[35]; } else { qq = qa[35]*qb[17]; };
G[0] += qq * ( tcrd[0]*X[35+NA*17] + (1.054092553389460e+00*X[24+NA*17])+(-9.035079029052513e-01*X[35+NA*9])+(3.499271061118825e-01*X[35+NA*12]) );
G[1] += qq * ( tcrd[1]*X[35+NA*17] + (1.054092553389460e+00*X[23+NA*17])+(3.499271061118825e-01*X[35+NA*13]) );
G[2] += qq * ( tcrd[2]*X[35+NA*17] + (-1.106566670344976e+00*X[35+NA*10]) );
if ( LB > 4 ) { qq = qa[25]*qb[18] - qa[18]*qb[25]; } else { qq = qa[25]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[25+NA*18] + (-7.027283689263065e-01*X[18+NA*17])+(3.499271061118825e-01*X[25+NA*13]) );
G[1] += qq * ( tcrd[1]*X[25+NA*18] + (-7.027283689263065e-01*X[18+NA*18])+(-9.035079029052513e-01*X[25+NA*9])+(-3.499271061118825e-01*X[25+NA*12]) );
G[2] += qq * ( tcrd[2]*X[25+NA*18] + (1.111111111111111e+00*X[18+NA*16])+(-1.106566670344976e+00*X[25+NA*11]) );
if ( LB > 4 ) { qq = qa[26]*qb[18] - qa[18]*qb[26]; } else { qq = qa[26]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[26+NA*18] + (8.606629658238704e-01*X[18+NA*16])+(-3.849001794597505e-01*X[19+NA*18])+(3.499271061118825e-01*X[26+NA*13]) );
G[1] += qq * ( tcrd[1]*X[26+NA*18] + (-3.849001794597505e-01*X[20+NA*18])+(-9.035079029052513e-01*X[26+NA*9])+(-3.499271061118825e-01*X[26+NA*12]) );
G[2] += qq * ( tcrd[2]*X[26+NA*18] + (1.088662107903635e+00*X[18+NA*17])+(-1.106566670344976e+00*X[26+NA*11]) );
if ( LB > 4 ) { qq = qa[27]*qb[18] - qa[18]*qb[27]; } else { qq = qa[27]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[27+NA*18] + (-3.849001794597505e-01*X[20+NA*18])+(3.499271061118825e-01*X[27+NA*13]) );
G[1] += qq * ( tcrd[1]*X[27+NA*18] + (8.606629658238704e-01*X[18+NA*16])+(3.849001794597505e-01*X[19+NA*18])+(-9.035079029052513e-01*X[27+NA*9])+(-3.499271061118825e-01*X[27+NA*12]) );
G[2] += qq * ( tcrd[2]*X[27+NA*18] + (1.088662107903635e+00*X[18+NA*18])+(-1.106566670344976e+00*X[27+NA*11]) );
if ( LB > 4 ) { qq = qa[28]*qb[18] - qa[18]*qb[28]; } else { qq = qa[28]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[28+NA*18] + (7.200822998230956e-01*X[18+NA*17])+(-2.721655269759087e-01*X[21+NA*18])+(3.499271061118825e-01*X[28+NA*13]) );
G[1] += qq * ( tcrd[1]*X[28+NA*18] + (-7.200822998230956e-01*X[18+NA*18])+(-2.721655269759087e-01*X[22+NA*18])+(-9.035079029052513e-01*X[28+NA*9])+(-3.499271061118825e-01*X[28+NA*12]) );
G[2] += qq * ( tcrd[2]*X[28+NA*18] + (1.018350154434631e+00*X[19+NA*18])+(-1.106566670344976e+00*X[28+NA*11]) );
if ( LB > 4 ) { qq = qa[29]*qb[18] - qa[18]*qb[29]; } else { qq = qa[29]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[29+NA*18] + (7.200822998230956e-01*X[18+NA*18])+(-2.721655269759087e-01*X[22+NA*18])+(3.499271061118825e-01*X[29+NA*13]) );
G[1] += qq * ( tcrd[1]*X[29+NA*18] + (7.200822998230956e-01*X[18+NA*17])+(2.721655269759087e-01*X[21+NA*18])+(-9.035079029052513e-01*X[29+NA*9])+(-3.499271061118825e-01*X[29+NA*12]) );
G[2] += qq * ( tcrd[2]*X[29+NA*18] + (1.018350154434631e+00*X[20+NA*18])+(-1.106566670344976e+00*X[29+NA*11]) );
if ( LB > 4 ) { qq = qa[30]*qb[18] - qa[18]*qb[30]; } else { qq = qa[30]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[30+NA*18] + (8.314794192830980e-01*X[19+NA*18])+(-1.571348402636772e-01*X[23+NA*18])+(3.499271061118825e-01*X[30+NA*13]) );
G[1] += qq * ( tcrd[1]*X[30+NA*18] + (-8.314794192830980e-01*X[20+NA*18])+(-1.571348402636772e-01*X[24+NA*18])+(-9.035079029052513e-01*X[30+NA*9])+(-3.499271061118825e-01*X[30+NA*12]) );
G[2] += qq * ( tcrd[2]*X[30+NA*18] + (8.888888888888888e-01*X[21+NA*18])+(-1.106566670344976e+00*X[30+NA*11]) );
if ( LB > 4 ) { qq = qa[31]*qb[18] - qa[18]*qb[31]; } else { qq = qa[31]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[31+NA*18] + (8.314794192830980e-01*X[20+NA*18])+(-1.571348402636772e-01*X[24+NA*18])+(3.499271061118825e-01*X[31+NA*13]) );
G[1] += qq * ( tcrd[1]*X[31+NA*18] + (8.314794192830980e-01*X[19+NA*18])+(1.571348402636772e-01*X[23+NA*18])+(-9.035079029052513e-01*X[31+NA*9])+(-3.499271061118825e-01*X[31+NA*12]) );
G[2] += qq * ( tcrd[2]*X[31+NA*18] + (8.888888888888888e-01*X[22+NA*18])+(-1.106566670344976e+00*X[31+NA*11]) );
if ( LB > 4 ) { qq = qa[32]*qb[18] - qa[18]*qb[32]; } else { qq = qa[32]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[32+NA*18] + (9.428090415820635e-01*X[21+NA*18])+(3.499271061118825e-01*X[32+NA*13]) );
G[1] += qq * ( tcrd[1]*X[32+NA*18] + (-9.428090415820635e-01*X[22+NA*18])+(-9.035079029052513e-01*X[32+NA*9])+(-3.499271061118825e-01*X[32+NA*12]) );
G[2] += qq * ( tcrd[2]*X[32+NA*18] + (6.666666666666667e-01*X[23+NA*18])+(-1.106566670344976e+00*X[32+NA*11]) );
if ( LB > 4 ) { qq = qa[33]*qb[18] - qa[18]*qb[33]; } else { qq = qa[33]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[33+NA*18] + (9.428090415820635e-01*X[22+NA*18])+(3.499271061118825e-01*X[33+NA*13]) );
G[1] += qq * ( tcrd[1]*X[33+NA*18] + (9.428090415820635e-01*X[21+NA*18])+(-9.035079029052513e-01*X[33+NA*9])+(-3.499271061118825e-01*X[33+NA*12]) );
G[2] += qq * ( tcrd[2]*X[33+NA*18] + (6.666666666666667e-01*X[24+NA*18])+(-1.106566670344976e+00*X[33+NA*11]) );
if ( LB > 4 ) { qq = qa[34]*qb[18] - qa[18]*qb[34]; } else { qq = qa[34]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[34+NA*18] + (1.054092553389460e+00*X[23+NA*18])+(3.499271061118825e-01*X[34+NA*13]) );
G[1] += qq * ( tcrd[1]*X[34+NA*18] + (-1.054092553389460e+00*X[24+NA*18])+(-9.035079029052513e-01*X[34+NA*9])+(-3.499271061118825e-01*X[34+NA*12]) );
G[2] += qq * ( tcrd[2]*X[34+NA*18] + (-1.106566670344976e+00*X[34+NA*11]) );
if ( LB > 4 ) { qq = qa[35]*qb[18] - qa[18]*qb[35]; } else { qq = qa[35]*qb[18]; };
G[0] += qq * ( tcrd[0]*X[35+NA*18] + (1.054092553389460e+00*X[24+NA*18])+(3.499271061118825e-01*X[35+NA*13]) );
G[1] += qq * ( tcrd[1]*X[35+NA*18] + (1.054092553389460e+00*X[23+NA*18])+(-9.035079029052513e-01*X[35+NA*9])+(-3.499271061118825e-01*X[35+NA*12]) );
G[2] += qq * ( tcrd[2]*X[35+NA*18] + (-1.106566670344976e+00*X[35+NA*11]) );
if ( LB > 4 ) { qq = qa[25]*qb[19] - qa[19]*qb[25]; } else { qq = qa[25]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[25+NA*19] + (-7.027283689263065e-01*X[19+NA*17])+(-7.824607964359518e-01*X[25+NA*10])+(2.020305089104422e-01*X[25+NA*14]) );
G[1] += qq * ( tcrd[1]*X[25+NA*19] + (-7.027283689263065e-01*X[19+NA*18])+(7.824607964359518e-01*X[25+NA*11])+(2.020305089104422e-01*X[25+NA*15]) );
G[2] += qq * ( tcrd[2]*X[25+NA*19] + (1.111111111111111e+00*X[19+NA*16])+(-9.897433186107870e-01*X[25+NA*12]) );
if ( LB > 4 ) { qq = qa[26]*qb[19] - qa[19]*qb[26]; } else { qq = qa[26]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[26+NA*19] + (8.606629658238704e-01*X[19+NA*16])+(-3.849001794597505e-01*X[19+NA*19])+(-7.824607964359518e-01*X[26+NA*10])+(2.020305089104422e-01*X[26+NA*14]) );
G[1] += qq * ( tcrd[1]*X[26+NA*19] + (-3.849001794597505e-01*X[20+NA*19])+(7.824607964359518e-01*X[26+NA*11])+(2.020305089104422e-01*X[26+NA*15]) );
G[2] += qq * ( tcrd[2]*X[26+NA*19] + (1.088662107903635e+00*X[19+NA*17])+(-9.897433186107870e-01*X[26+NA*12]) );
if ( LB > 4 ) { qq = qa[27]*qb[19] - qa[19]*qb[27]; } else { qq = qa[27]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[27+NA*19] + (-3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[27+NA*10])+(2.020305089104422e-01*X[27+NA*14]) );
G[1] += qq * ( tcrd[1]*X[27+NA*19] + (8.606629658238704e-01*X[19+NA*16])+(3.849001794597505e-01*X[19+NA*19])+(7.824607964359518e-01*X[27+NA*11])+(2.020305089104422e-01*X[27+NA*15]) );
G[2] += qq * ( tcrd[2]*X[27+NA*19] + (1.088662107903635e+00*X[19+NA*18])+(-9.897433186107870e-01*X[27+NA*12]) );
if ( LB > 4 ) { qq = qa[28]*qb[19] - qa[19]*qb[28]; } else { qq = qa[28]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[28+NA*19] + (7.200822998230956e-01*X[19+NA*17])+(-2.721655269759087e-01*X[21+NA*19])+(-7.824607964359518e-01*X[28+NA*10])+(2.020305089104422e-01*X[28+NA*14]) );
G[1] += qq * ( tcrd[1]*X[28+NA*19] + (-7.200822998230956e-01*X[19+NA*18])+(-2.721655269759087e-01*X[22+NA*19])+(7.824607964359518e-01*X[28+NA*11])+(2.020305089104422e-01*X[28+NA*15]) );
G[2] += qq * ( tcrd[2]*X[28+NA*19] + (1.018350154434631e+00*X[19+NA*19])+(-9.897433186107870e-01*X[28+NA*12]) );
if ( LB > 4 ) { qq = qa[29]*qb[19] - qa[19]*qb[29]; } else { qq = qa[29]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[29+NA*19] + (7.200822998230956e-01*X[19+NA*18])+(-2.721655269759087e-01*X[22+NA*19])+(-7.824607964359518e-01*X[29+NA*10])+(2.020305089104422e-01*X[29+NA*14]) );
G[1] += qq * ( tcrd[1]*X[29+NA*19] + (7.200822998230956e-01*X[19+NA*17])+(2.721655269759087e-01*X[21+NA*19])+(7.824607964359518e-01*X[29+NA*11])+(2.020305089104422e-01*X[29+NA*15]) );
G[2] += qq * ( tcrd[2]*X[29+NA*19] + (1.018350154434631e+00*X[20+NA*19])+(-9.897433186107870e-01*X[29+NA*12]) );
if ( LB > 4 ) { qq = qa[30]*qb[19] - qa[19]*qb[30]; } else { qq = qa[30]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[30+NA*19] + (8.314794192830980e-01*X[19+NA*19])+(-1.571348402636772e-01*X[23+NA*19])+(-7.824607964359518e-01*X[30+NA*10])+(2.020305089104422e-01*X[30+NA*14]) );
G[1] += qq * ( tcrd[1]*X[30+NA*19] + (-8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[24+NA*19])+(7.824607964359518e-01*X[30+NA*11])+(2.020305089104422e-01*X[30+NA*15]) );
G[2] += qq * ( tcrd[2]*X[30+NA*19] + (8.888888888888888e-01*X[21+NA*19])+(-9.897433186107870e-01*X[30+NA*12]) );
if ( LB > 4 ) { qq = qa[31]*qb[19] - qa[19]*qb[31]; } else { qq = qa[31]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[31+NA*19] + (8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[24+NA*19])+(-7.824607964359518e-01*X[31+NA*10])+(2.020305089104422e-01*X[31+NA*14]) );
G[1] += qq * ( tcrd[1]*X[31+NA*19] + (8.314794192830980e-01*X[19+NA*19])+(1.571348402636772e-01*X[23+NA*19])+(7.824607964359518e-01*X[31+NA*11])+(2.020305089104422e-01*X[31+NA*15]) );
G[2] += qq * ( tcrd[2]*X[31+NA*19] + (8.888888888888888e-01*X[22+NA*19])+(-9.897433186107870e-01*X[31+NA*12]) );
if ( LB > 4 ) { qq = qa[32]*qb[19] - qa[19]*qb[32]; } else { qq = qa[32]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[32+NA*19] + (9.428090415820635e-01*X[21+NA*19])+(-7.824607964359518e-01*X[32+NA*10])+(2.020305089104422e-01*X[32+NA*14]) );
G[1] += qq * ( tcrd[1]*X[32+NA*19] + (-9.428090415820635e-01*X[22+NA*19])+(7.824607964359518e-01*X[32+NA*11])+(2.020305089104422e-01*X[32+NA*15]) );
G[2] += qq * ( tcrd[2]*X[32+NA*19] + (6.666666666666667e-01*X[23+NA*19])+(-9.897433186107870e-01*X[32+NA*12]) );
if ( LB > 4 ) { qq = qa[33]*qb[19] - qa[19]*qb[33]; } else { qq = qa[33]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[33+NA*19] + (9.428090415820635e-01*X[22+NA*19])+(-7.824607964359518e-01*X[33+NA*10])+(2.020305089104422e-01*X[33+NA*14]) );
G[1] += qq * ( tcrd[1]*X[33+NA*19] + (9.428090415820635e-01*X[21+NA*19])+(7.824607964359518e-01*X[33+NA*11])+(2.020305089104422e-01*X[33+NA*15]) );
G[2] += qq * ( tcrd[2]*X[33+NA*19] + (6.666666666666667e-01*X[24+NA*19])+(-9.897433186107870e-01*X[33+NA*12]) );
if ( LB > 4 ) { qq = qa[34]*qb[19] - qa[19]*qb[34]; } else { qq = qa[34]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[34+NA*19] + (1.054092553389460e+00*X[23+NA*19])+(-7.824607964359518e-01*X[34+NA*10])+(2.020305089104422e-01*X[34+NA*14]) );
G[1] += qq * ( tcrd[1]*X[34+NA*19] + (-1.054092553389460e+00*X[24+NA*19])+(7.824607964359518e-01*X[34+NA*11])+(2.020305089104422e-01*X[34+NA*15]) );
G[2] += qq * ( tcrd[2]*X[34+NA*19] + (-9.897433186107870e-01*X[34+NA*12]) );
if ( LB > 4 ) { qq = qa[35]*qb[19] - qa[19]*qb[35]; } else { qq = qa[35]*qb[19]; };
G[0] += qq * ( tcrd[0]*X[35+NA*19] + (1.054092553389460e+00*X[24+NA*19])+(-7.824607964359518e-01*X[35+NA*10])+(2.020305089104422e-01*X[35+NA*14]) );
G[1] += qq * ( tcrd[1]*X[35+NA*19] + (1.054092553389460e+00*X[23+NA*19])+(7.824607964359518e-01*X[35+NA*11])+(2.020305089104422e-01*X[35+NA*15]) );
G[2] += qq * ( tcrd[2]*X[35+NA*19] + (-9.897433186107870e-01*X[35+NA*12]) );
if ( LB > 4 ) { qq = qa[25]*qb[20] - qa[20]*qb[25]; } else { qq = qa[25]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[25+NA*20] + (-7.027283689263065e-01*X[20+NA*17])+(-7.824607964359518e-01*X[25+NA*11])+(2.020305089104422e-01*X[25+NA*15]) );
G[1] += qq * ( tcrd[1]*X[25+NA*20] + (-7.027283689263065e-01*X[20+NA*18])+(-7.824607964359518e-01*X[25+NA*10])+(-2.020305089104422e-01*X[25+NA*14]) );
G[2] += qq * ( tcrd[2]*X[25+NA*20] + (1.111111111111111e+00*X[20+NA*16])+(-9.897433186107870e-01*X[25+NA*13]) );
if ( LB > 4 ) { qq = qa[26]*qb[20] - qa[20]*qb[26]; } else { qq = qa[26]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[26+NA*20] + (8.606629658238704e-01*X[20+NA*16])+(-3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[26+NA*11])+(2.020305089104422e-01*X[26+NA*15]) );
G[1] += qq * ( tcrd[1]*X[26+NA*20] + (-3.849001794597505e-01*X[20+NA*20])+(-7.824607964359518e-01*X[26+NA*10])+(-2.020305089104422e-01*X[26+NA*14]) );
G[2] += qq * ( tcrd[2]*X[26+NA*20] + (1.088662107903635e+00*X[20+NA*17])+(-9.897433186107870e-01*X[26+NA*13]) );
if ( LB > 4 ) { qq = qa[27]*qb[20] - qa[20]*qb[27]; } else { qq = qa[27]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[27+NA*20] + (-3.849001794597505e-01*X[20+NA*20])+(-7.824607964359518e-01*X[27+NA*11])+(2.020305089104422e-01*X[27+NA*15]) );
G[1] += qq * ( tcrd[1]*X[27+NA*20] + (8.606629658238704e-01*X[20+NA*16])+(3.849001794597505e-01*X[20+NA*19])+(-7.824607964359518e-01*X[27+NA*10])+(-2.020305089104422e-01*X[27+NA*14]) );
G[2] += qq * ( tcrd[2]*X[27+NA*20] + (1.088662107903635e+00*X[20+NA*18])+(-9.897433186107870e-01*X[27+NA*13]) );
if ( LB > 4 ) { qq = qa[28]*qb[20] - qa[20]*qb[28]; } else { qq = qa[28]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[28+NA*20] + (7.200822998230956e-01*X[20+NA*17])+(-2.721655269759087e-01*X[21+NA*20])+(-7.824607964359518e-01*X[28+NA*11])+(2.020305089104422e-01*X[28+NA*15]) );
G[1] += qq * ( tcrd[1]*X[28+NA*20] + (-7.200822998230956e-01*X[20+NA*18])+(-2.721655269759087e-01*X[22+NA*20])+(-7.824607964359518e-01*X[28+NA*10])+(-2.020305089104422e-01*X[28+NA*14]) );
G[2] += qq * ( tcrd[2]*X[28+NA*20] + (1.018350154434631e+00*X[20+NA*19])+(-9.897433186107870e-01*X[28+NA*13]) );
if ( LB > 4 ) { qq = qa[29]*qb[20] - qa[20]*qb[29]; } else { qq = qa[29]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[29+NA*20] + (7.200822998230956e-01*X[20+NA*18])+(-2.721655269759087e-01*X[22+NA*20])+(-7.824607964359518e-01*X[29+NA*11])+(2.020305089104422e-01*X[29+NA*15]) );
G[1] += qq * ( tcrd[1]*X[29+NA*20] + (7.200822998230956e-01*X[20+NA*17])+(2.721655269759087e-01*X[21+NA*20])+(-7.824607964359518e-01*X[29+NA*10])+(-2.020305089104422e-01*X[29+NA*14]) );
G[2] += qq * ( tcrd[2]*X[29+NA*20] + (1.018350154434631e+00*X[20+NA*20])+(-9.897433186107870e-01*X[29+NA*13]) );
if ( LB > 4 ) { qq = qa[30]*qb[20] - qa[20]*qb[30]; } else { qq = qa[30]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[30+NA*20] + (8.314794192830980e-01*X[20+NA*19])+(-1.571348402636772e-01*X[23+NA*20])+(-7.824607964359518e-01*X[30+NA*11])+(2.020305089104422e-01*X[30+NA*15]) );
G[1] += qq * ( tcrd[1]*X[30+NA*20] + (-8.314794192830980e-01*X[20+NA*20])+(-1.571348402636772e-01*X[24+NA*20])+(-7.824607964359518e-01*X[30+NA*10])+(-2.020305089104422e-01*X[30+NA*14]) );
G[2] += qq * ( tcrd[2]*X[30+NA*20] + (8.888888888888888e-01*X[21+NA*20])+(-9.897433186107870e-01*X[30+NA*13]) );
if ( LB > 4 ) { qq = qa[31]*qb[20] - qa[20]*qb[31]; } else { qq = qa[31]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[31+NA*20] + (8.314794192830980e-01*X[20+NA*20])+(-1.571348402636772e-01*X[24+NA*20])+(-7.824607964359518e-01*X[31+NA*11])+(2.020305089104422e-01*X[31+NA*15]) );
G[1] += qq * ( tcrd[1]*X[31+NA*20] + (8.314794192830980e-01*X[20+NA*19])+(1.571348402636772e-01*X[23+NA*20])+(-7.824607964359518e-01*X[31+NA*10])+(-2.020305089104422e-01*X[31+NA*14]) );
G[2] += qq * ( tcrd[2]*X[31+NA*20] + (8.888888888888888e-01*X[22+NA*20])+(-9.897433186107870e-01*X[31+NA*13]) );
if ( LB > 4 ) { qq = qa[32]*qb[20] - qa[20]*qb[32]; } else { qq = qa[32]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[32+NA*20] + (9.428090415820635e-01*X[21+NA*20])+(-7.824607964359518e-01*X[32+NA*11])+(2.020305089104422e-01*X[32+NA*15]) );
G[1] += qq * ( tcrd[1]*X[32+NA*20] + (-9.428090415820635e-01*X[22+NA*20])+(-7.824607964359518e-01*X[32+NA*10])+(-2.020305089104422e-01*X[32+NA*14]) );
G[2] += qq * ( tcrd[2]*X[32+NA*20] + (6.666666666666667e-01*X[23+NA*20])+(-9.897433186107870e-01*X[32+NA*13]) );
if ( LB > 4 ) { qq = qa[33]*qb[20] - qa[20]*qb[33]; } else { qq = qa[33]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[33+NA*20] + (9.428090415820635e-01*X[22+NA*20])+(-7.824607964359518e-01*X[33+NA*11])+(2.020305089104422e-01*X[33+NA*15]) );
G[1] += qq * ( tcrd[1]*X[33+NA*20] + (9.428090415820635e-01*X[21+NA*20])+(-7.824607964359518e-01*X[33+NA*10])+(-2.020305089104422e-01*X[33+NA*14]) );
G[2] += qq * ( tcrd[2]*X[33+NA*20] + (6.666666666666667e-01*X[24+NA*20])+(-9.897433186107870e-01*X[33+NA*13]) );
if ( LB > 4 ) { qq = qa[34]*qb[20] - qa[20]*qb[34]; } else { qq = qa[34]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[34+NA*20] + (1.054092553389460e+00*X[23+NA*20])+(-7.824607964359518e-01*X[34+NA*11])+(2.020305089104422e-01*X[34+NA*15]) );
G[1] += qq * ( tcrd[1]*X[34+NA*20] + (-1.054092553389460e+00*X[24+NA*20])+(-7.824607964359518e-01*X[34+NA*10])+(-2.020305089104422e-01*X[34+NA*14]) );
G[2] += qq * ( tcrd[2]*X[34+NA*20] + (-9.897433186107870e-01*X[34+NA*13]) );
if ( LB > 4 ) { qq = qa[35]*qb[20] - qa[20]*qb[35]; } else { qq = qa[35]*qb[20]; };
G[0] += qq * ( tcrd[0]*X[35+NA*20] + (1.054092553389460e+00*X[24+NA*20])+(-7.824607964359518e-01*X[35+NA*11])+(2.020305089104422e-01*X[35+NA*15]) );
G[1] += qq * ( tcrd[1]*X[35+NA*20] + (1.054092553389460e+00*X[23+NA*20])+(-7.824607964359518e-01*X[35+NA*10])+(-2.020305089104422e-01*X[35+NA*14]) );
G[2] += qq * ( tcrd[2]*X[35+NA*20] + (-9.897433186107870e-01*X[35+NA*13]) );
if ( LB > 4 ) { qq = qa[25]*qb[21] - qa[21]*qb[25]; } else { qq = qa[25]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[25+NA*21] + (-7.027283689263065e-01*X[21+NA*17])+(-9.258200997725513e-01*X[25+NA*12]) );
G[1] += qq * ( tcrd[1]*X[25+NA*21] + (-7.027283689263065e-01*X[21+NA*18])+(9.258200997725513e-01*X[25+NA*13]) );
G[2] += qq * ( tcrd[2]*X[25+NA*21] + (1.111111111111111e+00*X[21+NA*16])+(-7.559289460184544e-01*X[25+NA*14]) );
if ( LB > 4 ) { qq = qa[26]*qb[21] - qa[21]*qb[26]; } else { qq = qa[26]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[26+NA*21] + (8.606629658238704e-01*X[21+NA*16])+(-3.849001794597505e-01*X[21+NA*19])+(-9.258200997725513e-01*X[26+NA*12]) );
G[1] += qq * ( tcrd[1]*X[26+NA*21] + (-3.849001794597505e-01*X[21+NA*20])+(9.258200997725513e-01*X[26+NA*13]) );
G[2] += qq * ( tcrd[2]*X[26+NA*21] + (1.088662107903635e+00*X[21+NA*17])+(-7.559289460184544e-01*X[26+NA*14]) );
if ( LB > 4 ) { qq = qa[27]*qb[21] - qa[21]*qb[27]; } else { qq = qa[27]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[27+NA*21] + (-3.849001794597505e-01*X[21+NA*20])+(-9.258200997725513e-01*X[27+NA*12]) );
G[1] += qq * ( tcrd[1]*X[27+NA*21] + (8.606629658238704e-01*X[21+NA*16])+(3.849001794597505e-01*X[21+NA*19])+(9.258200997725513e-01*X[27+NA*13]) );
G[2] += qq * ( tcrd[2]*X[27+NA*21] + (1.088662107903635e+00*X[21+NA*18])+(-7.559289460184544e-01*X[27+NA*14]) );
if ( LB > 4 ) { qq = qa[28]*qb[21] - qa[21]*qb[28]; } else { qq = qa[28]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[28+NA*21] + (7.200822998230956e-01*X[21+NA*17])+(-2.721655269759087e-01*X[21+NA*21])+(-9.258200997725513e-01*X[28+NA*12]) );
G[1] += qq * ( tcrd[1]*X[28+NA*21] + (-7.200822998230956e-01*X[21+NA*18])+(-2.721655269759087e-01*X[22+NA*21])+(9.258200997725513e-01*X[28+NA*13]) );
G[2] += qq * ( tcrd[2]*X[28+NA*21] + (1.018350154434631e+00*X[21+NA*19])+(-7.559289460184544e-01*X[28+NA*14]) );
if ( LB > 4 ) { qq = qa[29]*qb[21] - qa[21]*qb[29]; } else { qq = qa[29]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[29+NA*21] + (7.200822998230956e-01*X[21+NA*18])+(-2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[29+NA*12]) );
G[1] += qq * ( tcrd[1]*X[29+NA*21] + (7.200822998230956e-01*X[21+NA*17])+(2.721655269759087e-01*X[21+NA*21])+(9.258200997725513e-01*X[29+NA*13]) );
G[2] += qq * ( tcrd[2]*X[29+NA*21] + (1.018350154434631e+00*X[21+NA*20])+(-7.559289460184544e-01*X[29+NA*14]) );
if ( LB > 4 ) { qq = qa[30]*qb[21] - qa[21]*qb[30]; } else { qq = qa[30]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[30+NA*21] + (8.314794192830980e-01*X[21+NA*19])+(-1.571348402636772e-01*X[23+NA*21])+(-9.258200997725513e-01*X[30+NA*12]) );
G[1] += qq * ( tcrd[1]*X[30+NA*21] + (-8.314794192830980e-01*X[21+NA*20])+(-1.571348402636772e-01*X[24+NA*21])+(9.258200997725513e-01*X[30+NA*13]) );
G[2] += qq * ( tcrd[2]*X[30+NA*21] + (8.888888888888888e-01*X[21+NA*21])+(-7.559289460184544e-01*X[30+NA*14]) );
if ( LB > 4 ) { qq = qa[31]*qb[21] - qa[21]*qb[31]; } else { qq = qa[31]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[31+NA*21] + (8.314794192830980e-01*X[21+NA*20])+(-1.571348402636772e-01*X[24+NA*21])+(-9.258200997725513e-01*X[31+NA*12]) );
G[1] += qq * ( tcrd[1]*X[31+NA*21] + (8.314794192830980e-01*X[21+NA*19])+(1.571348402636772e-01*X[23+NA*21])+(9.258200997725513e-01*X[31+NA*13]) );
G[2] += qq * ( tcrd[2]*X[31+NA*21] + (8.888888888888888e-01*X[22+NA*21])+(-7.559289460184544e-01*X[31+NA*14]) );
if ( LB > 4 ) { qq = qa[32]*qb[21] - qa[21]*qb[32]; } else { qq = qa[32]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[32+NA*21] + (9.428090415820635e-01*X[21+NA*21])+(-9.258200997725513e-01*X[32+NA*12]) );
G[1] += qq * ( tcrd[1]*X[32+NA*21] + (-9.428090415820635e-01*X[22+NA*21])+(9.258200997725513e-01*X[32+NA*13]) );
G[2] += qq * ( tcrd[2]*X[32+NA*21] + (6.666666666666667e-01*X[23+NA*21])+(-7.559289460184544e-01*X[32+NA*14]) );
if ( LB > 4 ) { qq = qa[33]*qb[21] - qa[21]*qb[33]; } else { qq = qa[33]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[33+NA*21] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[33+NA*12]) );
G[1] += qq * ( tcrd[1]*X[33+NA*21] + (9.428090415820635e-01*X[21+NA*21])+(9.258200997725513e-01*X[33+NA*13]) );
G[2] += qq * ( tcrd[2]*X[33+NA*21] + (6.666666666666667e-01*X[24+NA*21])+(-7.559289460184544e-01*X[33+NA*14]) );
if ( LB > 4 ) { qq = qa[34]*qb[21] - qa[21]*qb[34]; } else { qq = qa[34]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[34+NA*21] + (1.054092553389460e+00*X[23+NA*21])+(-9.258200997725513e-01*X[34+NA*12]) );
G[1] += qq * ( tcrd[1]*X[34+NA*21] + (-1.054092553389460e+00*X[24+NA*21])+(9.258200997725513e-01*X[34+NA*13]) );
G[2] += qq * ( tcrd[2]*X[34+NA*21] + (-7.559289460184544e-01*X[34+NA*14]) );
if ( LB > 4 ) { qq = qa[35]*qb[21] - qa[21]*qb[35]; } else { qq = qa[35]*qb[21]; };
G[0] += qq * ( tcrd[0]*X[35+NA*21] + (1.054092553389460e+00*X[24+NA*21])+(-9.258200997725513e-01*X[35+NA*12]) );
G[1] += qq * ( tcrd[1]*X[35+NA*21] + (1.054092553389460e+00*X[23+NA*21])+(9.258200997725513e-01*X[35+NA*13]) );
G[2] += qq * ( tcrd[2]*X[35+NA*21] + (-7.559289460184544e-01*X[35+NA*14]) );
if ( LB > 4 ) { qq = qa[25]*qb[22] - qa[22]*qb[25]; } else { qq = qa[25]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[25+NA*22] + (-7.027283689263065e-01*X[22+NA*17])+(-9.258200997725513e-01*X[25+NA*13]) );
G[1] += qq * ( tcrd[1]*X[25+NA*22] + (-7.027283689263065e-01*X[22+NA*18])+(-9.258200997725513e-01*X[25+NA*12]) );
G[2] += qq * ( tcrd[2]*X[25+NA*22] + (1.111111111111111e+00*X[22+NA*16])+(-7.559289460184544e-01*X[25+NA*15]) );
if ( LB > 4 ) { qq = qa[26]*qb[22] - qa[22]*qb[26]; } else { qq = qa[26]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[26+NA*22] + (8.606629658238704e-01*X[22+NA*16])+(-3.849001794597505e-01*X[22+NA*19])+(-9.258200997725513e-01*X[26+NA*13]) );
G[1] += qq * ( tcrd[1]*X[26+NA*22] + (-3.849001794597505e-01*X[22+NA*20])+(-9.258200997725513e-01*X[26+NA*12]) );
G[2] += qq * ( tcrd[2]*X[26+NA*22] + (1.088662107903635e+00*X[22+NA*17])+(-7.559289460184544e-01*X[26+NA*15]) );
if ( LB > 4 ) { qq = qa[27]*qb[22] - qa[22]*qb[27]; } else { qq = qa[27]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[27+NA*22] + (-3.849001794597505e-01*X[22+NA*20])+(-9.258200997725513e-01*X[27+NA*13]) );
G[1] += qq * ( tcrd[1]*X[27+NA*22] + (8.606629658238704e-01*X[22+NA*16])+(3.849001794597505e-01*X[22+NA*19])+(-9.258200997725513e-01*X[27+NA*12]) );
G[2] += qq * ( tcrd[2]*X[27+NA*22] + (1.088662107903635e+00*X[22+NA*18])+(-7.559289460184544e-01*X[27+NA*15]) );
if ( LB > 4 ) { qq = qa[28]*qb[22] - qa[22]*qb[28]; } else { qq = qa[28]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[28+NA*22] + (7.200822998230956e-01*X[22+NA*17])+(-2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[28+NA*13]) );
G[1] += qq * ( tcrd[1]*X[28+NA*22] + (-7.200822998230956e-01*X[22+NA*18])+(-2.721655269759087e-01*X[22+NA*22])+(-9.258200997725513e-01*X[28+NA*12]) );
G[2] += qq * ( tcrd[2]*X[28+NA*22] + (1.018350154434631e+00*X[22+NA*19])+(-7.559289460184544e-01*X[28+NA*15]) );
if ( LB > 4 ) { qq = qa[29]*qb[22] - qa[22]*qb[29]; } else { qq = qa[29]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[29+NA*22] + (7.200822998230956e-01*X[22+NA*18])+(-2.721655269759087e-01*X[22+NA*22])+(-9.258200997725513e-01*X[29+NA*13]) );
G[1] += qq * ( tcrd[1]*X[29+NA*22] + (7.200822998230956e-01*X[22+NA*17])+(2.721655269759087e-01*X[22+NA*21])+(-9.258200997725513e-01*X[29+NA*12]) );
G[2] += qq * ( tcrd[2]*X[29+NA*22] + (1.018350154434631e+00*X[22+NA*20])+(-7.559289460184544e-01*X[29+NA*15]) );
if ( LB > 4 ) { qq = qa[30]*qb[22] - qa[22]*qb[30]; } else { qq = qa[30]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[30+NA*22] + (8.314794192830980e-01*X[22+NA*19])+(-1.571348402636772e-01*X[23+NA*22])+(-9.258200997725513e-01*X[30+NA*13]) );
G[1] += qq * ( tcrd[1]*X[30+NA*22] + (-8.314794192830980e-01*X[22+NA*20])+(-1.571348402636772e-01*X[24+NA*22])+(-9.258200997725513e-01*X[30+NA*12]) );
G[2] += qq * ( tcrd[2]*X[30+NA*22] + (8.888888888888888e-01*X[22+NA*21])+(-7.559289460184544e-01*X[30+NA*15]) );
if ( LB > 4 ) { qq = qa[31]*qb[22] - qa[22]*qb[31]; } else { qq = qa[31]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[31+NA*22] + (8.314794192830980e-01*X[22+NA*20])+(-1.571348402636772e-01*X[24+NA*22])+(-9.258200997725513e-01*X[31+NA*13]) );
G[1] += qq * ( tcrd[1]*X[31+NA*22] + (8.314794192830980e-01*X[22+NA*19])+(1.571348402636772e-01*X[23+NA*22])+(-9.258200997725513e-01*X[31+NA*12]) );
G[2] += qq * ( tcrd[2]*X[31+NA*22] + (8.888888888888888e-01*X[22+NA*22])+(-7.559289460184544e-01*X[31+NA*15]) );
if ( LB > 4 ) { qq = qa[32]*qb[22] - qa[22]*qb[32]; } else { qq = qa[32]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[32+NA*22] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[32+NA*13]) );
G[1] += qq * ( tcrd[1]*X[32+NA*22] + (-9.428090415820635e-01*X[22+NA*22])+(-9.258200997725513e-01*X[32+NA*12]) );
G[2] += qq * ( tcrd[2]*X[32+NA*22] + (6.666666666666667e-01*X[23+NA*22])+(-7.559289460184544e-01*X[32+NA*15]) );
if ( LB > 4 ) { qq = qa[33]*qb[22] - qa[22]*qb[33]; } else { qq = qa[33]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[33+NA*22] + (9.428090415820635e-01*X[22+NA*22])+(-9.258200997725513e-01*X[33+NA*13]) );
G[1] += qq * ( tcrd[1]*X[33+NA*22] + (9.428090415820635e-01*X[22+NA*21])+(-9.258200997725513e-01*X[33+NA*12]) );
G[2] += qq * ( tcrd[2]*X[33+NA*22] + (6.666666666666667e-01*X[24+NA*22])+(-7.559289460184544e-01*X[33+NA*15]) );
if ( LB > 4 ) { qq = qa[34]*qb[22] - qa[22]*qb[34]; } else { qq = qa[34]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[34+NA*22] + (1.054092553389460e+00*X[23+NA*22])+(-9.258200997725513e-01*X[34+NA*13]) );
G[1] += qq * ( tcrd[1]*X[34+NA*22] + (-1.054092553389460e+00*X[24+NA*22])+(-9.258200997725513e-01*X[34+NA*12]) );
G[2] += qq * ( tcrd[2]*X[34+NA*22] + (-7.559289460184544e-01*X[34+NA*15]) );
if ( LB > 4 ) { qq = qa[35]*qb[22] - qa[22]*qb[35]; } else { qq = qa[35]*qb[22]; };
G[0] += qq * ( tcrd[0]*X[35+NA*22] + (1.054092553389460e+00*X[24+NA*22])+(-9.258200997725513e-01*X[35+NA*13]) );
G[1] += qq * ( tcrd[1]*X[35+NA*22] + (1.054092553389460e+00*X[23+NA*22])+(-9.258200997725513e-01*X[35+NA*12]) );
G[2] += qq * ( tcrd[2]*X[35+NA*22] + (-7.559289460184544e-01*X[35+NA*15]) );
if ( LB > 4 ) { qq = qa[25]*qb[23] - qa[23]*qb[25]; } else { qq = qa[25]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[25+NA*23] + (-7.027283689263065e-01*X[23+NA*17])+(-1.069044967649698e+00*X[25+NA*14]) );
G[1] += qq * ( tcrd[1]*X[25+NA*23] + (-7.027283689263065e-01*X[23+NA*18])+(1.069044967649698e+00*X[25+NA*15]) );
G[2] += qq * ( tcrd[2]*X[25+NA*23] + (1.111111111111111e+00*X[23+NA*16]) );
if ( LB > 4 ) { qq = qa[26]*qb[23] - qa[23]*qb[26]; } else { qq = qa[26]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[26+NA*23] + (8.606629658238704e-01*X[23+NA*16])+(-3.849001794597505e-01*X[23+NA*19])+(-1.069044967649698e+00*X[26+NA*14]) );
G[1] += qq * ( tcrd[1]*X[26+NA*23] + (-3.849001794597505e-01*X[23+NA*20])+(1.069044967649698e+00*X[26+NA*15]) );
G[2] += qq * ( tcrd[2]*X[26+NA*23] + (1.088662107903635e+00*X[23+NA*17]) );
if ( LB > 4 ) { qq = qa[27]*qb[23] - qa[23]*qb[27]; } else { qq = qa[27]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[27+NA*23] + (-3.849001794597505e-01*X[23+NA*20])+(-1.069044967649698e+00*X[27+NA*14]) );
G[1] += qq * ( tcrd[1]*X[27+NA*23] + (8.606629658238704e-01*X[23+NA*16])+(3.849001794597505e-01*X[23+NA*19])+(1.069044967649698e+00*X[27+NA*15]) );
G[2] += qq * ( tcrd[2]*X[27+NA*23] + (1.088662107903635e+00*X[23+NA*18]) );
if ( LB > 4 ) { qq = qa[28]*qb[23] - qa[23]*qb[28]; } else { qq = qa[28]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[28+NA*23] + (7.200822998230956e-01*X[23+NA*17])+(-2.721655269759087e-01*X[23+NA*21])+(-1.069044967649698e+00*X[28+NA*14]) );
G[1] += qq * ( tcrd[1]*X[28+NA*23] + (-7.200822998230956e-01*X[23+NA*18])+(-2.721655269759087e-01*X[23+NA*22])+(1.069044967649698e+00*X[28+NA*15]) );
G[2] += qq * ( tcrd[2]*X[28+NA*23] + (1.018350154434631e+00*X[23+NA*19]) );
if ( LB > 4 ) { qq = qa[29]*qb[23] - qa[23]*qb[29]; } else { qq = qa[29]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[29+NA*23] + (7.200822998230956e-01*X[23+NA*18])+(-2.721655269759087e-01*X[23+NA*22])+(-1.069044967649698e+00*X[29+NA*14]) );
G[1] += qq * ( tcrd[1]*X[29+NA*23] + (7.200822998230956e-01*X[23+NA*17])+(2.721655269759087e-01*X[23+NA*21])+(1.069044967649698e+00*X[29+NA*15]) );
G[2] += qq * ( tcrd[2]*X[29+NA*23] + (1.018350154434631e+00*X[23+NA*20]) );
if ( LB > 4 ) { qq = qa[30]*qb[23] - qa[23]*qb[30]; } else { qq = qa[30]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[30+NA*23] + (8.314794192830980e-01*X[23+NA*19])+(-1.571348402636772e-01*X[23+NA*23])+(-1.069044967649698e+00*X[30+NA*14]) );
G[1] += qq * ( tcrd[1]*X[30+NA*23] + (-8.314794192830980e-01*X[23+NA*20])+(-1.571348402636772e-01*X[24+NA*23])+(1.069044967649698e+00*X[30+NA*15]) );
G[2] += qq * ( tcrd[2]*X[30+NA*23] + (8.888888888888888e-01*X[23+NA*21]) );
if ( LB > 4 ) { qq = qa[31]*qb[23] - qa[23]*qb[31]; } else { qq = qa[31]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[31+NA*23] + (8.314794192830980e-01*X[23+NA*20])+(-1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[31+NA*14]) );
G[1] += qq * ( tcrd[1]*X[31+NA*23] + (8.314794192830980e-01*X[23+NA*19])+(1.571348402636772e-01*X[23+NA*23])+(1.069044967649698e+00*X[31+NA*15]) );
G[2] += qq * ( tcrd[2]*X[31+NA*23] + (8.888888888888888e-01*X[23+NA*22]) );
if ( LB > 4 ) { qq = qa[32]*qb[23] - qa[23]*qb[32]; } else { qq = qa[32]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[32+NA*23] + (9.428090415820635e-01*X[23+NA*21])+(-1.069044967649698e+00*X[32+NA*14]) );
G[1] += qq * ( tcrd[1]*X[32+NA*23] + (-9.428090415820635e-01*X[23+NA*22])+(1.069044967649698e+00*X[32+NA*15]) );
G[2] += qq * ( tcrd[2]*X[32+NA*23] + (6.666666666666667e-01*X[23+NA*23]) );
if ( LB > 4 ) { qq = qa[33]*qb[23] - qa[23]*qb[33]; } else { qq = qa[33]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[33+NA*23] + (9.428090415820635e-01*X[23+NA*22])+(-1.069044967649698e+00*X[33+NA*14]) );
G[1] += qq * ( tcrd[1]*X[33+NA*23] + (9.428090415820635e-01*X[23+NA*21])+(1.069044967649698e+00*X[33+NA*15]) );
G[2] += qq * ( tcrd[2]*X[33+NA*23] + (6.666666666666667e-01*X[24+NA*23]) );
if ( LB > 4 ) { qq = qa[34]*qb[23] - qa[23]*qb[34]; } else { qq = qa[34]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[34+NA*23] + (1.054092553389460e+00*X[23+NA*23])+(-1.069044967649698e+00*X[34+NA*14]) );
G[1] += qq * ( tcrd[1]*X[34+NA*23] + (-1.054092553389460e+00*X[24+NA*23])+(1.069044967649698e+00*X[34+NA*15]) );
G[2] += qq * ( tcrd[2]*X[34+NA*23] );
if ( LB > 4 ) { qq = qa[35]*qb[23] - qa[23]*qb[35]; } else { qq = qa[35]*qb[23]; };
G[0] += qq * ( tcrd[0]*X[35+NA*23] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[35+NA*14]) );
G[1] += qq * ( tcrd[1]*X[35+NA*23] + (1.054092553389460e+00*X[23+NA*23])+(1.069044967649698e+00*X[35+NA*15]) );
G[2] += qq * ( tcrd[2]*X[35+NA*23] );
if ( LB > 4 ) { qq = qa[25]*qb[24] - qa[24]*qb[25]; } else { qq = qa[25]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[25+NA*24] + (-7.027283689263065e-01*X[24+NA*17])+(-1.069044967649698e+00*X[25+NA*15]) );
G[1] += qq * ( tcrd[1]*X[25+NA*24] + (-7.027283689263065e-01*X[24+NA*18])+(-1.069044967649698e+00*X[25+NA*14]) );
G[2] += qq * ( tcrd[2]*X[25+NA*24] + (1.111111111111111e+00*X[24+NA*16]) );
if ( LB > 4 ) { qq = qa[26]*qb[24] - qa[24]*qb[26]; } else { qq = qa[26]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[26+NA*24] + (8.606629658238704e-01*X[24+NA*16])+(-3.849001794597505e-01*X[24+NA*19])+(-1.069044967649698e+00*X[26+NA*15]) );
G[1] += qq * ( tcrd[1]*X[26+NA*24] + (-3.849001794597505e-01*X[24+NA*20])+(-1.069044967649698e+00*X[26+NA*14]) );
G[2] += qq * ( tcrd[2]*X[26+NA*24] + (1.088662107903635e+00*X[24+NA*17]) );
if ( LB > 4 ) { qq = qa[27]*qb[24] - qa[24]*qb[27]; } else { qq = qa[27]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[27+NA*24] + (-3.849001794597505e-01*X[24+NA*20])+(-1.069044967649698e+00*X[27+NA*15]) );
G[1] += qq * ( tcrd[1]*X[27+NA*24] + (8.606629658238704e-01*X[24+NA*16])+(3.849001794597505e-01*X[24+NA*19])+(-1.069044967649698e+00*X[27+NA*14]) );
G[2] += qq * ( tcrd[2]*X[27+NA*24] + (1.088662107903635e+00*X[24+NA*18]) );
if ( LB > 4 ) { qq = qa[28]*qb[24] - qa[24]*qb[28]; } else { qq = qa[28]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[28+NA*24] + (7.200822998230956e-01*X[24+NA*17])+(-2.721655269759087e-01*X[24+NA*21])+(-1.069044967649698e+00*X[28+NA*15]) );
G[1] += qq * ( tcrd[1]*X[28+NA*24] + (-7.200822998230956e-01*X[24+NA*18])+(-2.721655269759087e-01*X[24+NA*22])+(-1.069044967649698e+00*X[28+NA*14]) );
G[2] += qq * ( tcrd[2]*X[28+NA*24] + (1.018350154434631e+00*X[24+NA*19]) );
if ( LB > 4 ) { qq = qa[29]*qb[24] - qa[24]*qb[29]; } else { qq = qa[29]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[29+NA*24] + (7.200822998230956e-01*X[24+NA*18])+(-2.721655269759087e-01*X[24+NA*22])+(-1.069044967649698e+00*X[29+NA*15]) );
G[1] += qq * ( tcrd[1]*X[29+NA*24] + (7.200822998230956e-01*X[24+NA*17])+(2.721655269759087e-01*X[24+NA*21])+(-1.069044967649698e+00*X[29+NA*14]) );
G[2] += qq * ( tcrd[2]*X[29+NA*24] + (1.018350154434631e+00*X[24+NA*20]) );
if ( LB > 4 ) { qq = qa[30]*qb[24] - qa[24]*qb[30]; } else { qq = qa[30]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[30+NA*24] + (8.314794192830980e-01*X[24+NA*19])+(-1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[30+NA*15]) );
G[1] += qq * ( tcrd[1]*X[30+NA*24] + (-8.314794192830980e-01*X[24+NA*20])+(-1.571348402636772e-01*X[24+NA*24])+(-1.069044967649698e+00*X[30+NA*14]) );
G[2] += qq * ( tcrd[2]*X[30+NA*24] + (8.888888888888888e-01*X[24+NA*21]) );
if ( LB > 4 ) { qq = qa[31]*qb[24] - qa[24]*qb[31]; } else { qq = qa[31]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[31+NA*24] + (8.314794192830980e-01*X[24+NA*20])+(-1.571348402636772e-01*X[24+NA*24])+(-1.069044967649698e+00*X[31+NA*15]) );
G[1] += qq * ( tcrd[1]*X[31+NA*24] + (8.314794192830980e-01*X[24+NA*19])+(1.571348402636772e-01*X[24+NA*23])+(-1.069044967649698e+00*X[31+NA*14]) );
G[2] += qq * ( tcrd[2]*X[31+NA*24] + (8.888888888888888e-01*X[24+NA*22]) );
if ( LB > 4 ) { qq = qa[32]*qb[24] - qa[24]*qb[32]; } else { qq = qa[32]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[32+NA*24] + (9.428090415820635e-01*X[24+NA*21])+(-1.069044967649698e+00*X[32+NA*15]) );
G[1] += qq * ( tcrd[1]*X[32+NA*24] + (-9.428090415820635e-01*X[24+NA*22])+(-1.069044967649698e+00*X[32+NA*14]) );
G[2] += qq * ( tcrd[2]*X[32+NA*24] + (6.666666666666667e-01*X[24+NA*23]) );
if ( LB > 4 ) { qq = qa[33]*qb[24] - qa[24]*qb[33]; } else { qq = qa[33]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[33+NA*24] + (9.428090415820635e-01*X[24+NA*22])+(-1.069044967649698e+00*X[33+NA*15]) );
G[1] += qq * ( tcrd[1]*X[33+NA*24] + (9.428090415820635e-01*X[24+NA*21])+(-1.069044967649698e+00*X[33+NA*14]) );
G[2] += qq * ( tcrd[2]*X[33+NA*24] + (6.666666666666667e-01*X[24+NA*24]) );
if ( LB > 4 ) { qq = qa[34]*qb[24] - qa[24]*qb[34]; } else { qq = qa[34]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[34+NA*24] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[34+NA*15]) );
G[1] += qq * ( tcrd[1]*X[34+NA*24] + (-1.054092553389460e+00*X[24+NA*24])+(-1.069044967649698e+00*X[34+NA*14]) );
G[2] += qq * ( tcrd[2]*X[34+NA*24] );
if ( LB > 4 ) { qq = qa[35]*qb[24] - qa[24]*qb[35]; } else { qq = qa[35]*qb[24]; };
G[0] += qq * ( tcrd[0]*X[35+NA*24] + (1.054092553389460e+00*X[24+NA*24])+(-1.069044967649698e+00*X[35+NA*15]) );
G[1] += qq * ( tcrd[1]*X[35+NA*24] + (1.054092553389460e+00*X[24+NA*23])+(-1.069044967649698e+00*X[35+NA*14]) );
G[2] += qq * ( tcrd[2]*X[35+NA*24] );
}

template <int NA,int LB>
void ExpHobGrdAcc_HH( double const *__restrict__ tcrd, double const *__restrict__ qa, double const *__restrict__ qb, double const *__restrict__ X, double *__restrict__ G )
{
double qq;
qq = qa[25]*qb[25];
G[0] += qq * ( tcrd[0]*X[25+NA*25] + (1.405456737852613e+00*X[25+NA*17]) );
G[1] += qq * ( tcrd[1]*X[25+NA*25] + (1.405456737852613e+00*X[25+NA*18]) );
G[2] += qq * ( tcrd[2]*X[25+NA*25] + (-2.222222222222222e+00*X[25+NA*16]) );
qq = qa[26]*qb[25] + qa[25]*qb[26];
G[0] += qq * ( tcrd[0]*X[26+NA*25] + (-8.606629658238704e-01*X[25+NA*16])+(3.849001794597505e-01*X[25+NA*19])+(7.027283689263065e-01*X[26+NA*17]) );
G[1] += qq * ( tcrd[1]*X[26+NA*25] + (3.849001794597505e-01*X[25+NA*20])+(7.027283689263065e-01*X[26+NA*18]) );
G[2] += qq * ( tcrd[2]*X[26+NA*25] + (-1.088662107903635e+00*X[25+NA*17])+(-1.111111111111111e+00*X[26+NA*16]) );
qq = qa[27]*qb[25] + qa[25]*qb[27];
G[0] += qq * ( tcrd[0]*X[27+NA*25] + (3.849001794597505e-01*X[25+NA*20])+(7.027283689263065e-01*X[27+NA*17]) );
G[1] += qq * ( tcrd[1]*X[27+NA*25] + (-8.606629658238704e-01*X[25+NA*16])+(-3.849001794597505e-01*X[25+NA*19])+(7.027283689263065e-01*X[27+NA*18]) );
G[2] += qq * ( tcrd[2]*X[27+NA*25] + (-1.088662107903635e+00*X[25+NA*18])+(-1.111111111111111e+00*X[27+NA*16]) );
qq = qa[28]*qb[25] + qa[25]*qb[28];
G[0] += qq * ( tcrd[0]*X[28+NA*25] + (-7.200822998230956e-01*X[25+NA*17])+(2.721655269759087e-01*X[25+NA*21])+(7.027283689263065e-01*X[28+NA*17]) );
G[1] += qq * ( tcrd[1]*X[28+NA*25] + (7.200822998230956e-01*X[25+NA*18])+(2.721655269759087e-01*X[25+NA*22])+(7.027283689263065e-01*X[28+NA*18]) );
G[2] += qq * ( tcrd[2]*X[28+NA*25] + (-1.018350154434631e+00*X[25+NA*19])+(-1.111111111111111e+00*X[28+NA*16]) );
qq = qa[29]*qb[25] + qa[25]*qb[29];
G[0] += qq * ( tcrd[0]*X[29+NA*25] + (-7.200822998230956e-01*X[25+NA*18])+(2.721655269759087e-01*X[25+NA*22])+(7.027283689263065e-01*X[29+NA*17]) );
G[1] += qq * ( tcrd[1]*X[29+NA*25] + (-7.200822998230956e-01*X[25+NA*17])+(-2.721655269759087e-01*X[25+NA*21])+(7.027283689263065e-01*X[29+NA*18]) );
G[2] += qq * ( tcrd[2]*X[29+NA*25] + (-1.018350154434631e+00*X[25+NA*20])+(-1.111111111111111e+00*X[29+NA*16]) );
qq = qa[30]*qb[25] + qa[25]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*25] + (-8.314794192830980e-01*X[25+NA*19])+(1.571348402636772e-01*X[25+NA*23])+(7.027283689263065e-01*X[30+NA*17]) );
G[1] += qq * ( tcrd[1]*X[30+NA*25] + (8.314794192830980e-01*X[25+NA*20])+(1.571348402636772e-01*X[25+NA*24])+(7.027283689263065e-01*X[30+NA*18]) );
G[2] += qq * ( tcrd[2]*X[30+NA*25] + (-8.888888888888888e-01*X[25+NA*21])+(-1.111111111111111e+00*X[30+NA*16]) );
qq = qa[31]*qb[25] + qa[25]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*25] + (-8.314794192830980e-01*X[25+NA*20])+(1.571348402636772e-01*X[25+NA*24])+(7.027283689263065e-01*X[31+NA*17]) );
G[1] += qq * ( tcrd[1]*X[31+NA*25] + (-8.314794192830980e-01*X[25+NA*19])+(-1.571348402636772e-01*X[25+NA*23])+(7.027283689263065e-01*X[31+NA*18]) );
G[2] += qq * ( tcrd[2]*X[31+NA*25] + (-8.888888888888888e-01*X[25+NA*22])+(-1.111111111111111e+00*X[31+NA*16]) );
qq = qa[32]*qb[25] + qa[25]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*25] + (-9.428090415820635e-01*X[25+NA*21])+(7.027283689263065e-01*X[32+NA*17]) );
G[1] += qq * ( tcrd[1]*X[32+NA*25] + (9.428090415820635e-01*X[25+NA*22])+(7.027283689263065e-01*X[32+NA*18]) );
G[2] += qq * ( tcrd[2]*X[32+NA*25] + (-6.666666666666667e-01*X[25+NA*23])+(-1.111111111111111e+00*X[32+NA*16]) );
qq = qa[33]*qb[25] + qa[25]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*25] + (-9.428090415820635e-01*X[25+NA*22])+(7.027283689263065e-01*X[33+NA*17]) );
G[1] += qq * ( tcrd[1]*X[33+NA*25] + (-9.428090415820635e-01*X[25+NA*21])+(7.027283689263065e-01*X[33+NA*18]) );
G[2] += qq * ( tcrd[2]*X[33+NA*25] + (-6.666666666666667e-01*X[25+NA*24])+(-1.111111111111111e+00*X[33+NA*16]) );
qq = qa[34]*qb[25] + qa[25]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*25] + (-1.054092553389460e+00*X[25+NA*23])+(7.027283689263065e-01*X[34+NA*17]) );
G[1] += qq * ( tcrd[1]*X[34+NA*25] + (1.054092553389460e+00*X[25+NA*24])+(7.027283689263065e-01*X[34+NA*18]) );
G[2] += qq * ( tcrd[2]*X[34+NA*25] + (-1.111111111111111e+00*X[34+NA*16]) );
qq = qa[35]*qb[25] + qa[25]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*25] + (-1.054092553389460e+00*X[25+NA*24])+(7.027283689263065e-01*X[35+NA*17]) );
G[1] += qq * ( tcrd[1]*X[35+NA*25] + (-1.054092553389460e+00*X[25+NA*23])+(7.027283689263065e-01*X[35+NA*18]) );
G[2] += qq * ( tcrd[2]*X[35+NA*25] + (-1.111111111111111e+00*X[35+NA*16]) );
qq = qa[26]*qb[26];
G[0] += qq * ( tcrd[0]*X[26+NA*26] + (-1.721325931647741e+00*X[26+NA*16])+(7.698003589195009e-01*X[26+NA*19]) );
G[1] += qq * ( tcrd[1]*X[26+NA*26] + (7.698003589195009e-01*X[26+NA*20]) );
G[2] += qq * ( tcrd[2]*X[26+NA*26] + (-2.177324215807269e+00*X[26+NA*17]) );
qq = qa[27]*qb[26] + qa[26]*qb[27];
G[0] += qq * ( tcrd[0]*X[27+NA*26] + (3.849001794597505e-01*X[26+NA*20])+(-8.606629658238704e-01*X[27+NA*16])+(3.849001794597505e-01*X[27+NA*19]) );
G[1] += qq * ( tcrd[1]*X[27+NA*26] + (-8.606629658238704e-01*X[26+NA*16])+(-3.849001794597505e-01*X[26+NA*19])+(3.849001794597505e-01*X[27+NA*20]) );
G[2] += qq * ( tcrd[2]*X[27+NA*26] + (-1.088662107903635e+00*X[26+NA*18])+(-1.088662107903635e+00*X[27+NA*17]) );
qq = qa[28]*qb[26] + qa[26]*qb[28];
G[0] += qq * ( tcrd[0]*X[28+NA*26] + (-7.200822998230956e-01*X[26+NA*17])+(2.721655269759087e-01*X[26+NA*21])+(-8.606629658238704e-01*X[28+NA*16])+(3.849001794597505e-01*X[28+NA*19]) );
G[1] += qq * ( tcrd[1]*X[28+NA*26] + (7.200822998230956e-01*X[26+NA*18])+(2.721655269759087e-01*X[26+NA*22])+(3.849001794597505e-01*X[28+NA*20]) );
G[2] += qq * ( tcrd[2]*X[28+NA*26] + (-1.018350154434631e+00*X[26+NA*19])+(-1.088662107903635e+00*X[28+NA*17]) );
qq = qa[29]*qb[26] + qa[26]*qb[29];
G[0] += qq * ( tcrd[0]*X[29+NA*26] + (-7.200822998230956e-01*X[26+NA*18])+(2.721655269759087e-01*X[26+NA*22])+(-8.606629658238704e-01*X[29+NA*16])+(3.849001794597505e-01*X[29+NA*19]) );
G[1] += qq * ( tcrd[1]*X[29+NA*26] + (-7.200822998230956e-01*X[26+NA*17])+(-2.721655269759087e-01*X[26+NA*21])+(3.849001794597505e-01*X[29+NA*20]) );
G[2] += qq * ( tcrd[2]*X[29+NA*26] + (-1.018350154434631e+00*X[26+NA*20])+(-1.088662107903635e+00*X[29+NA*17]) );
qq = qa[30]*qb[26] + qa[26]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*26] + (-8.314794192830980e-01*X[26+NA*19])+(1.571348402636772e-01*X[26+NA*23])+(-8.606629658238704e-01*X[30+NA*16])+(3.849001794597505e-01*X[30+NA*19]) );
G[1] += qq * ( tcrd[1]*X[30+NA*26] + (8.314794192830980e-01*X[26+NA*20])+(1.571348402636772e-01*X[26+NA*24])+(3.849001794597505e-01*X[30+NA*20]) );
G[2] += qq * ( tcrd[2]*X[30+NA*26] + (-8.888888888888888e-01*X[26+NA*21])+(-1.088662107903635e+00*X[30+NA*17]) );
qq = qa[31]*qb[26] + qa[26]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*26] + (-8.314794192830980e-01*X[26+NA*20])+(1.571348402636772e-01*X[26+NA*24])+(-8.606629658238704e-01*X[31+NA*16])+(3.849001794597505e-01*X[31+NA*19]) );
G[1] += qq * ( tcrd[1]*X[31+NA*26] + (-8.314794192830980e-01*X[26+NA*19])+(-1.571348402636772e-01*X[26+NA*23])+(3.849001794597505e-01*X[31+NA*20]) );
G[2] += qq * ( tcrd[2]*X[31+NA*26] + (-8.888888888888888e-01*X[26+NA*22])+(-1.088662107903635e+00*X[31+NA*17]) );
qq = qa[32]*qb[26] + qa[26]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*26] + (-9.428090415820635e-01*X[26+NA*21])+(-8.606629658238704e-01*X[32+NA*16])+(3.849001794597505e-01*X[32+NA*19]) );
G[1] += qq * ( tcrd[1]*X[32+NA*26] + (9.428090415820635e-01*X[26+NA*22])+(3.849001794597505e-01*X[32+NA*20]) );
G[2] += qq * ( tcrd[2]*X[32+NA*26] + (-6.666666666666667e-01*X[26+NA*23])+(-1.088662107903635e+00*X[32+NA*17]) );
qq = qa[33]*qb[26] + qa[26]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*26] + (-9.428090415820635e-01*X[26+NA*22])+(-8.606629658238704e-01*X[33+NA*16])+(3.849001794597505e-01*X[33+NA*19]) );
G[1] += qq * ( tcrd[1]*X[33+NA*26] + (-9.428090415820635e-01*X[26+NA*21])+(3.849001794597505e-01*X[33+NA*20]) );
G[2] += qq * ( tcrd[2]*X[33+NA*26] + (-6.666666666666667e-01*X[26+NA*24])+(-1.088662107903635e+00*X[33+NA*17]) );
qq = qa[34]*qb[26] + qa[26]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*26] + (-1.054092553389460e+00*X[26+NA*23])+(-8.606629658238704e-01*X[34+NA*16])+(3.849001794597505e-01*X[34+NA*19]) );
G[1] += qq * ( tcrd[1]*X[34+NA*26] + (1.054092553389460e+00*X[26+NA*24])+(3.849001794597505e-01*X[34+NA*20]) );
G[2] += qq * ( tcrd[2]*X[34+NA*26] + (-1.088662107903635e+00*X[34+NA*17]) );
qq = qa[35]*qb[26] + qa[26]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*26] + (-1.054092553389460e+00*X[26+NA*24])+(-8.606629658238704e-01*X[35+NA*16])+(3.849001794597505e-01*X[35+NA*19]) );
G[1] += qq * ( tcrd[1]*X[35+NA*26] + (-1.054092553389460e+00*X[26+NA*23])+(3.849001794597505e-01*X[35+NA*20]) );
G[2] += qq * ( tcrd[2]*X[35+NA*26] + (-1.088662107903635e+00*X[35+NA*17]) );
qq = qa[27]*qb[27];
G[0] += qq * ( tcrd[0]*X[27+NA*27] + (7.698003589195009e-01*X[27+NA*20]) );
G[1] += qq * ( tcrd[1]*X[27+NA*27] + (-1.721325931647741e+00*X[27+NA*16])+(-7.698003589195009e-01*X[27+NA*19]) );
G[2] += qq * ( tcrd[2]*X[27+NA*27] + (-2.177324215807269e+00*X[27+NA*18]) );
qq = qa[28]*qb[27] + qa[27]*qb[28];
G[0] += qq * ( tcrd[0]*X[28+NA*27] + (-7.200822998230956e-01*X[27+NA*17])+(2.721655269759087e-01*X[27+NA*21])+(3.849001794597505e-01*X[28+NA*20]) );
G[1] += qq * ( tcrd[1]*X[28+NA*27] + (7.200822998230956e-01*X[27+NA*18])+(2.721655269759087e-01*X[27+NA*22])+(-8.606629658238704e-01*X[28+NA*16])+(-3.849001794597505e-01*X[28+NA*19]) );
G[2] += qq * ( tcrd[2]*X[28+NA*27] + (-1.018350154434631e+00*X[27+NA*19])+(-1.088662107903635e+00*X[28+NA*18]) );
qq = qa[29]*qb[27] + qa[27]*qb[29];
G[0] += qq * ( tcrd[0]*X[29+NA*27] + (-7.200822998230956e-01*X[27+NA*18])+(2.721655269759087e-01*X[27+NA*22])+(3.849001794597505e-01*X[29+NA*20]) );
G[1] += qq * ( tcrd[1]*X[29+NA*27] + (-7.200822998230956e-01*X[27+NA*17])+(-2.721655269759087e-01*X[27+NA*21])+(-8.606629658238704e-01*X[29+NA*16])+(-3.849001794597505e-01*X[29+NA*19]) );
G[2] += qq * ( tcrd[2]*X[29+NA*27] + (-1.018350154434631e+00*X[27+NA*20])+(-1.088662107903635e+00*X[29+NA*18]) );
qq = qa[30]*qb[27] + qa[27]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*27] + (-8.314794192830980e-01*X[27+NA*19])+(1.571348402636772e-01*X[27+NA*23])+(3.849001794597505e-01*X[30+NA*20]) );
G[1] += qq * ( tcrd[1]*X[30+NA*27] + (8.314794192830980e-01*X[27+NA*20])+(1.571348402636772e-01*X[27+NA*24])+(-8.606629658238704e-01*X[30+NA*16])+(-3.849001794597505e-01*X[30+NA*19]) );
G[2] += qq * ( tcrd[2]*X[30+NA*27] + (-8.888888888888888e-01*X[27+NA*21])+(-1.088662107903635e+00*X[30+NA*18]) );
qq = qa[31]*qb[27] + qa[27]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*27] + (-8.314794192830980e-01*X[27+NA*20])+(1.571348402636772e-01*X[27+NA*24])+(3.849001794597505e-01*X[31+NA*20]) );
G[1] += qq * ( tcrd[1]*X[31+NA*27] + (-8.314794192830980e-01*X[27+NA*19])+(-1.571348402636772e-01*X[27+NA*23])+(-8.606629658238704e-01*X[31+NA*16])+(-3.849001794597505e-01*X[31+NA*19]) );
G[2] += qq * ( tcrd[2]*X[31+NA*27] + (-8.888888888888888e-01*X[27+NA*22])+(-1.088662107903635e+00*X[31+NA*18]) );
qq = qa[32]*qb[27] + qa[27]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*27] + (-9.428090415820635e-01*X[27+NA*21])+(3.849001794597505e-01*X[32+NA*20]) );
G[1] += qq * ( tcrd[1]*X[32+NA*27] + (9.428090415820635e-01*X[27+NA*22])+(-8.606629658238704e-01*X[32+NA*16])+(-3.849001794597505e-01*X[32+NA*19]) );
G[2] += qq * ( tcrd[2]*X[32+NA*27] + (-6.666666666666667e-01*X[27+NA*23])+(-1.088662107903635e+00*X[32+NA*18]) );
qq = qa[33]*qb[27] + qa[27]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*27] + (-9.428090415820635e-01*X[27+NA*22])+(3.849001794597505e-01*X[33+NA*20]) );
G[1] += qq * ( tcrd[1]*X[33+NA*27] + (-9.428090415820635e-01*X[27+NA*21])+(-8.606629658238704e-01*X[33+NA*16])+(-3.849001794597505e-01*X[33+NA*19]) );
G[2] += qq * ( tcrd[2]*X[33+NA*27] + (-6.666666666666667e-01*X[27+NA*24])+(-1.088662107903635e+00*X[33+NA*18]) );
qq = qa[34]*qb[27] + qa[27]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*27] + (-1.054092553389460e+00*X[27+NA*23])+(3.849001794597505e-01*X[34+NA*20]) );
G[1] += qq * ( tcrd[1]*X[34+NA*27] + (1.054092553389460e+00*X[27+NA*24])+(-8.606629658238704e-01*X[34+NA*16])+(-3.849001794597505e-01*X[34+NA*19]) );
G[2] += qq * ( tcrd[2]*X[34+NA*27] + (-1.088662107903635e+00*X[34+NA*18]) );
qq = qa[35]*qb[27] + qa[27]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*27] + (-1.054092553389460e+00*X[27+NA*24])+(3.849001794597505e-01*X[35+NA*20]) );
G[1] += qq * ( tcrd[1]*X[35+NA*27] + (-1.054092553389460e+00*X[27+NA*23])+(-8.606629658238704e-01*X[35+NA*16])+(-3.849001794597505e-01*X[35+NA*19]) );
G[2] += qq * ( tcrd[2]*X[35+NA*27] + (-1.088662107903635e+00*X[35+NA*18]) );
qq = qa[28]*qb[28];
G[0] += qq * ( tcrd[0]*X[28+NA*28] + (-1.440164599646191e+00*X[28+NA*17])+(5.443310539518174e-01*X[28+NA*21]) );
G[1] += qq * ( tcrd[1]*X[28+NA*28] + (1.440164599646191e+00*X[28+NA*18])+(5.443310539518174e-01*X[28+NA*22]) );
G[2] += qq * ( tcrd[2]*X[28+NA*28] + (-2.036700308869262e+00*X[28+NA*19]) );
qq = qa[29]*qb[28] + qa[28]*qb[29];
G[0] += qq * ( tcrd[0]*X[29+NA*28] + (-7.200822998230956e-01*X[28+NA*18])+(2.721655269759087e-01*X[28+NA*22])+(-7.200822998230956e-01*X[29+NA*17])+(2.721655269759087e-01*X[29+NA*21]) );
G[1] += qq * ( tcrd[1]*X[29+NA*28] + (-7.200822998230956e-01*X[28+NA*17])+(-2.721655269759087e-01*X[28+NA*21])+(7.200822998230956e-01*X[29+NA*18])+(2.721655269759087e-01*X[29+NA*22]) );
G[2] += qq * ( tcrd[2]*X[29+NA*28] + (-1.018350154434631e+00*X[28+NA*20])+(-1.018350154434631e+00*X[29+NA*19]) );
qq = qa[30]*qb[28] + qa[28]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*28] + (-8.314794192830980e-01*X[28+NA*19])+(1.571348402636772e-01*X[28+NA*23])+(-7.200822998230956e-01*X[30+NA*17])+(2.721655269759087e-01*X[30+NA*21]) );
G[1] += qq * ( tcrd[1]*X[30+NA*28] + (8.314794192830980e-01*X[28+NA*20])+(1.571348402636772e-01*X[28+NA*24])+(7.200822998230956e-01*X[30+NA*18])+(2.721655269759087e-01*X[30+NA*22]) );
G[2] += qq * ( tcrd[2]*X[30+NA*28] + (-8.888888888888888e-01*X[28+NA*21])+(-1.018350154434631e+00*X[30+NA*19]) );
qq = qa[31]*qb[28] + qa[28]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*28] + (-8.314794192830980e-01*X[28+NA*20])+(1.571348402636772e-01*X[28+NA*24])+(-7.200822998230956e-01*X[31+NA*17])+(2.721655269759087e-01*X[31+NA*21]) );
G[1] += qq * ( tcrd[1]*X[31+NA*28] + (-8.314794192830980e-01*X[28+NA*19])+(-1.571348402636772e-01*X[28+NA*23])+(7.200822998230956e-01*X[31+NA*18])+(2.721655269759087e-01*X[31+NA*22]) );
G[2] += qq * ( tcrd[2]*X[31+NA*28] + (-8.888888888888888e-01*X[28+NA*22])+(-1.018350154434631e+00*X[31+NA*19]) );
qq = qa[32]*qb[28] + qa[28]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*28] + (-9.428090415820635e-01*X[28+NA*21])+(-7.200822998230956e-01*X[32+NA*17])+(2.721655269759087e-01*X[32+NA*21]) );
G[1] += qq * ( tcrd[1]*X[32+NA*28] + (9.428090415820635e-01*X[28+NA*22])+(7.200822998230956e-01*X[32+NA*18])+(2.721655269759087e-01*X[32+NA*22]) );
G[2] += qq * ( tcrd[2]*X[32+NA*28] + (-6.666666666666667e-01*X[28+NA*23])+(-1.018350154434631e+00*X[32+NA*19]) );
qq = qa[33]*qb[28] + qa[28]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*28] + (-9.428090415820635e-01*X[28+NA*22])+(-7.200822998230956e-01*X[33+NA*17])+(2.721655269759087e-01*X[33+NA*21]) );
G[1] += qq * ( tcrd[1]*X[33+NA*28] + (-9.428090415820635e-01*X[28+NA*21])+(7.200822998230956e-01*X[33+NA*18])+(2.721655269759087e-01*X[33+NA*22]) );
G[2] += qq * ( tcrd[2]*X[33+NA*28] + (-6.666666666666667e-01*X[28+NA*24])+(-1.018350154434631e+00*X[33+NA*19]) );
qq = qa[34]*qb[28] + qa[28]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*28] + (-1.054092553389460e+00*X[28+NA*23])+(-7.200822998230956e-01*X[34+NA*17])+(2.721655269759087e-01*X[34+NA*21]) );
G[1] += qq * ( tcrd[1]*X[34+NA*28] + (1.054092553389460e+00*X[28+NA*24])+(7.200822998230956e-01*X[34+NA*18])+(2.721655269759087e-01*X[34+NA*22]) );
G[2] += qq * ( tcrd[2]*X[34+NA*28] + (-1.018350154434631e+00*X[34+NA*19]) );
qq = qa[35]*qb[28] + qa[28]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*28] + (-1.054092553389460e+00*X[28+NA*24])+(-7.200822998230956e-01*X[35+NA*17])+(2.721655269759087e-01*X[35+NA*21]) );
G[1] += qq * ( tcrd[1]*X[35+NA*28] + (-1.054092553389460e+00*X[28+NA*23])+(7.200822998230956e-01*X[35+NA*18])+(2.721655269759087e-01*X[35+NA*22]) );
G[2] += qq * ( tcrd[2]*X[35+NA*28] + (-1.018350154434631e+00*X[35+NA*19]) );
qq = qa[29]*qb[29];
G[0] += qq * ( tcrd[0]*X[29+NA*29] + (-1.440164599646191e+00*X[29+NA*18])+(5.443310539518174e-01*X[29+NA*22]) );
G[1] += qq * ( tcrd[1]*X[29+NA*29] + (-1.440164599646191e+00*X[29+NA*17])+(-5.443310539518174e-01*X[29+NA*21]) );
G[2] += qq * ( tcrd[2]*X[29+NA*29] + (-2.036700308869262e+00*X[29+NA*20]) );
qq = qa[30]*qb[29] + qa[29]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*29] + (-8.314794192830980e-01*X[29+NA*19])+(1.571348402636772e-01*X[29+NA*23])+(-7.200822998230956e-01*X[30+NA*18])+(2.721655269759087e-01*X[30+NA*22]) );
G[1] += qq * ( tcrd[1]*X[30+NA*29] + (8.314794192830980e-01*X[29+NA*20])+(1.571348402636772e-01*X[29+NA*24])+(-7.200822998230956e-01*X[30+NA*17])+(-2.721655269759087e-01*X[30+NA*21]) );
G[2] += qq * ( tcrd[2]*X[30+NA*29] + (-8.888888888888888e-01*X[29+NA*21])+(-1.018350154434631e+00*X[30+NA*20]) );
qq = qa[31]*qb[29] + qa[29]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*29] + (-8.314794192830980e-01*X[29+NA*20])+(1.571348402636772e-01*X[29+NA*24])+(-7.200822998230956e-01*X[31+NA*18])+(2.721655269759087e-01*X[31+NA*22]) );
G[1] += qq * ( tcrd[1]*X[31+NA*29] + (-8.314794192830980e-01*X[29+NA*19])+(-1.571348402636772e-01*X[29+NA*23])+(-7.200822998230956e-01*X[31+NA*17])+(-2.721655269759087e-01*X[31+NA*21]) );
G[2] += qq * ( tcrd[2]*X[31+NA*29] + (-8.888888888888888e-01*X[29+NA*22])+(-1.018350154434631e+00*X[31+NA*20]) );
qq = qa[32]*qb[29] + qa[29]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*29] + (-9.428090415820635e-01*X[29+NA*21])+(-7.200822998230956e-01*X[32+NA*18])+(2.721655269759087e-01*X[32+NA*22]) );
G[1] += qq * ( tcrd[1]*X[32+NA*29] + (9.428090415820635e-01*X[29+NA*22])+(-7.200822998230956e-01*X[32+NA*17])+(-2.721655269759087e-01*X[32+NA*21]) );
G[2] += qq * ( tcrd[2]*X[32+NA*29] + (-6.666666666666667e-01*X[29+NA*23])+(-1.018350154434631e+00*X[32+NA*20]) );
qq = qa[33]*qb[29] + qa[29]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*29] + (-9.428090415820635e-01*X[29+NA*22])+(-7.200822998230956e-01*X[33+NA*18])+(2.721655269759087e-01*X[33+NA*22]) );
G[1] += qq * ( tcrd[1]*X[33+NA*29] + (-9.428090415820635e-01*X[29+NA*21])+(-7.200822998230956e-01*X[33+NA*17])+(-2.721655269759087e-01*X[33+NA*21]) );
G[2] += qq * ( tcrd[2]*X[33+NA*29] + (-6.666666666666667e-01*X[29+NA*24])+(-1.018350154434631e+00*X[33+NA*20]) );
qq = qa[34]*qb[29] + qa[29]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*29] + (-1.054092553389460e+00*X[29+NA*23])+(-7.200822998230956e-01*X[34+NA*18])+(2.721655269759087e-01*X[34+NA*22]) );
G[1] += qq * ( tcrd[1]*X[34+NA*29] + (1.054092553389460e+00*X[29+NA*24])+(-7.200822998230956e-01*X[34+NA*17])+(-2.721655269759087e-01*X[34+NA*21]) );
G[2] += qq * ( tcrd[2]*X[34+NA*29] + (-1.018350154434631e+00*X[34+NA*20]) );
qq = qa[35]*qb[29] + qa[29]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*29] + (-1.054092553389460e+00*X[29+NA*24])+(-7.200822998230956e-01*X[35+NA*18])+(2.721655269759087e-01*X[35+NA*22]) );
G[1] += qq * ( tcrd[1]*X[35+NA*29] + (-1.054092553389460e+00*X[29+NA*23])+(-7.200822998230956e-01*X[35+NA*17])+(-2.721655269759087e-01*X[35+NA*21]) );
G[2] += qq * ( tcrd[2]*X[35+NA*29] + (-1.018350154434631e+00*X[35+NA*20]) );
qq = qa[30]*qb[30];
G[0] += qq * ( tcrd[0]*X[30+NA*30] + (-1.662958838566196e+00*X[30+NA*19])+(3.142696805273544e-01*X[30+NA*23]) );
G[1] += qq * ( tcrd[1]*X[30+NA*30] + (1.662958838566196e+00*X[30+NA*20])+(3.142696805273544e-01*X[30+NA*24]) );
G[2] += qq * ( tcrd[2]*X[30+NA*30] + (-1.777777777777778e+00*X[30+NA*21]) );
qq = qa[31]*qb[30] + qa[30]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*30] + (-8.314794192830980e-01*X[30+NA*20])+(1.571348402636772e-01*X[30+NA*24])+(-8.314794192830980e-01*X[31+NA*19])+(1.571348402636772e-01*X[31+NA*23]) );
G[1] += qq * ( tcrd[1]*X[31+NA*30] + (-8.314794192830980e-01*X[30+NA*19])+(-1.571348402636772e-01*X[30+NA*23])+(8.314794192830980e-01*X[31+NA*20])+(1.571348402636772e-01*X[31+NA*24]) );
G[2] += qq * ( tcrd[2]*X[31+NA*30] + (-8.888888888888888e-01*X[30+NA*22])+(-8.888888888888888e-01*X[31+NA*21]) );
qq = qa[32]*qb[30] + qa[30]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*30] + (-9.428090415820635e-01*X[30+NA*21])+(-8.314794192830980e-01*X[32+NA*19])+(1.571348402636772e-01*X[32+NA*23]) );
G[1] += qq * ( tcrd[1]*X[32+NA*30] + (9.428090415820635e-01*X[30+NA*22])+(8.314794192830980e-01*X[32+NA*20])+(1.571348402636772e-01*X[32+NA*24]) );
G[2] += qq * ( tcrd[2]*X[32+NA*30] + (-6.666666666666667e-01*X[30+NA*23])+(-8.888888888888888e-01*X[32+NA*21]) );
qq = qa[33]*qb[30] + qa[30]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*30] + (-9.428090415820635e-01*X[30+NA*22])+(-8.314794192830980e-01*X[33+NA*19])+(1.571348402636772e-01*X[33+NA*23]) );
G[1] += qq * ( tcrd[1]*X[33+NA*30] + (-9.428090415820635e-01*X[30+NA*21])+(8.314794192830980e-01*X[33+NA*20])+(1.571348402636772e-01*X[33+NA*24]) );
G[2] += qq * ( tcrd[2]*X[33+NA*30] + (-6.666666666666667e-01*X[30+NA*24])+(-8.888888888888888e-01*X[33+NA*21]) );
qq = qa[34]*qb[30] + qa[30]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*30] + (-1.054092553389460e+00*X[30+NA*23])+(-8.314794192830980e-01*X[34+NA*19])+(1.571348402636772e-01*X[34+NA*23]) );
G[1] += qq * ( tcrd[1]*X[34+NA*30] + (1.054092553389460e+00*X[30+NA*24])+(8.314794192830980e-01*X[34+NA*20])+(1.571348402636772e-01*X[34+NA*24]) );
G[2] += qq * ( tcrd[2]*X[34+NA*30] + (-8.888888888888888e-01*X[34+NA*21]) );
qq = qa[35]*qb[30] + qa[30]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*30] + (-1.054092553389460e+00*X[30+NA*24])+(-8.314794192830980e-01*X[35+NA*19])+(1.571348402636772e-01*X[35+NA*23]) );
G[1] += qq * ( tcrd[1]*X[35+NA*30] + (-1.054092553389460e+00*X[30+NA*23])+(8.314794192830980e-01*X[35+NA*20])+(1.571348402636772e-01*X[35+NA*24]) );
G[2] += qq * ( tcrd[2]*X[35+NA*30] + (-8.888888888888888e-01*X[35+NA*21]) );
qq = qa[31]*qb[31];
G[0] += qq * ( tcrd[0]*X[31+NA*31] + (-1.662958838566196e+00*X[31+NA*20])+(3.142696805273544e-01*X[31+NA*24]) );
G[1] += qq * ( tcrd[1]*X[31+NA*31] + (-1.662958838566196e+00*X[31+NA*19])+(-3.142696805273544e-01*X[31+NA*23]) );
G[2] += qq * ( tcrd[2]*X[31+NA*31] + (-1.777777777777778e+00*X[31+NA*22]) );
qq = qa[32]*qb[31] + qa[31]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*31] + (-9.428090415820635e-01*X[31+NA*21])+(-8.314794192830980e-01*X[32+NA*20])+(1.571348402636772e-01*X[32+NA*24]) );
G[1] += qq * ( tcrd[1]*X[32+NA*31] + (9.428090415820635e-01*X[31+NA*22])+(-8.314794192830980e-01*X[32+NA*19])+(-1.571348402636772e-01*X[32+NA*23]) );
G[2] += qq * ( tcrd[2]*X[32+NA*31] + (-6.666666666666667e-01*X[31+NA*23])+(-8.888888888888888e-01*X[32+NA*22]) );
qq = qa[33]*qb[31] + qa[31]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*31] + (-9.428090415820635e-01*X[31+NA*22])+(-8.314794192830980e-01*X[33+NA*20])+(1.571348402636772e-01*X[33+NA*24]) );
G[1] += qq * ( tcrd[1]*X[33+NA*31] + (-9.428090415820635e-01*X[31+NA*21])+(-8.314794192830980e-01*X[33+NA*19])+(-1.571348402636772e-01*X[33+NA*23]) );
G[2] += qq * ( tcrd[2]*X[33+NA*31] + (-6.666666666666667e-01*X[31+NA*24])+(-8.888888888888888e-01*X[33+NA*22]) );
qq = qa[34]*qb[31] + qa[31]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*31] + (-1.054092553389460e+00*X[31+NA*23])+(-8.314794192830980e-01*X[34+NA*20])+(1.571348402636772e-01*X[34+NA*24]) );
G[1] += qq * ( tcrd[1]*X[34+NA*31] + (1.054092553389460e+00*X[31+NA*24])+(-8.314794192830980e-01*X[34+NA*19])+(-1.571348402636772e-01*X[34+NA*23]) );
G[2] += qq * ( tcrd[2]*X[34+NA*31] + (-8.888888888888888e-01*X[34+NA*22]) );
qq = qa[35]*qb[31] + qa[31]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*31] + (-1.054092553389460e+00*X[31+NA*24])+(-8.314794192830980e-01*X[35+NA*20])+(1.571348402636772e-01*X[35+NA*24]) );
G[1] += qq * ( tcrd[1]*X[35+NA*31] + (-1.054092553389460e+00*X[31+NA*23])+(-8.314794192830980e-01*X[35+NA*19])+(-1.571348402636772e-01*X[35+NA*23]) );
G[2] += qq * ( tcrd[2]*X[35+NA*31] + (-8.888888888888888e-01*X[35+NA*22]) );
qq = qa[32]*qb[32];
G[0] += qq * ( tcrd[0]*X[32+NA*32] + (-1.885618083164127e+00*X[32+NA*21]) );
G[1] += qq * ( tcrd[1]*X[32+NA*32] + (1.885618083164127e+00*X[32+NA*22]) );
G[2] += qq * ( tcrd[2]*X[32+NA*32] + (-1.333333333333333e+00*X[32+NA*23]) );
qq = qa[33]*qb[32] + qa[32]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*32] + (-9.428090415820635e-01*X[32+NA*22])+(-9.428090415820635e-01*X[33+NA*21]) );
G[1] += qq * ( tcrd[1]*X[33+NA*32] + (-9.428090415820635e-01*X[32+NA*21])+(9.428090415820635e-01*X[33+NA*22]) );
G[2] += qq * ( tcrd[2]*X[33+NA*32] + (-6.666666666666667e-01*X[32+NA*24])+(-6.666666666666667e-01*X[33+NA*23]) );
qq = qa[34]*qb[32] + qa[32]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*32] + (-1.054092553389460e+00*X[32+NA*23])+(-9.428090415820635e-01*X[34+NA*21]) );
G[1] += qq * ( tcrd[1]*X[34+NA*32] + (1.054092553389460e+00*X[32+NA*24])+(9.428090415820635e-01*X[34+NA*22]) );
G[2] += qq * ( tcrd[2]*X[34+NA*32] + (-6.666666666666667e-01*X[34+NA*23]) );
qq = qa[35]*qb[32] + qa[32]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*32] + (-1.054092553389460e+00*X[32+NA*24])+(-9.428090415820635e-01*X[35+NA*21]) );
G[1] += qq * ( tcrd[1]*X[35+NA*32] + (-1.054092553389460e+00*X[32+NA*23])+(9.428090415820635e-01*X[35+NA*22]) );
G[2] += qq * ( tcrd[2]*X[35+NA*32] + (-6.666666666666667e-01*X[35+NA*23]) );
qq = qa[33]*qb[33];
G[0] += qq * ( tcrd[0]*X[33+NA*33] + (-1.885618083164127e+00*X[33+NA*22]) );
G[1] += qq * ( tcrd[1]*X[33+NA*33] + (-1.885618083164127e+00*X[33+NA*21]) );
G[2] += qq * ( tcrd[2]*X[33+NA*33] + (-1.333333333333333e+00*X[33+NA*24]) );
qq = qa[34]*qb[33] + qa[33]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*33] + (-1.054092553389460e+00*X[33+NA*23])+(-9.428090415820635e-01*X[34+NA*22]) );
G[1] += qq * ( tcrd[1]*X[34+NA*33] + (1.054092553389460e+00*X[33+NA*24])+(-9.428090415820635e-01*X[34+NA*21]) );
G[2] += qq * ( tcrd[2]*X[34+NA*33] + (-6.666666666666667e-01*X[34+NA*24]) );
qq = qa[35]*qb[33] + qa[33]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*33] + (-1.054092553389460e+00*X[33+NA*24])+(-9.428090415820635e-01*X[35+NA*22]) );
G[1] += qq * ( tcrd[1]*X[35+NA*33] + (-1.054092553389460e+00*X[33+NA*23])+(-9.428090415820635e-01*X[35+NA*21]) );
G[2] += qq * ( tcrd[2]*X[35+NA*33] + (-6.666666666666667e-01*X[35+NA*24]) );
qq = qa[34]*qb[34];
G[0] += qq * ( tcrd[0]*X[34+NA*34] + (-2.108185106778919e+00*X[34+NA*23]) );
G[1] += qq * ( tcrd[1]*X[34+NA*34] + (2.108185106778919e+00*X[34+NA*24]) );
G[2] += qq * ( tcrd[2]*X[34+NA*34] );
qq = qa[35]*qb[34] + qa[34]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*34] + (-1.054092553389460e+00*X[34+NA*24])+(-1.054092553389460e+00*X[35+NA*23]) );
G[1] += qq * ( tcrd[1]*X[35+NA*34] + (-1.054092553389460e+00*X[34+NA*23])+(1.054092553389460e+00*X[35+NA*24]) );
G[2] += qq * ( tcrd[2]*X[35+NA*34] );
qq = qa[35]*qb[35];
G[0] += qq * ( tcrd[0]*X[35+NA*35] + (-2.108185106778919e+00*X[35+NA*24]) );
G[1] += qq * ( tcrd[1]*X[35+NA*35] + (-2.108185106778919e+00*X[35+NA*23]) );
G[2] += qq * ( tcrd[2]*X[35+NA*35] );
}

void ccdl::PrimGauExpInt_Overlap_PS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[2];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::PrimGauExpInt_Overlap_PP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[19];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
}

void ccdl::PrimGauExpInt_Overlap_DS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[12];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
}

void ccdl::PrimGauExpInt_Overlap_DP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[40];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
}

void ccdl::PrimGauExpInt_Overlap_DD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[86];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
}

void ccdl::PrimGauExpInt_Overlap_FS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[20];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
}

void ccdl::PrimGauExpInt_Overlap_FP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[69];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
}

void ccdl::PrimGauExpInt_Overlap_FD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[150];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
}

void ccdl::PrimGauExpInt_Overlap_FF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[263];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
}

void ccdl::PrimGauExpInt_Overlap_GS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[30];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
}

void ccdl::PrimGauExpInt_Overlap_GP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[106];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
}

void ccdl::PrimGauExpInt_Overlap_GD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[232];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
}

void ccdl::PrimGauExpInt_Overlap_GF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[408];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
}

void ccdl::PrimGauExpInt_Overlap_GG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[634];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
}

void ccdl::PrimGauExpInt_Overlap_HS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[42];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
}

void ccdl::PrimGauExpInt_Overlap_HP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[151];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
}

void ccdl::PrimGauExpInt_Overlap_HD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[332];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
}

void ccdl::PrimGauExpInt_Overlap_HF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[585];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
}

void ccdl::PrimGauExpInt_Overlap_HG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[910];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
}

void ccdl::PrimGauExpInt_Overlap_HH( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[1307];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
}

void ccdl::PrimGauExpInt_Ewald_PS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[2];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<1>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::PrimGauExpInt_Ewald_PP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[19];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
}

void ccdl::PrimGauExpInt_Ewald_DS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[12];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
}

void ccdl::PrimGauExpInt_Ewald_DP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[40];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
}

void ccdl::PrimGauExpInt_Ewald_DD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[86];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
}

void ccdl::PrimGauExpInt_Ewald_FS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[20];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
}

void ccdl::PrimGauExpInt_Ewald_FP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[69];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
}

void ccdl::PrimGauExpInt_Ewald_FD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[150];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
}

void ccdl::PrimGauExpInt_Ewald_FF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[263];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
}

void ccdl::PrimGauExpInt_Ewald_GS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[30];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
}

void ccdl::PrimGauExpInt_Ewald_GP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[106];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
}

void ccdl::PrimGauExpInt_Ewald_GD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[232];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
}

void ccdl::PrimGauExpInt_Ewald_GF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[408];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
}

void ccdl::PrimGauExpInt_Ewald_GG( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[634];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
}

void ccdl::PrimGauExpInt_Ewald_HS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[42];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
}

void ccdl::PrimGauExpInt_Ewald_HP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[151];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
}

void ccdl::PrimGauExpInt_Ewald_HD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[332];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
}

void ccdl::PrimGauExpInt_Ewald_HF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[585];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
}

void ccdl::PrimGauExpInt_Ewald_HG( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[910];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
}

void ccdl::PrimGauExpInt_Ewald_HH( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[1307];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
}

void ccdl::PrimGauExpInt_Coulomb_PS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[2];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<1>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}
void ccdl::PrimGauExpInt_Coulomb_PP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[19];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_DS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[12];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
}
void ccdl::PrimGauExpInt_Coulomb_DP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[40];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_DD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[86];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_FS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[20];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
}
void ccdl::PrimGauExpInt_Coulomb_FP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[69];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_FD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[150];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_FF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[263];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_GS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[30];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
}
void ccdl::PrimGauExpInt_Coulomb_GP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[106];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_GD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[232];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_GF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[408];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_GG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[634];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_HS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[42];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
}
void ccdl::PrimGauExpInt_Coulomb_HP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[151];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_HD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[332];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_HF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[585];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_HG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[910];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
}
void ccdl::PrimGauExpInt_Coulomb_HH( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[1307];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
}
void ccdl::ExpInt_UserAux_PS( double const *__restrict__ O, double const *__restrict__ crd, double const /* r2 */, double *__restrict__ X )
{
   double T[2];
   T[0] = O[0];
   T[1] = O[1];
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::ExpInt_UserAux_PP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[19];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
}

void ccdl::ExpInt_UserAux_DS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[12];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
}

void ccdl::ExpInt_UserAux_DP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[40];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
}

void ccdl::ExpInt_UserAux_DD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[86];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
}

void ccdl::ExpInt_UserAux_FS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[20];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
}

void ccdl::ExpInt_UserAux_FP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[69];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
}

void ccdl::ExpInt_UserAux_FD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[150];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
}

void ccdl::ExpInt_UserAux_FF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[263];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
}

void ccdl::ExpInt_UserAux_GS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[30];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
}

void ccdl::ExpInt_UserAux_GP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[106];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
}

void ccdl::ExpInt_UserAux_GD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[232];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
}

void ccdl::ExpInt_UserAux_GF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[408];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
}

void ccdl::ExpInt_UserAux_GG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[634];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
}

void ccdl::ExpInt_UserAux_HS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[42];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
}

void ccdl::ExpInt_UserAux_HP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[151];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
}

void ccdl::ExpInt_UserAux_HD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[332];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
}

void ccdl::ExpInt_UserAux_HF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[585];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
}

void ccdl::ExpInt_UserAux_HG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[910];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
}

void ccdl::ExpInt_UserAux_HH( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   double T[1307];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
}

void ccdl::PrimGauExpPot_Overlap_PS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[6];
   double mzab = -zab;
   double *__restrict__ X = T+2;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Overlap_PP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[35];
   double mzab = -zab;
   double *__restrict__ X = T+19;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Overlap_DS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[21];
   double mzab = -zab;
   double *__restrict__ X = T+12;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Overlap_DP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[76];
   double mzab = -zab;
   double *__restrict__ X = T+40;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Overlap_DD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[167];
   double mzab = -zab;
   double *__restrict__ X = T+86;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Overlap_FS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   double mzab = -zab;
   double *__restrict__ X = T+20;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Overlap_FP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[133];
   double mzab = -zab;
   double *__restrict__ X = T+69;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Overlap_FD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[294];
   double mzab = -zab;
   double *__restrict__ X = T+150;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Overlap_FF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[519];
   double mzab = -zab;
   double *__restrict__ X = T+263;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Overlap_GS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[55];
   double mzab = -zab;
   double *__restrict__ X = T+30;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Overlap_GP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[206];
   double mzab = -zab;
   double *__restrict__ X = T+106;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Overlap_GD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[457];
   double mzab = -zab;
   double *__restrict__ X = T+232;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Overlap_GF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[808];
   double mzab = -zab;
   double *__restrict__ X = T+408;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Overlap_GG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1259];
   double mzab = -zab;
   double *__restrict__ X = T+634;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Overlap_HS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[78];
   double mzab = -zab;
   double *__restrict__ X = T+42;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Overlap_HP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[295];
   double mzab = -zab;
   double *__restrict__ X = T+151;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Overlap_HD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[656];
   double mzab = -zab;
   double *__restrict__ X = T+332;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Overlap_HF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1161];
   double mzab = -zab;
   double *__restrict__ X = T+585;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Overlap_HG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1810];
   double mzab = -zab;
   double *__restrict__ X = T+910;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Overlap_HH( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[2603];
   double mzab = -zab;
   double *__restrict__ X = T+1307;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_PS( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[6];
   double *__restrict__ X = T+2;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<1>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Ewald_PP( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[35];
   double *__restrict__ X = T+19;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Ewald_DS( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[21];
   double *__restrict__ X = T+12;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Ewald_DP( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[76];
   double *__restrict__ X = T+40;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Ewald_DD( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[167];
   double *__restrict__ X = T+86;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Ewald_FS( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   double *__restrict__ X = T+20;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Ewald_FP( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[133];
   double *__restrict__ X = T+69;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Ewald_FD( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[294];
   double *__restrict__ X = T+150;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Ewald_FF( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[519];
   double *__restrict__ X = T+263;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Ewald_GS( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[55];
   double *__restrict__ X = T+30;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Ewald_GP( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[206];
   double *__restrict__ X = T+106;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Ewald_GD( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[457];
   double *__restrict__ X = T+232;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Ewald_GF( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[808];
   double *__restrict__ X = T+408;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Ewald_GG( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1259];
   double *__restrict__ X = T+634;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Ewald_HS( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[78];
   double *__restrict__ X = T+42;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_HP( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[295];
   double *__restrict__ X = T+151;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_HD( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[656];
   double *__restrict__ X = T+332;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_HF( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1161];
   double *__restrict__ X = T+585;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_HG( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1810];
   double *__restrict__ X = T+910;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Ewald_HH( double const sqrt_za,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[2603];
   double *__restrict__ X = T+1307;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_PS( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[6];
   double *__restrict__ X = T+2;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<1>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Coulomb_PP( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[35];
   double *__restrict__ X = T+19;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::PrimGauExpPot_Coulomb_DS( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[21];
   double *__restrict__ X = T+12;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Coulomb_DP( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[76];
   double *__restrict__ X = T+40;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Coulomb_DD( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[167];
   double *__restrict__ X = T+86;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::PrimGauExpPot_Coulomb_FS( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   double *__restrict__ X = T+20;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Coulomb_FP( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[133];
   double *__restrict__ X = T+69;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Coulomb_FD( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[294];
   double *__restrict__ X = T+150;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Coulomb_FF( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[519];
   double *__restrict__ X = T+263;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::PrimGauExpPot_Coulomb_GS( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[55];
   double *__restrict__ X = T+30;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Coulomb_GP( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[206];
   double *__restrict__ X = T+106;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Coulomb_GD( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[457];
   double *__restrict__ X = T+232;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Coulomb_GF( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[808];
   double *__restrict__ X = T+408;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Coulomb_GG( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1259];
   double *__restrict__ X = T+634;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HS( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[78];
   double *__restrict__ X = T+42;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HP( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[295];
   double *__restrict__ X = T+151;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HD( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[656];
   double *__restrict__ X = T+332;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HF( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1161];
   double *__restrict__ X = T+585;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HG( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1810];
   double *__restrict__ X = T+910;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpPot_Coulomb_HH( double const zab,  double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[2603];
   double *__restrict__ X = T+1307;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_PS( double const *__restrict__ O, double const *__restrict__ crd, double const /* r2 */, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[6];
   double *__restrict__ X = T+2;
   T[0] = O[0];
   T[1] = O[1];
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::ExpPot_UserAux_PP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[35];
   double *__restrict__ X = T+19;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   ccdl::ClmTranslation_PP(crd,r2,T+3);
   ExpHobMat_PP(T+3,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
}

void ccdl::ExpPot_UserAux_DS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[21];
   double *__restrict__ X = T+12;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+3);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[4];
   X[2] = -4.000000000000000e+00*T[1]*T[5];
   X[3] = -4.000000000000000e+00*T[1]*T[6];
   X[4] = 2.666666666666667e+00*T[2]*T[7];
   X[5] = -4.618802153517006e+00*T[2]*T[8];
   X[6] = -4.618802153517006e+00*T[2]*T[9];
   X[7] = 9.237604307034012e+00*T[2]*T[10];
   X[8] = 9.237604307034012e+00*T[2]*T[11];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::ExpPot_UserAux_DP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[76];
   double *__restrict__ X = T+40;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::ClmTranslation_DP(crd,r2,T+4);
   ExpHobMat_DP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::ExpPot_UserAux_DD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[167];
   double *__restrict__ X = T+86;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_DD(crd,r2,T+5);
   ExpHobMat_DD(T+5,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
}

void ccdl::ExpPot_UserAux_FS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   double *__restrict__ X = T+20;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   X[9] = 3.200000000000000e+00*T[3]*T[13];
   X[10] = -5.225578117937446e+00*T[3]*T[14];
   X[11] = -5.225578117937446e+00*T[3]*T[15];
   X[12] = 8.262364471909157e+00*T[3]*T[16];
   X[13] = 8.262364471909157e+00*T[3]*T[17];
   X[14] = -2.023857702507763e+01*T[3]*T[18];
   X[15] = -2.023857702507763e+01*T[3]*T[19];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::ExpPot_UserAux_FP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[133];
   double *__restrict__ X = T+69;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_FP(crd,r2,T+5);
   ExpHobMat_FP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::ExpPot_UserAux_FD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[294];
   double *__restrict__ X = T+150;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_FD(crd,r2,T+6);
   ExpHobMat_FD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::ExpPot_UserAux_FF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[519];
   double *__restrict__ X = T+263;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_FF(crd,r2,T+7);
   ExpHobMat_FF(T+7,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
}

void ccdl::ExpPot_UserAux_GS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[55];
   double *__restrict__ X = T+30;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   X[16] = 3.657142857142857e+00*T[4]*T[21];
   X[17] = -5.782450578593608e+00*T[4]*T[22];
   X[18] = -5.782450578593608e+00*T[4]*T[23];
   X[19] = 8.177620031999233e+00*T[4]*T[24];
   X[20] = 8.177620031999233e+00*T[4]*T[25];
   X[21] = -1.529892619948024e+01*T[4]*T[26];
   X[22] = -1.529892619948024e+01*T[4]*T[27];
   X[23] = 4.327189784210005e+01*T[4]*T[28];
   X[24] = 4.327189784210005e+01*T[4]*T[29];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::ExpPot_UserAux_GP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[206];
   double *__restrict__ X = T+106;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_GP(crd,r2,T+6);
   ExpHobMat_GP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::ExpPot_UserAux_GD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[457];
   double *__restrict__ X = T+232;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_GD(crd,r2,T+7);
   ExpHobMat_GD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::ExpPot_UserAux_GF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[808];
   double *__restrict__ X = T+408;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_GF(crd,r2,T+8);
   ExpHobMat_GF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::ExpPot_UserAux_GG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1259];
   double *__restrict__ X = T+634;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_GG(crd,r2,T+9);
   ExpHobMat_GG(T+9,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
}

void ccdl::ExpPot_UserAux_HS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[78];
   double *__restrict__ X = T+42;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   X[25] = 4.063492063492064e+00*T[5]*T[31];
   X[26] = -6.295134835740310e+00*T[5]*T[32];
   X[27] = -6.295134835740310e+00*T[5]*T[33];
   X[28] = 8.327680622494151e+00*T[5]*T[34];
   X[29] = 8.327680622494151e+00*T[5]*T[35];
   X[30] = -1.359904551064910e+01*T[5]*T[36];
   X[31] = -1.359904551064910e+01*T[5]*T[37];
   X[32] = 2.884793189473337e+01*T[5]*T[38];
   X[33] = 2.884793189473337e+01*T[5]*T[39];
   X[34] = -9.122517057277419e+01*T[5]*T[40];
   X[35] = -9.122517057277419e+01*T[5]*T[41];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_HP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[295];
   double *__restrict__ X = T+151;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_HP(crd,r2,T+7);
   ExpHobMat_HP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_HD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[656];
   double *__restrict__ X = T+332;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_HD(crd,r2,T+8);
   ExpHobMat_HD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_HF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1161];
   double *__restrict__ X = T+585;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_HF(crd,r2,T+9);
   ExpHobMat_HF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_HG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1810];
   double *__restrict__ X = T+910;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_HG(crd,r2,T+10);
   ExpHobMat_HG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::ExpPot_UserAux_HH( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[2603];
   double *__restrict__ X = T+1307;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   ccdl::ClmTranslation_HH(crd,r2,T+11);
   ExpHobMat_HH(T+11,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
}

void ccdl::PrimGauExpGrd_Overlap_PS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[3];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::PrimGauExpGrd_Overlap_PP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[20];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   ExpHobGrdBlk_PP<4>(tcrd,X,G);
   ExpHobMat_PP(T+4,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_DS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[13];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
}

void ccdl::PrimGauExpGrd_Overlap_DP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[41];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobMat_DP(T+5,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_DD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[87];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobGrdBlk_DD<9>(tcrd,X,G);
   ExpHobMat_DD(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_FS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[21];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
}

void ccdl::PrimGauExpGrd_Overlap_FP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[70];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobMat_FP(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_FD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[151];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobMat_FD(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_FF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[264];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobGrdBlk_FF<16>(tcrd,X,G);
   ExpHobMat_FF(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_GS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[31];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
}

void ccdl::PrimGauExpGrd_Overlap_GP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[107];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobMat_GP(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_GD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[233];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobMat_GD(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_GF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[409];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobMat_GF(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_GG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[635];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobGrdBlk_GG<25>(tcrd,X,G);
   ExpHobMat_GG(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_HS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[43];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
}

void ccdl::PrimGauExpGrd_Overlap_HP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[152];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobMat_HP(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_HD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[333];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobMat_HD(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_HF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[586];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobMat_HF(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_HG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[911];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobMat_HG(T+11,T,X);
}

void ccdl::PrimGauExpGrd_Overlap_HH( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[1308];
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   T[11] = mzab*T[10];
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobGrdBlk_HH<36>(tcrd,X,G);
   ExpHobMat_HH(T+12,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_PS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[3];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::PrimGauExpGrd_Ewald_PP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[20];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   ExpHobGrdBlk_PP<4>(tcrd,X,G);
   ExpHobMat_PP(T+4,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_DS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[13];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
}

void ccdl::PrimGauExpGrd_Ewald_DP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[41];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobMat_DP(T+5,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_DD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[87];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobGrdBlk_DD<9>(tcrd,X,G);
   ExpHobMat_DD(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_FS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[21];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
}

void ccdl::PrimGauExpGrd_Ewald_FP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[70];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobMat_FP(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_FD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[151];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobMat_FD(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_FF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[264];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobGrdBlk_FF<16>(tcrd,X,G);
   ExpHobMat_FF(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_GS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[31];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
}

void ccdl::PrimGauExpGrd_Ewald_GP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[107];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobMat_GP(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_GD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[233];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobMat_GD(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_GF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[409];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobMat_GF(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_GG( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[635];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobGrdBlk_GG<25>(tcrd,X,G);
   ExpHobMat_GG(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_HS( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[43];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
}

void ccdl::PrimGauExpGrd_Ewald_HP( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[152];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobMat_HP(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_HD( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[333];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobMat_HD(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_HF( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[586];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobMat_HF(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_HG( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[911];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobMat_HG(T+11,T,X);
}

void ccdl::PrimGauExpGrd_Ewald_HH( double const sqrt_za, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[1308];

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<11>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   oor *= -21.0*z;
   t *= -za;
   T[11] = oor-T[11]*t;
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobGrdBlk_HH<36>(tcrd,X,G);
   ExpHobMat_HH(T+12,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_PS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[3];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::PrimGauExpGrd_Coulomb_PP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[20];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   ExpHobGrdBlk_PP<4>(tcrd,X,G);
   ExpHobMat_PP(T+4,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_DS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[13];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
}

void ccdl::PrimGauExpGrd_Coulomb_DP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[41];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobMat_DP(T+5,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_DD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[87];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobGrdBlk_DD<9>(tcrd,X,G);
   ExpHobMat_DD(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_FS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[21];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
}

void ccdl::PrimGauExpGrd_Coulomb_FP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[70];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobMat_FP(T+6,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_FD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[151];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobMat_FD(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_FF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[264];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobGrdBlk_FF<16>(tcrd,X,G);
   ExpHobMat_FF(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_GS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[31];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
}

void ccdl::PrimGauExpGrd_Coulomb_GP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[107];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobMat_GP(T+7,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_GD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[233];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobMat_GD(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_GF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[409];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobMat_GF(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_GG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[635];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobGrdBlk_GG<25>(tcrd,X,G);
   ExpHobMat_GG(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_HS( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[43];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
}

void ccdl::PrimGauExpGrd_Coulomb_HP( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[152];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobMat_HP(T+8,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_HD( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[333];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobMat_HD(T+9,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_HF( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[586];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobMat_HF(T+10,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_HG( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[911];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobMat_HG(T+11,T,X);
}

void ccdl::PrimGauExpGrd_Coulomb_HH( double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[1308];

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<11>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   t *= -zab;
   T[11] *= t;
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobGrdBlk_HH<36>(tcrd,X,G);
   ExpHobMat_HH(T+12,T,X);
}

void ccdl::ExpGrd_UserAux_PS( double const *__restrict__ O, double const *__restrict__ crd, double const /* r2 */, double *__restrict__ X, double *__restrict__ G )
{
   double T[3];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   T[1] *= 2.;
   X[0] = T[0];
   X[1] = T[1]*crd[2];
   X[2] = T[1]*crd[0];
   X[3] = T[1]*crd[1];
}

void ccdl::ExpGrd_UserAux_PP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[20];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<4>(tcrd,X,G);
   ExpHobGrdBlk_PS<4>(tcrd,X,G);
   ExpHobGrdBlk_PP<4>(tcrd,X,G);
   ExpHobMat_PP(T+4,T,X);
}

void ccdl::ExpGrd_UserAux_DS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[13];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
}

void ccdl::ExpGrd_UserAux_DP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[41];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobMat_DP(T+5,T,X);
}

void ccdl::ExpGrd_UserAux_DD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[87];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<9>(tcrd,X,G);
   ExpHobGrdBlk_PS<9>(tcrd,X,G);
   ExpHobGrdBlk_DS<9>(tcrd,X,G);
   ExpHobGrdBlk_PP<9>(tcrd,X,G);
   ExpHobGrdBlk_DP<9>(tcrd,X,G);
   ExpHobGrdBlk_DD<9>(tcrd,X,G);
   ExpHobMat_DD(T+6,T,X);
}

void ccdl::ExpGrd_UserAux_FS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[21];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
}

void ccdl::ExpGrd_UserAux_FP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[70];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobMat_FP(T+6,T,X);
}

void ccdl::ExpGrd_UserAux_FD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[151];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobMat_FD(T+7,T,X);
}

void ccdl::ExpGrd_UserAux_FF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[264];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<16>(tcrd,X,G);
   ExpHobGrdBlk_PS<16>(tcrd,X,G);
   ExpHobGrdBlk_DS<16>(tcrd,X,G);
   ExpHobGrdBlk_FS<16>(tcrd,X,G);
   ExpHobGrdBlk_PP<16>(tcrd,X,G);
   ExpHobGrdBlk_DP<16>(tcrd,X,G);
   ExpHobGrdBlk_FP<16>(tcrd,X,G);
   ExpHobGrdBlk_DD<16>(tcrd,X,G);
   ExpHobGrdBlk_FD<16>(tcrd,X,G);
   ExpHobGrdBlk_FF<16>(tcrd,X,G);
   ExpHobMat_FF(T+8,T,X);
}

void ccdl::ExpGrd_UserAux_GS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[31];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
}

void ccdl::ExpGrd_UserAux_GP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[107];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobMat_GP(T+7,T,X);
}

void ccdl::ExpGrd_UserAux_GD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[233];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobMat_GD(T+8,T,X);
}

void ccdl::ExpGrd_UserAux_GF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[409];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobMat_GF(T+9,T,X);
}

void ccdl::ExpGrd_UserAux_GG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[635];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<25>(tcrd,X,G);
   ExpHobGrdBlk_PS<25>(tcrd,X,G);
   ExpHobGrdBlk_DS<25>(tcrd,X,G);
   ExpHobGrdBlk_FS<25>(tcrd,X,G);
   ExpHobGrdBlk_GS<25>(tcrd,X,G);
   ExpHobGrdBlk_PP<25>(tcrd,X,G);
   ExpHobGrdBlk_DP<25>(tcrd,X,G);
   ExpHobGrdBlk_FP<25>(tcrd,X,G);
   ExpHobGrdBlk_GP<25>(tcrd,X,G);
   ExpHobGrdBlk_DD<25>(tcrd,X,G);
   ExpHobGrdBlk_FD<25>(tcrd,X,G);
   ExpHobGrdBlk_GD<25>(tcrd,X,G);
   ExpHobGrdBlk_FF<25>(tcrd,X,G);
   ExpHobGrdBlk_GF<25>(tcrd,X,G);
   ExpHobGrdBlk_GG<25>(tcrd,X,G);
   ExpHobMat_GG(T+10,T,X);
}

void ccdl::ExpGrd_UserAux_HS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[43];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
}

void ccdl::ExpGrd_UserAux_HP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[152];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobMat_HP(T+8,T,X);
}

void ccdl::ExpGrd_UserAux_HD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[333];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobMat_HD(T+9,T,X);
}

void ccdl::ExpGrd_UserAux_HF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[586];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobMat_HF(T+10,T,X);
}

void ccdl::ExpGrd_UserAux_HG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[911];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobMat_HG(T+11,T,X);
}

void ccdl::ExpGrd_UserAux_HH( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ G )
{
   double T[1308];
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   T[11] = O[11];
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T+1,X);
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   ExpHobGrdBlk_SS<36>(tcrd,X,G);
   ExpHobGrdBlk_PS<36>(tcrd,X,G);
   ExpHobGrdBlk_DS<36>(tcrd,X,G);
   ExpHobGrdBlk_FS<36>(tcrd,X,G);
   ExpHobGrdBlk_GS<36>(tcrd,X,G);
   ExpHobGrdBlk_HS<36>(tcrd,X,G);
   ExpHobGrdBlk_PP<36>(tcrd,X,G);
   ExpHobGrdBlk_DP<36>(tcrd,X,G);
   ExpHobGrdBlk_FP<36>(tcrd,X,G);
   ExpHobGrdBlk_GP<36>(tcrd,X,G);
   ExpHobGrdBlk_HP<36>(tcrd,X,G);
   ExpHobGrdBlk_DD<36>(tcrd,X,G);
   ExpHobGrdBlk_FD<36>(tcrd,X,G);
   ExpHobGrdBlk_GD<36>(tcrd,X,G);
   ExpHobGrdBlk_HD<36>(tcrd,X,G);
   ExpHobGrdBlk_FF<36>(tcrd,X,G);
   ExpHobGrdBlk_GF<36>(tcrd,X,G);
   ExpHobGrdBlk_HF<36>(tcrd,X,G);
   ExpHobGrdBlk_GG<36>(tcrd,X,G);
   ExpHobGrdBlk_HG<36>(tcrd,X,G);
   ExpHobGrdBlk_HH<36>(tcrd,X,G);
   ExpHobMat_HH(T+12,T,X);
}

void ccdl::PrimGauExpPotGrd_Overlap_PS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[7];
   double *__restrict__ X = T+3;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   X[0] = T[0];
   X[1] = 2.*T[1]*crd[2];
   X[2] = 2.*T[1]*crd[0];
   X[3] = 2.*T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   ExpHobGrdAcc_SS<4,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_PP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[36];
   double *__restrict__ X = T+20;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_PP(T+4,T+1,X);
   ExpHobGrdAcc_SS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<4,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_DS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[22];
   double *__restrict__ X = T+13;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   ExpHobGrdAcc_SS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_DP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[77];
   double *__restrict__ X = T+41;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DP(T+5,T+1,X);
   ExpHobGrdAcc_SS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_DD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[168];
   double *__restrict__ X = T+87;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DD(T+6,T+1,X);
   ExpHobGrdAcc_SS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<9,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_FS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[37];
   double *__restrict__ X = T+21;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   ExpHobGrdAcc_SS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_FP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[134];
   double *__restrict__ X = T+70;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FP(T+6,T+1,X);
   ExpHobGrdAcc_SS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_FD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[295];
   double *__restrict__ X = T+151;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FD(T+7,T+1,X);
   ExpHobGrdAcc_SS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_FF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[520];
   double *__restrict__ X = T+264;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FF(T+8,T+1,X);
   ExpHobGrdAcc_SS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<16,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_GS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[56];
   double *__restrict__ X = T+31;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   ExpHobGrdAcc_SS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_GP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[207];
   double *__restrict__ X = T+107;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GP(T+7,T+1,X);
   ExpHobGrdAcc_SS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_GD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[458];
   double *__restrict__ X = T+233;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GD(T+8,T+1,X);
   ExpHobGrdAcc_SS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_GF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[809];
   double *__restrict__ X = T+409;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GF(T+9,T+1,X);
   ExpHobGrdAcc_SS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_GG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1260];
   double *__restrict__ X = T+635;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GG(T+10,T+1,X);
   ExpHobGrdAcc_SS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<25,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[79];
   double *__restrict__ X = T+43;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   ExpHobGrdAcc_SS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[296];
   double *__restrict__ X = T+152;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HP(T+8,T+1,X);
   ExpHobGrdAcc_SS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[657];
   double *__restrict__ X = T+333;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HD(T+9,T+1,X);
   ExpHobGrdAcc_SS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1162];
   double *__restrict__ X = T+586;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HF(T+10,T+1,X);
   ExpHobGrdAcc_SS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1811];
   double *__restrict__ X = T+911;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HG(T+11,T+1,X);
   ExpHobGrdAcc_SS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Overlap_HH( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[2604];
   double *__restrict__ X = T+1308;
   double mzab = -zab;
   T[0] = std::pow(-mzab/GieseMultipole_PI,1.5)*std::exp(mzab*r2);
   T[1] = mzab*T[0];
   T[2] = mzab*T[1];
   T[3] = mzab*T[2];
   T[4] = mzab*T[3];
   T[5] = mzab*T[4];
   T[6] = mzab*T[5];
   T[7] = mzab*T[6];
   T[8] = mzab*T[7];
   T[9] = mzab*T[8];
   T[10] = mzab*T[9];
   T[11] = mzab*T[10];
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HH(T+12,T+1,X);
   ExpHobGrdAcc_SS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HH<36,5>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_PS( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[7];
   double *__restrict__ X = T+3;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   X[0] = T[0];
   X[1] = 2.*T[1]*crd[2];
   X[2] = 2.*T[1]*crd[0];
   X[3] = 2.*T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   ExpHobGrdAcc_SS<4,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_PP( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[36];
   double *__restrict__ X = T+20;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_PP(T+4,T+1,X);
   ExpHobGrdAcc_SS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<4,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_DS( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[22];
   double *__restrict__ X = T+13;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   ExpHobGrdAcc_SS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_DP( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[77];
   double *__restrict__ X = T+41;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DP(T+5,T+1,X);
   ExpHobGrdAcc_SS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_DD( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[168];
   double *__restrict__ X = T+87;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DD(T+6,T+1,X);
   ExpHobGrdAcc_SS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<9,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_FS( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[37];
   double *__restrict__ X = T+21;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   ExpHobGrdAcc_SS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_FP( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[134];
   double *__restrict__ X = T+70;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FP(T+6,T+1,X);
   ExpHobGrdAcc_SS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_FD( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[295];
   double *__restrict__ X = T+151;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FD(T+7,T+1,X);
   ExpHobGrdAcc_SS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_FF( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[520];
   double *__restrict__ X = T+264;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FF(T+8,T+1,X);
   ExpHobGrdAcc_SS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<16,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_GS( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[56];
   double *__restrict__ X = T+31;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   ExpHobGrdAcc_SS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_GP( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[207];
   double *__restrict__ X = T+107;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GP(T+7,T+1,X);
   ExpHobGrdAcc_SS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_GD( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[458];
   double *__restrict__ X = T+233;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GD(T+8,T+1,X);
   ExpHobGrdAcc_SS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_GF( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[809];
   double *__restrict__ X = T+409;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GF(T+9,T+1,X);
   ExpHobGrdAcc_SS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_GG( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1260];
   double *__restrict__ X = T+635;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GG(T+10,T+1,X);
   ExpHobGrdAcc_SS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<25,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HS( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[79];
   double *__restrict__ X = T+43;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   ExpHobGrdAcc_SS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HP( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[296];
   double *__restrict__ X = T+152;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HP(T+8,T+1,X);
   ExpHobGrdAcc_SS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HD( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[657];
   double *__restrict__ X = T+333;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HD(T+9,T+1,X);
   ExpHobGrdAcc_SS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HF( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1162];
   double *__restrict__ X = T+586;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HF(T+10,T+1,X);
   ExpHobGrdAcc_SS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HG( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1811];
   double *__restrict__ X = T+911;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HG(T+11,T+1,X);
   ExpHobGrdAcc_SS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Ewald_HH( double const sqrt_za, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[2604];
   double *__restrict__ X = T+1308;

   double oor = 1./std::sqrt(r2);
   double za = sqrt_za*sqrt_za;
   double t = za*r2;
   GieseBoysFcnTemplate<11>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * sqrt_za;
   double z  = 0.5 / r2;
   *T = oor - *T*t;
   oor *= -z;
   t *= -za;
   T[1] = oor-T[1]*t;
   oor *= -3.0*z;
   t *= -za;
   T[2] = oor-T[2]*t;
   oor *= -5.0*z;
   t *= -za;
   T[3] = oor-T[3]*t;
   oor *= -7.0*z;
   t *= -za;
   T[4] = oor-T[4]*t;
   oor *= -9.0*z;
   t *= -za;
   T[5] = oor-T[5]*t;
   oor *= -11.0*z;
   t *= -za;
   T[6] = oor-T[6]*t;
   oor *= -13.0*z;
   t *= -za;
   T[7] = oor-T[7]*t;
   oor *= -15.0*z;
   t *= -za;
   T[8] = oor-T[8]*t;
   oor *= -17.0*z;
   t *= -za;
   T[9] = oor-T[9]*t;
   oor *= -19.0*z;
   t *= -za;
   T[10] = oor-T[10]*t;
   oor *= -21.0*z;
   t *= -za;
   T[11] = oor-T[11]*t;
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HH(T+12,T+1,X);
   ExpHobGrdAcc_SS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HH<36,5>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_PS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[7];
   double *__restrict__ X = T+3;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<2>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   X[0] = T[0];
   X[1] = 2.*T[1]*crd[2];
   X[2] = 2.*T[1]*crd[0];
   X[3] = 2.*T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   ExpHobGrdAcc_SS<4,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_PP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[36];
   double *__restrict__ X = T+20;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_PP(T+4,T+1,X);
   ExpHobGrdAcc_SS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<4,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_DS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[22];
   double *__restrict__ X = T+13;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<3>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   ExpHobGrdAcc_SS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_DP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[77];
   double *__restrict__ X = T+41;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DP(T+5,T+1,X);
   ExpHobGrdAcc_SS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_DD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[168];
   double *__restrict__ X = T+87;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DD(T+6,T+1,X);
   ExpHobGrdAcc_SS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<9,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_FS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[37];
   double *__restrict__ X = T+21;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<4>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   ExpHobGrdAcc_SS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_FP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[134];
   double *__restrict__ X = T+70;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FP(T+6,T+1,X);
   ExpHobGrdAcc_SS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_FD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[295];
   double *__restrict__ X = T+151;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FD(T+7,T+1,X);
   ExpHobGrdAcc_SS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_FF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[520];
   double *__restrict__ X = T+264;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FF(T+8,T+1,X);
   ExpHobGrdAcc_SS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<16,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_GS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[56];
   double *__restrict__ X = T+31;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<5>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   ExpHobGrdAcc_SS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_GP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[207];
   double *__restrict__ X = T+107;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GP(T+7,T+1,X);
   ExpHobGrdAcc_SS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_GD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[458];
   double *__restrict__ X = T+233;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GD(T+8,T+1,X);
   ExpHobGrdAcc_SS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_GF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[809];
   double *__restrict__ X = T+409;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GF(T+9,T+1,X);
   ExpHobGrdAcc_SS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_GG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1260];
   double *__restrict__ X = T+635;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GG(T+10,T+1,X);
   ExpHobGrdAcc_SS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<25,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HS( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[79];
   double *__restrict__ X = T+43;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<6>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   ExpHobGrdAcc_SS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,0>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HP( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[296];
   double *__restrict__ X = T+152;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<7>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HP(T+8,T+1,X);
   ExpHobGrdAcc_SS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,1>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HD( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[657];
   double *__restrict__ X = T+333;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<8>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HD(T+9,T+1,X);
   ExpHobGrdAcc_SS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,2>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HF( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1162];
   double *__restrict__ X = T+586;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<9>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HF(T+10,T+1,X);
   ExpHobGrdAcc_SS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,3>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HG( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1811];
   double *__restrict__ X = T+911;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<10>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HG(T+11,T+1,X);
   ExpHobGrdAcc_SS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,4>(tcrd,qa,qb,X,G);
}

void ccdl::PrimGauExpPotGrd_Coulomb_HH( double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[2604];
   double *__restrict__ X = T+1308;

   //double zab = za*zb/(za+zb);
   double t = zab*r2;
   GieseBoysFcnTemplate<11>(t,T);
   t = GieseMultipole_TWO_OVER_SQRT_PI * std::sqrt(zab);
   *T *= t;
   t *= -zab;
   T[1] *= t;
   t *= -zab;
   T[2] *= t;
   t *= -zab;
   T[3] *= t;
   t *= -zab;
   T[4] *= t;
   t *= -zab;
   T[5] *= t;
   t *= -zab;
   T[6] *= t;
   t *= -zab;
   T[7] *= t;
   t *= -zab;
   T[8] *= t;
   t *= -zab;
   T[9] *= t;
   t *= -zab;
   T[10] *= t;
   t *= -zab;
   T[11] *= t;
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HH(T+12,T+1,X);
   ExpHobGrdAcc_SS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HH<36,5>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_PS( double const *__restrict__ O, double const *__restrict__ crd, double const /* r2 */, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[7];
   double *__restrict__ X = T+3;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   X[0] = T[0];
   X[1] = 2.*T[1]*crd[2];
   X[2] = 2.*T[1]*crd[0];
   X[3] = 2.*T[1]*crd[1];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.*T[2]*crd[2];
   X[2] = 2.*T[2]*crd[0];
   X[3] = 2.*T[2]*crd[1];
   ExpHobGrdAcc_SS<4,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,0>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_PP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[36];
   double *__restrict__ X = T+20;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::ClmTranslation_PP(crd,r2,T+4);
   ExpHobMat_PP(T+4,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<4; ++i )
      {
         pa[i] += qb[j]*X[i+j*4];
         pb[j] += qa[i]*X[i+j*4];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_PP(T+4,T+1,X);
   ExpHobGrdAcc_SS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<4,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<4,1>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_DS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[22];
   double *__restrict__ X = T+13;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   ccdl::SolidHarm_Rlm_D(crd,r2,T+4);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[5];
   X[2] = -4.000000000000000e+00*T[1]*T[6];
   X[3] = -4.000000000000000e+00*T[1]*T[7];
   X[4] = 2.666666666666667e+00*T[2]*T[8];
   X[5] = -4.618802153517006e+00*T[2]*T[9];
   X[6] = -4.618802153517006e+00*T[2]*T[10];
   X[7] = 9.237604307034012e+00*T[2]*T[11];
   X[8] = 9.237604307034012e+00*T[2]*T[12];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[5];
   X[2] = -4.000000000000000e+00*T[2]*T[6];
   X[3] = -4.000000000000000e+00*T[2]*T[7];
   X[4] = 2.666666666666667e+00*T[3]*T[8];
   X[5] = -4.618802153517006e+00*T[3]*T[9];
   X[6] = -4.618802153517006e+00*T[3]*T[10];
   X[7] = 9.237604307034012e+00*T[3]*T[11];
   X[8] = 9.237604307034012e+00*T[3]*T[12];
   ExpHobGrdAcc_SS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,0>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_DP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[77];
   double *__restrict__ X = T+41;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::ClmTranslation_DP(crd,r2,T+5);
   ExpHobMat_DP(T+5,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DP(T+5,T+1,X);
   ExpHobGrdAcc_SS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,1>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_DD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[168];
   double *__restrict__ X = T+87;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_DD(crd,r2,T+6);
   ExpHobMat_DD(T+6,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<9; ++i )
      {
         pa[i] += qb[j]*X[i+j*9];
         pb[j] += qa[i]*X[i+j*9];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_DD(T+6,T+1,X);
   ExpHobGrdAcc_SS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<9,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<9,2>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_FS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[37];
   double *__restrict__ X = T+21;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   ccdl::SolidHarm_Rlm_F(crd,r2,T+5);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[6];
   X[2] = -4.000000000000000e+00*T[1]*T[7];
   X[3] = -4.000000000000000e+00*T[1]*T[8];
   X[4] = 2.666666666666667e+00*T[2]*T[9];
   X[5] = -4.618802153517006e+00*T[2]*T[10];
   X[6] = -4.618802153517006e+00*T[2]*T[11];
   X[7] = 9.237604307034012e+00*T[2]*T[12];
   X[8] = 9.237604307034012e+00*T[2]*T[13];
   X[9] = 3.200000000000000e+00*T[3]*T[14];
   X[10] = -5.225578117937446e+00*T[3]*T[15];
   X[11] = -5.225578117937446e+00*T[3]*T[16];
   X[12] = 8.262364471909157e+00*T[3]*T[17];
   X[13] = 8.262364471909157e+00*T[3]*T[18];
   X[14] = -2.023857702507763e+01*T[3]*T[19];
   X[15] = -2.023857702507763e+01*T[3]*T[20];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[6];
   X[2] = -4.000000000000000e+00*T[2]*T[7];
   X[3] = -4.000000000000000e+00*T[2]*T[8];
   X[4] = 2.666666666666667e+00*T[3]*T[9];
   X[5] = -4.618802153517006e+00*T[3]*T[10];
   X[6] = -4.618802153517006e+00*T[3]*T[11];
   X[7] = 9.237604307034012e+00*T[3]*T[12];
   X[8] = 9.237604307034012e+00*T[3]*T[13];
   X[9] = 3.200000000000000e+00*T[4]*T[14];
   X[10] = -5.225578117937446e+00*T[4]*T[15];
   X[11] = -5.225578117937446e+00*T[4]*T[16];
   X[12] = 8.262364471909157e+00*T[4]*T[17];
   X[13] = 8.262364471909157e+00*T[4]*T[18];
   X[14] = -2.023857702507763e+01*T[4]*T[19];
   X[15] = -2.023857702507763e+01*T[4]*T[20];
   ExpHobGrdAcc_SS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,0>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_FP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[134];
   double *__restrict__ X = T+70;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::ClmTranslation_FP(crd,r2,T+6);
   ExpHobMat_FP(T+6,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FP(T+6,T+1,X);
   ExpHobGrdAcc_SS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,1>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_FD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[295];
   double *__restrict__ X = T+151;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_FD(crd,r2,T+7);
   ExpHobMat_FD(T+7,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FD(T+7,T+1,X);
   ExpHobGrdAcc_SS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,2>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_FF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[520];
   double *__restrict__ X = T+264;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_FF(crd,r2,T+8);
   ExpHobMat_FF(T+8,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<16; ++i )
      {
         pa[i] += qb[j]*X[i+j*16];
         pb[j] += qa[i]*X[i+j*16];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_FF(T+8,T+1,X);
   ExpHobGrdAcc_SS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<16,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<16,3>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_GS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[56];
   double *__restrict__ X = T+31;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   ccdl::SolidHarm_Rlm_G(crd,r2,T+6);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[7];
   X[2] = -4.000000000000000e+00*T[1]*T[8];
   X[3] = -4.000000000000000e+00*T[1]*T[9];
   X[4] = 2.666666666666667e+00*T[2]*T[10];
   X[5] = -4.618802153517006e+00*T[2]*T[11];
   X[6] = -4.618802153517006e+00*T[2]*T[12];
   X[7] = 9.237604307034012e+00*T[2]*T[13];
   X[8] = 9.237604307034012e+00*T[2]*T[14];
   X[9] = 3.200000000000000e+00*T[3]*T[15];
   X[10] = -5.225578117937446e+00*T[3]*T[16];
   X[11] = -5.225578117937446e+00*T[3]*T[17];
   X[12] = 8.262364471909157e+00*T[3]*T[18];
   X[13] = 8.262364471909157e+00*T[3]*T[19];
   X[14] = -2.023857702507763e+01*T[3]*T[20];
   X[15] = -2.023857702507763e+01*T[3]*T[21];
   X[16] = 3.657142857142857e+00*T[4]*T[22];
   X[17] = -5.782450578593608e+00*T[4]*T[23];
   X[18] = -5.782450578593608e+00*T[4]*T[24];
   X[19] = 8.177620031999233e+00*T[4]*T[25];
   X[20] = 8.177620031999233e+00*T[4]*T[26];
   X[21] = -1.529892619948024e+01*T[4]*T[27];
   X[22] = -1.529892619948024e+01*T[4]*T[28];
   X[23] = 4.327189784210005e+01*T[4]*T[29];
   X[24] = 4.327189784210005e+01*T[4]*T[30];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[7];
   X[2] = -4.000000000000000e+00*T[2]*T[8];
   X[3] = -4.000000000000000e+00*T[2]*T[9];
   X[4] = 2.666666666666667e+00*T[3]*T[10];
   X[5] = -4.618802153517006e+00*T[3]*T[11];
   X[6] = -4.618802153517006e+00*T[3]*T[12];
   X[7] = 9.237604307034012e+00*T[3]*T[13];
   X[8] = 9.237604307034012e+00*T[3]*T[14];
   X[9] = 3.200000000000000e+00*T[4]*T[15];
   X[10] = -5.225578117937446e+00*T[4]*T[16];
   X[11] = -5.225578117937446e+00*T[4]*T[17];
   X[12] = 8.262364471909157e+00*T[4]*T[18];
   X[13] = 8.262364471909157e+00*T[4]*T[19];
   X[14] = -2.023857702507763e+01*T[4]*T[20];
   X[15] = -2.023857702507763e+01*T[4]*T[21];
   X[16] = 3.657142857142857e+00*T[5]*T[22];
   X[17] = -5.782450578593608e+00*T[5]*T[23];
   X[18] = -5.782450578593608e+00*T[5]*T[24];
   X[19] = 8.177620031999233e+00*T[5]*T[25];
   X[20] = 8.177620031999233e+00*T[5]*T[26];
   X[21] = -1.529892619948024e+01*T[5]*T[27];
   X[22] = -1.529892619948024e+01*T[5]*T[28];
   X[23] = 4.327189784210005e+01*T[5]*T[29];
   X[24] = 4.327189784210005e+01*T[5]*T[30];
   ExpHobGrdAcc_SS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,0>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_GP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[207];
   double *__restrict__ X = T+107;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::ClmTranslation_GP(crd,r2,T+7);
   ExpHobMat_GP(T+7,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GP(T+7,T+1,X);
   ExpHobGrdAcc_SS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,1>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_GD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[458];
   double *__restrict__ X = T+233;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_GD(crd,r2,T+8);
   ExpHobMat_GD(T+8,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GD(T+8,T+1,X);
   ExpHobGrdAcc_SS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,2>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_GF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[809];
   double *__restrict__ X = T+409;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_GF(crd,r2,T+9);
   ExpHobMat_GF(T+9,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GF(T+9,T+1,X);
   ExpHobGrdAcc_SS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,3>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_GG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1260];
   double *__restrict__ X = T+635;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_GG(crd,r2,T+10);
   ExpHobMat_GG(T+10,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<25; ++i )
      {
         pa[i] += qb[j]*X[i+j*25];
         pb[j] += qa[i]*X[i+j*25];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_GG(T+10,T+1,X);
   ExpHobGrdAcc_SS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<25,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<25,4>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HS( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[79];
   double *__restrict__ X = T+43;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   ccdl::SolidHarm_Rlm_H(crd,r2,T+7);
   X[0] = T[0];
   X[1] = 2.000000000000000e+00*T[1]*T[8];
   X[2] = -4.000000000000000e+00*T[1]*T[9];
   X[3] = -4.000000000000000e+00*T[1]*T[10];
   X[4] = 2.666666666666667e+00*T[2]*T[11];
   X[5] = -4.618802153517006e+00*T[2]*T[12];
   X[6] = -4.618802153517006e+00*T[2]*T[13];
   X[7] = 9.237604307034012e+00*T[2]*T[14];
   X[8] = 9.237604307034012e+00*T[2]*T[15];
   X[9] = 3.200000000000000e+00*T[3]*T[16];
   X[10] = -5.225578117937446e+00*T[3]*T[17];
   X[11] = -5.225578117937446e+00*T[3]*T[18];
   X[12] = 8.262364471909157e+00*T[3]*T[19];
   X[13] = 8.262364471909157e+00*T[3]*T[20];
   X[14] = -2.023857702507763e+01*T[3]*T[21];
   X[15] = -2.023857702507763e+01*T[3]*T[22];
   X[16] = 3.657142857142857e+00*T[4]*T[23];
   X[17] = -5.782450578593608e+00*T[4]*T[24];
   X[18] = -5.782450578593608e+00*T[4]*T[25];
   X[19] = 8.177620031999233e+00*T[4]*T[26];
   X[20] = 8.177620031999233e+00*T[4]*T[27];
   X[21] = -1.529892619948024e+01*T[4]*T[28];
   X[22] = -1.529892619948024e+01*T[4]*T[29];
   X[23] = 4.327189784210005e+01*T[4]*T[30];
   X[24] = 4.327189784210005e+01*T[4]*T[31];
   X[25] = 4.063492063492064e+00*T[5]*T[32];
   X[26] = -6.295134835740310e+00*T[5]*T[33];
   X[27] = -6.295134835740310e+00*T[5]*T[34];
   X[28] = 8.327680622494151e+00*T[5]*T[35];
   X[29] = 8.327680622494151e+00*T[5]*T[36];
   X[30] = -1.359904551064910e+01*T[5]*T[37];
   X[31] = -1.359904551064910e+01*T[5]*T[38];
   X[32] = 2.884793189473337e+01*T[5]*T[39];
   X[33] = 2.884793189473337e+01*T[5]*T[40];
   X[34] = -9.122517057277419e+01*T[5]*T[41];
   X[35] = -9.122517057277419e+01*T[5]*T[42];
   for ( int j=0; j<1; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   X[0] = T[1];
   X[1] = 2.000000000000000e+00*T[2]*T[8];
   X[2] = -4.000000000000000e+00*T[2]*T[9];
   X[3] = -4.000000000000000e+00*T[2]*T[10];
   X[4] = 2.666666666666667e+00*T[3]*T[11];
   X[5] = -4.618802153517006e+00*T[3]*T[12];
   X[6] = -4.618802153517006e+00*T[3]*T[13];
   X[7] = 9.237604307034012e+00*T[3]*T[14];
   X[8] = 9.237604307034012e+00*T[3]*T[15];
   X[9] = 3.200000000000000e+00*T[4]*T[16];
   X[10] = -5.225578117937446e+00*T[4]*T[17];
   X[11] = -5.225578117937446e+00*T[4]*T[18];
   X[12] = 8.262364471909157e+00*T[4]*T[19];
   X[13] = 8.262364471909157e+00*T[4]*T[20];
   X[14] = -2.023857702507763e+01*T[4]*T[21];
   X[15] = -2.023857702507763e+01*T[4]*T[22];
   X[16] = 3.657142857142857e+00*T[5]*T[23];
   X[17] = -5.782450578593608e+00*T[5]*T[24];
   X[18] = -5.782450578593608e+00*T[5]*T[25];
   X[19] = 8.177620031999233e+00*T[5]*T[26];
   X[20] = 8.177620031999233e+00*T[5]*T[27];
   X[21] = -1.529892619948024e+01*T[5]*T[28];
   X[22] = -1.529892619948024e+01*T[5]*T[29];
   X[23] = 4.327189784210005e+01*T[5]*T[30];
   X[24] = 4.327189784210005e+01*T[5]*T[31];
   X[25] = 4.063492063492064e+00*T[6]*T[32];
   X[26] = -6.295134835740310e+00*T[6]*T[33];
   X[27] = -6.295134835740310e+00*T[6]*T[34];
   X[28] = 8.327680622494151e+00*T[6]*T[35];
   X[29] = 8.327680622494151e+00*T[6]*T[36];
   X[30] = -1.359904551064910e+01*T[6]*T[37];
   X[31] = -1.359904551064910e+01*T[6]*T[38];
   X[32] = 2.884793189473337e+01*T[6]*T[39];
   X[33] = 2.884793189473337e+01*T[6]*T[40];
   X[34] = -9.122517057277419e+01*T[6]*T[41];
   X[35] = -9.122517057277419e+01*T[6]*T[42];
   ExpHobGrdAcc_SS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,0>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,0>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HP( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[296];
   double *__restrict__ X = T+152;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   ccdl::ClmTranslation_HP(crd,r2,T+8);
   ExpHobMat_HP(T+8,T,X);
   for ( int j=0; j<4; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HP(T+8,T+1,X);
   ExpHobGrdAcc_SS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,1>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,1>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HD( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[657];
   double *__restrict__ X = T+333;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   ccdl::ClmTranslation_HD(crd,r2,T+9);
   ExpHobMat_HD(T+9,T,X);
   for ( int j=0; j<9; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HD(T+9,T+1,X);
   ExpHobGrdAcc_SS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,2>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,2>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HF( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1162];
   double *__restrict__ X = T+586;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   ccdl::ClmTranslation_HF(crd,r2,T+10);
   ExpHobMat_HF(T+10,T,X);
   for ( int j=0; j<16; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HF(T+10,T+1,X);
   ExpHobGrdAcc_SS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,3>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,3>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HG( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[1811];
   double *__restrict__ X = T+911;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   ccdl::ClmTranslation_HG(crd,r2,T+11);
   ExpHobMat_HG(T+11,T,X);
   for ( int j=0; j<25; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HG(T+11,T+1,X);
   ExpHobGrdAcc_SS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,4>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,4>(tcrd,qa,qb,X,G);
}

void ccdl::ExpPotGrd_UserAux_HH( double const *__restrict__ O, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ G )
{
   double T[2604];
   double *__restrict__ X = T+1308;
   T[0] = O[0];
   T[1] = O[1];
   T[2] = O[2];
   T[3] = O[3];
   T[4] = O[4];
   T[5] = O[5];
   T[6] = O[6];
   T[7] = O[7];
   T[8] = O[8];
   T[9] = O[9];
   T[10] = O[10];
   T[11] = O[11];
   ccdl::ClmTranslation_HH(crd,r2,T+12);
   ExpHobMat_HH(T+12,T,X);
   for ( int j=0; j<36; ++j )
      for ( int i=0; i<36; ++i )
      {
         pa[i] += qb[j]*X[i+j*36];
         pb[j] += qa[i]*X[i+j*36];
      };
   double tcrd[] = { 2.*crd[0], 2.*crd[1], 2.*crd[2] };
   G[0] = 0.; G[1] = 0.; G[2] = 0.;
   ExpHobMat_HH(T+12,T+1,X);
   ExpHobGrdAcc_SS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HS<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_PP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HP<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_DD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HD<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_FF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HF<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_GG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HG<36,5>(tcrd,qa,qb,X,G);
   ExpHobGrdAcc_HH<36,5>(tcrd,qa,qb,X,G);
}

void ccdl::SolidHarm_Rlm_Switch( int const lmax, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   switch(lmax) {
      case (0): ccdl::SolidHarm_Rlm_S(crd,r2,X); break;
      case (1): ccdl::SolidHarm_Rlm_P(crd,r2,X); break;
      case (2): ccdl::SolidHarm_Rlm_D(crd,r2,X); break;
      case (3): ccdl::SolidHarm_Rlm_F(crd,r2,X); break;
      case (4): ccdl::SolidHarm_Rlm_G(crd,r2,X); break;
      case (5): ccdl::SolidHarm_Rlm_H(crd,r2,X); break;
      case (6): ccdl::SolidHarm_Rlm_I(crd,r2,X); break;
      case (7): ccdl::SolidHarm_Rlm_J(crd,r2,X); break;
      case (8): ccdl::SolidHarm_Rlm_K(crd,r2,X); break;
      case (9): ccdl::SolidHarm_Rlm_L(crd,r2,X); break;
      case (10): ccdl::SolidHarm_Rlm_M(crd,r2,X); break;
      default: std::cerr << "ccdl::%s_Switch : Invalid lmax " << lmax << std::endl;
   }
}

void ccdl::ClmTranslation_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
 int n = (la+1)*(la+1)*(lb+1)*(lb+1); for ( int i=0; i<n; ++i ) X[i] = 0.;
   if ( la == 0 and lb == 0 ) { ccdl::ClmTranslation_SS(crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::ClmTranslation_PS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::ClmTranslation_PP(crd,r2,X); }
      else {  std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::ClmTranslation_DS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::ClmTranslation_DP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::ClmTranslation_DD(crd,r2,X); }
      else {  std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::ClmTranslation_FS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::ClmTranslation_FP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::ClmTranslation_FD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::ClmTranslation_FF(crd,r2,X); }
      else {  std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::ClmTranslation_GS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::ClmTranslation_GP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::ClmTranslation_GD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::ClmTranslation_GF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::ClmTranslation_GG(crd,r2,X); }
      else {  std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::ClmTranslation_HS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::ClmTranslation_HP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::ClmTranslation_HD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::ClmTranslation_HF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::ClmTranslation_HG(crd,r2,X); }
      else if ( lb == 5 ) { ccdl::ClmTranslation_HH(crd,r2,X); }
      else {  std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::ClmTranslation_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpInt_Overlap_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpInt_Overlap_SS(zab,crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Overlap_PS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Overlap_PP(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Overlap_DS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Overlap_DP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Overlap_DD(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Overlap_FS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Overlap_FP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Overlap_FD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Overlap_FF(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Overlap_GS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Overlap_GP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Overlap_GD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Overlap_GF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Overlap_GG(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Overlap_HS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Overlap_HP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Overlap_HD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Overlap_HF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Overlap_HG(zab,crd,r2,X); }
      else if ( lb == 5 ) { ccdl::PrimGauExpInt_Overlap_HH(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpInt_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpInt_Ewald_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpInt_Ewald_SS(zab,crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Ewald_PS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Ewald_PP(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Ewald_DS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Ewald_DP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Ewald_DD(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Ewald_FS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Ewald_FP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Ewald_FD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Ewald_FF(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Ewald_GS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Ewald_GP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Ewald_GD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Ewald_GF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Ewald_GG(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Ewald_HS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Ewald_HP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Ewald_HD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Ewald_HF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Ewald_HG(zab,crd,r2,X); }
      else if ( lb == 5 ) { ccdl::PrimGauExpInt_Ewald_HH(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpInt_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpInt_Coulomb_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_SS(zab,crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_PS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Coulomb_PP(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_DS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Coulomb_DP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Coulomb_DD(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_FS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Coulomb_FP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Coulomb_FD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Coulomb_FF(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_GS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Coulomb_GP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Coulomb_GD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Coulomb_GF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Coulomb_GG(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpInt_Coulomb_HS(zab,crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PrimGauExpInt_Coulomb_HP(zab,crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PrimGauExpInt_Coulomb_HD(zab,crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PrimGauExpInt_Coulomb_HF(zab,crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PrimGauExpInt_Coulomb_HG(zab,crd,r2,X); }
      else if ( lb == 5 ) { ccdl::PrimGauExpInt_Coulomb_HH(zab,crd,r2,X); }
      else {  std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpInt_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpGrd_Overlap_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double * G )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_SS(zab,crd,r2,X,G); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_PS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Overlap_PP(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_DS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Overlap_DP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Overlap_DD(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_FS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Overlap_FP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Overlap_FD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Overlap_FF(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_GS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Overlap_GP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Overlap_GD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Overlap_GF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Overlap_GG(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Overlap_HS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Overlap_HP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Overlap_HD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Overlap_HF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Overlap_HG(zab,crd,r2,X,G); }
      else if ( lb == 5 ) { ccdl::PrimGauExpGrd_Overlap_HH(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpGrd_Ewald_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double * G )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_SS(zab,crd,r2,X,G); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_PS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Ewald_PP(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_DS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Ewald_DP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Ewald_DD(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_FS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Ewald_FP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Ewald_FD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Ewald_FF(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_GS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Ewald_GP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Ewald_GD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Ewald_GF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Ewald_GG(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Ewald_HS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Ewald_HP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Ewald_HD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Ewald_HF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Ewald_HG(zab,crd,r2,X,G); }
      else if ( lb == 5 ) { ccdl::PrimGauExpGrd_Ewald_HH(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpGrd_Coulomb_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double *__restrict__ X, double * G )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_SS(zab,crd,r2,X,G); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_PS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Coulomb_PP(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_DS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Coulomb_DP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Coulomb_DD(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_FS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Coulomb_FP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Coulomb_FD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Coulomb_FF(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_GS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Coulomb_GP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Coulomb_GD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Coulomb_GF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Coulomb_GG(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpGrd_Coulomb_HS(zab,crd,r2,X,G); }
      else if ( lb == 1 ) { ccdl::PrimGauExpGrd_Coulomb_HP(zab,crd,r2,X,G); }
      else if ( lb == 2 ) { ccdl::PrimGauExpGrd_Coulomb_HD(zab,crd,r2,X,G); }
      else if ( lb == 3 ) { ccdl::PrimGauExpGrd_Coulomb_HF(zab,crd,r2,X,G); }
      else if ( lb == 4 ) { ccdl::PrimGauExpGrd_Coulomb_HG(zab,crd,r2,X,G); }
      else if ( lb == 5 ) { ccdl::PrimGauExpGrd_Coulomb_HH(zab,crd,r2,X,G); }
      else {  std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPot_Overlap_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPot_Overlap_SS(zab,crd,r2,qa,qb,pa,pb); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Overlap_PS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Overlap_PP(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Overlap_DS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Overlap_DP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Overlap_DD(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Overlap_FS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Overlap_FP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Overlap_FD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Overlap_FF(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Overlap_GS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Overlap_GP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Overlap_GD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Overlap_GF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Overlap_GG(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Overlap_HS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Overlap_HP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Overlap_HD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Overlap_HF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Overlap_HG(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPot_Overlap_HH(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPot_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPot_Ewald_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPot_Ewald_SS(zab,crd,r2,qa,qb,pa,pb); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Ewald_PS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Ewald_PP(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Ewald_DS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Ewald_DP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Ewald_DD(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Ewald_FS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Ewald_FP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Ewald_FD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Ewald_FF(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Ewald_GS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Ewald_GP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Ewald_GD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Ewald_GF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Ewald_GG(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Ewald_HS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Ewald_HP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Ewald_HD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Ewald_HF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Ewald_HG(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPot_Ewald_HH(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPot_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPot_Coulomb_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_SS(zab,crd,r2,qa,qb,pa,pb); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_PS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Coulomb_PP(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_DS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Coulomb_DP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Coulomb_DD(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_FS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Coulomb_FP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Coulomb_FD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Coulomb_FF(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_GS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Coulomb_GP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Coulomb_GD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Coulomb_GF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Coulomb_GG(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPot_Coulomb_HS(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPot_Coulomb_HP(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPot_Coulomb_HD(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPot_Coulomb_HF(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPot_Coulomb_HG(zab,crd,r2,qa,qb,pa,pb); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPot_Coulomb_HH(zab,crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPot_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPotGrd_Overlap_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ grd )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_SS(zab,crd,r2,qa,qb,pa,pb,grd); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_PS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Overlap_PP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_DS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Overlap_DP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Overlap_DD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_FS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Overlap_FP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Overlap_FD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Overlap_FF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_GS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Overlap_GP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Overlap_GD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Overlap_GF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Overlap_GG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Overlap_HS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Overlap_HP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Overlap_HD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Overlap_HF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Overlap_HG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPotGrd_Overlap_HH(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPotGrd_Overlap_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPotGrd_Ewald_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ grd )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_SS(zab,crd,r2,qa,qb,pa,pb,grd); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_PS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Ewald_PP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_DS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Ewald_DP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Ewald_DD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_FS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Ewald_FP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Ewald_FD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Ewald_FF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_GS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Ewald_GP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Ewald_GD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Ewald_GF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Ewald_GG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Ewald_HS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Ewald_HP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Ewald_HD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Ewald_HF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Ewald_HG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPotGrd_Ewald_HH(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPotGrd_Ewald_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PrimGauExpPotGrd_Coulomb_Switch( int const la, int const lb, double const zab, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ grd )
{
   if ( la == 0 and lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_SS(zab,crd,r2,qa,qb,pa,pb,grd); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_PS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Coulomb_PP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_DS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Coulomb_DP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Coulomb_DD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_FS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Coulomb_FP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Coulomb_FD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Coulomb_FF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_GS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Coulomb_GP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Coulomb_GD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Coulomb_GF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Coulomb_GG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PrimGauExpPotGrd_Coulomb_HS(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PrimGauExpPotGrd_Coulomb_HP(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PrimGauExpPotGrd_Coulomb_HD(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PrimGauExpPotGrd_Coulomb_HF(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PrimGauExpPotGrd_Coulomb_HG(zab,crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 5 ) { ccdl::PrimGauExpPotGrd_Coulomb_HH(zab,crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PrimGauExpPotGrd_Coulomb_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}


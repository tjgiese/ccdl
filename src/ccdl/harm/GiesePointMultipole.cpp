#include "GiesePointMultipole.hpp"
#include <cmath>
#include <iostream>

void ccdl::SolidHarm_Ilm_F( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
}

void ccdl::SolidHarm_Ilm_G( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
}

void ccdl::SolidHarm_Ilm_H( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
}

void ccdl::SolidHarm_Ilm_I( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
}

void ccdl::SolidHarm_Ilm_J( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
   a = 13.0*crd[2]*oor2;
   Y[49] = a*Y[36] - 36.0*oor2*Y[25];
   Y[50] = a*Y[37] - 35.0*oor2*Y[26];
   Y[51] = a*Y[38] - 35.0*oor2*Y[27];
   Y[52] = a*Y[39] - 32.0*oor2*Y[28];
   Y[53] = a*Y[40] - 32.0*oor2*Y[29];
   Y[54] = a*Y[41] - 27.0*oor2*Y[30];
   Y[55] = a*Y[42] - 27.0*oor2*Y[31];
   Y[56] = a*Y[43] - 20.0*oor2*Y[32];
   Y[57] = a*Y[44] - 20.0*oor2*Y[33];
   Y[58] = a*Y[45] - 11.0*oor2*Y[34];
   Y[59] = a*Y[46] - 11.0*oor2*Y[35];
   Y[60] = a*Y[47];
   Y[61] = a*Y[48];
   Y[62] =  13.0*oor2 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -13.0*oor2 * (crd[1]*Y[47]+crd[0]*Y[48]);
}

void ccdl::SolidHarm_Ilm_K( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
   a = 13.0*crd[2]*oor2;
   Y[49] = a*Y[36] - 36.0*oor2*Y[25];
   Y[50] = a*Y[37] - 35.0*oor2*Y[26];
   Y[51] = a*Y[38] - 35.0*oor2*Y[27];
   Y[52] = a*Y[39] - 32.0*oor2*Y[28];
   Y[53] = a*Y[40] - 32.0*oor2*Y[29];
   Y[54] = a*Y[41] - 27.0*oor2*Y[30];
   Y[55] = a*Y[42] - 27.0*oor2*Y[31];
   Y[56] = a*Y[43] - 20.0*oor2*Y[32];
   Y[57] = a*Y[44] - 20.0*oor2*Y[33];
   Y[58] = a*Y[45] - 11.0*oor2*Y[34];
   Y[59] = a*Y[46] - 11.0*oor2*Y[35];
   Y[60] = a*Y[47];
   Y[61] = a*Y[48];
   Y[62] =  13.0*oor2 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -13.0*oor2 * (crd[1]*Y[47]+crd[0]*Y[48]);
   a = 15.0*crd[2]*oor2;
   Y[64] = a*Y[49] - 49.0*oor2*Y[36];
   Y[65] = a*Y[50] - 48.0*oor2*Y[37];
   Y[66] = a*Y[51] - 48.0*oor2*Y[38];
   Y[67] = a*Y[52] - 45.0*oor2*Y[39];
   Y[68] = a*Y[53] - 45.0*oor2*Y[40];
   Y[69] = a*Y[54] - 40.0*oor2*Y[41];
   Y[70] = a*Y[55] - 40.0*oor2*Y[42];
   Y[71] = a*Y[56] - 33.0*oor2*Y[43];
   Y[72] = a*Y[57] - 33.0*oor2*Y[44];
   Y[73] = a*Y[58] - 24.0*oor2*Y[45];
   Y[74] = a*Y[59] - 24.0*oor2*Y[46];
   Y[75] = a*Y[60] - 13.0*oor2*Y[47];
   Y[76] = a*Y[61] - 13.0*oor2*Y[48];
   Y[77] = a*Y[62];
   Y[78] = a*Y[63];
   Y[79] =  15.0*oor2 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -15.0*oor2 * (crd[1]*Y[62]+crd[0]*Y[63]);
}

void ccdl::SolidHarm_Ilm_L( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
   a = 13.0*crd[2]*oor2;
   Y[49] = a*Y[36] - 36.0*oor2*Y[25];
   Y[50] = a*Y[37] - 35.0*oor2*Y[26];
   Y[51] = a*Y[38] - 35.0*oor2*Y[27];
   Y[52] = a*Y[39] - 32.0*oor2*Y[28];
   Y[53] = a*Y[40] - 32.0*oor2*Y[29];
   Y[54] = a*Y[41] - 27.0*oor2*Y[30];
   Y[55] = a*Y[42] - 27.0*oor2*Y[31];
   Y[56] = a*Y[43] - 20.0*oor2*Y[32];
   Y[57] = a*Y[44] - 20.0*oor2*Y[33];
   Y[58] = a*Y[45] - 11.0*oor2*Y[34];
   Y[59] = a*Y[46] - 11.0*oor2*Y[35];
   Y[60] = a*Y[47];
   Y[61] = a*Y[48];
   Y[62] =  13.0*oor2 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -13.0*oor2 * (crd[1]*Y[47]+crd[0]*Y[48]);
   a = 15.0*crd[2]*oor2;
   Y[64] = a*Y[49] - 49.0*oor2*Y[36];
   Y[65] = a*Y[50] - 48.0*oor2*Y[37];
   Y[66] = a*Y[51] - 48.0*oor2*Y[38];
   Y[67] = a*Y[52] - 45.0*oor2*Y[39];
   Y[68] = a*Y[53] - 45.0*oor2*Y[40];
   Y[69] = a*Y[54] - 40.0*oor2*Y[41];
   Y[70] = a*Y[55] - 40.0*oor2*Y[42];
   Y[71] = a*Y[56] - 33.0*oor2*Y[43];
   Y[72] = a*Y[57] - 33.0*oor2*Y[44];
   Y[73] = a*Y[58] - 24.0*oor2*Y[45];
   Y[74] = a*Y[59] - 24.0*oor2*Y[46];
   Y[75] = a*Y[60] - 13.0*oor2*Y[47];
   Y[76] = a*Y[61] - 13.0*oor2*Y[48];
   Y[77] = a*Y[62];
   Y[78] = a*Y[63];
   Y[79] =  15.0*oor2 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -15.0*oor2 * (crd[1]*Y[62]+crd[0]*Y[63]);
   a = 17.0*crd[2]*oor2;
   Y[81] = a*Y[64] - 64.0*oor2*Y[49];
   Y[82] = a*Y[65] - 63.0*oor2*Y[50];
   Y[83] = a*Y[66] - 63.0*oor2*Y[51];
   Y[84] = a*Y[67] - 60.0*oor2*Y[52];
   Y[85] = a*Y[68] - 60.0*oor2*Y[53];
   Y[86] = a*Y[69] - 55.0*oor2*Y[54];
   Y[87] = a*Y[70] - 55.0*oor2*Y[55];
   Y[88] = a*Y[71] - 48.0*oor2*Y[56];
   Y[89] = a*Y[72] - 48.0*oor2*Y[57];
   Y[90] = a*Y[73] - 39.0*oor2*Y[58];
   Y[91] = a*Y[74] - 39.0*oor2*Y[59];
   Y[92] = a*Y[75] - 28.0*oor2*Y[60];
   Y[93] = a*Y[76] - 28.0*oor2*Y[61];
   Y[94] = a*Y[77] - 15.0*oor2*Y[62];
   Y[95] = a*Y[78] - 15.0*oor2*Y[63];
   Y[96] = a*Y[79];
   Y[97] = a*Y[80];
   Y[98] =  17.0*oor2 * (crd[1]*Y[80]-crd[0]*Y[79]);
   Y[99] = -17.0*oor2 * (crd[1]*Y[79]+crd[0]*Y[80]);
}

void ccdl::SolidHarm_Ilm_M( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
   a = 13.0*crd[2]*oor2;
   Y[49] = a*Y[36] - 36.0*oor2*Y[25];
   Y[50] = a*Y[37] - 35.0*oor2*Y[26];
   Y[51] = a*Y[38] - 35.0*oor2*Y[27];
   Y[52] = a*Y[39] - 32.0*oor2*Y[28];
   Y[53] = a*Y[40] - 32.0*oor2*Y[29];
   Y[54] = a*Y[41] - 27.0*oor2*Y[30];
   Y[55] = a*Y[42] - 27.0*oor2*Y[31];
   Y[56] = a*Y[43] - 20.0*oor2*Y[32];
   Y[57] = a*Y[44] - 20.0*oor2*Y[33];
   Y[58] = a*Y[45] - 11.0*oor2*Y[34];
   Y[59] = a*Y[46] - 11.0*oor2*Y[35];
   Y[60] = a*Y[47];
   Y[61] = a*Y[48];
   Y[62] =  13.0*oor2 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -13.0*oor2 * (crd[1]*Y[47]+crd[0]*Y[48]);
   a = 15.0*crd[2]*oor2;
   Y[64] = a*Y[49] - 49.0*oor2*Y[36];
   Y[65] = a*Y[50] - 48.0*oor2*Y[37];
   Y[66] = a*Y[51] - 48.0*oor2*Y[38];
   Y[67] = a*Y[52] - 45.0*oor2*Y[39];
   Y[68] = a*Y[53] - 45.0*oor2*Y[40];
   Y[69] = a*Y[54] - 40.0*oor2*Y[41];
   Y[70] = a*Y[55] - 40.0*oor2*Y[42];
   Y[71] = a*Y[56] - 33.0*oor2*Y[43];
   Y[72] = a*Y[57] - 33.0*oor2*Y[44];
   Y[73] = a*Y[58] - 24.0*oor2*Y[45];
   Y[74] = a*Y[59] - 24.0*oor2*Y[46];
   Y[75] = a*Y[60] - 13.0*oor2*Y[47];
   Y[76] = a*Y[61] - 13.0*oor2*Y[48];
   Y[77] = a*Y[62];
   Y[78] = a*Y[63];
   Y[79] =  15.0*oor2 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -15.0*oor2 * (crd[1]*Y[62]+crd[0]*Y[63]);
   a = 17.0*crd[2]*oor2;
   Y[81] = a*Y[64] - 64.0*oor2*Y[49];
   Y[82] = a*Y[65] - 63.0*oor2*Y[50];
   Y[83] = a*Y[66] - 63.0*oor2*Y[51];
   Y[84] = a*Y[67] - 60.0*oor2*Y[52];
   Y[85] = a*Y[68] - 60.0*oor2*Y[53];
   Y[86] = a*Y[69] - 55.0*oor2*Y[54];
   Y[87] = a*Y[70] - 55.0*oor2*Y[55];
   Y[88] = a*Y[71] - 48.0*oor2*Y[56];
   Y[89] = a*Y[72] - 48.0*oor2*Y[57];
   Y[90] = a*Y[73] - 39.0*oor2*Y[58];
   Y[91] = a*Y[74] - 39.0*oor2*Y[59];
   Y[92] = a*Y[75] - 28.0*oor2*Y[60];
   Y[93] = a*Y[76] - 28.0*oor2*Y[61];
   Y[94] = a*Y[77] - 15.0*oor2*Y[62];
   Y[95] = a*Y[78] - 15.0*oor2*Y[63];
   Y[96] = a*Y[79];
   Y[97] = a*Y[80];
   Y[98] =  17.0*oor2 * (crd[1]*Y[80]-crd[0]*Y[79]);
   Y[99] = -17.0*oor2 * (crd[1]*Y[79]+crd[0]*Y[80]);
   a = 19.0*crd[2]*oor2;
   Y[100] = a*Y[81] - 81.0*oor2*Y[64];
   Y[101] = a*Y[82] - 80.0*oor2*Y[65];
   Y[102] = a*Y[83] - 80.0*oor2*Y[66];
   Y[103] = a*Y[84] - 77.0*oor2*Y[67];
   Y[104] = a*Y[85] - 77.0*oor2*Y[68];
   Y[105] = a*Y[86] - 72.0*oor2*Y[69];
   Y[106] = a*Y[87] - 72.0*oor2*Y[70];
   Y[107] = a*Y[88] - 65.0*oor2*Y[71];
   Y[108] = a*Y[89] - 65.0*oor2*Y[72];
   Y[109] = a*Y[90] - 56.0*oor2*Y[73];
   Y[110] = a*Y[91] - 56.0*oor2*Y[74];
   Y[111] = a*Y[92] - 45.0*oor2*Y[75];
   Y[112] = a*Y[93] - 45.0*oor2*Y[76];
   Y[113] = a*Y[94] - 32.0*oor2*Y[77];
   Y[114] = a*Y[95] - 32.0*oor2*Y[78];
   Y[115] = a*Y[96] - 17.0*oor2*Y[79];
   Y[116] = a*Y[97] - 17.0*oor2*Y[80];
   Y[117] = a*Y[98];
   Y[118] = a*Y[99];
   Y[119] =  19.0*oor2 * (crd[1]*Y[99]-crd[0]*Y[98]);
   Y[120] = -19.0*oor2 * (crd[1]*Y[98]+crd[0]*Y[99]);
}

void ccdl::SolidHarm_Ilm_N( double const *__restrict__ crd, double const r2, double *__restrict__ Y )
{
   double const oor2 = 1. / r2;
   Y[0] = std::sqrt(oor2);
   double a = oor2*Y[0];
   Y[1] = a * crd[2];
   Y[2] = -a * crd[0];
   Y[3] = -a * crd[1];
   a = 3. * oor2 * crd[2];
   Y[4] = a * Y[1] - oor2 * Y[0];
   Y[5] = a * Y[2];
   Y[6] = a * Y[3];
   Y[7] =  3.*oor2 * (crd[1]*Y[3]-crd[0]*Y[2]);
   Y[8] = -6.*oor2 * crd[0]*Y[3];
   a = 5.0*crd[2]*oor2;
   Y[9] = a*Y[4] - 4.0*oor2*Y[1];
   Y[10] = a*Y[5] - 3.0*oor2*Y[2];
   Y[11] = a*Y[6] - 3.0*oor2*Y[3];
   Y[12] = a*Y[7];
   Y[13] = a*Y[8];
   Y[14] =  5.0*oor2 * (crd[1]*Y[8]-crd[0]*Y[7]);
   Y[15] = -5.0*oor2 * (crd[1]*Y[7]+crd[0]*Y[8]);
   a = 7.0*crd[2]*oor2;
   Y[16] = a*Y[9] - 9.0*oor2*Y[4];
   Y[17] = a*Y[10] - 8.0*oor2*Y[5];
   Y[18] = a*Y[11] - 8.0*oor2*Y[6];
   Y[19] = a*Y[12] - 5.0*oor2*Y[7];
   Y[20] = a*Y[13] - 5.0*oor2*Y[8];
   Y[21] = a*Y[14];
   Y[22] = a*Y[15];
   Y[23] =  7.0*oor2 * (crd[1]*Y[15]-crd[0]*Y[14]);
   Y[24] = -7.0*oor2 * (crd[1]*Y[14]+crd[0]*Y[15]);
   a = 9.0*crd[2]*oor2;
   Y[25] = a*Y[16] - 16.0*oor2*Y[9];
   Y[26] = a*Y[17] - 15.0*oor2*Y[10];
   Y[27] = a*Y[18] - 15.0*oor2*Y[11];
   Y[28] = a*Y[19] - 12.0*oor2*Y[12];
   Y[29] = a*Y[20] - 12.0*oor2*Y[13];
   Y[30] = a*Y[21] - 7.0*oor2*Y[14];
   Y[31] = a*Y[22] - 7.0*oor2*Y[15];
   Y[32] = a*Y[23];
   Y[33] = a*Y[24];
   Y[34] =  9.0*oor2 * (crd[1]*Y[24]-crd[0]*Y[23]);
   Y[35] = -9.0*oor2 * (crd[1]*Y[23]+crd[0]*Y[24]);
   a = 11.0*crd[2]*oor2;
   Y[36] = a*Y[25] - 25.0*oor2*Y[16];
   Y[37] = a*Y[26] - 24.0*oor2*Y[17];
   Y[38] = a*Y[27] - 24.0*oor2*Y[18];
   Y[39] = a*Y[28] - 21.0*oor2*Y[19];
   Y[40] = a*Y[29] - 21.0*oor2*Y[20];
   Y[41] = a*Y[30] - 16.0*oor2*Y[21];
   Y[42] = a*Y[31] - 16.0*oor2*Y[22];
   Y[43] = a*Y[32] - 9.0*oor2*Y[23];
   Y[44] = a*Y[33] - 9.0*oor2*Y[24];
   Y[45] = a*Y[34];
   Y[46] = a*Y[35];
   Y[47] =  11.0*oor2 * (crd[1]*Y[35]-crd[0]*Y[34]);
   Y[48] = -11.0*oor2 * (crd[1]*Y[34]+crd[0]*Y[35]);
   a = 13.0*crd[2]*oor2;
   Y[49] = a*Y[36] - 36.0*oor2*Y[25];
   Y[50] = a*Y[37] - 35.0*oor2*Y[26];
   Y[51] = a*Y[38] - 35.0*oor2*Y[27];
   Y[52] = a*Y[39] - 32.0*oor2*Y[28];
   Y[53] = a*Y[40] - 32.0*oor2*Y[29];
   Y[54] = a*Y[41] - 27.0*oor2*Y[30];
   Y[55] = a*Y[42] - 27.0*oor2*Y[31];
   Y[56] = a*Y[43] - 20.0*oor2*Y[32];
   Y[57] = a*Y[44] - 20.0*oor2*Y[33];
   Y[58] = a*Y[45] - 11.0*oor2*Y[34];
   Y[59] = a*Y[46] - 11.0*oor2*Y[35];
   Y[60] = a*Y[47];
   Y[61] = a*Y[48];
   Y[62] =  13.0*oor2 * (crd[1]*Y[48]-crd[0]*Y[47]);
   Y[63] = -13.0*oor2 * (crd[1]*Y[47]+crd[0]*Y[48]);
   a = 15.0*crd[2]*oor2;
   Y[64] = a*Y[49] - 49.0*oor2*Y[36];
   Y[65] = a*Y[50] - 48.0*oor2*Y[37];
   Y[66] = a*Y[51] - 48.0*oor2*Y[38];
   Y[67] = a*Y[52] - 45.0*oor2*Y[39];
   Y[68] = a*Y[53] - 45.0*oor2*Y[40];
   Y[69] = a*Y[54] - 40.0*oor2*Y[41];
   Y[70] = a*Y[55] - 40.0*oor2*Y[42];
   Y[71] = a*Y[56] - 33.0*oor2*Y[43];
   Y[72] = a*Y[57] - 33.0*oor2*Y[44];
   Y[73] = a*Y[58] - 24.0*oor2*Y[45];
   Y[74] = a*Y[59] - 24.0*oor2*Y[46];
   Y[75] = a*Y[60] - 13.0*oor2*Y[47];
   Y[76] = a*Y[61] - 13.0*oor2*Y[48];
   Y[77] = a*Y[62];
   Y[78] = a*Y[63];
   Y[79] =  15.0*oor2 * (crd[1]*Y[63]-crd[0]*Y[62]);
   Y[80] = -15.0*oor2 * (crd[1]*Y[62]+crd[0]*Y[63]);
   a = 17.0*crd[2]*oor2;
   Y[81] = a*Y[64] - 64.0*oor2*Y[49];
   Y[82] = a*Y[65] - 63.0*oor2*Y[50];
   Y[83] = a*Y[66] - 63.0*oor2*Y[51];
   Y[84] = a*Y[67] - 60.0*oor2*Y[52];
   Y[85] = a*Y[68] - 60.0*oor2*Y[53];
   Y[86] = a*Y[69] - 55.0*oor2*Y[54];
   Y[87] = a*Y[70] - 55.0*oor2*Y[55];
   Y[88] = a*Y[71] - 48.0*oor2*Y[56];
   Y[89] = a*Y[72] - 48.0*oor2*Y[57];
   Y[90] = a*Y[73] - 39.0*oor2*Y[58];
   Y[91] = a*Y[74] - 39.0*oor2*Y[59];
   Y[92] = a*Y[75] - 28.0*oor2*Y[60];
   Y[93] = a*Y[76] - 28.0*oor2*Y[61];
   Y[94] = a*Y[77] - 15.0*oor2*Y[62];
   Y[95] = a*Y[78] - 15.0*oor2*Y[63];
   Y[96] = a*Y[79];
   Y[97] = a*Y[80];
   Y[98] =  17.0*oor2 * (crd[1]*Y[80]-crd[0]*Y[79]);
   Y[99] = -17.0*oor2 * (crd[1]*Y[79]+crd[0]*Y[80]);
   a = 19.0*crd[2]*oor2;
   Y[100] = a*Y[81] - 81.0*oor2*Y[64];
   Y[101] = a*Y[82] - 80.0*oor2*Y[65];
   Y[102] = a*Y[83] - 80.0*oor2*Y[66];
   Y[103] = a*Y[84] - 77.0*oor2*Y[67];
   Y[104] = a*Y[85] - 77.0*oor2*Y[68];
   Y[105] = a*Y[86] - 72.0*oor2*Y[69];
   Y[106] = a*Y[87] - 72.0*oor2*Y[70];
   Y[107] = a*Y[88] - 65.0*oor2*Y[71];
   Y[108] = a*Y[89] - 65.0*oor2*Y[72];
   Y[109] = a*Y[90] - 56.0*oor2*Y[73];
   Y[110] = a*Y[91] - 56.0*oor2*Y[74];
   Y[111] = a*Y[92] - 45.0*oor2*Y[75];
   Y[112] = a*Y[93] - 45.0*oor2*Y[76];
   Y[113] = a*Y[94] - 32.0*oor2*Y[77];
   Y[114] = a*Y[95] - 32.0*oor2*Y[78];
   Y[115] = a*Y[96] - 17.0*oor2*Y[79];
   Y[116] = a*Y[97] - 17.0*oor2*Y[80];
   Y[117] = a*Y[98];
   Y[118] = a*Y[99];
   Y[119] =  19.0*oor2 * (crd[1]*Y[99]-crd[0]*Y[98]);
   Y[120] = -19.0*oor2 * (crd[1]*Y[98]+crd[0]*Y[99]);
   a = 21.0*crd[2]*oor2;
   Y[121] = a*Y[100] - 100.0*oor2*Y[81];
   Y[122] = a*Y[101] - 99.0*oor2*Y[82];
   Y[123] = a*Y[102] - 99.0*oor2*Y[83];
   Y[124] = a*Y[103] - 96.0*oor2*Y[84];
   Y[125] = a*Y[104] - 96.0*oor2*Y[85];
   Y[126] = a*Y[105] - 91.0*oor2*Y[86];
   Y[127] = a*Y[106] - 91.0*oor2*Y[87];
   Y[128] = a*Y[107] - 84.0*oor2*Y[88];
   Y[129] = a*Y[108] - 84.0*oor2*Y[89];
   Y[130] = a*Y[109] - 75.0*oor2*Y[90];
   Y[131] = a*Y[110] - 75.0*oor2*Y[91];
   Y[132] = a*Y[111] - 64.0*oor2*Y[92];
   Y[133] = a*Y[112] - 64.0*oor2*Y[93];
   Y[134] = a*Y[113] - 51.0*oor2*Y[94];
   Y[135] = a*Y[114] - 51.0*oor2*Y[95];
   Y[136] = a*Y[115] - 36.0*oor2*Y[96];
   Y[137] = a*Y[116] - 36.0*oor2*Y[97];
   Y[138] = a*Y[117] - 19.0*oor2*Y[98];
   Y[139] = a*Y[118] - 19.0*oor2*Y[99];
   Y[140] = a*Y[119];
   Y[141] = a*Y[120];
   Y[142] =  21.0*oor2 * (crd[1]*Y[120]-crd[0]*Y[119]);
   Y[143] = -21.0*oor2 * (crd[1]*Y[119]+crd[0]*Y[120]);
}

void ccdl::SolidHarm_dIlm_F( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   dIlm[0] = Y[2];
   dIlm[1] = Y[3];
   dIlm[2] = -Y[1];
   dIlm[3] = Y[5];
   dIlm[4] = Y[6];
   dIlm[5] = -Y[4];
   dIlm[6] = 5.0000000000000000e-01 * (Y[7]-Y[4]);
   dIlm[7] = 5.0000000000000000e-01 * Y[8];
   dIlm[8] = -Y[5];
   dIlm[9] = 5.0000000000000000e-01 * Y[8];
   dIlm[10] = -5.0000000000000000e-01 * (Y[4]+Y[7]);
   dIlm[11] = -Y[6];
   dIlm[12] = Y[10];
   dIlm[13] = Y[11];
   dIlm[14] = -Y[9];
   dIlm[15] = 5.0000000000000000e-01 * (Y[12]-Y[9]);
   dIlm[16] = 5.0000000000000000e-01 * Y[13];
   dIlm[17] = -Y[10];
   dIlm[18] = 5.0000000000000000e-01 * Y[13];
   dIlm[19] = -5.0000000000000000e-01 * (Y[9]+Y[12]);
   dIlm[20] = -Y[11];
   dIlm[21] = 5.0000000000000000e-01 * (Y[14]-Y[10]);
   dIlm[22] = 5.0000000000000000e-01 * (Y[11]+Y[15]);
   dIlm[23] = -Y[12];
   dIlm[24] = 5.0000000000000000e-01 * (Y[15]-Y[11]);
   dIlm[25] = -5.0000000000000000e-01 * (Y[10]+Y[14]);
   dIlm[26] = -Y[13];
   dIlm[27] = Y[17];
   dIlm[28] = Y[18];
   dIlm[29] = -Y[16];
   dIlm[30] = 5.0000000000000000e-01 * (Y[19]-Y[16]);
   dIlm[31] = 5.0000000000000000e-01 * Y[20];
   dIlm[32] = -Y[17];
   dIlm[33] = 5.0000000000000000e-01 * Y[20];
   dIlm[34] = -5.0000000000000000e-01 * (Y[16]+Y[19]);
   dIlm[35] = -Y[18];
   dIlm[36] = 5.0000000000000000e-01 * (Y[21]-Y[17]);
   dIlm[37] = 5.0000000000000000e-01 * (Y[18]+Y[22]);
   dIlm[38] = -Y[19];
   dIlm[39] = 5.0000000000000000e-01 * (Y[22]-Y[18]);
   dIlm[40] = -5.0000000000000000e-01 * (Y[17]+Y[21]);
   dIlm[41] = -Y[20];
   dIlm[42] = 5.0000000000000000e-01 * (Y[23]-Y[19]);
   dIlm[43] = 5.0000000000000000e-01 * (Y[20]+Y[24]);
   dIlm[44] = -Y[21];
   dIlm[45] = 5.0000000000000000e-01 * (Y[24]-Y[20]);
   dIlm[46] = -5.0000000000000000e-01 * (Y[19]+Y[23]);
   dIlm[47] = -Y[22];
}

void ccdl::SolidHarm_dIlm_G( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   dIlm[0] = Y[2];
   dIlm[1] = Y[3];
   dIlm[2] = -Y[1];
   dIlm[3] = Y[5];
   dIlm[4] = Y[6];
   dIlm[5] = -Y[4];
   dIlm[6] = 5.0000000000000000e-01 * (Y[7]-Y[4]);
   dIlm[7] = 5.0000000000000000e-01 * Y[8];
   dIlm[8] = -Y[5];
   dIlm[9] = 5.0000000000000000e-01 * Y[8];
   dIlm[10] = -5.0000000000000000e-01 * (Y[4]+Y[7]);
   dIlm[11] = -Y[6];
   dIlm[12] = Y[10];
   dIlm[13] = Y[11];
   dIlm[14] = -Y[9];
   dIlm[15] = 5.0000000000000000e-01 * (Y[12]-Y[9]);
   dIlm[16] = 5.0000000000000000e-01 * Y[13];
   dIlm[17] = -Y[10];
   dIlm[18] = 5.0000000000000000e-01 * Y[13];
   dIlm[19] = -5.0000000000000000e-01 * (Y[9]+Y[12]);
   dIlm[20] = -Y[11];
   dIlm[21] = 5.0000000000000000e-01 * (Y[14]-Y[10]);
   dIlm[22] = 5.0000000000000000e-01 * (Y[11]+Y[15]);
   dIlm[23] = -Y[12];
   dIlm[24] = 5.0000000000000000e-01 * (Y[15]-Y[11]);
   dIlm[25] = -5.0000000000000000e-01 * (Y[10]+Y[14]);
   dIlm[26] = -Y[13];
   dIlm[27] = Y[17];
   dIlm[28] = Y[18];
   dIlm[29] = -Y[16];
   dIlm[30] = 5.0000000000000000e-01 * (Y[19]-Y[16]);
   dIlm[31] = 5.0000000000000000e-01 * Y[20];
   dIlm[32] = -Y[17];
   dIlm[33] = 5.0000000000000000e-01 * Y[20];
   dIlm[34] = -5.0000000000000000e-01 * (Y[16]+Y[19]);
   dIlm[35] = -Y[18];
   dIlm[36] = 5.0000000000000000e-01 * (Y[21]-Y[17]);
   dIlm[37] = 5.0000000000000000e-01 * (Y[18]+Y[22]);
   dIlm[38] = -Y[19];
   dIlm[39] = 5.0000000000000000e-01 * (Y[22]-Y[18]);
   dIlm[40] = -5.0000000000000000e-01 * (Y[17]+Y[21]);
   dIlm[41] = -Y[20];
   dIlm[42] = 5.0000000000000000e-01 * (Y[23]-Y[19]);
   dIlm[43] = 5.0000000000000000e-01 * (Y[20]+Y[24]);
   dIlm[44] = -Y[21];
   dIlm[45] = 5.0000000000000000e-01 * (Y[24]-Y[20]);
   dIlm[46] = -5.0000000000000000e-01 * (Y[19]+Y[23]);
   dIlm[47] = -Y[22];
   dIlm[48] = Y[26];
   dIlm[49] = Y[27];
   dIlm[50] = -Y[25];
   dIlm[51] = 5.0000000000000000e-01 * (Y[28]-Y[25]);
   dIlm[52] = 5.0000000000000000e-01 * Y[29];
   dIlm[53] = -Y[26];
   dIlm[54] = 5.0000000000000000e-01 * Y[29];
   dIlm[55] = -5.0000000000000000e-01 * (Y[25]+Y[28]);
   dIlm[56] = -Y[27];
   dIlm[57] = 5.0000000000000000e-01 * (Y[30]-Y[26]);
   dIlm[58] = 5.0000000000000000e-01 * (Y[27]+Y[31]);
   dIlm[59] = -Y[28];
   dIlm[60] = 5.0000000000000000e-01 * (Y[31]-Y[27]);
   dIlm[61] = -5.0000000000000000e-01 * (Y[26]+Y[30]);
   dIlm[62] = -Y[29];
   dIlm[63] = 5.0000000000000000e-01 * (Y[32]-Y[28]);
   dIlm[64] = 5.0000000000000000e-01 * (Y[29]+Y[33]);
   dIlm[65] = -Y[30];
   dIlm[66] = 5.0000000000000000e-01 * (Y[33]-Y[29]);
   dIlm[67] = -5.0000000000000000e-01 * (Y[28]+Y[32]);
   dIlm[68] = -Y[31];
   dIlm[69] = 5.0000000000000000e-01 * (Y[34]-Y[30]);
   dIlm[70] = 5.0000000000000000e-01 * (Y[31]+Y[35]);
   dIlm[71] = -Y[32];
   dIlm[72] = 5.0000000000000000e-01 * (Y[35]-Y[31]);
   dIlm[73] = -5.0000000000000000e-01 * (Y[30]+Y[34]);
   dIlm[74] = -Y[33];
}

void ccdl::SolidHarm_dIlm_H( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   dIlm[0] = Y[2];
   dIlm[1] = Y[3];
   dIlm[2] = -Y[1];
   dIlm[3] = Y[5];
   dIlm[4] = Y[6];
   dIlm[5] = -Y[4];
   dIlm[6] = 5.0000000000000000e-01 * (Y[7]-Y[4]);
   dIlm[7] = 5.0000000000000000e-01 * Y[8];
   dIlm[8] = -Y[5];
   dIlm[9] = 5.0000000000000000e-01 * Y[8];
   dIlm[10] = -5.0000000000000000e-01 * (Y[4]+Y[7]);
   dIlm[11] = -Y[6];
   dIlm[12] = Y[10];
   dIlm[13] = Y[11];
   dIlm[14] = -Y[9];
   dIlm[15] = 5.0000000000000000e-01 * (Y[12]-Y[9]);
   dIlm[16] = 5.0000000000000000e-01 * Y[13];
   dIlm[17] = -Y[10];
   dIlm[18] = 5.0000000000000000e-01 * Y[13];
   dIlm[19] = -5.0000000000000000e-01 * (Y[9]+Y[12]);
   dIlm[20] = -Y[11];
   dIlm[21] = 5.0000000000000000e-01 * (Y[14]-Y[10]);
   dIlm[22] = 5.0000000000000000e-01 * (Y[11]+Y[15]);
   dIlm[23] = -Y[12];
   dIlm[24] = 5.0000000000000000e-01 * (Y[15]-Y[11]);
   dIlm[25] = -5.0000000000000000e-01 * (Y[10]+Y[14]);
   dIlm[26] = -Y[13];
   dIlm[27] = Y[17];
   dIlm[28] = Y[18];
   dIlm[29] = -Y[16];
   dIlm[30] = 5.0000000000000000e-01 * (Y[19]-Y[16]);
   dIlm[31] = 5.0000000000000000e-01 * Y[20];
   dIlm[32] = -Y[17];
   dIlm[33] = 5.0000000000000000e-01 * Y[20];
   dIlm[34] = -5.0000000000000000e-01 * (Y[16]+Y[19]);
   dIlm[35] = -Y[18];
   dIlm[36] = 5.0000000000000000e-01 * (Y[21]-Y[17]);
   dIlm[37] = 5.0000000000000000e-01 * (Y[18]+Y[22]);
   dIlm[38] = -Y[19];
   dIlm[39] = 5.0000000000000000e-01 * (Y[22]-Y[18]);
   dIlm[40] = -5.0000000000000000e-01 * (Y[17]+Y[21]);
   dIlm[41] = -Y[20];
   dIlm[42] = 5.0000000000000000e-01 * (Y[23]-Y[19]);
   dIlm[43] = 5.0000000000000000e-01 * (Y[20]+Y[24]);
   dIlm[44] = -Y[21];
   dIlm[45] = 5.0000000000000000e-01 * (Y[24]-Y[20]);
   dIlm[46] = -5.0000000000000000e-01 * (Y[19]+Y[23]);
   dIlm[47] = -Y[22];
   dIlm[48] = Y[26];
   dIlm[49] = Y[27];
   dIlm[50] = -Y[25];
   dIlm[51] = 5.0000000000000000e-01 * (Y[28]-Y[25]);
   dIlm[52] = 5.0000000000000000e-01 * Y[29];
   dIlm[53] = -Y[26];
   dIlm[54] = 5.0000000000000000e-01 * Y[29];
   dIlm[55] = -5.0000000000000000e-01 * (Y[25]+Y[28]);
   dIlm[56] = -Y[27];
   dIlm[57] = 5.0000000000000000e-01 * (Y[30]-Y[26]);
   dIlm[58] = 5.0000000000000000e-01 * (Y[27]+Y[31]);
   dIlm[59] = -Y[28];
   dIlm[60] = 5.0000000000000000e-01 * (Y[31]-Y[27]);
   dIlm[61] = -5.0000000000000000e-01 * (Y[26]+Y[30]);
   dIlm[62] = -Y[29];
   dIlm[63] = 5.0000000000000000e-01 * (Y[32]-Y[28]);
   dIlm[64] = 5.0000000000000000e-01 * (Y[29]+Y[33]);
   dIlm[65] = -Y[30];
   dIlm[66] = 5.0000000000000000e-01 * (Y[33]-Y[29]);
   dIlm[67] = -5.0000000000000000e-01 * (Y[28]+Y[32]);
   dIlm[68] = -Y[31];
   dIlm[69] = 5.0000000000000000e-01 * (Y[34]-Y[30]);
   dIlm[70] = 5.0000000000000000e-01 * (Y[31]+Y[35]);
   dIlm[71] = -Y[32];
   dIlm[72] = 5.0000000000000000e-01 * (Y[35]-Y[31]);
   dIlm[73] = -5.0000000000000000e-01 * (Y[30]+Y[34]);
   dIlm[74] = -Y[33];
   dIlm[75] = Y[37];
   dIlm[76] = Y[38];
   dIlm[77] = -Y[36];
   dIlm[78] = 5.0000000000000000e-01 * (Y[39]-Y[36]);
   dIlm[79] = 5.0000000000000000e-01 * Y[40];
   dIlm[80] = -Y[37];
   dIlm[81] = 5.0000000000000000e-01 * Y[40];
   dIlm[82] = -5.0000000000000000e-01 * (Y[36]+Y[39]);
   dIlm[83] = -Y[38];
   dIlm[84] = 5.0000000000000000e-01 * (Y[41]-Y[37]);
   dIlm[85] = 5.0000000000000000e-01 * (Y[38]+Y[42]);
   dIlm[86] = -Y[39];
   dIlm[87] = 5.0000000000000000e-01 * (Y[42]-Y[38]);
   dIlm[88] = -5.0000000000000000e-01 * (Y[37]+Y[41]);
   dIlm[89] = -Y[40];
   dIlm[90] = 5.0000000000000000e-01 * (Y[43]-Y[39]);
   dIlm[91] = 5.0000000000000000e-01 * (Y[40]+Y[44]);
   dIlm[92] = -Y[41];
   dIlm[93] = 5.0000000000000000e-01 * (Y[44]-Y[40]);
   dIlm[94] = -5.0000000000000000e-01 * (Y[39]+Y[43]);
   dIlm[95] = -Y[42];
   dIlm[96] = 5.0000000000000000e-01 * (Y[45]-Y[41]);
   dIlm[97] = 5.0000000000000000e-01 * (Y[42]+Y[46]);
   dIlm[98] = -Y[43];
   dIlm[99] = 5.0000000000000000e-01 * (Y[46]-Y[42]);
   dIlm[100] = -5.0000000000000000e-01 * (Y[41]+Y[45]);
   dIlm[101] = -Y[44];
   dIlm[102] = 5.0000000000000000e-01 * (Y[47]-Y[43]);
   dIlm[103] = 5.0000000000000000e-01 * (Y[44]+Y[48]);
   dIlm[104] = -Y[45];
   dIlm[105] = 5.0000000000000000e-01 * (Y[48]-Y[44]);
   dIlm[106] = -5.0000000000000000e-01 * (Y[43]+Y[47]);
   dIlm[107] = -Y[46];
}

void ccdl::SolidHarm_dIlm_I( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   ccdl::SolidHarm_dIlm_H(Y,dIlm);
   dIlm[108] = Y[50];
   dIlm[109] = Y[51];
   dIlm[110] = -Y[49];
   dIlm[111] = 5.0000000000000000e-01 * (Y[52]-Y[49]);
   dIlm[112] = 5.0000000000000000e-01 * Y[53];
   dIlm[113] = -Y[50];
   dIlm[114] = 5.0000000000000000e-01 * Y[53];
   dIlm[115] = -5.0000000000000000e-01 * (Y[49]+Y[52]);
   dIlm[116] = -Y[51];
   dIlm[117] = 5.0000000000000000e-01 * (Y[54]-Y[50]);
   dIlm[118] = 5.0000000000000000e-01 * (Y[51]+Y[55]);
   dIlm[119] = -Y[52];
   dIlm[120] = 5.0000000000000000e-01 * (Y[55]-Y[51]);
   dIlm[121] = -5.0000000000000000e-01 * (Y[50]+Y[54]);
   dIlm[122] = -Y[53];
   dIlm[123] = 5.0000000000000000e-01 * (Y[56]-Y[52]);
   dIlm[124] = 5.0000000000000000e-01 * (Y[53]+Y[57]);
   dIlm[125] = -Y[54];
   dIlm[126] = 5.0000000000000000e-01 * (Y[57]-Y[53]);
   dIlm[127] = -5.0000000000000000e-01 * (Y[52]+Y[56]);
   dIlm[128] = -Y[55];
   dIlm[129] = 5.0000000000000000e-01 * (Y[58]-Y[54]);
   dIlm[130] = 5.0000000000000000e-01 * (Y[55]+Y[59]);
   dIlm[131] = -Y[56];
   dIlm[132] = 5.0000000000000000e-01 * (Y[59]-Y[55]);
   dIlm[133] = -5.0000000000000000e-01 * (Y[54]+Y[58]);
   dIlm[134] = -Y[57];
   dIlm[135] = 5.0000000000000000e-01 * (Y[60]-Y[56]);
   dIlm[136] = 5.0000000000000000e-01 * (Y[57]+Y[61]);
   dIlm[137] = -Y[58];
   dIlm[138] = 5.0000000000000000e-01 * (Y[61]-Y[57]);
   dIlm[139] = -5.0000000000000000e-01 * (Y[56]+Y[60]);
   dIlm[140] = -Y[59];
   dIlm[141] = 5.0000000000000000e-01 * (Y[62]-Y[58]);
   dIlm[142] = 5.0000000000000000e-01 * (Y[59]+Y[63]);
   dIlm[143] = -Y[60];
   dIlm[144] = 5.0000000000000000e-01 * (Y[63]-Y[59]);
   dIlm[145] = -5.0000000000000000e-01 * (Y[58]+Y[62]);
   dIlm[146] = -Y[61];
}

void ccdl::SolidHarm_dIlm_J( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   ccdl::SolidHarm_dIlm_I(Y,dIlm);
   dIlm[147] = Y[65];
   dIlm[148] = Y[66];
   dIlm[149] = -Y[64];
   dIlm[150] = 5.0000000000000000e-01 * (Y[67]-Y[64]);
   dIlm[151] = 5.0000000000000000e-01 * Y[68];
   dIlm[152] = -Y[65];
   dIlm[153] = 5.0000000000000000e-01 * Y[68];
   dIlm[154] = -5.0000000000000000e-01 * (Y[64]+Y[67]);
   dIlm[155] = -Y[66];
   dIlm[156] = 5.0000000000000000e-01 * (Y[69]-Y[65]);
   dIlm[157] = 5.0000000000000000e-01 * (Y[66]+Y[70]);
   dIlm[158] = -Y[67];
   dIlm[159] = 5.0000000000000000e-01 * (Y[70]-Y[66]);
   dIlm[160] = -5.0000000000000000e-01 * (Y[65]+Y[69]);
   dIlm[161] = -Y[68];
   dIlm[162] = 5.0000000000000000e-01 * (Y[71]-Y[67]);
   dIlm[163] = 5.0000000000000000e-01 * (Y[68]+Y[72]);
   dIlm[164] = -Y[69];
   dIlm[165] = 5.0000000000000000e-01 * (Y[72]-Y[68]);
   dIlm[166] = -5.0000000000000000e-01 * (Y[67]+Y[71]);
   dIlm[167] = -Y[70];
   dIlm[168] = 5.0000000000000000e-01 * (Y[73]-Y[69]);
   dIlm[169] = 5.0000000000000000e-01 * (Y[70]+Y[74]);
   dIlm[170] = -Y[71];
   dIlm[171] = 5.0000000000000000e-01 * (Y[74]-Y[70]);
   dIlm[172] = -5.0000000000000000e-01 * (Y[69]+Y[73]);
   dIlm[173] = -Y[72];
   dIlm[174] = 5.0000000000000000e-01 * (Y[75]-Y[71]);
   dIlm[175] = 5.0000000000000000e-01 * (Y[72]+Y[76]);
   dIlm[176] = -Y[73];
   dIlm[177] = 5.0000000000000000e-01 * (Y[76]-Y[72]);
   dIlm[178] = -5.0000000000000000e-01 * (Y[71]+Y[75]);
   dIlm[179] = -Y[74];
   dIlm[180] = 5.0000000000000000e-01 * (Y[77]-Y[73]);
   dIlm[181] = 5.0000000000000000e-01 * (Y[74]+Y[78]);
   dIlm[182] = -Y[75];
   dIlm[183] = 5.0000000000000000e-01 * (Y[78]-Y[74]);
   dIlm[184] = -5.0000000000000000e-01 * (Y[73]+Y[77]);
   dIlm[185] = -Y[76];
   dIlm[186] = 5.0000000000000000e-01 * (Y[79]-Y[75]);
   dIlm[187] = 5.0000000000000000e-01 * (Y[76]+Y[80]);
   dIlm[188] = -Y[77];
   dIlm[189] = 5.0000000000000000e-01 * (Y[80]-Y[76]);
   dIlm[190] = -5.0000000000000000e-01 * (Y[75]+Y[79]);
   dIlm[191] = -Y[78];
}

void ccdl::SolidHarm_dIlm_K( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   ccdl::SolidHarm_dIlm_J(Y,dIlm);
   dIlm[192] = Y[82];
   dIlm[193] = Y[83];
   dIlm[194] = -Y[81];
   dIlm[195] = 5.0000000000000000e-01 * (Y[84]-Y[81]);
   dIlm[196] = 5.0000000000000000e-01 * Y[85];
   dIlm[197] = -Y[82];
   dIlm[198] = 5.0000000000000000e-01 * Y[85];
   dIlm[199] = -5.0000000000000000e-01 * (Y[81]+Y[84]);
   dIlm[200] = -Y[83];
   dIlm[201] = 5.0000000000000000e-01 * (Y[86]-Y[82]);
   dIlm[202] = 5.0000000000000000e-01 * (Y[83]+Y[87]);
   dIlm[203] = -Y[84];
   dIlm[204] = 5.0000000000000000e-01 * (Y[87]-Y[83]);
   dIlm[205] = -5.0000000000000000e-01 * (Y[82]+Y[86]);
   dIlm[206] = -Y[85];
   dIlm[207] = 5.0000000000000000e-01 * (Y[88]-Y[84]);
   dIlm[208] = 5.0000000000000000e-01 * (Y[85]+Y[89]);
   dIlm[209] = -Y[86];
   dIlm[210] = 5.0000000000000000e-01 * (Y[89]-Y[85]);
   dIlm[211] = -5.0000000000000000e-01 * (Y[84]+Y[88]);
   dIlm[212] = -Y[87];
   dIlm[213] = 5.0000000000000000e-01 * (Y[90]-Y[86]);
   dIlm[214] = 5.0000000000000000e-01 * (Y[87]+Y[91]);
   dIlm[215] = -Y[88];
   dIlm[216] = 5.0000000000000000e-01 * (Y[91]-Y[87]);
   dIlm[217] = -5.0000000000000000e-01 * (Y[86]+Y[90]);
   dIlm[218] = -Y[89];
   dIlm[219] = 5.0000000000000000e-01 * (Y[92]-Y[88]);
   dIlm[220] = 5.0000000000000000e-01 * (Y[89]+Y[93]);
   dIlm[221] = -Y[90];
   dIlm[222] = 5.0000000000000000e-01 * (Y[93]-Y[89]);
   dIlm[223] = -5.0000000000000000e-01 * (Y[88]+Y[92]);
   dIlm[224] = -Y[91];
   dIlm[225] = 5.0000000000000000e-01 * (Y[94]-Y[90]);
   dIlm[226] = 5.0000000000000000e-01 * (Y[91]+Y[95]);
   dIlm[227] = -Y[92];
   dIlm[228] = 5.0000000000000000e-01 * (Y[95]-Y[91]);
   dIlm[229] = -5.0000000000000000e-01 * (Y[90]+Y[94]);
   dIlm[230] = -Y[93];
   dIlm[231] = 5.0000000000000000e-01 * (Y[96]-Y[92]);
   dIlm[232] = 5.0000000000000000e-01 * (Y[93]+Y[97]);
   dIlm[233] = -Y[94];
   dIlm[234] = 5.0000000000000000e-01 * (Y[97]-Y[93]);
   dIlm[235] = -5.0000000000000000e-01 * (Y[92]+Y[96]);
   dIlm[236] = -Y[95];
   dIlm[237] = 5.0000000000000000e-01 * (Y[98]-Y[94]);
   dIlm[238] = 5.0000000000000000e-01 * (Y[95]+Y[99]);
   dIlm[239] = -Y[96];
   dIlm[240] = 5.0000000000000000e-01 * (Y[99]-Y[95]);
   dIlm[241] = -5.0000000000000000e-01 * (Y[94]+Y[98]);
   dIlm[242] = -Y[97];
}

void ccdl::SolidHarm_dIlm_L( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   ccdl::SolidHarm_dIlm_K(Y,dIlm);
   dIlm[243] = Y[101];
   dIlm[244] = Y[102];
   dIlm[245] = -Y[100];
   dIlm[246] = 5.0000000000000000e-01 * (Y[103]-Y[100]);
   dIlm[247] = 5.0000000000000000e-01 * Y[104];
   dIlm[248] = -Y[101];
   dIlm[249] = 5.0000000000000000e-01 * Y[104];
   dIlm[250] = -5.0000000000000000e-01 * (Y[100]+Y[103]);
   dIlm[251] = -Y[102];
   dIlm[252] = 5.0000000000000000e-01 * (Y[105]-Y[101]);
   dIlm[253] = 5.0000000000000000e-01 * (Y[102]+Y[106]);
   dIlm[254] = -Y[103];
   dIlm[255] = 5.0000000000000000e-01 * (Y[106]-Y[102]);
   dIlm[256] = -5.0000000000000000e-01 * (Y[101]+Y[105]);
   dIlm[257] = -Y[104];
   dIlm[258] = 5.0000000000000000e-01 * (Y[107]-Y[103]);
   dIlm[259] = 5.0000000000000000e-01 * (Y[104]+Y[108]);
   dIlm[260] = -Y[105];
   dIlm[261] = 5.0000000000000000e-01 * (Y[108]-Y[104]);
   dIlm[262] = -5.0000000000000000e-01 * (Y[103]+Y[107]);
   dIlm[263] = -Y[106];
   dIlm[264] = 5.0000000000000000e-01 * (Y[109]-Y[105]);
   dIlm[265] = 5.0000000000000000e-01 * (Y[106]+Y[110]);
   dIlm[266] = -Y[107];
   dIlm[267] = 5.0000000000000000e-01 * (Y[110]-Y[106]);
   dIlm[268] = -5.0000000000000000e-01 * (Y[105]+Y[109]);
   dIlm[269] = -Y[108];
   dIlm[270] = 5.0000000000000000e-01 * (Y[111]-Y[107]);
   dIlm[271] = 5.0000000000000000e-01 * (Y[108]+Y[112]);
   dIlm[272] = -Y[109];
   dIlm[273] = 5.0000000000000000e-01 * (Y[112]-Y[108]);
   dIlm[274] = -5.0000000000000000e-01 * (Y[107]+Y[111]);
   dIlm[275] = -Y[110];
   dIlm[276] = 5.0000000000000000e-01 * (Y[113]-Y[109]);
   dIlm[277] = 5.0000000000000000e-01 * (Y[110]+Y[114]);
   dIlm[278] = -Y[111];
   dIlm[279] = 5.0000000000000000e-01 * (Y[114]-Y[110]);
   dIlm[280] = -5.0000000000000000e-01 * (Y[109]+Y[113]);
   dIlm[281] = -Y[112];
   dIlm[282] = 5.0000000000000000e-01 * (Y[115]-Y[111]);
   dIlm[283] = 5.0000000000000000e-01 * (Y[112]+Y[116]);
   dIlm[284] = -Y[113];
   dIlm[285] = 5.0000000000000000e-01 * (Y[116]-Y[112]);
   dIlm[286] = -5.0000000000000000e-01 * (Y[111]+Y[115]);
   dIlm[287] = -Y[114];
   dIlm[288] = 5.0000000000000000e-01 * (Y[117]-Y[113]);
   dIlm[289] = 5.0000000000000000e-01 * (Y[114]+Y[118]);
   dIlm[290] = -Y[115];
   dIlm[291] = 5.0000000000000000e-01 * (Y[118]-Y[114]);
   dIlm[292] = -5.0000000000000000e-01 * (Y[113]+Y[117]);
   dIlm[293] = -Y[116];
   dIlm[294] = 5.0000000000000000e-01 * (Y[119]-Y[115]);
   dIlm[295] = 5.0000000000000000e-01 * (Y[116]+Y[120]);
   dIlm[296] = -Y[117];
   dIlm[297] = 5.0000000000000000e-01 * (Y[120]-Y[116]);
   dIlm[298] = -5.0000000000000000e-01 * (Y[115]+Y[119]);
   dIlm[299] = -Y[118];
}

void ccdl::SolidHarm_dIlm_M( double const *__restrict__ Y, double *__restrict__ dIlm )
{
   ccdl::SolidHarm_dIlm_L(Y,dIlm);
   dIlm[300] = Y[122];
   dIlm[301] = Y[123];
   dIlm[302] = -Y[121];
   dIlm[303] = 5.0000000000000000e-01 * (Y[124]-Y[121]);
   dIlm[304] = 5.0000000000000000e-01 * Y[125];
   dIlm[305] = -Y[122];
   dIlm[306] = 5.0000000000000000e-01 * Y[125];
   dIlm[307] = -5.0000000000000000e-01 * (Y[121]+Y[124]);
   dIlm[308] = -Y[123];
   dIlm[309] = 5.0000000000000000e-01 * (Y[126]-Y[122]);
   dIlm[310] = 5.0000000000000000e-01 * (Y[123]+Y[127]);
   dIlm[311] = -Y[124];
   dIlm[312] = 5.0000000000000000e-01 * (Y[127]-Y[123]);
   dIlm[313] = -5.0000000000000000e-01 * (Y[122]+Y[126]);
   dIlm[314] = -Y[125];
   dIlm[315] = 5.0000000000000000e-01 * (Y[128]-Y[124]);
   dIlm[316] = 5.0000000000000000e-01 * (Y[125]+Y[129]);
   dIlm[317] = -Y[126];
   dIlm[318] = 5.0000000000000000e-01 * (Y[129]-Y[125]);
   dIlm[319] = -5.0000000000000000e-01 * (Y[124]+Y[128]);
   dIlm[320] = -Y[127];
   dIlm[321] = 5.0000000000000000e-01 * (Y[130]-Y[126]);
   dIlm[322] = 5.0000000000000000e-01 * (Y[127]+Y[131]);
   dIlm[323] = -Y[128];
   dIlm[324] = 5.0000000000000000e-01 * (Y[131]-Y[127]);
   dIlm[325] = -5.0000000000000000e-01 * (Y[126]+Y[130]);
   dIlm[326] = -Y[129];
   dIlm[327] = 5.0000000000000000e-01 * (Y[132]-Y[128]);
   dIlm[328] = 5.0000000000000000e-01 * (Y[129]+Y[133]);
   dIlm[329] = -Y[130];
   dIlm[330] = 5.0000000000000000e-01 * (Y[133]-Y[129]);
   dIlm[331] = -5.0000000000000000e-01 * (Y[128]+Y[132]);
   dIlm[332] = -Y[131];
   dIlm[333] = 5.0000000000000000e-01 * (Y[134]-Y[130]);
   dIlm[334] = 5.0000000000000000e-01 * (Y[131]+Y[135]);
   dIlm[335] = -Y[132];
   dIlm[336] = 5.0000000000000000e-01 * (Y[135]-Y[131]);
   dIlm[337] = -5.0000000000000000e-01 * (Y[130]+Y[134]);
   dIlm[338] = -Y[133];
   dIlm[339] = 5.0000000000000000e-01 * (Y[136]-Y[132]);
   dIlm[340] = 5.0000000000000000e-01 * (Y[133]+Y[137]);
   dIlm[341] = -Y[134];
   dIlm[342] = 5.0000000000000000e-01 * (Y[137]-Y[133]);
   dIlm[343] = -5.0000000000000000e-01 * (Y[132]+Y[136]);
   dIlm[344] = -Y[135];
   dIlm[345] = 5.0000000000000000e-01 * (Y[138]-Y[134]);
   dIlm[346] = 5.0000000000000000e-01 * (Y[135]+Y[139]);
   dIlm[347] = -Y[136];
   dIlm[348] = 5.0000000000000000e-01 * (Y[139]-Y[135]);
   dIlm[349] = -5.0000000000000000e-01 * (Y[134]+Y[138]);
   dIlm[350] = -Y[137];
   dIlm[351] = 5.0000000000000000e-01 * (Y[140]-Y[136]);
   dIlm[352] = 5.0000000000000000e-01 * (Y[137]+Y[141]);
   dIlm[353] = -Y[138];
   dIlm[354] = 5.0000000000000000e-01 * (Y[141]-Y[137]);
   dIlm[355] = -5.0000000000000000e-01 * (Y[136]+Y[140]);
   dIlm[356] = -Y[139];
   dIlm[357] = 5.0000000000000000e-01 * (Y[142]-Y[138]);
   dIlm[358] = 5.0000000000000000e-01 * (Y[139]+Y[143]);
   dIlm[359] = -Y[140];
   dIlm[360] = 5.0000000000000000e-01 * (Y[143]-Y[139]);
   dIlm[361] = -5.0000000000000000e-01 * (Y[138]+Y[142]);
   dIlm[362] = -Y[141];
}




namespace ccdl {

void IlmIntFromIlm_SS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
}

void IlmIntFromIlm_PS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
}

void IlmIntFromIlm_PP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_PS(Y,X);
   X[4] = -X[1]; // (0,1) sym
   X[5] = -Y[4];
   X[6] = -2.0 * Y[5];
   X[7] = -2.0 * Y[6];
   X[8] = -X[2]; // (0,2) sym
   X[9] =  X[6]; // (1,2) sym
   X[10] =  2.0 * (Y[4]-Y[7]);
   X[11] = -2.0 * Y[8];
   X[12] = -X[3]; // (0,3) sym
   X[13] =  X[7]; // (1,3) sym
   X[14] =  X[11]; // (2,3) sym
   X[15] =  2.0 * (Y[4]+Y[7]);
}

void IlmIntFromIlm_DS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
   X[4] = Y[4];
   X[5] =  2.0 * Y[5];
   X[6] =  2.0 * Y[6];
   X[7] =  2.0 * Y[7];
   X[8] =  2.0 * Y[8];
}

void IlmIntFromIlm_DP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_DS(Y,X);
   X[9] = -X[1]; // (0,1) sym
   X[10] = -X[4]; // l+1,j-1
   X[11] = -X[5]; // l+1,j-1
   X[12] = -X[6]; // l+1,j-1
   X[13] = Y[9];
   X[14] =  2.0 * Y[10];
   X[15] =  2.0 * Y[11];
   X[16] =  2.0 * Y[12];
   X[17] =  2.0 * Y[13];
   X[18] = -X[2]; // (0,2) sym
   X[19] =  X[11]; // (1,2) sym
   X[20] =  2.0 * (Y[4]-Y[7]);
   X[21] = -2.0 * Y[8];
   X[22] =  2.0 * Y[10];
   X[23] =  2.0 * (Y[12]-Y[9]);
   X[24] =  2.0 * Y[13];
   X[25] =  2.0 * (Y[14]-Y[10]);
   X[26] =  2.0 * (Y[15]-Y[11]);
   X[27] = -X[3]; // (0,3) sym
   X[28] =  X[12]; // (1,3) sym
   X[29] =  X[21]; // (2,3) sym
   X[30] =  2.0 * (Y[4]+Y[7]);
   X[31] =  2.0 * Y[11];
   X[32] =  2.0 * Y[13];
   X[33] = -2.0 * (Y[9]+Y[12]);
   X[34] =  2.0 * (Y[11]+Y[15]);
   X[35] = -2.0 * (Y[10]+Y[14]);
}

void IlmIntFromIlm_DD( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_DP(Y,X);
   X[36] =  X[4]; // (0,4) sym
   X[37] = -X[13]; // (1,4) sym
   X[38] = -X[22]; // (2,4) sym
   X[39] = -X[31]; // (3,4) sym
   X[40] = Y[16];
   X[41] =  2.0 * Y[17];
   X[42] =  2.0 * Y[18];
   X[43] =  2.0 * Y[19];
   X[44] =  2.0 * Y[20];
   X[45] =  X[5]; // (0,5) sym
   X[46] = -X[14]; // (1,5) sym
   X[47] = -X[23]; // (2,5) sym
   X[48] = -X[32]; // (3,5) sym
   X[49] =  X[41]; // (4,5) sym
   X[50] =  2.0 * (Y[19]-Y[16]);
   X[51] =  2.0 * Y[20];
   X[52] =  2.0 * (Y[21]-Y[17]);
   X[53] =  2.0 * (Y[22]-Y[18]);
   X[54] =  X[6]; // (0,6) sym
   X[55] = -X[15]; // (1,6) sym
   X[56] = -X[24]; // (2,6) sym
   X[57] = -X[33]; // (3,6) sym
   X[58] =  X[42]; // (4,6) sym
   X[59] =  X[51]; // (5,6) sym
   X[60] = -2.0 * (Y[16]+Y[19]);
   X[61] =  2.0 * (Y[18]+Y[22]);
   X[62] = -2.0 * (Y[17]+Y[21]);
   X[63] =  X[7]; // (0,7) sym
   X[64] = -X[16]; // (1,7) sym
   X[65] = -X[25]; // (2,7) sym
   X[66] = -X[34]; // (3,7) sym
   X[67] =  X[43]; // (4,7) sym
   X[68] =  X[52]; // (5,7) sym
   X[69] =  X[61]; // (6,7) sym
   X[70] =  2.0 * (Y[16]+Y[23]);
   X[71] =  2.0 * Y[24];
   X[72] =  X[8]; // (0,8) sym
   X[73] = -X[17]; // (1,8) sym
   X[74] = -X[26]; // (2,8) sym
   X[75] = -X[35]; // (3,8) sym
   X[76] =  X[44]; // (4,8) sym
   X[77] =  X[53]; // (5,8) sym
   X[78] =  X[62]; // (6,8) sym
   X[79] =  X[71]; // (7,8) sym
   X[80] =  2.0 * (Y[16]-Y[23]);
}

void IlmIntFromIlm_FS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
   X[4] = Y[4];
   X[5] =  2.0 * Y[5];
   X[6] =  2.0 * Y[6];
   X[7] =  2.0 * Y[7];
   X[8] =  2.0 * Y[8];
   X[9] = -Y[9];
   X[10] = -2.0 * Y[10];
   X[11] = -2.0 * Y[11];
   X[12] = -2.0 * Y[12];
   X[13] = -2.0 * Y[13];
   X[14] = -2.0 * Y[14];
   X[15] = -2.0 * Y[15];
}

void IlmIntFromIlm_FP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_FS(Y,X);
   X[16] = -X[1]; // (0,1) sym
   X[17] = -X[4]; // l+1,j-1
   X[18] = -X[5]; // l+1,j-1
   X[19] = -X[6]; // l+1,j-1
   X[20] = -X[9]; // l+1,j-1
   X[21] = -X[10]; // l+1,j-1
   X[22] = -X[11]; // l+1,j-1
   X[23] = -X[12]; // l+1,j-1
   X[24] = -X[13]; // l+1,j-1
   X[25] = -Y[16];
   X[26] = -2.0 * Y[17];
   X[27] = -2.0 * Y[18];
   X[28] = -2.0 * Y[19];
   X[29] = -2.0 * Y[20];
   X[30] = -2.0 * Y[21];
   X[31] = -2.0 * Y[22];
   X[32] = -X[2]; // (0,2) sym
   X[33] =  X[18]; // (1,2) sym
   X[34] =  2.0 * (Y[4]-Y[7]);
   X[35] = -2.0 * Y[8];
   X[36] =  2.0 * Y[10];
   X[37] =  2.0 * (Y[12]-Y[9]);
   X[38] =  2.0 * Y[13];
   X[39] =  2.0 * (Y[14]-Y[10]);
   X[40] =  2.0 * (Y[15]-Y[11]);
   X[41] = -2.0 * Y[17];
   X[42] =  2.0 * (Y[16]-Y[19]);
   X[43] = -2.0 * Y[20];
   X[44] =  2.0 * (Y[17]-Y[21]);
   X[45] =  2.0 * (Y[18]-Y[22]);
   X[46] =  2.0 * (Y[19]-Y[23]);
   X[47] =  2.0 * (Y[20]-Y[24]);
   X[48] = -X[3]; // (0,3) sym
   X[49] =  X[19]; // (1,3) sym
   X[50] =  X[35]; // (2,3) sym
   X[51] =  2.0 * (Y[4]+Y[7]);
   X[52] =  2.0 * Y[11];
   X[53] =  2.0 * Y[13];
   X[54] = -2.0 * (Y[9]+Y[12]);
   X[55] =  2.0 * (Y[11]+Y[15]);
   X[56] = -2.0 * (Y[10]+Y[14]);
   X[57] = -2.0 * Y[18];
   X[58] = -2.0 * Y[20];
   X[59] =  2.0 * (Y[16]+Y[19]);
   X[60] = -2.0 * (Y[18]+Y[22]);
   X[61] =  2.0 * (Y[17]+Y[21]);
   X[62] = -2.0 * (Y[20]+Y[24]);
   X[63] =  2.0 * (Y[19]+Y[23]);
}

void IlmIntFromIlm_FD( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_FP(Y,X);
   X[64] =  X[4]; // (0,4) sym
   X[65] = -X[20]; // (1,4) sym
   X[66] = -X[36]; // (2,4) sym
   X[67] = -X[52]; // (3,4) sym
   X[68] = -X[25]; // l+1,j-1
   X[69] = -X[26]; // l+1,j-1
   X[70] = -X[27]; // l+1,j-1
   X[71] = -X[28]; // l+1,j-1
   X[72] = -X[29]; // l+1,j-1
   X[73] = -Y[25];
   X[74] = -2.0 * Y[26];
   X[75] = -2.0 * Y[27];
   X[76] = -2.0 * Y[28];
   X[77] = -2.0 * Y[29];
   X[78] = -2.0 * Y[30];
   X[79] = -2.0 * Y[31];
   X[80] =  X[5]; // (0,5) sym
   X[81] = -X[21]; // (1,5) sym
   X[82] = -X[37]; // (2,5) sym
   X[83] = -X[53]; // (3,5) sym
   X[84] =  X[69]; // (4,5) sym
   X[85] = -X[42]; // l+1,j-1
   X[86] = -X[43]; // l+1,j-1
   X[87] = -X[44]; // l+1,j-1
   X[88] = -X[45]; // l+1,j-1
   X[89] = -2.0 * Y[26];
   X[90] =  2.0 * (Y[25]-Y[28]);
   X[91] = -2.0 * Y[29];
   X[92] =  2.0 * (Y[26]-Y[30]);
   X[93] =  2.0 * (Y[27]-Y[31]);
   X[94] =  2.0 * (Y[28]-Y[32]);
   X[95] =  2.0 * (Y[29]-Y[33]);
   X[96] =  X[6]; // (0,6) sym
   X[97] = -X[22]; // (1,6) sym
   X[98] = -X[38]; // (2,6) sym
   X[99] = -X[54]; // (3,6) sym
   X[100] =  X[70]; // (4,6) sym
   X[101] =  X[86]; // (5,6) sym
   X[102] = -X[59]; // l+1,j-1
   X[103] = -X[60]; // l+1,j-1
   X[104] = -X[61]; // l+1,j-1
   X[105] = -2.0 * Y[27];
   X[106] = -2.0 * Y[29];
   X[107] =  2.0 * (Y[25]+Y[28]);
   X[108] = -2.0 * (Y[27]+Y[31]);
   X[109] =  2.0 * (Y[26]+Y[30]);
   X[110] = -2.0 * (Y[29]+Y[33]);
   X[111] =  2.0 * (Y[28]+Y[32]);
   X[112] =  X[7]; // (0,7) sym
   X[113] = -X[23]; // (1,7) sym
   X[114] = -X[39]; // (2,7) sym
   X[115] = -X[55]; // (3,7) sym
   X[116] =  X[71]; // (4,7) sym
   X[117] =  X[87]; // (5,7) sym
   X[118] =  X[103]; // (6,7) sym
   X[119] =  2.0 * (Y[16]+Y[23]);
   X[120] =  2.0 * Y[24];
   X[121] = -2.0 * Y[28];
   X[122] =  2.0 * (Y[26]-Y[30]);
   X[123] = -2.0 * (Y[27]+Y[31]);
   X[124] = -2.0 * (Y[25]+Y[32]);
   X[125] = -2.0 * Y[33];
   X[126] = -2.0 * (Y[26]+Y[34]);
   X[127] = -2.0 * (Y[27]+Y[35]);
   X[128] =  X[8]; // (0,8) sym
   X[129] = -X[24]; // (1,8) sym
   X[130] = -X[40]; // (2,8) sym
   X[131] = -X[56]; // (3,8) sym
   X[132] =  X[72]; // (4,8) sym
   X[133] =  X[88]; // (5,8) sym
   X[134] =  X[104]; // (6,8) sym
   X[135] =  X[120]; // (7,8) sym
   X[136] =  2.0 * (Y[16]-Y[23]);
   X[137] = -2.0 * Y[29];
   X[138] =  2.0 * (Y[27]-Y[31]);
   X[139] =  2.0 * (Y[26]+Y[30]);
   X[140] = -2.0 * Y[33];
   X[141] =  2.0 * (Y[32]-Y[25]);
   X[142] =  2.0 * (Y[27]-Y[35]);
   X[143] =  2.0 * (Y[34]-Y[26]);
}

void IlmIntFromIlm_FF( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_FD(Y,X);
   X[144] = -X[9]; // (0,9) sym
   X[145] =  X[25]; // (1,9) sym
   X[146] =  X[41]; // (2,9) sym
   X[147] =  X[57]; // (3,9) sym
   X[148] = -X[73]; // (4,9) sym
   X[149] = -X[89]; // (5,9) sym
   X[150] = -X[105]; // (6,9) sym
   X[151] = -X[121]; // (7,9) sym
   X[152] = -X[137]; // (8,9) sym
   X[153] = -Y[36];
   X[154] = -2.0 * Y[37];
   X[155] = -2.0 * Y[38];
   X[156] = -2.0 * Y[39];
   X[157] = -2.0 * Y[40];
   X[158] = -2.0 * Y[41];
   X[159] = -2.0 * Y[42];
   X[160] = -X[10]; // (0,10) sym
   X[161] =  X[26]; // (1,10) sym
   X[162] =  X[42]; // (2,10) sym
   X[163] =  X[58]; // (3,10) sym
   X[164] = -X[74]; // (4,10) sym
   X[165] = -X[90]; // (5,10) sym
   X[166] = -X[106]; // (6,10) sym
   X[167] = -X[122]; // (7,10) sym
   X[168] = -X[138]; // (8,10) sym
   X[169] =  X[154]; // (9,10) sym
   X[170] =  2.0 * (Y[36]-Y[39]);
   X[171] = -2.0 * Y[40];
   X[172] =  2.0 * (Y[37]-Y[41]);
   X[173] =  2.0 * (Y[38]-Y[42]);
   X[174] =  2.0 * (Y[39]-Y[43]);
   X[175] =  2.0 * (Y[40]-Y[44]);
   X[176] = -X[11]; // (0,11) sym
   X[177] =  X[27]; // (1,11) sym
   X[178] =  X[43]; // (2,11) sym
   X[179] =  X[59]; // (3,11) sym
   X[180] = -X[75]; // (4,11) sym
   X[181] = -X[91]; // (5,11) sym
   X[182] = -X[107]; // (6,11) sym
   X[183] = -X[123]; // (7,11) sym
   X[184] = -X[139]; // (8,11) sym
   X[185] =  X[155]; // (9,11) sym
   X[186] =  X[171]; // (10,11) sym
   X[187] =  2.0 * (Y[36]+Y[39]);
   X[188] = -2.0 * (Y[38]+Y[42]);
   X[189] =  2.0 * (Y[37]+Y[41]);
   X[190] = -2.0 * (Y[40]+Y[44]);
   X[191] =  2.0 * (Y[39]+Y[43]);
   X[192] = -X[12]; // (0,12) sym
   X[193] =  X[28]; // (1,12) sym
   X[194] =  X[44]; // (2,12) sym
   X[195] =  X[60]; // (3,12) sym
   X[196] = -X[76]; // (4,12) sym
   X[197] = -X[92]; // (5,12) sym
   X[198] = -X[108]; // (6,12) sym
   X[199] = -X[124]; // (7,12) sym
   X[200] = -X[140]; // (8,12) sym
   X[201] =  X[156]; // (9,12) sym
   X[202] =  X[172]; // (10,12) sym
   X[203] =  X[188]; // (11,12) sym
   X[204] = -2.0 * (Y[36]+Y[43]);
   X[205] = -2.0 * Y[44];
   X[206] = -2.0 * (Y[37]+Y[45]);
   X[207] = -2.0 * (Y[38]+Y[46]);
   X[208] = -X[13]; // (0,13) sym
   X[209] =  X[29]; // (1,13) sym
   X[210] =  X[45]; // (2,13) sym
   X[211] =  X[61]; // (3,13) sym
   X[212] = -X[77]; // (4,13) sym
   X[213] = -X[93]; // (5,13) sym
   X[214] = -X[109]; // (6,13) sym
   X[215] = -X[125]; // (7,13) sym
   X[216] = -X[141]; // (8,13) sym
   X[217] =  X[157]; // (9,13) sym
   X[218] =  X[173]; // (10,13) sym
   X[219] =  X[189]; // (11,13) sym
   X[220] =  X[205]; // (12,13) sym
   X[221] =  2.0 * (Y[43]-Y[36]);
   X[222] =  2.0 * (Y[38]-Y[46]);
   X[223] =  2.0 * (Y[45]-Y[37]);
   X[224] = -X[14]; // (0,14) sym
   X[225] =  X[30]; // (1,14) sym
   X[226] =  X[46]; // (2,14) sym
   X[227] =  X[62]; // (3,14) sym
   X[228] = -X[78]; // (4,14) sym
   X[229] = -X[94]; // (5,14) sym
   X[230] = -X[110]; // (6,14) sym
   X[231] = -X[126]; // (7,14) sym
   X[232] = -X[142]; // (8,14) sym
   X[233] =  X[158]; // (9,14) sym
   X[234] =  X[174]; // (10,14) sym
   X[235] =  X[190]; // (11,14) sym
   X[236] =  X[206]; // (12,14) sym
   X[237] =  X[222]; // (13,14) sym
   X[238] =  2.0 * (Y[36]-Y[47]);
   X[239] = -2.0 * Y[48];
   X[240] = -X[15]; // (0,15) sym
   X[241] =  X[31]; // (1,15) sym
   X[242] =  X[47]; // (2,15) sym
   X[243] =  X[63]; // (3,15) sym
   X[244] = -X[79]; // (4,15) sym
   X[245] = -X[95]; // (5,15) sym
   X[246] = -X[111]; // (6,15) sym
   X[247] = -X[127]; // (7,15) sym
   X[248] = -X[143]; // (8,15) sym
   X[249] =  X[159]; // (9,15) sym
   X[250] =  X[175]; // (10,15) sym
   X[251] =  X[191]; // (11,15) sym
   X[252] =  X[207]; // (12,15) sym
   X[253] =  X[223]; // (13,15) sym
   X[254] =  X[239]; // (14,15) sym
   X[255] =  2.0 * (Y[36]+Y[47]);
}

void IlmIntFromIlm_GS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
   X[4] = Y[4];
   X[5] =  2.0 * Y[5];
   X[6] =  2.0 * Y[6];
   X[7] =  2.0 * Y[7];
   X[8] =  2.0 * Y[8];
   X[9] = -Y[9];
   X[10] = -2.0 * Y[10];
   X[11] = -2.0 * Y[11];
   X[12] = -2.0 * Y[12];
   X[13] = -2.0 * Y[13];
   X[14] = -2.0 * Y[14];
   X[15] = -2.0 * Y[15];
   X[16] = Y[16];
   X[17] =  2.0 * Y[17];
   X[18] =  2.0 * Y[18];
   X[19] =  2.0 * Y[19];
   X[20] =  2.0 * Y[20];
   X[21] =  2.0 * Y[21];
   X[22] =  2.0 * Y[22];
   X[23] =  2.0 * Y[23];
   X[24] =  2.0 * Y[24];
}

void IlmIntFromIlm_GP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_GS(Y,X);
   X[25] = -X[1]; // (0,1) sym
   X[26] = -X[4]; // l+1,j-1
   X[27] = -X[5]; // l+1,j-1
   X[28] = -X[6]; // l+1,j-1
   X[29] = -X[9]; // l+1,j-1
   X[30] = -X[10]; // l+1,j-1
   X[31] = -X[11]; // l+1,j-1
   X[32] = -X[12]; // l+1,j-1
   X[33] = -X[13]; // l+1,j-1
   X[34] = -X[16]; // l+1,j-1
   X[35] = -X[17]; // l+1,j-1
   X[36] = -X[18]; // l+1,j-1
   X[37] = -X[19]; // l+1,j-1
   X[38] = -X[20]; // l+1,j-1
   X[39] = -X[21]; // l+1,j-1
   X[40] = -X[22]; // l+1,j-1
   X[41] = Y[25];
   X[42] =  2.0 * Y[26];
   X[43] =  2.0 * Y[27];
   X[44] =  2.0 * Y[28];
   X[45] =  2.0 * Y[29];
   X[46] =  2.0 * Y[30];
   X[47] =  2.0 * Y[31];
   X[48] =  2.0 * Y[32];
   X[49] =  2.0 * Y[33];
   X[50] = -X[2]; // (0,2) sym
   X[51] =  X[27]; // (1,2) sym
   X[52] =  2.0 * (Y[4]-Y[7]);
   X[53] = -2.0 * Y[8];
   X[54] =  2.0 * Y[10];
   X[55] =  2.0 * (Y[12]-Y[9]);
   X[56] =  2.0 * Y[13];
   X[57] =  2.0 * (Y[14]-Y[10]);
   X[58] =  2.0 * (Y[15]-Y[11]);
   X[59] = -2.0 * Y[17];
   X[60] =  2.0 * (Y[16]-Y[19]);
   X[61] = -2.0 * Y[20];
   X[62] =  2.0 * (Y[17]-Y[21]);
   X[63] =  2.0 * (Y[18]-Y[22]);
   X[64] =  2.0 * (Y[19]-Y[23]);
   X[65] =  2.0 * (Y[20]-Y[24]);
   X[66] =  2.0 * Y[26];
   X[67] =  2.0 * (Y[28]-Y[25]);
   X[68] =  2.0 * Y[29];
   X[69] =  2.0 * (Y[30]-Y[26]);
   X[70] =  2.0 * (Y[31]-Y[27]);
   X[71] =  2.0 * (Y[32]-Y[28]);
   X[72] =  2.0 * (Y[33]-Y[29]);
   X[73] =  2.0 * (Y[34]-Y[30]);
   X[74] =  2.0 * (Y[35]-Y[31]);
   X[75] = -X[3]; // (0,3) sym
   X[76] =  X[28]; // (1,3) sym
   X[77] =  X[53]; // (2,3) sym
   X[78] =  2.0 * (Y[4]+Y[7]);
   X[79] =  2.0 * Y[11];
   X[80] =  2.0 * Y[13];
   X[81] = -2.0 * (Y[9]+Y[12]);
   X[82] =  2.0 * (Y[11]+Y[15]);
   X[83] = -2.0 * (Y[10]+Y[14]);
   X[84] = -2.0 * Y[18];
   X[85] = -2.0 * Y[20];
   X[86] =  2.0 * (Y[16]+Y[19]);
   X[87] = -2.0 * (Y[18]+Y[22]);
   X[88] =  2.0 * (Y[17]+Y[21]);
   X[89] = -2.0 * (Y[20]+Y[24]);
   X[90] =  2.0 * (Y[19]+Y[23]);
   X[91] =  2.0 * Y[27];
   X[92] =  2.0 * Y[29];
   X[93] = -2.0 * (Y[25]+Y[28]);
   X[94] =  2.0 * (Y[27]+Y[31]);
   X[95] = -2.0 * (Y[26]+Y[30]);
   X[96] =  2.0 * (Y[29]+Y[33]);
   X[97] = -2.0 * (Y[28]+Y[32]);
   X[98] =  2.0 * (Y[31]+Y[35]);
   X[99] = -2.0 * (Y[30]+Y[34]);
}

void IlmIntFromIlm_GD( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_GP(Y,X);
   X[100] =  X[4]; // (0,4) sym
   X[101] = -X[29]; // (1,4) sym
   X[102] = -X[54]; // (2,4) sym
   X[103] = -X[79]; // (3,4) sym
   X[104] = -X[34]; // l+1,j-1
   X[105] = -X[35]; // l+1,j-1
   X[106] = -X[36]; // l+1,j-1
   X[107] = -X[37]; // l+1,j-1
   X[108] = -X[38]; // l+1,j-1
   X[109] = -X[41]; // l+1,j-1
   X[110] = -X[42]; // l+1,j-1
   X[111] = -X[43]; // l+1,j-1
   X[112] = -X[44]; // l+1,j-1
   X[113] = -X[45]; // l+1,j-1
   X[114] = -X[46]; // l+1,j-1
   X[115] = -X[47]; // l+1,j-1
   X[116] = Y[36];
   X[117] =  2.0 * Y[37];
   X[118] =  2.0 * Y[38];
   X[119] =  2.0 * Y[39];
   X[120] =  2.0 * Y[40];
   X[121] =  2.0 * Y[41];
   X[122] =  2.0 * Y[42];
   X[123] =  2.0 * Y[43];
   X[124] =  2.0 * Y[44];
   X[125] =  X[5]; // (0,5) sym
   X[126] = -X[30]; // (1,5) sym
   X[127] = -X[55]; // (2,5) sym
   X[128] = -X[80]; // (3,5) sym
   X[129] =  X[105]; // (4,5) sym
   X[130] = -X[60]; // l+1,j-1
   X[131] = -X[61]; // l+1,j-1
   X[132] = -X[62]; // l+1,j-1
   X[133] = -X[63]; // l+1,j-1
   X[134] = -X[66]; // l+1,j-1
   X[135] = -X[67]; // l+1,j-1
   X[136] = -X[68]; // l+1,j-1
   X[137] = -X[69]; // l+1,j-1
   X[138] = -X[70]; // l+1,j-1
   X[139] = -X[71]; // l+1,j-1
   X[140] = -X[72]; // l+1,j-1
   X[141] =  2.0 * Y[37];
   X[142] =  2.0 * (Y[39]-Y[36]);
   X[143] =  2.0 * Y[40];
   X[144] =  2.0 * (Y[41]-Y[37]);
   X[145] =  2.0 * (Y[42]-Y[38]);
   X[146] =  2.0 * (Y[43]-Y[39]);
   X[147] =  2.0 * (Y[44]-Y[40]);
   X[148] =  2.0 * (Y[45]-Y[41]);
   X[149] =  2.0 * (Y[46]-Y[42]);
   X[150] =  X[6]; // (0,6) sym
   X[151] = -X[31]; // (1,6) sym
   X[152] = -X[56]; // (2,6) sym
   X[153] = -X[81]; // (3,6) sym
   X[154] =  X[106]; // (4,6) sym
   X[155] =  X[131]; // (5,6) sym
   X[156] = -X[86]; // l+1,j-1
   X[157] = -X[87]; // l+1,j-1
   X[158] = -X[88]; // l+1,j-1
   X[159] = -X[91]; // l+1,j-1
   X[160] = -X[92]; // l+1,j-1
   X[161] = -X[93]; // l+1,j-1
   X[162] = -X[94]; // l+1,j-1
   X[163] = -X[95]; // l+1,j-1
   X[164] = -X[96]; // l+1,j-1
   X[165] = -X[97]; // l+1,j-1
   X[166] =  2.0 * Y[38];
   X[167] =  2.0 * Y[40];
   X[168] = -2.0 * (Y[36]+Y[39]);
   X[169] =  2.0 * (Y[38]+Y[42]);
   X[170] = -2.0 * (Y[37]+Y[41]);
   X[171] =  2.0 * (Y[40]+Y[44]);
   X[172] = -2.0 * (Y[39]+Y[43]);
   X[173] =  2.0 * (Y[42]+Y[46]);
   X[174] = -2.0 * (Y[41]+Y[45]);
   X[175] =  X[7]; // (0,7) sym
   X[176] = -X[32]; // (1,7) sym
   X[177] = -X[57]; // (2,7) sym
   X[178] = -X[82]; // (3,7) sym
   X[179] =  X[107]; // (4,7) sym
   X[180] =  X[132]; // (5,7) sym
   X[181] =  X[157]; // (6,7) sym
   X[182] =  2.0 * (Y[16]+Y[23]);
   X[183] =  2.0 * Y[24];
   X[184] = -2.0 * Y[28];
   X[185] =  2.0 * (Y[26]-Y[30]);
   X[186] = -2.0 * (Y[27]+Y[31]);
   X[187] = -2.0 * (Y[25]+Y[32]);
   X[188] = -2.0 * Y[33];
   X[189] = -2.0 * (Y[26]+Y[34]);
   X[190] = -2.0 * (Y[27]+Y[35]);
   X[191] =  2.0 * Y[39];
   X[192] =  2.0 * (Y[41]-Y[37]);
   X[193] =  2.0 * (Y[38]+Y[42]);
   X[194] =  2.0 * (Y[36]+Y[43]);
   X[195] =  2.0 * Y[44];
   X[196] =  2.0 * (Y[37]+Y[45]);
   X[197] =  2.0 * (Y[38]+Y[46]);
   X[198] =  2.0 * (Y[39]+Y[47]);
   X[199] =  2.0 * (Y[40]+Y[48]);
   X[200] =  X[8]; // (0,8) sym
   X[201] = -X[33]; // (1,8) sym
   X[202] = -X[58]; // (2,8) sym
   X[203] = -X[83]; // (3,8) sym
   X[204] =  X[108]; // (4,8) sym
   X[205] =  X[133]; // (5,8) sym
   X[206] =  X[158]; // (6,8) sym
   X[207] =  X[183]; // (7,8) sym
   X[208] =  2.0 * (Y[16]-Y[23]);
   X[209] = -2.0 * Y[29];
   X[210] =  2.0 * (Y[27]-Y[31]);
   X[211] =  2.0 * (Y[26]+Y[30]);
   X[212] = -2.0 * Y[33];
   X[213] =  2.0 * (Y[32]-Y[25]);
   X[214] =  2.0 * (Y[27]-Y[35]);
   X[215] =  2.0 * (Y[34]-Y[26]);
   X[216] =  2.0 * Y[40];
   X[217] =  2.0 * (Y[42]-Y[38]);
   X[218] = -2.0 * (Y[37]+Y[41]);
   X[219] =  2.0 * Y[44];
   X[220] =  2.0 * (Y[36]-Y[43]);
   X[221] =  2.0 * (Y[46]-Y[38]);
   X[222] =  2.0 * (Y[37]-Y[45]);
   X[223] =  2.0 * (Y[48]-Y[40]);
   X[224] =  2.0 * (Y[39]-Y[47]);
}

void IlmIntFromIlm_GF( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_GD(Y,X);
   X[225] = -X[9]; // (0,9) sym
   X[226] =  X[34]; // (1,9) sym
   X[227] =  X[59]; // (2,9) sym
   X[228] =  X[84]; // (3,9) sym
   X[229] = -X[109]; // (4,9) sym
   X[230] = -X[134]; // (5,9) sym
   X[231] = -X[159]; // (6,9) sym
   X[232] = -X[184]; // (7,9) sym
   X[233] = -X[209]; // (8,9) sym
   X[234] = -X[116]; // l+1,j-1
   X[235] = -X[117]; // l+1,j-1
   X[236] = -X[118]; // l+1,j-1
   X[237] = -X[119]; // l+1,j-1
   X[238] = -X[120]; // l+1,j-1
   X[239] = -X[121]; // l+1,j-1
   X[240] = -X[122]; // l+1,j-1
   X[241] = Y[49];
   X[242] =  2.0 * Y[50];
   X[243] =  2.0 * Y[51];
   X[244] =  2.0 * Y[52];
   X[245] =  2.0 * Y[53];
   X[246] =  2.0 * Y[54];
   X[247] =  2.0 * Y[55];
   X[248] =  2.0 * Y[56];
   X[249] =  2.0 * Y[57];
   X[250] = -X[10]; // (0,10) sym
   X[251] =  X[35]; // (1,10) sym
   X[252] =  X[60]; // (2,10) sym
   X[253] =  X[85]; // (3,10) sym
   X[254] = -X[110]; // (4,10) sym
   X[255] = -X[135]; // (5,10) sym
   X[256] = -X[160]; // (6,10) sym
   X[257] = -X[185]; // (7,10) sym
   X[258] = -X[210]; // (8,10) sym
   X[259] =  X[235]; // (9,10) sym
   X[260] = -X[142]; // l+1,j-1
   X[261] = -X[143]; // l+1,j-1
   X[262] = -X[144]; // l+1,j-1
   X[263] = -X[145]; // l+1,j-1
   X[264] = -X[146]; // l+1,j-1
   X[265] = -X[147]; // l+1,j-1
   X[266] =  2.0 * Y[50];
   X[267] =  2.0 * (Y[52]-Y[49]);
   X[268] =  2.0 * Y[53];
   X[269] =  2.0 * (Y[54]-Y[50]);
   X[270] =  2.0 * (Y[55]-Y[51]);
   X[271] =  2.0 * (Y[56]-Y[52]);
   X[272] =  2.0 * (Y[57]-Y[53]);
   X[273] =  2.0 * (Y[58]-Y[54]);
   X[274] =  2.0 * (Y[59]-Y[55]);
   X[275] = -X[11]; // (0,11) sym
   X[276] =  X[36]; // (1,11) sym
   X[277] =  X[61]; // (2,11) sym
   X[278] =  X[86]; // (3,11) sym
   X[279] = -X[111]; // (4,11) sym
   X[280] = -X[136]; // (5,11) sym
   X[281] = -X[161]; // (6,11) sym
   X[282] = -X[186]; // (7,11) sym
   X[283] = -X[211]; // (8,11) sym
   X[284] =  X[236]; // (9,11) sym
   X[285] =  X[261]; // (10,11) sym
   X[286] = -X[168]; // l+1,j-1
   X[287] = -X[169]; // l+1,j-1
   X[288] = -X[170]; // l+1,j-1
   X[289] = -X[171]; // l+1,j-1
   X[290] = -X[172]; // l+1,j-1
   X[291] =  2.0 * Y[51];
   X[292] =  2.0 * Y[53];
   X[293] = -2.0 * (Y[49]+Y[52]);
   X[294] =  2.0 * (Y[51]+Y[55]);
   X[295] = -2.0 * (Y[50]+Y[54]);
   X[296] =  2.0 * (Y[53]+Y[57]);
   X[297] = -2.0 * (Y[52]+Y[56]);
   X[298] =  2.0 * (Y[55]+Y[59]);
   X[299] = -2.0 * (Y[54]+Y[58]);
   X[300] = -X[12]; // (0,12) sym
   X[301] =  X[37]; // (1,12) sym
   X[302] =  X[62]; // (2,12) sym
   X[303] =  X[87]; // (3,12) sym
   X[304] = -X[112]; // (4,12) sym
   X[305] = -X[137]; // (5,12) sym
   X[306] = -X[162]; // (6,12) sym
   X[307] = -X[187]; // (7,12) sym
   X[308] = -X[212]; // (8,12) sym
   X[309] =  X[237]; // (9,12) sym
   X[310] =  X[262]; // (10,12) sym
   X[311] =  X[287]; // (11,12) sym
   X[312] = -X[194]; // l+1,j-1
   X[313] = -X[195]; // l+1,j-1
   X[314] = -X[196]; // l+1,j-1
   X[315] = -X[197]; // l+1,j-1
   X[316] =  2.0 * Y[52];
   X[317] =  2.0 * (Y[54]-Y[50]);
   X[318] =  2.0 * (Y[51]+Y[55]);
   X[319] =  2.0 * (Y[49]+Y[56]);
   X[320] =  2.0 * Y[57];
   X[321] =  2.0 * (Y[50]+Y[58]);
   X[322] =  2.0 * (Y[51]+Y[59]);
   X[323] =  2.0 * (Y[52]+Y[60]);
   X[324] =  2.0 * (Y[53]+Y[61]);
   X[325] = -X[13]; // (0,13) sym
   X[326] =  X[38]; // (1,13) sym
   X[327] =  X[63]; // (2,13) sym
   X[328] =  X[88]; // (3,13) sym
   X[329] = -X[113]; // (4,13) sym
   X[330] = -X[138]; // (5,13) sym
   X[331] = -X[163]; // (6,13) sym
   X[332] = -X[188]; // (7,13) sym
   X[333] = -X[213]; // (8,13) sym
   X[334] =  X[238]; // (9,13) sym
   X[335] =  X[263]; // (10,13) sym
   X[336] =  X[288]; // (11,13) sym
   X[337] =  X[313]; // (12,13) sym
   X[338] = -X[220]; // l+1,j-1
   X[339] = -X[221]; // l+1,j-1
   X[340] = -X[222]; // l+1,j-1
   X[341] =  2.0 * Y[53];
   X[342] =  2.0 * (Y[55]-Y[51]);
   X[343] = -2.0 * (Y[50]+Y[54]);
   X[344] =  2.0 * Y[57];
   X[345] =  2.0 * (Y[49]-Y[56]);
   X[346] =  2.0 * (Y[59]-Y[51]);
   X[347] =  2.0 * (Y[50]-Y[58]);
   X[348] =  2.0 * (Y[61]-Y[53]);
   X[349] =  2.0 * (Y[52]-Y[60]);
   X[350] = -X[14]; // (0,14) sym
   X[351] =  X[39]; // (1,14) sym
   X[352] =  X[64]; // (2,14) sym
   X[353] =  X[89]; // (3,14) sym
   X[354] = -X[114]; // (4,14) sym
   X[355] = -X[139]; // (5,14) sym
   X[356] = -X[164]; // (6,14) sym
   X[357] = -X[189]; // (7,14) sym
   X[358] = -X[214]; // (8,14) sym
   X[359] =  X[239]; // (9,14) sym
   X[360] =  X[264]; // (10,14) sym
   X[361] =  X[289]; // (11,14) sym
   X[362] =  X[314]; // (12,14) sym
   X[363] =  X[339]; // (13,14) sym
   X[364] =  2.0 * (Y[36]-Y[47]);
   X[365] = -2.0 * Y[48];
   X[366] =  2.0 * Y[54];
   X[367] =  2.0 * (Y[56]-Y[52]);
   X[368] =  2.0 * (Y[53]+Y[57]);
   X[369] =  2.0 * (Y[50]+Y[58]);
   X[370] =  2.0 * (Y[59]-Y[51]);
   X[371] =  2.0 * (Y[60]-Y[49]);
   X[372] =  2.0 * Y[61];
   X[373] =  2.0 * (Y[62]-Y[50]);
   X[374] =  2.0 * (Y[63]-Y[51]);
   X[375] = -X[15]; // (0,15) sym
   X[376] =  X[40]; // (1,15) sym
   X[377] =  X[65]; // (2,15) sym
   X[378] =  X[90]; // (3,15) sym
   X[379] = -X[115]; // (4,15) sym
   X[380] = -X[140]; // (5,15) sym
   X[381] = -X[165]; // (6,15) sym
   X[382] = -X[190]; // (7,15) sym
   X[383] = -X[215]; // (8,15) sym
   X[384] =  X[240]; // (9,15) sym
   X[385] =  X[265]; // (10,15) sym
   X[386] =  X[290]; // (11,15) sym
   X[387] =  X[315]; // (12,15) sym
   X[388] =  X[340]; // (13,15) sym
   X[389] =  X[365]; // (14,15) sym
   X[390] =  2.0 * (Y[36]+Y[47]);
   X[391] =  2.0 * Y[55];
   X[392] =  2.0 * (Y[57]-Y[53]);
   X[393] = -2.0 * (Y[52]+Y[56]);
   X[394] =  2.0 * (Y[51]+Y[59]);
   X[395] =  2.0 * (Y[50]-Y[58]);
   X[396] =  2.0 * Y[61];
   X[397] = -2.0 * (Y[49]+Y[60]);
   X[398] =  2.0 * (Y[51]+Y[63]);
   X[399] = -2.0 * (Y[50]+Y[62]);
}

void IlmIntFromIlm_GG( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_GF(Y,X);
   X[400] =  X[16]; // (0,16) sym
   X[401] = -X[41]; // (1,16) sym
   X[402] = -X[66]; // (2,16) sym
   X[403] = -X[91]; // (3,16) sym
   X[404] =  X[116]; // (4,16) sym
   X[405] =  X[141]; // (5,16) sym
   X[406] =  X[166]; // (6,16) sym
   X[407] =  X[191]; // (7,16) sym
   X[408] =  X[216]; // (8,16) sym
   X[409] = -X[241]; // (9,16) sym
   X[410] = -X[266]; // (10,16) sym
   X[411] = -X[291]; // (11,16) sym
   X[412] = -X[316]; // (12,16) sym
   X[413] = -X[341]; // (13,16) sym
   X[414] = -X[366]; // (14,16) sym
   X[415] = -X[391]; // (15,16) sym
   X[416] = Y[64];
   X[417] =  2.0 * Y[65];
   X[418] =  2.0 * Y[66];
   X[419] =  2.0 * Y[67];
   X[420] =  2.0 * Y[68];
   X[421] =  2.0 * Y[69];
   X[422] =  2.0 * Y[70];
   X[423] =  2.0 * Y[71];
   X[424] =  2.0 * Y[72];
   X[425] =  X[17]; // (0,17) sym
   X[426] = -X[42]; // (1,17) sym
   X[427] = -X[67]; // (2,17) sym
   X[428] = -X[92]; // (3,17) sym
   X[429] =  X[117]; // (4,17) sym
   X[430] =  X[142]; // (5,17) sym
   X[431] =  X[167]; // (6,17) sym
   X[432] =  X[192]; // (7,17) sym
   X[433] =  X[217]; // (8,17) sym
   X[434] = -X[242]; // (9,17) sym
   X[435] = -X[267]; // (10,17) sym
   X[436] = -X[292]; // (11,17) sym
   X[437] = -X[317]; // (12,17) sym
   X[438] = -X[342]; // (13,17) sym
   X[439] = -X[367]; // (14,17) sym
   X[440] = -X[392]; // (15,17) sym
   X[441] =  X[417]; // (16,17) sym
   X[442] =  2.0 * (Y[67]-Y[64]);
   X[443] =  2.0 * Y[68];
   X[444] =  2.0 * (Y[69]-Y[65]);
   X[445] =  2.0 * (Y[70]-Y[66]);
   X[446] =  2.0 * (Y[71]-Y[67]);
   X[447] =  2.0 * (Y[72]-Y[68]);
   X[448] =  2.0 * (Y[73]-Y[69]);
   X[449] =  2.0 * (Y[74]-Y[70]);
   X[450] =  X[18]; // (0,18) sym
   X[451] = -X[43]; // (1,18) sym
   X[452] = -X[68]; // (2,18) sym
   X[453] = -X[93]; // (3,18) sym
   X[454] =  X[118]; // (4,18) sym
   X[455] =  X[143]; // (5,18) sym
   X[456] =  X[168]; // (6,18) sym
   X[457] =  X[193]; // (7,18) sym
   X[458] =  X[218]; // (8,18) sym
   X[459] = -X[243]; // (9,18) sym
   X[460] = -X[268]; // (10,18) sym
   X[461] = -X[293]; // (11,18) sym
   X[462] = -X[318]; // (12,18) sym
   X[463] = -X[343]; // (13,18) sym
   X[464] = -X[368]; // (14,18) sym
   X[465] = -X[393]; // (15,18) sym
   X[466] =  X[418]; // (16,18) sym
   X[467] =  X[443]; // (17,18) sym
   X[468] = -2.0 * (Y[64]+Y[67]);
   X[469] =  2.0 * (Y[66]+Y[70]);
   X[470] = -2.0 * (Y[65]+Y[69]);
   X[471] =  2.0 * (Y[68]+Y[72]);
   X[472] = -2.0 * (Y[67]+Y[71]);
   X[473] =  2.0 * (Y[70]+Y[74]);
   X[474] = -2.0 * (Y[69]+Y[73]);
   X[475] =  X[19]; // (0,19) sym
   X[476] = -X[44]; // (1,19) sym
   X[477] = -X[69]; // (2,19) sym
   X[478] = -X[94]; // (3,19) sym
   X[479] =  X[119]; // (4,19) sym
   X[480] =  X[144]; // (5,19) sym
   X[481] =  X[169]; // (6,19) sym
   X[482] =  X[194]; // (7,19) sym
   X[483] =  X[219]; // (8,19) sym
   X[484] = -X[244]; // (9,19) sym
   X[485] = -X[269]; // (10,19) sym
   X[486] = -X[294]; // (11,19) sym
   X[487] = -X[319]; // (12,19) sym
   X[488] = -X[344]; // (13,19) sym
   X[489] = -X[369]; // (14,19) sym
   X[490] = -X[394]; // (15,19) sym
   X[491] =  X[419]; // (16,19) sym
   X[492] =  X[444]; // (17,19) sym
   X[493] =  X[469]; // (18,19) sym
   X[494] =  2.0 * (Y[64]+Y[71]);
   X[495] =  2.0 * Y[72];
   X[496] =  2.0 * (Y[65]+Y[73]);
   X[497] =  2.0 * (Y[66]+Y[74]);
   X[498] =  2.0 * (Y[67]+Y[75]);
   X[499] =  2.0 * (Y[68]+Y[76]);
   X[500] =  X[20]; // (0,20) sym
   X[501] = -X[45]; // (1,20) sym
   X[502] = -X[70]; // (2,20) sym
   X[503] = -X[95]; // (3,20) sym
   X[504] =  X[120]; // (4,20) sym
   X[505] =  X[145]; // (5,20) sym
   X[506] =  X[170]; // (6,20) sym
   X[507] =  X[195]; // (7,20) sym
   X[508] =  X[220]; // (8,20) sym
   X[509] = -X[245]; // (9,20) sym
   X[510] = -X[270]; // (10,20) sym
   X[511] = -X[295]; // (11,20) sym
   X[512] = -X[320]; // (12,20) sym
   X[513] = -X[345]; // (13,20) sym
   X[514] = -X[370]; // (14,20) sym
   X[515] = -X[395]; // (15,20) sym
   X[516] =  X[420]; // (16,20) sym
   X[517] =  X[445]; // (17,20) sym
   X[518] =  X[470]; // (18,20) sym
   X[519] =  X[495]; // (19,20) sym
   X[520] =  2.0 * (Y[64]-Y[71]);
   X[521] =  2.0 * (Y[74]-Y[66]);
   X[522] =  2.0 * (Y[65]-Y[73]);
   X[523] =  2.0 * (Y[76]-Y[68]);
   X[524] =  2.0 * (Y[67]-Y[75]);
   X[525] =  X[21]; // (0,21) sym
   X[526] = -X[46]; // (1,21) sym
   X[527] = -X[71]; // (2,21) sym
   X[528] = -X[96]; // (3,21) sym
   X[529] =  X[121]; // (4,21) sym
   X[530] =  X[146]; // (5,21) sym
   X[531] =  X[171]; // (6,21) sym
   X[532] =  X[196]; // (7,21) sym
   X[533] =  X[221]; // (8,21) sym
   X[534] = -X[246]; // (9,21) sym
   X[535] = -X[271]; // (10,21) sym
   X[536] = -X[296]; // (11,21) sym
   X[537] = -X[321]; // (12,21) sym
   X[538] = -X[346]; // (13,21) sym
   X[539] = -X[371]; // (14,21) sym
   X[540] = -X[396]; // (15,21) sym
   X[541] =  X[421]; // (16,21) sym
   X[542] =  X[446]; // (17,21) sym
   X[543] =  X[471]; // (18,21) sym
   X[544] =  X[496]; // (19,21) sym
   X[545] =  X[521]; // (20,21) sym
   X[546] =  2.0 * (Y[75]-Y[64]);
   X[547] =  2.0 * Y[76];
   X[548] =  2.0 * (Y[77]-Y[65]);
   X[549] =  2.0 * (Y[78]-Y[66]);
   X[550] =  X[22]; // (0,22) sym
   X[551] = -X[47]; // (1,22) sym
   X[552] = -X[72]; // (2,22) sym
   X[553] = -X[97]; // (3,22) sym
   X[554] =  X[122]; // (4,22) sym
   X[555] =  X[147]; // (5,22) sym
   X[556] =  X[172]; // (6,22) sym
   X[557] =  X[197]; // (7,22) sym
   X[558] =  X[222]; // (8,22) sym
   X[559] = -X[247]; // (9,22) sym
   X[560] = -X[272]; // (10,22) sym
   X[561] = -X[297]; // (11,22) sym
   X[562] = -X[322]; // (12,22) sym
   X[563] = -X[347]; // (13,22) sym
   X[564] = -X[372]; // (14,22) sym
   X[565] = -X[397]; // (15,22) sym
   X[566] =  X[422]; // (16,22) sym
   X[567] =  X[447]; // (17,22) sym
   X[568] =  X[472]; // (18,22) sym
   X[569] =  X[497]; // (19,22) sym
   X[570] =  X[522]; // (20,22) sym
   X[571] =  X[547]; // (21,22) sym
   X[572] = -2.0 * (Y[64]+Y[75]);
   X[573] =  2.0 * (Y[66]+Y[78]);
   X[574] = -2.0 * (Y[65]+Y[77]);
   X[575] =  X[23]; // (0,23) sym
   X[576] = -X[48]; // (1,23) sym
   X[577] = -X[73]; // (2,23) sym
   X[578] = -X[98]; // (3,23) sym
   X[579] =  X[123]; // (4,23) sym
   X[580] =  X[148]; // (5,23) sym
   X[581] =  X[173]; // (6,23) sym
   X[582] =  X[198]; // (7,23) sym
   X[583] =  X[223]; // (8,23) sym
   X[584] = -X[248]; // (9,23) sym
   X[585] = -X[273]; // (10,23) sym
   X[586] = -X[298]; // (11,23) sym
   X[587] = -X[323]; // (12,23) sym
   X[588] = -X[348]; // (13,23) sym
   X[589] = -X[373]; // (14,23) sym
   X[590] = -X[398]; // (15,23) sym
   X[591] =  X[423]; // (16,23) sym
   X[592] =  X[448]; // (17,23) sym
   X[593] =  X[473]; // (18,23) sym
   X[594] =  X[498]; // (19,23) sym
   X[595] =  X[523]; // (20,23) sym
   X[596] =  X[548]; // (21,23) sym
   X[597] =  X[573]; // (22,23) sym
   X[598] =  2.0 * (Y[64]+Y[79]);
   X[599] =  2.0 * Y[80];
   X[600] =  X[24]; // (0,24) sym
   X[601] = -X[49]; // (1,24) sym
   X[602] = -X[74]; // (2,24) sym
   X[603] = -X[99]; // (3,24) sym
   X[604] =  X[124]; // (4,24) sym
   X[605] =  X[149]; // (5,24) sym
   X[606] =  X[174]; // (6,24) sym
   X[607] =  X[199]; // (7,24) sym
   X[608] =  X[224]; // (8,24) sym
   X[609] = -X[249]; // (9,24) sym
   X[610] = -X[274]; // (10,24) sym
   X[611] = -X[299]; // (11,24) sym
   X[612] = -X[324]; // (12,24) sym
   X[613] = -X[349]; // (13,24) sym
   X[614] = -X[374]; // (14,24) sym
   X[615] = -X[399]; // (15,24) sym
   X[616] =  X[424]; // (16,24) sym
   X[617] =  X[449]; // (17,24) sym
   X[618] =  X[474]; // (18,24) sym
   X[619] =  X[499]; // (19,24) sym
   X[620] =  X[524]; // (20,24) sym
   X[621] =  X[549]; // (21,24) sym
   X[622] =  X[574]; // (22,24) sym
   X[623] =  X[599]; // (23,24) sym
   X[624] =  2.0 * (Y[64]-Y[79]);
}

void IlmIntFromIlm_HS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
   X[4] = Y[4];
   X[5] =  2.0 * Y[5];
   X[6] =  2.0 * Y[6];
   X[7] =  2.0 * Y[7];
   X[8] =  2.0 * Y[8];
   X[9] = -Y[9];
   X[10] = -2.0 * Y[10];
   X[11] = -2.0 * Y[11];
   X[12] = -2.0 * Y[12];
   X[13] = -2.0 * Y[13];
   X[14] = -2.0 * Y[14];
   X[15] = -2.0 * Y[15];
   X[16] = Y[16];
   X[17] =  2.0 * Y[17];
   X[18] =  2.0 * Y[18];
   X[19] =  2.0 * Y[19];
   X[20] =  2.0 * Y[20];
   X[21] =  2.0 * Y[21];
   X[22] =  2.0 * Y[22];
   X[23] =  2.0 * Y[23];
   X[24] =  2.0 * Y[24];
   X[25] = -Y[25];
   X[26] = -2.0 * Y[26];
   X[27] = -2.0 * Y[27];
   X[28] = -2.0 * Y[28];
   X[29] = -2.0 * Y[29];
   X[30] = -2.0 * Y[30];
   X[31] = -2.0 * Y[31];
   X[32] = -2.0 * Y[32];
   X[33] = -2.0 * Y[33];
   X[34] = -2.0 * Y[34];
   X[35] = -2.0 * Y[35];
}

void IlmIntFromIlm_HP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_HS(Y,X);
   X[36] = -X[1]; // (0,1) sym
   X[37] = -X[4]; // l+1,j-1
   X[38] = -X[5]; // l+1,j-1
   X[39] = -X[6]; // l+1,j-1
   X[40] = -X[9]; // l+1,j-1
   X[41] = -X[10]; // l+1,j-1
   X[42] = -X[11]; // l+1,j-1
   X[43] = -X[12]; // l+1,j-1
   X[44] = -X[13]; // l+1,j-1
   X[45] = -X[16]; // l+1,j-1
   X[46] = -X[17]; // l+1,j-1
   X[47] = -X[18]; // l+1,j-1
   X[48] = -X[19]; // l+1,j-1
   X[49] = -X[20]; // l+1,j-1
   X[50] = -X[21]; // l+1,j-1
   X[51] = -X[22]; // l+1,j-1
   X[52] = -X[25]; // l+1,j-1
   X[53] = -X[26]; // l+1,j-1
   X[54] = -X[27]; // l+1,j-1
   X[55] = -X[28]; // l+1,j-1
   X[56] = -X[29]; // l+1,j-1
   X[57] = -X[30]; // l+1,j-1
   X[58] = -X[31]; // l+1,j-1
   X[59] = -X[32]; // l+1,j-1
   X[60] = -X[33]; // l+1,j-1
   X[61] = -Y[36];
   X[62] = -2.0 * Y[37];
   X[63] = -2.0 * Y[38];
   X[64] = -2.0 * Y[39];
   X[65] = -2.0 * Y[40];
   X[66] = -2.0 * Y[41];
   X[67] = -2.0 * Y[42];
   X[68] = -2.0 * Y[43];
   X[69] = -2.0 * Y[44];
   X[70] = -2.0 * Y[45];
   X[71] = -2.0 * Y[46];
   X[72] = -X[2]; // (0,2) sym
   X[73] =  X[38]; // (1,2) sym
   X[74] =  2.0 * (Y[4]-Y[7]);
   X[75] = -2.0 * Y[8];
   X[76] =  2.0 * Y[10];
   X[77] =  2.0 * (Y[12]-Y[9]);
   X[78] =  2.0 * Y[13];
   X[79] =  2.0 * (Y[14]-Y[10]);
   X[80] =  2.0 * (Y[15]-Y[11]);
   X[81] = -2.0 * Y[17];
   X[82] =  2.0 * (Y[16]-Y[19]);
   X[83] = -2.0 * Y[20];
   X[84] =  2.0 * (Y[17]-Y[21]);
   X[85] =  2.0 * (Y[18]-Y[22]);
   X[86] =  2.0 * (Y[19]-Y[23]);
   X[87] =  2.0 * (Y[20]-Y[24]);
   X[88] =  2.0 * Y[26];
   X[89] =  2.0 * (Y[28]-Y[25]);
   X[90] =  2.0 * Y[29];
   X[91] =  2.0 * (Y[30]-Y[26]);
   X[92] =  2.0 * (Y[31]-Y[27]);
   X[93] =  2.0 * (Y[32]-Y[28]);
   X[94] =  2.0 * (Y[33]-Y[29]);
   X[95] =  2.0 * (Y[34]-Y[30]);
   X[96] =  2.0 * (Y[35]-Y[31]);
   X[97] = -2.0 * Y[37];
   X[98] =  2.0 * (Y[36]-Y[39]);
   X[99] = -2.0 * Y[40];
   X[100] =  2.0 * (Y[37]-Y[41]);
   X[101] =  2.0 * (Y[38]-Y[42]);
   X[102] =  2.0 * (Y[39]-Y[43]);
   X[103] =  2.0 * (Y[40]-Y[44]);
   X[104] =  2.0 * (Y[41]-Y[45]);
   X[105] =  2.0 * (Y[42]-Y[46]);
   X[106] =  2.0 * (Y[43]-Y[47]);
   X[107] =  2.0 * (Y[44]-Y[48]);
   X[108] = -X[3]; // (0,3) sym
   X[109] =  X[39]; // (1,3) sym
   X[110] =  X[75]; // (2,3) sym
   X[111] =  2.0 * (Y[4]+Y[7]);
   X[112] =  2.0 * Y[11];
   X[113] =  2.0 * Y[13];
   X[114] = -2.0 * (Y[9]+Y[12]);
   X[115] =  2.0 * (Y[11]+Y[15]);
   X[116] = -2.0 * (Y[10]+Y[14]);
   X[117] = -2.0 * Y[18];
   X[118] = -2.0 * Y[20];
   X[119] =  2.0 * (Y[16]+Y[19]);
   X[120] = -2.0 * (Y[18]+Y[22]);
   X[121] =  2.0 * (Y[17]+Y[21]);
   X[122] = -2.0 * (Y[20]+Y[24]);
   X[123] =  2.0 * (Y[19]+Y[23]);
   X[124] =  2.0 * Y[27];
   X[125] =  2.0 * Y[29];
   X[126] = -2.0 * (Y[25]+Y[28]);
   X[127] =  2.0 * (Y[27]+Y[31]);
   X[128] = -2.0 * (Y[26]+Y[30]);
   X[129] =  2.0 * (Y[29]+Y[33]);
   X[130] = -2.0 * (Y[28]+Y[32]);
   X[131] =  2.0 * (Y[31]+Y[35]);
   X[132] = -2.0 * (Y[30]+Y[34]);
   X[133] = -2.0 * Y[38];
   X[134] = -2.0 * Y[40];
   X[135] =  2.0 * (Y[36]+Y[39]);
   X[136] = -2.0 * (Y[38]+Y[42]);
   X[137] =  2.0 * (Y[37]+Y[41]);
   X[138] = -2.0 * (Y[40]+Y[44]);
   X[139] =  2.0 * (Y[39]+Y[43]);
   X[140] = -2.0 * (Y[42]+Y[46]);
   X[141] =  2.0 * (Y[41]+Y[45]);
   X[142] = -2.0 * (Y[44]+Y[48]);
   X[143] =  2.0 * (Y[43]+Y[47]);
}

void IlmIntFromIlm_HD( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_HP(Y,X);
   X[144] =  X[4]; // (0,4) sym
   X[145] = -X[40]; // (1,4) sym
   X[146] = -X[76]; // (2,4) sym
   X[147] = -X[112]; // (3,4) sym
   X[148] = -X[45]; // l+1,j-1
   X[149] = -X[46]; // l+1,j-1
   X[150] = -X[47]; // l+1,j-1
   X[151] = -X[48]; // l+1,j-1
   X[152] = -X[49]; // l+1,j-1
   X[153] = -X[52]; // l+1,j-1
   X[154] = -X[53]; // l+1,j-1
   X[155] = -X[54]; // l+1,j-1
   X[156] = -X[55]; // l+1,j-1
   X[157] = -X[56]; // l+1,j-1
   X[158] = -X[57]; // l+1,j-1
   X[159] = -X[58]; // l+1,j-1
   X[160] = -X[61]; // l+1,j-1
   X[161] = -X[62]; // l+1,j-1
   X[162] = -X[63]; // l+1,j-1
   X[163] = -X[64]; // l+1,j-1
   X[164] = -X[65]; // l+1,j-1
   X[165] = -X[66]; // l+1,j-1
   X[166] = -X[67]; // l+1,j-1
   X[167] = -X[68]; // l+1,j-1
   X[168] = -X[69]; // l+1,j-1
   X[169] = -Y[49];
   X[170] = -2.0 * Y[50];
   X[171] = -2.0 * Y[51];
   X[172] = -2.0 * Y[52];
   X[173] = -2.0 * Y[53];
   X[174] = -2.0 * Y[54];
   X[175] = -2.0 * Y[55];
   X[176] = -2.0 * Y[56];
   X[177] = -2.0 * Y[57];
   X[178] = -2.0 * Y[58];
   X[179] = -2.0 * Y[59];
   X[180] =  X[5]; // (0,5) sym
   X[181] = -X[41]; // (1,5) sym
   X[182] = -X[77]; // (2,5) sym
   X[183] = -X[113]; // (3,5) sym
   X[184] =  X[149]; // (4,5) sym
   X[185] = -X[82]; // l+1,j-1
   X[186] = -X[83]; // l+1,j-1
   X[187] = -X[84]; // l+1,j-1
   X[188] = -X[85]; // l+1,j-1
   X[189] = -X[88]; // l+1,j-1
   X[190] = -X[89]; // l+1,j-1
   X[191] = -X[90]; // l+1,j-1
   X[192] = -X[91]; // l+1,j-1
   X[193] = -X[92]; // l+1,j-1
   X[194] = -X[93]; // l+1,j-1
   X[195] = -X[94]; // l+1,j-1
   X[196] = -X[97]; // l+1,j-1
   X[197] = -X[98]; // l+1,j-1
   X[198] = -X[99]; // l+1,j-1
   X[199] = -X[100]; // l+1,j-1
   X[200] = -X[101]; // l+1,j-1
   X[201] = -X[102]; // l+1,j-1
   X[202] = -X[103]; // l+1,j-1
   X[203] = -X[104]; // l+1,j-1
   X[204] = -X[105]; // l+1,j-1
   X[205] = -2.0 * Y[50];
   X[206] =  2.0 * (Y[49]-Y[52]);
   X[207] = -2.0 * Y[53];
   X[208] =  2.0 * (Y[50]-Y[54]);
   X[209] =  2.0 * (Y[51]-Y[55]);
   X[210] =  2.0 * (Y[52]-Y[56]);
   X[211] =  2.0 * (Y[53]-Y[57]);
   X[212] =  2.0 * (Y[54]-Y[58]);
   X[213] =  2.0 * (Y[55]-Y[59]);
   X[214] =  2.0 * (Y[56]-Y[60]);
   X[215] =  2.0 * (Y[57]-Y[61]);
   X[216] =  X[6]; // (0,6) sym
   X[217] = -X[42]; // (1,6) sym
   X[218] = -X[78]; // (2,6) sym
   X[219] = -X[114]; // (3,6) sym
   X[220] =  X[150]; // (4,6) sym
   X[221] =  X[186]; // (5,6) sym
   X[222] = -X[119]; // l+1,j-1
   X[223] = -X[120]; // l+1,j-1
   X[224] = -X[121]; // l+1,j-1
   X[225] = -X[124]; // l+1,j-1
   X[226] = -X[125]; // l+1,j-1
   X[227] = -X[126]; // l+1,j-1
   X[228] = -X[127]; // l+1,j-1
   X[229] = -X[128]; // l+1,j-1
   X[230] = -X[129]; // l+1,j-1
   X[231] = -X[130]; // l+1,j-1
   X[232] = -X[133]; // l+1,j-1
   X[233] = -X[134]; // l+1,j-1
   X[234] = -X[135]; // l+1,j-1
   X[235] = -X[136]; // l+1,j-1
   X[236] = -X[137]; // l+1,j-1
   X[237] = -X[138]; // l+1,j-1
   X[238] = -X[139]; // l+1,j-1
   X[239] = -X[140]; // l+1,j-1
   X[240] = -X[141]; // l+1,j-1
   X[241] = -2.0 * Y[51];
   X[242] = -2.0 * Y[53];
   X[243] =  2.0 * (Y[49]+Y[52]);
   X[244] = -2.0 * (Y[51]+Y[55]);
   X[245] =  2.0 * (Y[50]+Y[54]);
   X[246] = -2.0 * (Y[53]+Y[57]);
   X[247] =  2.0 * (Y[52]+Y[56]);
   X[248] = -2.0 * (Y[55]+Y[59]);
   X[249] =  2.0 * (Y[54]+Y[58]);
   X[250] = -2.0 * (Y[57]+Y[61]);
   X[251] =  2.0 * (Y[56]+Y[60]);
   X[252] =  X[7]; // (0,7) sym
   X[253] = -X[43]; // (1,7) sym
   X[254] = -X[79]; // (2,7) sym
   X[255] = -X[115]; // (3,7) sym
   X[256] =  X[151]; // (4,7) sym
   X[257] =  X[187]; // (5,7) sym
   X[258] =  X[223]; // (6,7) sym
   X[259] =  2.0 * (Y[16]+Y[23]);
   X[260] =  2.0 * Y[24];
   X[261] = -2.0 * Y[28];
   X[262] =  2.0 * (Y[26]-Y[30]);
   X[263] = -2.0 * (Y[27]+Y[31]);
   X[264] = -2.0 * (Y[25]+Y[32]);
   X[265] = -2.0 * Y[33];
   X[266] = -2.0 * (Y[26]+Y[34]);
   X[267] = -2.0 * (Y[27]+Y[35]);
   X[268] =  2.0 * Y[39];
   X[269] =  2.0 * (Y[41]-Y[37]);
   X[270] =  2.0 * (Y[38]+Y[42]);
   X[271] =  2.0 * (Y[36]+Y[43]);
   X[272] =  2.0 * Y[44];
   X[273] =  2.0 * (Y[37]+Y[45]);
   X[274] =  2.0 * (Y[38]+Y[46]);
   X[275] =  2.0 * (Y[39]+Y[47]);
   X[276] =  2.0 * (Y[40]+Y[48]);
   X[277] = -2.0 * Y[52];
   X[278] =  2.0 * (Y[50]-Y[54]);
   X[279] = -2.0 * (Y[51]+Y[55]);
   X[280] = -2.0 * (Y[49]+Y[56]);
   X[281] = -2.0 * Y[57];
   X[282] = -2.0 * (Y[50]+Y[58]);
   X[283] = -2.0 * (Y[51]+Y[59]);
   X[284] = -2.0 * (Y[52]+Y[60]);
   X[285] = -2.0 * (Y[53]+Y[61]);
   X[286] = -2.0 * (Y[54]+Y[62]);
   X[287] = -2.0 * (Y[55]+Y[63]);
   X[288] =  X[8]; // (0,8) sym
   X[289] = -X[44]; // (1,8) sym
   X[290] = -X[80]; // (2,8) sym
   X[291] = -X[116]; // (3,8) sym
   X[292] =  X[152]; // (4,8) sym
   X[293] =  X[188]; // (5,8) sym
   X[294] =  X[224]; // (6,8) sym
   X[295] =  X[260]; // (7,8) sym
   X[296] =  2.0 * (Y[16]-Y[23]);
   X[297] = -2.0 * Y[29];
   X[298] =  2.0 * (Y[27]-Y[31]);
   X[299] =  2.0 * (Y[26]+Y[30]);
   X[300] = -2.0 * Y[33];
   X[301] =  2.0 * (Y[32]-Y[25]);
   X[302] =  2.0 * (Y[27]-Y[35]);
   X[303] =  2.0 * (Y[34]-Y[26]);
   X[304] =  2.0 * Y[40];
   X[305] =  2.0 * (Y[42]-Y[38]);
   X[306] = -2.0 * (Y[37]+Y[41]);
   X[307] =  2.0 * Y[44];
   X[308] =  2.0 * (Y[36]-Y[43]);
   X[309] =  2.0 * (Y[46]-Y[38]);
   X[310] =  2.0 * (Y[37]-Y[45]);
   X[311] =  2.0 * (Y[48]-Y[40]);
   X[312] =  2.0 * (Y[39]-Y[47]);
   X[313] = -2.0 * Y[53];
   X[314] =  2.0 * (Y[51]-Y[55]);
   X[315] =  2.0 * (Y[50]+Y[54]);
   X[316] = -2.0 * Y[57];
   X[317] =  2.0 * (Y[56]-Y[49]);
   X[318] =  2.0 * (Y[51]-Y[59]);
   X[319] =  2.0 * (Y[58]-Y[50]);
   X[320] =  2.0 * (Y[53]-Y[61]);
   X[321] =  2.0 * (Y[60]-Y[52]);
   X[322] =  2.0 * (Y[55]-Y[63]);
   X[323] =  2.0 * (Y[62]-Y[54]);
}

void IlmIntFromIlm_HF( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_HD(Y,X);
   X[324] = -X[9]; // (0,9) sym
   X[325] =  X[45]; // (1,9) sym
   X[326] =  X[81]; // (2,9) sym
   X[327] =  X[117]; // (3,9) sym
   X[328] = -X[153]; // (4,9) sym
   X[329] = -X[189]; // (5,9) sym
   X[330] = -X[225]; // (6,9) sym
   X[331] = -X[261]; // (7,9) sym
   X[332] = -X[297]; // (8,9) sym
   X[333] = -X[160]; // l+1,j-1
   X[334] = -X[161]; // l+1,j-1
   X[335] = -X[162]; // l+1,j-1
   X[336] = -X[163]; // l+1,j-1
   X[337] = -X[164]; // l+1,j-1
   X[338] = -X[165]; // l+1,j-1
   X[339] = -X[166]; // l+1,j-1
   X[340] = -X[169]; // l+1,j-1
   X[341] = -X[170]; // l+1,j-1
   X[342] = -X[171]; // l+1,j-1
   X[343] = -X[172]; // l+1,j-1
   X[344] = -X[173]; // l+1,j-1
   X[345] = -X[174]; // l+1,j-1
   X[346] = -X[175]; // l+1,j-1
   X[347] = -X[176]; // l+1,j-1
   X[348] = -X[177]; // l+1,j-1
   X[349] = -Y[64];
   X[350] = -2.0 * Y[65];
   X[351] = -2.0 * Y[66];
   X[352] = -2.0 * Y[67];
   X[353] = -2.0 * Y[68];
   X[354] = -2.0 * Y[69];
   X[355] = -2.0 * Y[70];
   X[356] = -2.0 * Y[71];
   X[357] = -2.0 * Y[72];
   X[358] = -2.0 * Y[73];
   X[359] = -2.0 * Y[74];
   X[360] = -X[10]; // (0,10) sym
   X[361] =  X[46]; // (1,10) sym
   X[362] =  X[82]; // (2,10) sym
   X[363] =  X[118]; // (3,10) sym
   X[364] = -X[154]; // (4,10) sym
   X[365] = -X[190]; // (5,10) sym
   X[366] = -X[226]; // (6,10) sym
   X[367] = -X[262]; // (7,10) sym
   X[368] = -X[298]; // (8,10) sym
   X[369] =  X[334]; // (9,10) sym
   X[370] = -X[197]; // l+1,j-1
   X[371] = -X[198]; // l+1,j-1
   X[372] = -X[199]; // l+1,j-1
   X[373] = -X[200]; // l+1,j-1
   X[374] = -X[201]; // l+1,j-1
   X[375] = -X[202]; // l+1,j-1
   X[376] = -X[205]; // l+1,j-1
   X[377] = -X[206]; // l+1,j-1
   X[378] = -X[207]; // l+1,j-1
   X[379] = -X[208]; // l+1,j-1
   X[380] = -X[209]; // l+1,j-1
   X[381] = -X[210]; // l+1,j-1
   X[382] = -X[211]; // l+1,j-1
   X[383] = -X[212]; // l+1,j-1
   X[384] = -X[213]; // l+1,j-1
   X[385] = -2.0 * Y[65];
   X[386] =  2.0 * (Y[64]-Y[67]);
   X[387] = -2.0 * Y[68];
   X[388] =  2.0 * (Y[65]-Y[69]);
   X[389] =  2.0 * (Y[66]-Y[70]);
   X[390] =  2.0 * (Y[67]-Y[71]);
   X[391] =  2.0 * (Y[68]-Y[72]);
   X[392] =  2.0 * (Y[69]-Y[73]);
   X[393] =  2.0 * (Y[70]-Y[74]);
   X[394] =  2.0 * (Y[71]-Y[75]);
   X[395] =  2.0 * (Y[72]-Y[76]);
   X[396] = -X[11]; // (0,11) sym
   X[397] =  X[47]; // (1,11) sym
   X[398] =  X[83]; // (2,11) sym
   X[399] =  X[119]; // (3,11) sym
   X[400] = -X[155]; // (4,11) sym
   X[401] = -X[191]; // (5,11) sym
   X[402] = -X[227]; // (6,11) sym
   X[403] = -X[263]; // (7,11) sym
   X[404] = -X[299]; // (8,11) sym
   X[405] =  X[335]; // (9,11) sym
   X[406] =  X[371]; // (10,11) sym
   X[407] = -X[234]; // l+1,j-1
   X[408] = -X[235]; // l+1,j-1
   X[409] = -X[236]; // l+1,j-1
   X[410] = -X[237]; // l+1,j-1
   X[411] = -X[238]; // l+1,j-1
   X[412] = -X[241]; // l+1,j-1
   X[413] = -X[242]; // l+1,j-1
   X[414] = -X[243]; // l+1,j-1
   X[415] = -X[244]; // l+1,j-1
   X[416] = -X[245]; // l+1,j-1
   X[417] = -X[246]; // l+1,j-1
   X[418] = -X[247]; // l+1,j-1
   X[419] = -X[248]; // l+1,j-1
   X[420] = -X[249]; // l+1,j-1
   X[421] = -2.0 * Y[66];
   X[422] = -2.0 * Y[68];
   X[423] =  2.0 * (Y[64]+Y[67]);
   X[424] = -2.0 * (Y[66]+Y[70]);
   X[425] =  2.0 * (Y[65]+Y[69]);
   X[426] = -2.0 * (Y[68]+Y[72]);
   X[427] =  2.0 * (Y[67]+Y[71]);
   X[428] = -2.0 * (Y[70]+Y[74]);
   X[429] =  2.0 * (Y[69]+Y[73]);
   X[430] = -2.0 * (Y[72]+Y[76]);
   X[431] =  2.0 * (Y[71]+Y[75]);
   X[432] = -X[12]; // (0,12) sym
   X[433] =  X[48]; // (1,12) sym
   X[434] =  X[84]; // (2,12) sym
   X[435] =  X[120]; // (3,12) sym
   X[436] = -X[156]; // (4,12) sym
   X[437] = -X[192]; // (5,12) sym
   X[438] = -X[228]; // (6,12) sym
   X[439] = -X[264]; // (7,12) sym
   X[440] = -X[300]; // (8,12) sym
   X[441] =  X[336]; // (9,12) sym
   X[442] =  X[372]; // (10,12) sym
   X[443] =  X[408]; // (11,12) sym
   X[444] = -X[271]; // l+1,j-1
   X[445] = -X[272]; // l+1,j-1
   X[446] = -X[273]; // l+1,j-1
   X[447] = -X[274]; // l+1,j-1
   X[448] = -X[277]; // l+1,j-1
   X[449] = -X[278]; // l+1,j-1
   X[450] = -X[279]; // l+1,j-1
   X[451] = -X[280]; // l+1,j-1
   X[452] = -X[281]; // l+1,j-1
   X[453] = -X[282]; // l+1,j-1
   X[454] = -X[283]; // l+1,j-1
   X[455] = -X[284]; // l+1,j-1
   X[456] = -X[285]; // l+1,j-1
   X[457] = -2.0 * Y[67];
   X[458] =  2.0 * (Y[65]-Y[69]);
   X[459] = -2.0 * (Y[66]+Y[70]);
   X[460] = -2.0 * (Y[64]+Y[71]);
   X[461] = -2.0 * Y[72];
   X[462] = -2.0 * (Y[65]+Y[73]);
   X[463] = -2.0 * (Y[66]+Y[74]);
   X[464] = -2.0 * (Y[67]+Y[75]);
   X[465] = -2.0 * (Y[68]+Y[76]);
   X[466] = -2.0 * (Y[69]+Y[77]);
   X[467] = -2.0 * (Y[70]+Y[78]);
   X[468] = -X[13]; // (0,13) sym
   X[469] =  X[49]; // (1,13) sym
   X[470] =  X[85]; // (2,13) sym
   X[471] =  X[121]; // (3,13) sym
   X[472] = -X[157]; // (4,13) sym
   X[473] = -X[193]; // (5,13) sym
   X[474] = -X[229]; // (6,13) sym
   X[475] = -X[265]; // (7,13) sym
   X[476] = -X[301]; // (8,13) sym
   X[477] =  X[337]; // (9,13) sym
   X[478] =  X[373]; // (10,13) sym
   X[479] =  X[409]; // (11,13) sym
   X[480] =  X[445]; // (12,13) sym
   X[481] = -X[308]; // l+1,j-1
   X[482] = -X[309]; // l+1,j-1
   X[483] = -X[310]; // l+1,j-1
   X[484] = -X[313]; // l+1,j-1
   X[485] = -X[314]; // l+1,j-1
   X[486] = -X[315]; // l+1,j-1
   X[487] = -X[316]; // l+1,j-1
   X[488] = -X[317]; // l+1,j-1
   X[489] = -X[318]; // l+1,j-1
   X[490] = -X[319]; // l+1,j-1
   X[491] = -X[320]; // l+1,j-1
   X[492] = -X[321]; // l+1,j-1
   X[493] = -2.0 * Y[68];
   X[494] =  2.0 * (Y[66]-Y[70]);
   X[495] =  2.0 * (Y[65]+Y[69]);
   X[496] = -2.0 * Y[72];
   X[497] =  2.0 * (Y[71]-Y[64]);
   X[498] =  2.0 * (Y[66]-Y[74]);
   X[499] =  2.0 * (Y[73]-Y[65]);
   X[500] =  2.0 * (Y[68]-Y[76]);
   X[501] =  2.0 * (Y[75]-Y[67]);
   X[502] =  2.0 * (Y[70]-Y[78]);
   X[503] =  2.0 * (Y[77]-Y[69]);
   X[504] = -X[14]; // (0,14) sym
   X[505] =  X[50]; // (1,14) sym
   X[506] =  X[86]; // (2,14) sym
   X[507] =  X[122]; // (3,14) sym
   X[508] = -X[158]; // (4,14) sym
   X[509] = -X[194]; // (5,14) sym
   X[510] = -X[230]; // (6,14) sym
   X[511] = -X[266]; // (7,14) sym
   X[512] = -X[302]; // (8,14) sym
   X[513] =  X[338]; // (9,14) sym
   X[514] =  X[374]; // (10,14) sym
   X[515] =  X[410]; // (11,14) sym
   X[516] =  X[446]; // (12,14) sym
   X[517] =  X[482]; // (13,14) sym
   X[518] =  2.0 * (Y[36]-Y[47]);
   X[519] = -2.0 * Y[48];
   X[520] =  2.0 * Y[54];
   X[521] =  2.0 * (Y[56]-Y[52]);
   X[522] =  2.0 * (Y[53]+Y[57]);
   X[523] =  2.0 * (Y[50]+Y[58]);
   X[524] =  2.0 * (Y[59]-Y[51]);
   X[525] =  2.0 * (Y[60]-Y[49]);
   X[526] =  2.0 * Y[61];
   X[527] =  2.0 * (Y[62]-Y[50]);
   X[528] =  2.0 * (Y[63]-Y[51]);
   X[529] = -2.0 * Y[69];
   X[530] =  2.0 * (Y[67]-Y[71]);
   X[531] = -2.0 * (Y[68]+Y[72]);
   X[532] = -2.0 * (Y[65]+Y[73]);
   X[533] =  2.0 * (Y[66]-Y[74]);
   X[534] =  2.0 * (Y[64]-Y[75]);
   X[535] = -2.0 * Y[76];
   X[536] =  2.0 * (Y[65]-Y[77]);
   X[537] =  2.0 * (Y[66]-Y[78]);
   X[538] =  2.0 * (Y[67]-Y[79]);
   X[539] =  2.0 * (Y[68]-Y[80]);
   X[540] = -X[15]; // (0,15) sym
   X[541] =  X[51]; // (1,15) sym
   X[542] =  X[87]; // (2,15) sym
   X[543] =  X[123]; // (3,15) sym
   X[544] = -X[159]; // (4,15) sym
   X[545] = -X[195]; // (5,15) sym
   X[546] = -X[231]; // (6,15) sym
   X[547] = -X[267]; // (7,15) sym
   X[548] = -X[303]; // (8,15) sym
   X[549] =  X[339]; // (9,15) sym
   X[550] =  X[375]; // (10,15) sym
   X[551] =  X[411]; // (11,15) sym
   X[552] =  X[447]; // (12,15) sym
   X[553] =  X[483]; // (13,15) sym
   X[554] =  X[519]; // (14,15) sym
   X[555] =  2.0 * (Y[36]+Y[47]);
   X[556] =  2.0 * Y[55];
   X[557] =  2.0 * (Y[57]-Y[53]);
   X[558] = -2.0 * (Y[52]+Y[56]);
   X[559] =  2.0 * (Y[51]+Y[59]);
   X[560] =  2.0 * (Y[50]-Y[58]);
   X[561] =  2.0 * Y[61];
   X[562] = -2.0 * (Y[49]+Y[60]);
   X[563] =  2.0 * (Y[51]+Y[63]);
   X[564] = -2.0 * (Y[50]+Y[62]);
   X[565] = -2.0 * Y[70];
   X[566] =  2.0 * (Y[68]-Y[72]);
   X[567] =  2.0 * (Y[67]+Y[71]);
   X[568] = -2.0 * (Y[66]+Y[74]);
   X[569] =  2.0 * (Y[73]-Y[65]);
   X[570] = -2.0 * Y[76];
   X[571] =  2.0 * (Y[64]+Y[75]);
   X[572] = -2.0 * (Y[66]+Y[78]);
   X[573] =  2.0 * (Y[65]+Y[77]);
   X[574] = -2.0 * (Y[68]+Y[80]);
   X[575] =  2.0 * (Y[67]+Y[79]);
}

void IlmIntFromIlm_HG( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_HF(Y,X);
   X[576] =  X[16]; // (0,16) sym
   X[577] = -X[52]; // (1,16) sym
   X[578] = -X[88]; // (2,16) sym
   X[579] = -X[124]; // (3,16) sym
   X[580] =  X[160]; // (4,16) sym
   X[581] =  X[196]; // (5,16) sym
   X[582] =  X[232]; // (6,16) sym
   X[583] =  X[268]; // (7,16) sym
   X[584] =  X[304]; // (8,16) sym
   X[585] = -X[340]; // (9,16) sym
   X[586] = -X[376]; // (10,16) sym
   X[587] = -X[412]; // (11,16) sym
   X[588] = -X[448]; // (12,16) sym
   X[589] = -X[484]; // (13,16) sym
   X[590] = -X[520]; // (14,16) sym
   X[591] = -X[556]; // (15,16) sym
   X[592] = -X[349]; // l+1,j-1
   X[593] = -X[350]; // l+1,j-1
   X[594] = -X[351]; // l+1,j-1
   X[595] = -X[352]; // l+1,j-1
   X[596] = -X[353]; // l+1,j-1
   X[597] = -X[354]; // l+1,j-1
   X[598] = -X[355]; // l+1,j-1
   X[599] = -X[356]; // l+1,j-1
   X[600] = -X[357]; // l+1,j-1
   X[601] = -Y[81];
   X[602] = -2.0 * Y[82];
   X[603] = -2.0 * Y[83];
   X[604] = -2.0 * Y[84];
   X[605] = -2.0 * Y[85];
   X[606] = -2.0 * Y[86];
   X[607] = -2.0 * Y[87];
   X[608] = -2.0 * Y[88];
   X[609] = -2.0 * Y[89];
   X[610] = -2.0 * Y[90];
   X[611] = -2.0 * Y[91];
   X[612] =  X[17]; // (0,17) sym
   X[613] = -X[53]; // (1,17) sym
   X[614] = -X[89]; // (2,17) sym
   X[615] = -X[125]; // (3,17) sym
   X[616] =  X[161]; // (4,17) sym
   X[617] =  X[197]; // (5,17) sym
   X[618] =  X[233]; // (6,17) sym
   X[619] =  X[269]; // (7,17) sym
   X[620] =  X[305]; // (8,17) sym
   X[621] = -X[341]; // (9,17) sym
   X[622] = -X[377]; // (10,17) sym
   X[623] = -X[413]; // (11,17) sym
   X[624] = -X[449]; // (12,17) sym
   X[625] = -X[485]; // (13,17) sym
   X[626] = -X[521]; // (14,17) sym
   X[627] = -X[557]; // (15,17) sym
   X[628] =  X[593]; // (16,17) sym
   X[629] = -X[386]; // l+1,j-1
   X[630] = -X[387]; // l+1,j-1
   X[631] = -X[388]; // l+1,j-1
   X[632] = -X[389]; // l+1,j-1
   X[633] = -X[390]; // l+1,j-1
   X[634] = -X[391]; // l+1,j-1
   X[635] = -X[392]; // l+1,j-1
   X[636] = -X[393]; // l+1,j-1
   X[637] = -2.0 * Y[82];
   X[638] =  2.0 * (Y[81]-Y[84]);
   X[639] = -2.0 * Y[85];
   X[640] =  2.0 * (Y[82]-Y[86]);
   X[641] =  2.0 * (Y[83]-Y[87]);
   X[642] =  2.0 * (Y[84]-Y[88]);
   X[643] =  2.0 * (Y[85]-Y[89]);
   X[644] =  2.0 * (Y[86]-Y[90]);
   X[645] =  2.0 * (Y[87]-Y[91]);
   X[646] =  2.0 * (Y[88]-Y[92]);
   X[647] =  2.0 * (Y[89]-Y[93]);
   X[648] =  X[18]; // (0,18) sym
   X[649] = -X[54]; // (1,18) sym
   X[650] = -X[90]; // (2,18) sym
   X[651] = -X[126]; // (3,18) sym
   X[652] =  X[162]; // (4,18) sym
   X[653] =  X[198]; // (5,18) sym
   X[654] =  X[234]; // (6,18) sym
   X[655] =  X[270]; // (7,18) sym
   X[656] =  X[306]; // (8,18) sym
   X[657] = -X[342]; // (9,18) sym
   X[658] = -X[378]; // (10,18) sym
   X[659] = -X[414]; // (11,18) sym
   X[660] = -X[450]; // (12,18) sym
   X[661] = -X[486]; // (13,18) sym
   X[662] = -X[522]; // (14,18) sym
   X[663] = -X[558]; // (15,18) sym
   X[664] =  X[594]; // (16,18) sym
   X[665] =  X[630]; // (17,18) sym
   X[666] = -X[423]; // l+1,j-1
   X[667] = -X[424]; // l+1,j-1
   X[668] = -X[425]; // l+1,j-1
   X[669] = -X[426]; // l+1,j-1
   X[670] = -X[427]; // l+1,j-1
   X[671] = -X[428]; // l+1,j-1
   X[672] = -X[429]; // l+1,j-1
   X[673] = -2.0 * Y[83];
   X[674] = -2.0 * Y[85];
   X[675] =  2.0 * (Y[81]+Y[84]);
   X[676] = -2.0 * (Y[83]+Y[87]);
   X[677] =  2.0 * (Y[82]+Y[86]);
   X[678] = -2.0 * (Y[85]+Y[89]);
   X[679] =  2.0 * (Y[84]+Y[88]);
   X[680] = -2.0 * (Y[87]+Y[91]);
   X[681] =  2.0 * (Y[86]+Y[90]);
   X[682] = -2.0 * (Y[89]+Y[93]);
   X[683] =  2.0 * (Y[88]+Y[92]);
   X[684] =  X[19]; // (0,19) sym
   X[685] = -X[55]; // (1,19) sym
   X[686] = -X[91]; // (2,19) sym
   X[687] = -X[127]; // (3,19) sym
   X[688] =  X[163]; // (4,19) sym
   X[689] =  X[199]; // (5,19) sym
   X[690] =  X[235]; // (6,19) sym
   X[691] =  X[271]; // (7,19) sym
   X[692] =  X[307]; // (8,19) sym
   X[693] = -X[343]; // (9,19) sym
   X[694] = -X[379]; // (10,19) sym
   X[695] = -X[415]; // (11,19) sym
   X[696] = -X[451]; // (12,19) sym
   X[697] = -X[487]; // (13,19) sym
   X[698] = -X[523]; // (14,19) sym
   X[699] = -X[559]; // (15,19) sym
   X[700] =  X[595]; // (16,19) sym
   X[701] =  X[631]; // (17,19) sym
   X[702] =  X[667]; // (18,19) sym
   X[703] = -X[460]; // l+1,j-1
   X[704] = -X[461]; // l+1,j-1
   X[705] = -X[462]; // l+1,j-1
   X[706] = -X[463]; // l+1,j-1
   X[707] = -X[464]; // l+1,j-1
   X[708] = -X[465]; // l+1,j-1
   X[709] = -2.0 * Y[84];
   X[710] =  2.0 * (Y[82]-Y[86]);
   X[711] = -2.0 * (Y[83]+Y[87]);
   X[712] = -2.0 * (Y[81]+Y[88]);
   X[713] = -2.0 * Y[89];
   X[714] = -2.0 * (Y[82]+Y[90]);
   X[715] = -2.0 * (Y[83]+Y[91]);
   X[716] = -2.0 * (Y[84]+Y[92]);
   X[717] = -2.0 * (Y[85]+Y[93]);
   X[718] = -2.0 * (Y[86]+Y[94]);
   X[719] = -2.0 * (Y[87]+Y[95]);
   X[720] =  X[20]; // (0,20) sym
   X[721] = -X[56]; // (1,20) sym
   X[722] = -X[92]; // (2,20) sym
   X[723] = -X[128]; // (3,20) sym
   X[724] =  X[164]; // (4,20) sym
   X[725] =  X[200]; // (5,20) sym
   X[726] =  X[236]; // (6,20) sym
   X[727] =  X[272]; // (7,20) sym
   X[728] =  X[308]; // (8,20) sym
   X[729] = -X[344]; // (9,20) sym
   X[730] = -X[380]; // (10,20) sym
   X[731] = -X[416]; // (11,20) sym
   X[732] = -X[452]; // (12,20) sym
   X[733] = -X[488]; // (13,20) sym
   X[734] = -X[524]; // (14,20) sym
   X[735] = -X[560]; // (15,20) sym
   X[736] =  X[596]; // (16,20) sym
   X[737] =  X[632]; // (17,20) sym
   X[738] =  X[668]; // (18,20) sym
   X[739] =  X[704]; // (19,20) sym
   X[740] = -X[497]; // l+1,j-1
   X[741] = -X[498]; // l+1,j-1
   X[742] = -X[499]; // l+1,j-1
   X[743] = -X[500]; // l+1,j-1
   X[744] = -X[501]; // l+1,j-1
   X[745] = -2.0 * Y[85];
   X[746] =  2.0 * (Y[83]-Y[87]);
   X[747] =  2.0 * (Y[82]+Y[86]);
   X[748] = -2.0 * Y[89];
   X[749] =  2.0 * (Y[88]-Y[81]);
   X[750] =  2.0 * (Y[83]-Y[91]);
   X[751] =  2.0 * (Y[90]-Y[82]);
   X[752] =  2.0 * (Y[85]-Y[93]);
   X[753] =  2.0 * (Y[92]-Y[84]);
   X[754] =  2.0 * (Y[87]-Y[95]);
   X[755] =  2.0 * (Y[94]-Y[86]);
   X[756] =  X[21]; // (0,21) sym
   X[757] = -X[57]; // (1,21) sym
   X[758] = -X[93]; // (2,21) sym
   X[759] = -X[129]; // (3,21) sym
   X[760] =  X[165]; // (4,21) sym
   X[761] =  X[201]; // (5,21) sym
   X[762] =  X[237]; // (6,21) sym
   X[763] =  X[273]; // (7,21) sym
   X[764] =  X[309]; // (8,21) sym
   X[765] = -X[345]; // (9,21) sym
   X[766] = -X[381]; // (10,21) sym
   X[767] = -X[417]; // (11,21) sym
   X[768] = -X[453]; // (12,21) sym
   X[769] = -X[489]; // (13,21) sym
   X[770] = -X[525]; // (14,21) sym
   X[771] = -X[561]; // (15,21) sym
   X[772] =  X[597]; // (16,21) sym
   X[773] =  X[633]; // (17,21) sym
   X[774] =  X[669]; // (18,21) sym
   X[775] =  X[705]; // (19,21) sym
   X[776] =  X[741]; // (20,21) sym
   X[777] = -X[534]; // l+1,j-1
   X[778] = -X[535]; // l+1,j-1
   X[779] = -X[536]; // l+1,j-1
   X[780] = -X[537]; // l+1,j-1
   X[781] = -2.0 * Y[86];
   X[782] =  2.0 * (Y[84]-Y[88]);
   X[783] = -2.0 * (Y[85]+Y[89]);
   X[784] = -2.0 * (Y[82]+Y[90]);
   X[785] =  2.0 * (Y[83]-Y[91]);
   X[786] =  2.0 * (Y[81]-Y[92]);
   X[787] = -2.0 * Y[93];
   X[788] =  2.0 * (Y[82]-Y[94]);
   X[789] =  2.0 * (Y[83]-Y[95]);
   X[790] =  2.0 * (Y[84]-Y[96]);
   X[791] =  2.0 * (Y[85]-Y[97]);
   X[792] =  X[22]; // (0,22) sym
   X[793] = -X[58]; // (1,22) sym
   X[794] = -X[94]; // (2,22) sym
   X[795] = -X[130]; // (3,22) sym
   X[796] =  X[166]; // (4,22) sym
   X[797] =  X[202]; // (5,22) sym
   X[798] =  X[238]; // (6,22) sym
   X[799] =  X[274]; // (7,22) sym
   X[800] =  X[310]; // (8,22) sym
   X[801] = -X[346]; // (9,22) sym
   X[802] = -X[382]; // (10,22) sym
   X[803] = -X[418]; // (11,22) sym
   X[804] = -X[454]; // (12,22) sym
   X[805] = -X[490]; // (13,22) sym
   X[806] = -X[526]; // (14,22) sym
   X[807] = -X[562]; // (15,22) sym
   X[808] =  X[598]; // (16,22) sym
   X[809] =  X[634]; // (17,22) sym
   X[810] =  X[670]; // (18,22) sym
   X[811] =  X[706]; // (19,22) sym
   X[812] =  X[742]; // (20,22) sym
   X[813] =  X[778]; // (21,22) sym
   X[814] = -X[571]; // l+1,j-1
   X[815] = -X[572]; // l+1,j-1
   X[816] = -X[573]; // l+1,j-1
   X[817] = -2.0 * Y[87];
   X[818] =  2.0 * (Y[85]-Y[89]);
   X[819] =  2.0 * (Y[84]+Y[88]);
   X[820] = -2.0 * (Y[83]+Y[91]);
   X[821] =  2.0 * (Y[90]-Y[82]);
   X[822] = -2.0 * Y[93];
   X[823] =  2.0 * (Y[81]+Y[92]);
   X[824] = -2.0 * (Y[83]+Y[95]);
   X[825] =  2.0 * (Y[82]+Y[94]);
   X[826] = -2.0 * (Y[85]+Y[97]);
   X[827] =  2.0 * (Y[84]+Y[96]);
   X[828] =  X[23]; // (0,23) sym
   X[829] = -X[59]; // (1,23) sym
   X[830] = -X[95]; // (2,23) sym
   X[831] = -X[131]; // (3,23) sym
   X[832] =  X[167]; // (4,23) sym
   X[833] =  X[203]; // (5,23) sym
   X[834] =  X[239]; // (6,23) sym
   X[835] =  X[275]; // (7,23) sym
   X[836] =  X[311]; // (8,23) sym
   X[837] = -X[347]; // (9,23) sym
   X[838] = -X[383]; // (10,23) sym
   X[839] = -X[419]; // (11,23) sym
   X[840] = -X[455]; // (12,23) sym
   X[841] = -X[491]; // (13,23) sym
   X[842] = -X[527]; // (14,23) sym
   X[843] = -X[563]; // (15,23) sym
   X[844] =  X[599]; // (16,23) sym
   X[845] =  X[635]; // (17,23) sym
   X[846] =  X[671]; // (18,23) sym
   X[847] =  X[707]; // (19,23) sym
   X[848] =  X[743]; // (20,23) sym
   X[849] =  X[779]; // (21,23) sym
   X[850] =  X[815]; // (22,23) sym
   X[851] =  2.0 * (Y[64]+Y[79]);
   X[852] =  2.0 * Y[80];
   X[853] = -2.0 * Y[88];
   X[854] =  2.0 * (Y[86]-Y[90]);
   X[855] = -2.0 * (Y[87]+Y[91]);
   X[856] = -2.0 * (Y[84]+Y[92]);
   X[857] =  2.0 * (Y[85]-Y[93]);
   X[858] =  2.0 * (Y[82]-Y[94]);
   X[859] = -2.0 * (Y[83]+Y[95]);
   X[860] = -2.0 * (Y[81]+Y[96]);
   X[861] = -2.0 * Y[97];
   X[862] = -2.0 * (Y[82]+Y[98]);
   X[863] = -2.0 * (Y[83]+Y[99]);
   X[864] =  X[24]; // (0,24) sym
   X[865] = -X[60]; // (1,24) sym
   X[866] = -X[96]; // (2,24) sym
   X[867] = -X[132]; // (3,24) sym
   X[868] =  X[168]; // (4,24) sym
   X[869] =  X[204]; // (5,24) sym
   X[870] =  X[240]; // (6,24) sym
   X[871] =  X[276]; // (7,24) sym
   X[872] =  X[312]; // (8,24) sym
   X[873] = -X[348]; // (9,24) sym
   X[874] = -X[384]; // (10,24) sym
   X[875] = -X[420]; // (11,24) sym
   X[876] = -X[456]; // (12,24) sym
   X[877] = -X[492]; // (13,24) sym
   X[878] = -X[528]; // (14,24) sym
   X[879] = -X[564]; // (15,24) sym
   X[880] =  X[600]; // (16,24) sym
   X[881] =  X[636]; // (17,24) sym
   X[882] =  X[672]; // (18,24) sym
   X[883] =  X[708]; // (19,24) sym
   X[884] =  X[744]; // (20,24) sym
   X[885] =  X[780]; // (21,24) sym
   X[886] =  X[816]; // (22,24) sym
   X[887] =  X[852]; // (23,24) sym
   X[888] =  2.0 * (Y[64]-Y[79]);
   X[889] = -2.0 * Y[89];
   X[890] =  2.0 * (Y[87]-Y[91]);
   X[891] =  2.0 * (Y[86]+Y[90]);
   X[892] = -2.0 * (Y[85]+Y[93]);
   X[893] =  2.0 * (Y[92]-Y[84]);
   X[894] =  2.0 * (Y[83]-Y[95]);
   X[895] =  2.0 * (Y[82]+Y[94]);
   X[896] = -2.0 * Y[97];
   X[897] =  2.0 * (Y[96]-Y[81]);
   X[898] =  2.0 * (Y[83]-Y[99]);
   X[899] =  2.0 * (Y[98]-Y[82]);
}

void IlmIntFromIlm_HH( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_HG(Y,X);
   X[900] = -X[25]; // (0,25) sym
   X[901] =  X[61]; // (1,25) sym
   X[902] =  X[97]; // (2,25) sym
   X[903] =  X[133]; // (3,25) sym
   X[904] = -X[169]; // (4,25) sym
   X[905] = -X[205]; // (5,25) sym
   X[906] = -X[241]; // (6,25) sym
   X[907] = -X[277]; // (7,25) sym
   X[908] = -X[313]; // (8,25) sym
   X[909] =  X[349]; // (9,25) sym
   X[910] =  X[385]; // (10,25) sym
   X[911] =  X[421]; // (11,25) sym
   X[912] =  X[457]; // (12,25) sym
   X[913] =  X[493]; // (13,25) sym
   X[914] =  X[529]; // (14,25) sym
   X[915] =  X[565]; // (15,25) sym
   X[916] = -X[601]; // (16,25) sym
   X[917] = -X[637]; // (17,25) sym
   X[918] = -X[673]; // (18,25) sym
   X[919] = -X[709]; // (19,25) sym
   X[920] = -X[745]; // (20,25) sym
   X[921] = -X[781]; // (21,25) sym
   X[922] = -X[817]; // (22,25) sym
   X[923] = -X[853]; // (23,25) sym
   X[924] = -X[889]; // (24,25) sym
   X[925] = -Y[100];
   X[926] = -2.0 * Y[101];
   X[927] = -2.0 * Y[102];
   X[928] = -2.0 * Y[103];
   X[929] = -2.0 * Y[104];
   X[930] = -2.0 * Y[105];
   X[931] = -2.0 * Y[106];
   X[932] = -2.0 * Y[107];
   X[933] = -2.0 * Y[108];
   X[934] = -2.0 * Y[109];
   X[935] = -2.0 * Y[110];
   X[936] = -X[26]; // (0,26) sym
   X[937] =  X[62]; // (1,26) sym
   X[938] =  X[98]; // (2,26) sym
   X[939] =  X[134]; // (3,26) sym
   X[940] = -X[170]; // (4,26) sym
   X[941] = -X[206]; // (5,26) sym
   X[942] = -X[242]; // (6,26) sym
   X[943] = -X[278]; // (7,26) sym
   X[944] = -X[314]; // (8,26) sym
   X[945] =  X[350]; // (9,26) sym
   X[946] =  X[386]; // (10,26) sym
   X[947] =  X[422]; // (11,26) sym
   X[948] =  X[458]; // (12,26) sym
   X[949] =  X[494]; // (13,26) sym
   X[950] =  X[530]; // (14,26) sym
   X[951] =  X[566]; // (15,26) sym
   X[952] = -X[602]; // (16,26) sym
   X[953] = -X[638]; // (17,26) sym
   X[954] = -X[674]; // (18,26) sym
   X[955] = -X[710]; // (19,26) sym
   X[956] = -X[746]; // (20,26) sym
   X[957] = -X[782]; // (21,26) sym
   X[958] = -X[818]; // (22,26) sym
   X[959] = -X[854]; // (23,26) sym
   X[960] = -X[890]; // (24,26) sym
   X[961] =  X[926]; // (25,26) sym
   X[962] =  2.0 * (Y[100]-Y[103]);
   X[963] = -2.0 * Y[104];
   X[964] =  2.0 * (Y[101]-Y[105]);
   X[965] =  2.0 * (Y[102]-Y[106]);
   X[966] =  2.0 * (Y[103]-Y[107]);
   X[967] =  2.0 * (Y[104]-Y[108]);
   X[968] =  2.0 * (Y[105]-Y[109]);
   X[969] =  2.0 * (Y[106]-Y[110]);
   X[970] =  2.0 * (Y[107]-Y[111]);
   X[971] =  2.0 * (Y[108]-Y[112]);
   X[972] = -X[27]; // (0,27) sym
   X[973] =  X[63]; // (1,27) sym
   X[974] =  X[99]; // (2,27) sym
   X[975] =  X[135]; // (3,27) sym
   X[976] = -X[171]; // (4,27) sym
   X[977] = -X[207]; // (5,27) sym
   X[978] = -X[243]; // (6,27) sym
   X[979] = -X[279]; // (7,27) sym
   X[980] = -X[315]; // (8,27) sym
   X[981] =  X[351]; // (9,27) sym
   X[982] =  X[387]; // (10,27) sym
   X[983] =  X[423]; // (11,27) sym
   X[984] =  X[459]; // (12,27) sym
   X[985] =  X[495]; // (13,27) sym
   X[986] =  X[531]; // (14,27) sym
   X[987] =  X[567]; // (15,27) sym
   X[988] = -X[603]; // (16,27) sym
   X[989] = -X[639]; // (17,27) sym
   X[990] = -X[675]; // (18,27) sym
   X[991] = -X[711]; // (19,27) sym
   X[992] = -X[747]; // (20,27) sym
   X[993] = -X[783]; // (21,27) sym
   X[994] = -X[819]; // (22,27) sym
   X[995] = -X[855]; // (23,27) sym
   X[996] = -X[891]; // (24,27) sym
   X[997] =  X[927]; // (25,27) sym
   X[998] =  X[963]; // (26,27) sym
   X[999] =  2.0 * (Y[100]+Y[103]);
   X[1000] = -2.0 * (Y[102]+Y[106]);
   X[1001] =  2.0 * (Y[101]+Y[105]);
   X[1002] = -2.0 * (Y[104]+Y[108]);
   X[1003] =  2.0 * (Y[103]+Y[107]);
   X[1004] = -2.0 * (Y[106]+Y[110]);
   X[1005] =  2.0 * (Y[105]+Y[109]);
   X[1006] = -2.0 * (Y[108]+Y[112]);
   X[1007] =  2.0 * (Y[107]+Y[111]);
   X[1008] = -X[28]; // (0,28) sym
   X[1009] =  X[64]; // (1,28) sym
   X[1010] =  X[100]; // (2,28) sym
   X[1011] =  X[136]; // (3,28) sym
   X[1012] = -X[172]; // (4,28) sym
   X[1013] = -X[208]; // (5,28) sym
   X[1014] = -X[244]; // (6,28) sym
   X[1015] = -X[280]; // (7,28) sym
   X[1016] = -X[316]; // (8,28) sym
   X[1017] =  X[352]; // (9,28) sym
   X[1018] =  X[388]; // (10,28) sym
   X[1019] =  X[424]; // (11,28) sym
   X[1020] =  X[460]; // (12,28) sym
   X[1021] =  X[496]; // (13,28) sym
   X[1022] =  X[532]; // (14,28) sym
   X[1023] =  X[568]; // (15,28) sym
   X[1024] = -X[604]; // (16,28) sym
   X[1025] = -X[640]; // (17,28) sym
   X[1026] = -X[676]; // (18,28) sym
   X[1027] = -X[712]; // (19,28) sym
   X[1028] = -X[748]; // (20,28) sym
   X[1029] = -X[784]; // (21,28) sym
   X[1030] = -X[820]; // (22,28) sym
   X[1031] = -X[856]; // (23,28) sym
   X[1032] = -X[892]; // (24,28) sym
   X[1033] =  X[928]; // (25,28) sym
   X[1034] =  X[964]; // (26,28) sym
   X[1035] =  X[1000]; // (27,28) sym
   X[1036] = -2.0 * (Y[100]+Y[107]);
   X[1037] = -2.0 * Y[108];
   X[1038] = -2.0 * (Y[101]+Y[109]);
   X[1039] = -2.0 * (Y[102]+Y[110]);
   X[1040] = -2.0 * (Y[103]+Y[111]);
   X[1041] = -2.0 * (Y[104]+Y[112]);
   X[1042] = -2.0 * (Y[105]+Y[113]);
   X[1043] = -2.0 * (Y[106]+Y[114]);
   X[1044] = -X[29]; // (0,29) sym
   X[1045] =  X[65]; // (1,29) sym
   X[1046] =  X[101]; // (2,29) sym
   X[1047] =  X[137]; // (3,29) sym
   X[1048] = -X[173]; // (4,29) sym
   X[1049] = -X[209]; // (5,29) sym
   X[1050] = -X[245]; // (6,29) sym
   X[1051] = -X[281]; // (7,29) sym
   X[1052] = -X[317]; // (8,29) sym
   X[1053] =  X[353]; // (9,29) sym
   X[1054] =  X[389]; // (10,29) sym
   X[1055] =  X[425]; // (11,29) sym
   X[1056] =  X[461]; // (12,29) sym
   X[1057] =  X[497]; // (13,29) sym
   X[1058] =  X[533]; // (14,29) sym
   X[1059] =  X[569]; // (15,29) sym
   X[1060] = -X[605]; // (16,29) sym
   X[1061] = -X[641]; // (17,29) sym
   X[1062] = -X[677]; // (18,29) sym
   X[1063] = -X[713]; // (19,29) sym
   X[1064] = -X[749]; // (20,29) sym
   X[1065] = -X[785]; // (21,29) sym
   X[1066] = -X[821]; // (22,29) sym
   X[1067] = -X[857]; // (23,29) sym
   X[1068] = -X[893]; // (24,29) sym
   X[1069] =  X[929]; // (25,29) sym
   X[1070] =  X[965]; // (26,29) sym
   X[1071] =  X[1001]; // (27,29) sym
   X[1072] =  X[1037]; // (28,29) sym
   X[1073] =  2.0 * (Y[107]-Y[100]);
   X[1074] =  2.0 * (Y[102]-Y[110]);
   X[1075] =  2.0 * (Y[109]-Y[101]);
   X[1076] =  2.0 * (Y[104]-Y[112]);
   X[1077] =  2.0 * (Y[111]-Y[103]);
   X[1078] =  2.0 * (Y[106]-Y[114]);
   X[1079] =  2.0 * (Y[113]-Y[105]);
   X[1080] = -X[30]; // (0,30) sym
   X[1081] =  X[66]; // (1,30) sym
   X[1082] =  X[102]; // (2,30) sym
   X[1083] =  X[138]; // (3,30) sym
   X[1084] = -X[174]; // (4,30) sym
   X[1085] = -X[210]; // (5,30) sym
   X[1086] = -X[246]; // (6,30) sym
   X[1087] = -X[282]; // (7,30) sym
   X[1088] = -X[318]; // (8,30) sym
   X[1089] =  X[354]; // (9,30) sym
   X[1090] =  X[390]; // (10,30) sym
   X[1091] =  X[426]; // (11,30) sym
   X[1092] =  X[462]; // (12,30) sym
   X[1093] =  X[498]; // (13,30) sym
   X[1094] =  X[534]; // (14,30) sym
   X[1095] =  X[570]; // (15,30) sym
   X[1096] = -X[606]; // (16,30) sym
   X[1097] = -X[642]; // (17,30) sym
   X[1098] = -X[678]; // (18,30) sym
   X[1099] = -X[714]; // (19,30) sym
   X[1100] = -X[750]; // (20,30) sym
   X[1101] = -X[786]; // (21,30) sym
   X[1102] = -X[822]; // (22,30) sym
   X[1103] = -X[858]; // (23,30) sym
   X[1104] = -X[894]; // (24,30) sym
   X[1105] =  X[930]; // (25,30) sym
   X[1106] =  X[966]; // (26,30) sym
   X[1107] =  X[1002]; // (27,30) sym
   X[1108] =  X[1038]; // (28,30) sym
   X[1109] =  X[1074]; // (29,30) sym
   X[1110] =  2.0 * (Y[100]-Y[111]);
   X[1111] = -2.0 * Y[112];
   X[1112] =  2.0 * (Y[101]-Y[113]);
   X[1113] =  2.0 * (Y[102]-Y[114]);
   X[1114] =  2.0 * (Y[103]-Y[115]);
   X[1115] =  2.0 * (Y[104]-Y[116]);
   X[1116] = -X[31]; // (0,31) sym
   X[1117] =  X[67]; // (1,31) sym
   X[1118] =  X[103]; // (2,31) sym
   X[1119] =  X[139]; // (3,31) sym
   X[1120] = -X[175]; // (4,31) sym
   X[1121] = -X[211]; // (5,31) sym
   X[1122] = -X[247]; // (6,31) sym
   X[1123] = -X[283]; // (7,31) sym
   X[1124] = -X[319]; // (8,31) sym
   X[1125] =  X[355]; // (9,31) sym
   X[1126] =  X[391]; // (10,31) sym
   X[1127] =  X[427]; // (11,31) sym
   X[1128] =  X[463]; // (12,31) sym
   X[1129] =  X[499]; // (13,31) sym
   X[1130] =  X[535]; // (14,31) sym
   X[1131] =  X[571]; // (15,31) sym
   X[1132] = -X[607]; // (16,31) sym
   X[1133] = -X[643]; // (17,31) sym
   X[1134] = -X[679]; // (18,31) sym
   X[1135] = -X[715]; // (19,31) sym
   X[1136] = -X[751]; // (20,31) sym
   X[1137] = -X[787]; // (21,31) sym
   X[1138] = -X[823]; // (22,31) sym
   X[1139] = -X[859]; // (23,31) sym
   X[1140] = -X[895]; // (24,31) sym
   X[1141] =  X[931]; // (25,31) sym
   X[1142] =  X[967]; // (26,31) sym
   X[1143] =  X[1003]; // (27,31) sym
   X[1144] =  X[1039]; // (28,31) sym
   X[1145] =  X[1075]; // (29,31) sym
   X[1146] =  X[1111]; // (30,31) sym
   X[1147] =  2.0 * (Y[100]+Y[111]);
   X[1148] = -2.0 * (Y[102]+Y[114]);
   X[1149] =  2.0 * (Y[101]+Y[113]);
   X[1150] = -2.0 * (Y[104]+Y[116]);
   X[1151] =  2.0 * (Y[103]+Y[115]);
   X[1152] = -X[32]; // (0,32) sym
   X[1153] =  X[68]; // (1,32) sym
   X[1154] =  X[104]; // (2,32) sym
   X[1155] =  X[140]; // (3,32) sym
   X[1156] = -X[176]; // (4,32) sym
   X[1157] = -X[212]; // (5,32) sym
   X[1158] = -X[248]; // (6,32) sym
   X[1159] = -X[284]; // (7,32) sym
   X[1160] = -X[320]; // (8,32) sym
   X[1161] =  X[356]; // (9,32) sym
   X[1162] =  X[392]; // (10,32) sym
   X[1163] =  X[428]; // (11,32) sym
   X[1164] =  X[464]; // (12,32) sym
   X[1165] =  X[500]; // (13,32) sym
   X[1166] =  X[536]; // (14,32) sym
   X[1167] =  X[572]; // (15,32) sym
   X[1168] = -X[608]; // (16,32) sym
   X[1169] = -X[644]; // (17,32) sym
   X[1170] = -X[680]; // (18,32) sym
   X[1171] = -X[716]; // (19,32) sym
   X[1172] = -X[752]; // (20,32) sym
   X[1173] = -X[788]; // (21,32) sym
   X[1174] = -X[824]; // (22,32) sym
   X[1175] = -X[860]; // (23,32) sym
   X[1176] = -X[896]; // (24,32) sym
   X[1177] =  X[932]; // (25,32) sym
   X[1178] =  X[968]; // (26,32) sym
   X[1179] =  X[1004]; // (27,32) sym
   X[1180] =  X[1040]; // (28,32) sym
   X[1181] =  X[1076]; // (29,32) sym
   X[1182] =  X[1112]; // (30,32) sym
   X[1183] =  X[1148]; // (31,32) sym
   X[1184] = -2.0 * (Y[100]+Y[115]);
   X[1185] = -2.0 * Y[116];
   X[1186] = -2.0 * (Y[101]+Y[117]);
   X[1187] = -2.0 * (Y[102]+Y[118]);
   X[1188] = -X[33]; // (0,33) sym
   X[1189] =  X[69]; // (1,33) sym
   X[1190] =  X[105]; // (2,33) sym
   X[1191] =  X[141]; // (3,33) sym
   X[1192] = -X[177]; // (4,33) sym
   X[1193] = -X[213]; // (5,33) sym
   X[1194] = -X[249]; // (6,33) sym
   X[1195] = -X[285]; // (7,33) sym
   X[1196] = -X[321]; // (8,33) sym
   X[1197] =  X[357]; // (9,33) sym
   X[1198] =  X[393]; // (10,33) sym
   X[1199] =  X[429]; // (11,33) sym
   X[1200] =  X[465]; // (12,33) sym
   X[1201] =  X[501]; // (13,33) sym
   X[1202] =  X[537]; // (14,33) sym
   X[1203] =  X[573]; // (15,33) sym
   X[1204] = -X[609]; // (16,33) sym
   X[1205] = -X[645]; // (17,33) sym
   X[1206] = -X[681]; // (18,33) sym
   X[1207] = -X[717]; // (19,33) sym
   X[1208] = -X[753]; // (20,33) sym
   X[1209] = -X[789]; // (21,33) sym
   X[1210] = -X[825]; // (22,33) sym
   X[1211] = -X[861]; // (23,33) sym
   X[1212] = -X[897]; // (24,33) sym
   X[1213] =  X[933]; // (25,33) sym
   X[1214] =  X[969]; // (26,33) sym
   X[1215] =  X[1005]; // (27,33) sym
   X[1216] =  X[1041]; // (28,33) sym
   X[1217] =  X[1077]; // (29,33) sym
   X[1218] =  X[1113]; // (30,33) sym
   X[1219] =  X[1149]; // (31,33) sym
   X[1220] =  X[1185]; // (32,33) sym
   X[1221] =  2.0 * (Y[115]-Y[100]);
   X[1222] =  2.0 * (Y[102]-Y[118]);
   X[1223] =  2.0 * (Y[117]-Y[101]);
   X[1224] = -X[34]; // (0,34) sym
   X[1225] =  X[70]; // (1,34) sym
   X[1226] =  X[106]; // (2,34) sym
   X[1227] =  X[142]; // (3,34) sym
   X[1228] = -X[178]; // (4,34) sym
   X[1229] = -X[214]; // (5,34) sym
   X[1230] = -X[250]; // (6,34) sym
   X[1231] = -X[286]; // (7,34) sym
   X[1232] = -X[322]; // (8,34) sym
   X[1233] =  X[358]; // (9,34) sym
   X[1234] =  X[394]; // (10,34) sym
   X[1235] =  X[430]; // (11,34) sym
   X[1236] =  X[466]; // (12,34) sym
   X[1237] =  X[502]; // (13,34) sym
   X[1238] =  X[538]; // (14,34) sym
   X[1239] =  X[574]; // (15,34) sym
   X[1240] = -X[610]; // (16,34) sym
   X[1241] = -X[646]; // (17,34) sym
   X[1242] = -X[682]; // (18,34) sym
   X[1243] = -X[718]; // (19,34) sym
   X[1244] = -X[754]; // (20,34) sym
   X[1245] = -X[790]; // (21,34) sym
   X[1246] = -X[826]; // (22,34) sym
   X[1247] = -X[862]; // (23,34) sym
   X[1248] = -X[898]; // (24,34) sym
   X[1249] =  X[934]; // (25,34) sym
   X[1250] =  X[970]; // (26,34) sym
   X[1251] =  X[1006]; // (27,34) sym
   X[1252] =  X[1042]; // (28,34) sym
   X[1253] =  X[1078]; // (29,34) sym
   X[1254] =  X[1114]; // (30,34) sym
   X[1255] =  X[1150]; // (31,34) sym
   X[1256] =  X[1186]; // (32,34) sym
   X[1257] =  X[1222]; // (33,34) sym
   X[1258] =  2.0 * (Y[100]-Y[119]);
   X[1259] = -2.0 * Y[120];
   X[1260] = -X[35]; // (0,35) sym
   X[1261] =  X[71]; // (1,35) sym
   X[1262] =  X[107]; // (2,35) sym
   X[1263] =  X[143]; // (3,35) sym
   X[1264] = -X[179]; // (4,35) sym
   X[1265] = -X[215]; // (5,35) sym
   X[1266] = -X[251]; // (6,35) sym
   X[1267] = -X[287]; // (7,35) sym
   X[1268] = -X[323]; // (8,35) sym
   X[1269] =  X[359]; // (9,35) sym
   X[1270] =  X[395]; // (10,35) sym
   X[1271] =  X[431]; // (11,35) sym
   X[1272] =  X[467]; // (12,35) sym
   X[1273] =  X[503]; // (13,35) sym
   X[1274] =  X[539]; // (14,35) sym
   X[1275] =  X[575]; // (15,35) sym
   X[1276] = -X[611]; // (16,35) sym
   X[1277] = -X[647]; // (17,35) sym
   X[1278] = -X[683]; // (18,35) sym
   X[1279] = -X[719]; // (19,35) sym
   X[1280] = -X[755]; // (20,35) sym
   X[1281] = -X[791]; // (21,35) sym
   X[1282] = -X[827]; // (22,35) sym
   X[1283] = -X[863]; // (23,35) sym
   X[1284] = -X[899]; // (24,35) sym
   X[1285] =  X[935]; // (25,35) sym
   X[1286] =  X[971]; // (26,35) sym
   X[1287] =  X[1007]; // (27,35) sym
   X[1288] =  X[1043]; // (28,35) sym
   X[1289] =  X[1079]; // (29,35) sym
   X[1290] =  X[1115]; // (30,35) sym
   X[1291] =  X[1151]; // (31,35) sym
   X[1292] =  X[1187]; // (32,35) sym
   X[1293] =  X[1223]; // (33,35) sym
   X[1294] =  X[1259]; // (34,35) sym
   X[1295] =  2.0 * (Y[100]+Y[119]);
}

void IlmIntFromIlm_IS( double const *__restrict__ Y, double *__restrict__ X )
{
   X[0] = Y[0];
   X[1] = -Y[1];
   X[2] = -2.0 * Y[2];
   X[3] = -2.0 * Y[3];
   X[4] = Y[4];
   X[5] =  2.0 * Y[5];
   X[6] =  2.0 * Y[6];
   X[7] =  2.0 * Y[7];
   X[8] =  2.0 * Y[8];
   X[9] = -Y[9];
   X[10] = -2.0 * Y[10];
   X[11] = -2.0 * Y[11];
   X[12] = -2.0 * Y[12];
   X[13] = -2.0 * Y[13];
   X[14] = -2.0 * Y[14];
   X[15] = -2.0 * Y[15];
   X[16] = Y[16];
   X[17] =  2.0 * Y[17];
   X[18] =  2.0 * Y[18];
   X[19] =  2.0 * Y[19];
   X[20] =  2.0 * Y[20];
   X[21] =  2.0 * Y[21];
   X[22] =  2.0 * Y[22];
   X[23] =  2.0 * Y[23];
   X[24] =  2.0 * Y[24];
   X[25] = -Y[25];
   X[26] = -2.0 * Y[26];
   X[27] = -2.0 * Y[27];
   X[28] = -2.0 * Y[28];
   X[29] = -2.0 * Y[29];
   X[30] = -2.0 * Y[30];
   X[31] = -2.0 * Y[31];
   X[32] = -2.0 * Y[32];
   X[33] = -2.0 * Y[33];
   X[34] = -2.0 * Y[34];
   X[35] = -2.0 * Y[35];
   X[36] = Y[36];
   X[37] =  2.0 * Y[37];
   X[38] =  2.0 * Y[38];
   X[39] =  2.0 * Y[39];
   X[40] =  2.0 * Y[40];
   X[41] =  2.0 * Y[41];
   X[42] =  2.0 * Y[42];
   X[43] =  2.0 * Y[43];
   X[44] =  2.0 * Y[44];
   X[45] =  2.0 * Y[45];
   X[46] =  2.0 * Y[46];
   X[47] =  2.0 * Y[47];
   X[48] =  2.0 * Y[48];
}

void IlmIntFromIlm_IP( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_IS(Y,X);
   X[49] = -X[1]; // (0,1) sym
   X[50] = -X[4]; // l+1,j-1
   X[51] = -X[5]; // l+1,j-1
   X[52] = -X[6]; // l+1,j-1
   X[53] = -X[9]; // l+1,j-1
   X[54] = -X[10]; // l+1,j-1
   X[55] = -X[11]; // l+1,j-1
   X[56] = -X[12]; // l+1,j-1
   X[57] = -X[13]; // l+1,j-1
   X[58] = -X[16]; // l+1,j-1
   X[59] = -X[17]; // l+1,j-1
   X[60] = -X[18]; // l+1,j-1
   X[61] = -X[19]; // l+1,j-1
   X[62] = -X[20]; // l+1,j-1
   X[63] = -X[21]; // l+1,j-1
   X[64] = -X[22]; // l+1,j-1
   X[65] = -X[25]; // l+1,j-1
   X[66] = -X[26]; // l+1,j-1
   X[67] = -X[27]; // l+1,j-1
   X[68] = -X[28]; // l+1,j-1
   X[69] = -X[29]; // l+1,j-1
   X[70] = -X[30]; // l+1,j-1
   X[71] = -X[31]; // l+1,j-1
   X[72] = -X[32]; // l+1,j-1
   X[73] = -X[33]; // l+1,j-1
   X[74] = -X[36]; // l+1,j-1
   X[75] = -X[37]; // l+1,j-1
   X[76] = -X[38]; // l+1,j-1
   X[77] = -X[39]; // l+1,j-1
   X[78] = -X[40]; // l+1,j-1
   X[79] = -X[41]; // l+1,j-1
   X[80] = -X[42]; // l+1,j-1
   X[81] = -X[43]; // l+1,j-1
   X[82] = -X[44]; // l+1,j-1
   X[83] = -X[45]; // l+1,j-1
   X[84] = -X[46]; // l+1,j-1
   X[85] = Y[49];
   X[86] =  2.0 * Y[50];
   X[87] =  2.0 * Y[51];
   X[88] =  2.0 * Y[52];
   X[89] =  2.0 * Y[53];
   X[90] =  2.0 * Y[54];
   X[91] =  2.0 * Y[55];
   X[92] =  2.0 * Y[56];
   X[93] =  2.0 * Y[57];
   X[94] =  2.0 * Y[58];
   X[95] =  2.0 * Y[59];
   X[96] =  2.0 * Y[60];
   X[97] =  2.0 * Y[61];
   X[98] = -X[2]; // (0,2) sym
   X[99] =  X[51]; // (1,2) sym
   X[100] =  2.0 * (Y[4]-Y[7]);
   X[101] = -2.0 * Y[8];
   X[102] =  2.0 * Y[10];
   X[103] =  2.0 * (Y[12]-Y[9]);
   X[104] =  2.0 * Y[13];
   X[105] =  2.0 * (Y[14]-Y[10]);
   X[106] =  2.0 * (Y[15]-Y[11]);
   X[107] = -2.0 * Y[17];
   X[108] =  2.0 * (Y[16]-Y[19]);
   X[109] = -2.0 * Y[20];
   X[110] =  2.0 * (Y[17]-Y[21]);
   X[111] =  2.0 * (Y[18]-Y[22]);
   X[112] =  2.0 * (Y[19]-Y[23]);
   X[113] =  2.0 * (Y[20]-Y[24]);
   X[114] =  2.0 * Y[26];
   X[115] =  2.0 * (Y[28]-Y[25]);
   X[116] =  2.0 * Y[29];
   X[117] =  2.0 * (Y[30]-Y[26]);
   X[118] =  2.0 * (Y[31]-Y[27]);
   X[119] =  2.0 * (Y[32]-Y[28]);
   X[120] =  2.0 * (Y[33]-Y[29]);
   X[121] =  2.0 * (Y[34]-Y[30]);
   X[122] =  2.0 * (Y[35]-Y[31]);
   X[123] = -2.0 * Y[37];
   X[124] =  2.0 * (Y[36]-Y[39]);
   X[125] = -2.0 * Y[40];
   X[126] =  2.0 * (Y[37]-Y[41]);
   X[127] =  2.0 * (Y[38]-Y[42]);
   X[128] =  2.0 * (Y[39]-Y[43]);
   X[129] =  2.0 * (Y[40]-Y[44]);
   X[130] =  2.0 * (Y[41]-Y[45]);
   X[131] =  2.0 * (Y[42]-Y[46]);
   X[132] =  2.0 * (Y[43]-Y[47]);
   X[133] =  2.0 * (Y[44]-Y[48]);
   X[134] =  2.0 * Y[50];
   X[135] =  2.0 * (Y[52]-Y[49]);
   X[136] =  2.0 * Y[53];
   X[137] =  2.0 * (Y[54]-Y[50]);
   X[138] =  2.0 * (Y[55]-Y[51]);
   X[139] =  2.0 * (Y[56]-Y[52]);
   X[140] =  2.0 * (Y[57]-Y[53]);
   X[141] =  2.0 * (Y[58]-Y[54]);
   X[142] =  2.0 * (Y[59]-Y[55]);
   X[143] =  2.0 * (Y[60]-Y[56]);
   X[144] =  2.0 * (Y[61]-Y[57]);
   X[145] =  2.0 * (Y[62]-Y[58]);
   X[146] =  2.0 * (Y[63]-Y[59]);
   X[147] = -X[3]; // (0,3) sym
   X[148] =  X[52]; // (1,3) sym
   X[149] =  X[101]; // (2,3) sym
   X[150] =  2.0 * (Y[4]+Y[7]);
   X[151] =  2.0 * Y[11];
   X[152] =  2.0 * Y[13];
   X[153] = -2.0 * (Y[9]+Y[12]);
   X[154] =  2.0 * (Y[11]+Y[15]);
   X[155] = -2.0 * (Y[10]+Y[14]);
   X[156] = -2.0 * Y[18];
   X[157] = -2.0 * Y[20];
   X[158] =  2.0 * (Y[16]+Y[19]);
   X[159] = -2.0 * (Y[18]+Y[22]);
   X[160] =  2.0 * (Y[17]+Y[21]);
   X[161] = -2.0 * (Y[20]+Y[24]);
   X[162] =  2.0 * (Y[19]+Y[23]);
   X[163] =  2.0 * Y[27];
   X[164] =  2.0 * Y[29];
   X[165] = -2.0 * (Y[25]+Y[28]);
   X[166] =  2.0 * (Y[27]+Y[31]);
   X[167] = -2.0 * (Y[26]+Y[30]);
   X[168] =  2.0 * (Y[29]+Y[33]);
   X[169] = -2.0 * (Y[28]+Y[32]);
   X[170] =  2.0 * (Y[31]+Y[35]);
   X[171] = -2.0 * (Y[30]+Y[34]);
   X[172] = -2.0 * Y[38];
   X[173] = -2.0 * Y[40];
   X[174] =  2.0 * (Y[36]+Y[39]);
   X[175] = -2.0 * (Y[38]+Y[42]);
   X[176] =  2.0 * (Y[37]+Y[41]);
   X[177] = -2.0 * (Y[40]+Y[44]);
   X[178] =  2.0 * (Y[39]+Y[43]);
   X[179] = -2.0 * (Y[42]+Y[46]);
   X[180] =  2.0 * (Y[41]+Y[45]);
   X[181] = -2.0 * (Y[44]+Y[48]);
   X[182] =  2.0 * (Y[43]+Y[47]);
   X[183] =  2.0 * Y[51];
   X[184] =  2.0 * Y[53];
   X[185] = -2.0 * (Y[49]+Y[52]);
   X[186] =  2.0 * (Y[51]+Y[55]);
   X[187] = -2.0 * (Y[50]+Y[54]);
   X[188] =  2.0 * (Y[53]+Y[57]);
   X[189] = -2.0 * (Y[52]+Y[56]);
   X[190] =  2.0 * (Y[55]+Y[59]);
   X[191] = -2.0 * (Y[54]+Y[58]);
   X[192] =  2.0 * (Y[57]+Y[61]);
   X[193] = -2.0 * (Y[56]+Y[60]);
   X[194] =  2.0 * (Y[59]+Y[63]);
   X[195] = -2.0 * (Y[58]+Y[62]);
}

void IlmIntFromIlm_ID( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_IP(Y,X);
   X[196] =  X[4]; // (0,4) sym
   X[197] = -X[53]; // (1,4) sym
   X[198] = -X[102]; // (2,4) sym
   X[199] = -X[151]; // (3,4) sym
   X[200] = -X[58]; // l+1,j-1
   X[201] = -X[59]; // l+1,j-1
   X[202] = -X[60]; // l+1,j-1
   X[203] = -X[61]; // l+1,j-1
   X[204] = -X[62]; // l+1,j-1
   X[205] = -X[65]; // l+1,j-1
   X[206] = -X[66]; // l+1,j-1
   X[207] = -X[67]; // l+1,j-1
   X[208] = -X[68]; // l+1,j-1
   X[209] = -X[69]; // l+1,j-1
   X[210] = -X[70]; // l+1,j-1
   X[211] = -X[71]; // l+1,j-1
   X[212] = -X[74]; // l+1,j-1
   X[213] = -X[75]; // l+1,j-1
   X[214] = -X[76]; // l+1,j-1
   X[215] = -X[77]; // l+1,j-1
   X[216] = -X[78]; // l+1,j-1
   X[217] = -X[79]; // l+1,j-1
   X[218] = -X[80]; // l+1,j-1
   X[219] = -X[81]; // l+1,j-1
   X[220] = -X[82]; // l+1,j-1
   X[221] = -X[85]; // l+1,j-1
   X[222] = -X[86]; // l+1,j-1
   X[223] = -X[87]; // l+1,j-1
   X[224] = -X[88]; // l+1,j-1
   X[225] = -X[89]; // l+1,j-1
   X[226] = -X[90]; // l+1,j-1
   X[227] = -X[91]; // l+1,j-1
   X[228] = -X[92]; // l+1,j-1
   X[229] = -X[93]; // l+1,j-1
   X[230] = -X[94]; // l+1,j-1
   X[231] = -X[95]; // l+1,j-1
   X[232] = Y[64];
   X[233] =  2.0 * Y[65];
   X[234] =  2.0 * Y[66];
   X[235] =  2.0 * Y[67];
   X[236] =  2.0 * Y[68];
   X[237] =  2.0 * Y[69];
   X[238] =  2.0 * Y[70];
   X[239] =  2.0 * Y[71];
   X[240] =  2.0 * Y[72];
   X[241] =  2.0 * Y[73];
   X[242] =  2.0 * Y[74];
   X[243] =  2.0 * Y[75];
   X[244] =  2.0 * Y[76];
   X[245] =  X[5]; // (0,5) sym
   X[246] = -X[54]; // (1,5) sym
   X[247] = -X[103]; // (2,5) sym
   X[248] = -X[152]; // (3,5) sym
   X[249] =  X[201]; // (4,5) sym
   X[250] = -X[108]; // l+1,j-1
   X[251] = -X[109]; // l+1,j-1
   X[252] = -X[110]; // l+1,j-1
   X[253] = -X[111]; // l+1,j-1
   X[254] = -X[114]; // l+1,j-1
   X[255] = -X[115]; // l+1,j-1
   X[256] = -X[116]; // l+1,j-1
   X[257] = -X[117]; // l+1,j-1
   X[258] = -X[118]; // l+1,j-1
   X[259] = -X[119]; // l+1,j-1
   X[260] = -X[120]; // l+1,j-1
   X[261] = -X[123]; // l+1,j-1
   X[262] = -X[124]; // l+1,j-1
   X[263] = -X[125]; // l+1,j-1
   X[264] = -X[126]; // l+1,j-1
   X[265] = -X[127]; // l+1,j-1
   X[266] = -X[128]; // l+1,j-1
   X[267] = -X[129]; // l+1,j-1
   X[268] = -X[130]; // l+1,j-1
   X[269] = -X[131]; // l+1,j-1
   X[270] = -X[134]; // l+1,j-1
   X[271] = -X[135]; // l+1,j-1
   X[272] = -X[136]; // l+1,j-1
   X[273] = -X[137]; // l+1,j-1
   X[274] = -X[138]; // l+1,j-1
   X[275] = -X[139]; // l+1,j-1
   X[276] = -X[140]; // l+1,j-1
   X[277] = -X[141]; // l+1,j-1
   X[278] = -X[142]; // l+1,j-1
   X[279] = -X[143]; // l+1,j-1
   X[280] = -X[144]; // l+1,j-1
   X[281] =  2.0 * Y[65];
   X[282] =  2.0 * (Y[67]-Y[64]);
   X[283] =  2.0 * Y[68];
   X[284] =  2.0 * (Y[69]-Y[65]);
   X[285] =  2.0 * (Y[70]-Y[66]);
   X[286] =  2.0 * (Y[71]-Y[67]);
   X[287] =  2.0 * (Y[72]-Y[68]);
   X[288] =  2.0 * (Y[73]-Y[69]);
   X[289] =  2.0 * (Y[74]-Y[70]);
   X[290] =  2.0 * (Y[75]-Y[71]);
   X[291] =  2.0 * (Y[76]-Y[72]);
   X[292] =  2.0 * (Y[77]-Y[73]);
   X[293] =  2.0 * (Y[78]-Y[74]);
   X[294] =  X[6]; // (0,6) sym
   X[295] = -X[55]; // (1,6) sym
   X[296] = -X[104]; // (2,6) sym
   X[297] = -X[153]; // (3,6) sym
   X[298] =  X[202]; // (4,6) sym
   X[299] =  X[251]; // (5,6) sym
   X[300] = -X[158]; // l+1,j-1
   X[301] = -X[159]; // l+1,j-1
   X[302] = -X[160]; // l+1,j-1
   X[303] = -X[163]; // l+1,j-1
   X[304] = -X[164]; // l+1,j-1
   X[305] = -X[165]; // l+1,j-1
   X[306] = -X[166]; // l+1,j-1
   X[307] = -X[167]; // l+1,j-1
   X[308] = -X[168]; // l+1,j-1
   X[309] = -X[169]; // l+1,j-1
   X[310] = -X[172]; // l+1,j-1
   X[311] = -X[173]; // l+1,j-1
   X[312] = -X[174]; // l+1,j-1
   X[313] = -X[175]; // l+1,j-1
   X[314] = -X[176]; // l+1,j-1
   X[315] = -X[177]; // l+1,j-1
   X[316] = -X[178]; // l+1,j-1
   X[317] = -X[179]; // l+1,j-1
   X[318] = -X[180]; // l+1,j-1
   X[319] = -X[183]; // l+1,j-1
   X[320] = -X[184]; // l+1,j-1
   X[321] = -X[185]; // l+1,j-1
   X[322] = -X[186]; // l+1,j-1
   X[323] = -X[187]; // l+1,j-1
   X[324] = -X[188]; // l+1,j-1
   X[325] = -X[189]; // l+1,j-1
   X[326] = -X[190]; // l+1,j-1
   X[327] = -X[191]; // l+1,j-1
   X[328] = -X[192]; // l+1,j-1
   X[329] = -X[193]; // l+1,j-1
   X[330] =  2.0 * Y[66];
   X[331] =  2.0 * Y[68];
   X[332] = -2.0 * (Y[64]+Y[67]);
   X[333] =  2.0 * (Y[66]+Y[70]);
   X[334] = -2.0 * (Y[65]+Y[69]);
   X[335] =  2.0 * (Y[68]+Y[72]);
   X[336] = -2.0 * (Y[67]+Y[71]);
   X[337] =  2.0 * (Y[70]+Y[74]);
   X[338] = -2.0 * (Y[69]+Y[73]);
   X[339] =  2.0 * (Y[72]+Y[76]);
   X[340] = -2.0 * (Y[71]+Y[75]);
   X[341] =  2.0 * (Y[74]+Y[78]);
   X[342] = -2.0 * (Y[73]+Y[77]);
   X[343] =  X[7]; // (0,7) sym
   X[344] = -X[56]; // (1,7) sym
   X[345] = -X[105]; // (2,7) sym
   X[346] = -X[154]; // (3,7) sym
   X[347] =  X[203]; // (4,7) sym
   X[348] =  X[252]; // (5,7) sym
   X[349] =  X[301]; // (6,7) sym
   X[350] =  2.0 * (Y[16]+Y[23]);
   X[351] =  2.0 * Y[24];
   X[352] = -2.0 * Y[28];
   X[353] =  2.0 * (Y[26]-Y[30]);
   X[354] = -2.0 * (Y[27]+Y[31]);
   X[355] = -2.0 * (Y[25]+Y[32]);
   X[356] = -2.0 * Y[33];
   X[357] = -2.0 * (Y[26]+Y[34]);
   X[358] = -2.0 * (Y[27]+Y[35]);
   X[359] =  2.0 * Y[39];
   X[360] =  2.0 * (Y[41]-Y[37]);
   X[361] =  2.0 * (Y[38]+Y[42]);
   X[362] =  2.0 * (Y[36]+Y[43]);
   X[363] =  2.0 * Y[44];
   X[364] =  2.0 * (Y[37]+Y[45]);
   X[365] =  2.0 * (Y[38]+Y[46]);
   X[366] =  2.0 * (Y[39]+Y[47]);
   X[367] =  2.0 * (Y[40]+Y[48]);
   X[368] = -2.0 * Y[52];
   X[369] =  2.0 * (Y[50]-Y[54]);
   X[370] = -2.0 * (Y[51]+Y[55]);
   X[371] = -2.0 * (Y[49]+Y[56]);
   X[372] = -2.0 * Y[57];
   X[373] = -2.0 * (Y[50]+Y[58]);
   X[374] = -2.0 * (Y[51]+Y[59]);
   X[375] = -2.0 * (Y[52]+Y[60]);
   X[376] = -2.0 * (Y[53]+Y[61]);
   X[377] = -2.0 * (Y[54]+Y[62]);
   X[378] = -2.0 * (Y[55]+Y[63]);
   X[379] =  2.0 * Y[67];
   X[380] =  2.0 * (Y[69]-Y[65]);
   X[381] =  2.0 * (Y[66]+Y[70]);
   X[382] =  2.0 * (Y[64]+Y[71]);
   X[383] =  2.0 * Y[72];
   X[384] =  2.0 * (Y[65]+Y[73]);
   X[385] =  2.0 * (Y[66]+Y[74]);
   X[386] =  2.0 * (Y[67]+Y[75]);
   X[387] =  2.0 * (Y[68]+Y[76]);
   X[388] =  2.0 * (Y[69]+Y[77]);
   X[389] =  2.0 * (Y[70]+Y[78]);
   X[390] =  2.0 * (Y[71]+Y[79]);
   X[391] =  2.0 * (Y[72]+Y[80]);
   X[392] =  X[8]; // (0,8) sym
   X[393] = -X[57]; // (1,8) sym
   X[394] = -X[106]; // (2,8) sym
   X[395] = -X[155]; // (3,8) sym
   X[396] =  X[204]; // (4,8) sym
   X[397] =  X[253]; // (5,8) sym
   X[398] =  X[302]; // (6,8) sym
   X[399] =  X[351]; // (7,8) sym
   X[400] =  2.0 * (Y[16]-Y[23]);
   X[401] = -2.0 * Y[29];
   X[402] =  2.0 * (Y[27]-Y[31]);
   X[403] =  2.0 * (Y[26]+Y[30]);
   X[404] = -2.0 * Y[33];
   X[405] =  2.0 * (Y[32]-Y[25]);
   X[406] =  2.0 * (Y[27]-Y[35]);
   X[407] =  2.0 * (Y[34]-Y[26]);
   X[408] =  2.0 * Y[40];
   X[409] =  2.0 * (Y[42]-Y[38]);
   X[410] = -2.0 * (Y[37]+Y[41]);
   X[411] =  2.0 * Y[44];
   X[412] =  2.0 * (Y[36]-Y[43]);
   X[413] =  2.0 * (Y[46]-Y[38]);
   X[414] =  2.0 * (Y[37]-Y[45]);
   X[415] =  2.0 * (Y[48]-Y[40]);
   X[416] =  2.0 * (Y[39]-Y[47]);
   X[417] = -2.0 * Y[53];
   X[418] =  2.0 * (Y[51]-Y[55]);
   X[419] =  2.0 * (Y[50]+Y[54]);
   X[420] = -2.0 * Y[57];
   X[421] =  2.0 * (Y[56]-Y[49]);
   X[422] =  2.0 * (Y[51]-Y[59]);
   X[423] =  2.0 * (Y[58]-Y[50]);
   X[424] =  2.0 * (Y[53]-Y[61]);
   X[425] =  2.0 * (Y[60]-Y[52]);
   X[426] =  2.0 * (Y[55]-Y[63]);
   X[427] =  2.0 * (Y[62]-Y[54]);
   X[428] =  2.0 * Y[68];
   X[429] =  2.0 * (Y[70]-Y[66]);
   X[430] = -2.0 * (Y[65]+Y[69]);
   X[431] =  2.0 * Y[72];
   X[432] =  2.0 * (Y[64]-Y[71]);
   X[433] =  2.0 * (Y[74]-Y[66]);
   X[434] =  2.0 * (Y[65]-Y[73]);
   X[435] =  2.0 * (Y[76]-Y[68]);
   X[436] =  2.0 * (Y[67]-Y[75]);
   X[437] =  2.0 * (Y[78]-Y[70]);
   X[438] =  2.0 * (Y[69]-Y[77]);
   X[439] =  2.0 * (Y[80]-Y[72]);
   X[440] =  2.0 * (Y[71]-Y[79]);
}

void IlmIntFromIlm_IF( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_ID(Y,X);
   X[441] = -X[9]; // (0,9) sym
   X[442] =  X[58]; // (1,9) sym
   X[443] =  X[107]; // (2,9) sym
   X[444] =  X[156]; // (3,9) sym
   X[445] = -X[205]; // (4,9) sym
   X[446] = -X[254]; // (5,9) sym
   X[447] = -X[303]; // (6,9) sym
   X[448] = -X[352]; // (7,9) sym
   X[449] = -X[401]; // (8,9) sym
   X[450] = -X[212]; // l+1,j-1
   X[451] = -X[213]; // l+1,j-1
   X[452] = -X[214]; // l+1,j-1
   X[453] = -X[215]; // l+1,j-1
   X[454] = -X[216]; // l+1,j-1
   X[455] = -X[217]; // l+1,j-1
   X[456] = -X[218]; // l+1,j-1
   X[457] = -X[221]; // l+1,j-1
   X[458] = -X[222]; // l+1,j-1
   X[459] = -X[223]; // l+1,j-1
   X[460] = -X[224]; // l+1,j-1
   X[461] = -X[225]; // l+1,j-1
   X[462] = -X[226]; // l+1,j-1
   X[463] = -X[227]; // l+1,j-1
   X[464] = -X[228]; // l+1,j-1
   X[465] = -X[229]; // l+1,j-1
   X[466] = -X[232]; // l+1,j-1
   X[467] = -X[233]; // l+1,j-1
   X[468] = -X[234]; // l+1,j-1
   X[469] = -X[235]; // l+1,j-1
   X[470] = -X[236]; // l+1,j-1
   X[471] = -X[237]; // l+1,j-1
   X[472] = -X[238]; // l+1,j-1
   X[473] = -X[239]; // l+1,j-1
   X[474] = -X[240]; // l+1,j-1
   X[475] = -X[241]; // l+1,j-1
   X[476] = -X[242]; // l+1,j-1
   X[477] = Y[81];
   X[478] =  2.0 * Y[82];
   X[479] =  2.0 * Y[83];
   X[480] =  2.0 * Y[84];
   X[481] =  2.0 * Y[85];
   X[482] =  2.0 * Y[86];
   X[483] =  2.0 * Y[87];
   X[484] =  2.0 * Y[88];
   X[485] =  2.0 * Y[89];
   X[486] =  2.0 * Y[90];
   X[487] =  2.0 * Y[91];
   X[488] =  2.0 * Y[92];
   X[489] =  2.0 * Y[93];
   X[490] = -X[10]; // (0,10) sym
   X[491] =  X[59]; // (1,10) sym
   X[492] =  X[108]; // (2,10) sym
   X[493] =  X[157]; // (3,10) sym
   X[494] = -X[206]; // (4,10) sym
   X[495] = -X[255]; // (5,10) sym
   X[496] = -X[304]; // (6,10) sym
   X[497] = -X[353]; // (7,10) sym
   X[498] = -X[402]; // (8,10) sym
   X[499] =  X[451]; // (9,10) sym
   X[500] = -X[262]; // l+1,j-1
   X[501] = -X[263]; // l+1,j-1
   X[502] = -X[264]; // l+1,j-1
   X[503] = -X[265]; // l+1,j-1
   X[504] = -X[266]; // l+1,j-1
   X[505] = -X[267]; // l+1,j-1
   X[506] = -X[270]; // l+1,j-1
   X[507] = -X[271]; // l+1,j-1
   X[508] = -X[272]; // l+1,j-1
   X[509] = -X[273]; // l+1,j-1
   X[510] = -X[274]; // l+1,j-1
   X[511] = -X[275]; // l+1,j-1
   X[512] = -X[276]; // l+1,j-1
   X[513] = -X[277]; // l+1,j-1
   X[514] = -X[278]; // l+1,j-1
   X[515] = -X[281]; // l+1,j-1
   X[516] = -X[282]; // l+1,j-1
   X[517] = -X[283]; // l+1,j-1
   X[518] = -X[284]; // l+1,j-1
   X[519] = -X[285]; // l+1,j-1
   X[520] = -X[286]; // l+1,j-1
   X[521] = -X[287]; // l+1,j-1
   X[522] = -X[288]; // l+1,j-1
   X[523] = -X[289]; // l+1,j-1
   X[524] = -X[290]; // l+1,j-1
   X[525] = -X[291]; // l+1,j-1
   X[526] =  2.0 * Y[82];
   X[527] =  2.0 * (Y[84]-Y[81]);
   X[528] =  2.0 * Y[85];
   X[529] =  2.0 * (Y[86]-Y[82]);
   X[530] =  2.0 * (Y[87]-Y[83]);
   X[531] =  2.0 * (Y[88]-Y[84]);
   X[532] =  2.0 * (Y[89]-Y[85]);
   X[533] =  2.0 * (Y[90]-Y[86]);
   X[534] =  2.0 * (Y[91]-Y[87]);
   X[535] =  2.0 * (Y[92]-Y[88]);
   X[536] =  2.0 * (Y[93]-Y[89]);
   X[537] =  2.0 * (Y[94]-Y[90]);
   X[538] =  2.0 * (Y[95]-Y[91]);
   X[539] = -X[11]; // (0,11) sym
   X[540] =  X[60]; // (1,11) sym
   X[541] =  X[109]; // (2,11) sym
   X[542] =  X[158]; // (3,11) sym
   X[543] = -X[207]; // (4,11) sym
   X[544] = -X[256]; // (5,11) sym
   X[545] = -X[305]; // (6,11) sym
   X[546] = -X[354]; // (7,11) sym
   X[547] = -X[403]; // (8,11) sym
   X[548] =  X[452]; // (9,11) sym
   X[549] =  X[501]; // (10,11) sym
   X[550] = -X[312]; // l+1,j-1
   X[551] = -X[313]; // l+1,j-1
   X[552] = -X[314]; // l+1,j-1
   X[553] = -X[315]; // l+1,j-1
   X[554] = -X[316]; // l+1,j-1
   X[555] = -X[319]; // l+1,j-1
   X[556] = -X[320]; // l+1,j-1
   X[557] = -X[321]; // l+1,j-1
   X[558] = -X[322]; // l+1,j-1
   X[559] = -X[323]; // l+1,j-1
   X[560] = -X[324]; // l+1,j-1
   X[561] = -X[325]; // l+1,j-1
   X[562] = -X[326]; // l+1,j-1
   X[563] = -X[327]; // l+1,j-1
   X[564] = -X[330]; // l+1,j-1
   X[565] = -X[331]; // l+1,j-1
   X[566] = -X[332]; // l+1,j-1
   X[567] = -X[333]; // l+1,j-1
   X[568] = -X[334]; // l+1,j-1
   X[569] = -X[335]; // l+1,j-1
   X[570] = -X[336]; // l+1,j-1
   X[571] = -X[337]; // l+1,j-1
   X[572] = -X[338]; // l+1,j-1
   X[573] = -X[339]; // l+1,j-1
   X[574] = -X[340]; // l+1,j-1
   X[575] =  2.0 * Y[83];
   X[576] =  2.0 * Y[85];
   X[577] = -2.0 * (Y[81]+Y[84]);
   X[578] =  2.0 * (Y[83]+Y[87]);
   X[579] = -2.0 * (Y[82]+Y[86]);
   X[580] =  2.0 * (Y[85]+Y[89]);
   X[581] = -2.0 * (Y[84]+Y[88]);
   X[582] =  2.0 * (Y[87]+Y[91]);
   X[583] = -2.0 * (Y[86]+Y[90]);
   X[584] =  2.0 * (Y[89]+Y[93]);
   X[585] = -2.0 * (Y[88]+Y[92]);
   X[586] =  2.0 * (Y[91]+Y[95]);
   X[587] = -2.0 * (Y[90]+Y[94]);
   X[588] = -X[12]; // (0,12) sym
   X[589] =  X[61]; // (1,12) sym
   X[590] =  X[110]; // (2,12) sym
   X[591] =  X[159]; // (3,12) sym
   X[592] = -X[208]; // (4,12) sym
   X[593] = -X[257]; // (5,12) sym
   X[594] = -X[306]; // (6,12) sym
   X[595] = -X[355]; // (7,12) sym
   X[596] = -X[404]; // (8,12) sym
   X[597] =  X[453]; // (9,12) sym
   X[598] =  X[502]; // (10,12) sym
   X[599] =  X[551]; // (11,12) sym
   X[600] = -X[362]; // l+1,j-1
   X[601] = -X[363]; // l+1,j-1
   X[602] = -X[364]; // l+1,j-1
   X[603] = -X[365]; // l+1,j-1
   X[604] = -X[368]; // l+1,j-1
   X[605] = -X[369]; // l+1,j-1
   X[606] = -X[370]; // l+1,j-1
   X[607] = -X[371]; // l+1,j-1
   X[608] = -X[372]; // l+1,j-1
   X[609] = -X[373]; // l+1,j-1
   X[610] = -X[374]; // l+1,j-1
   X[611] = -X[375]; // l+1,j-1
   X[612] = -X[376]; // l+1,j-1
   X[613] = -X[379]; // l+1,j-1
   X[614] = -X[380]; // l+1,j-1
   X[615] = -X[381]; // l+1,j-1
   X[616] = -X[382]; // l+1,j-1
   X[617] = -X[383]; // l+1,j-1
   X[618] = -X[384]; // l+1,j-1
   X[619] = -X[385]; // l+1,j-1
   X[620] = -X[386]; // l+1,j-1
   X[621] = -X[387]; // l+1,j-1
   X[622] = -X[388]; // l+1,j-1
   X[623] = -X[389]; // l+1,j-1
   X[624] =  2.0 * Y[84];
   X[625] =  2.0 * (Y[86]-Y[82]);
   X[626] =  2.0 * (Y[83]+Y[87]);
   X[627] =  2.0 * (Y[81]+Y[88]);
   X[628] =  2.0 * Y[89];
   X[629] =  2.0 * (Y[82]+Y[90]);
   X[630] =  2.0 * (Y[83]+Y[91]);
   X[631] =  2.0 * (Y[84]+Y[92]);
   X[632] =  2.0 * (Y[85]+Y[93]);
   X[633] =  2.0 * (Y[86]+Y[94]);
   X[634] =  2.0 * (Y[87]+Y[95]);
   X[635] =  2.0 * (Y[88]+Y[96]);
   X[636] =  2.0 * (Y[89]+Y[97]);
   X[637] = -X[13]; // (0,13) sym
   X[638] =  X[62]; // (1,13) sym
   X[639] =  X[111]; // (2,13) sym
   X[640] =  X[160]; // (3,13) sym
   X[641] = -X[209]; // (4,13) sym
   X[642] = -X[258]; // (5,13) sym
   X[643] = -X[307]; // (6,13) sym
   X[644] = -X[356]; // (7,13) sym
   X[645] = -X[405]; // (8,13) sym
   X[646] =  X[454]; // (9,13) sym
   X[647] =  X[503]; // (10,13) sym
   X[648] =  X[552]; // (11,13) sym
   X[649] =  X[601]; // (12,13) sym
   X[650] = -X[412]; // l+1,j-1
   X[651] = -X[413]; // l+1,j-1
   X[652] = -X[414]; // l+1,j-1
   X[653] = -X[417]; // l+1,j-1
   X[654] = -X[418]; // l+1,j-1
   X[655] = -X[419]; // l+1,j-1
   X[656] = -X[420]; // l+1,j-1
   X[657] = -X[421]; // l+1,j-1
   X[658] = -X[422]; // l+1,j-1
   X[659] = -X[423]; // l+1,j-1
   X[660] = -X[424]; // l+1,j-1
   X[661] = -X[425]; // l+1,j-1
   X[662] = -X[428]; // l+1,j-1
   X[663] = -X[429]; // l+1,j-1
   X[664] = -X[430]; // l+1,j-1
   X[665] = -X[431]; // l+1,j-1
   X[666] = -X[432]; // l+1,j-1
   X[667] = -X[433]; // l+1,j-1
   X[668] = -X[434]; // l+1,j-1
   X[669] = -X[435]; // l+1,j-1
   X[670] = -X[436]; // l+1,j-1
   X[671] = -X[437]; // l+1,j-1
   X[672] = -X[438]; // l+1,j-1
   X[673] =  2.0 * Y[85];
   X[674] =  2.0 * (Y[87]-Y[83]);
   X[675] = -2.0 * (Y[82]+Y[86]);
   X[676] =  2.0 * Y[89];
   X[677] =  2.0 * (Y[81]-Y[88]);
   X[678] =  2.0 * (Y[91]-Y[83]);
   X[679] =  2.0 * (Y[82]-Y[90]);
   X[680] =  2.0 * (Y[93]-Y[85]);
   X[681] =  2.0 * (Y[84]-Y[92]);
   X[682] =  2.0 * (Y[95]-Y[87]);
   X[683] =  2.0 * (Y[86]-Y[94]);
   X[684] =  2.0 * (Y[97]-Y[89]);
   X[685] =  2.0 * (Y[88]-Y[96]);
   X[686] = -X[14]; // (0,14) sym
   X[687] =  X[63]; // (1,14) sym
   X[688] =  X[112]; // (2,14) sym
   X[689] =  X[161]; // (3,14) sym
   X[690] = -X[210]; // (4,14) sym
   X[691] = -X[259]; // (5,14) sym
   X[692] = -X[308]; // (6,14) sym
   X[693] = -X[357]; // (7,14) sym
   X[694] = -X[406]; // (8,14) sym
   X[695] =  X[455]; // (9,14) sym
   X[696] =  X[504]; // (10,14) sym
   X[697] =  X[553]; // (11,14) sym
   X[698] =  X[602]; // (12,14) sym
   X[699] =  X[651]; // (13,14) sym
   X[700] =  2.0 * (Y[36]-Y[47]);
   X[701] = -2.0 * Y[48];
   X[702] =  2.0 * Y[54];
   X[703] =  2.0 * (Y[56]-Y[52]);
   X[704] =  2.0 * (Y[53]+Y[57]);
   X[705] =  2.0 * (Y[50]+Y[58]);
   X[706] =  2.0 * (Y[59]-Y[51]);
   X[707] =  2.0 * (Y[60]-Y[49]);
   X[708] =  2.0 * Y[61];
   X[709] =  2.0 * (Y[62]-Y[50]);
   X[710] =  2.0 * (Y[63]-Y[51]);
   X[711] = -2.0 * Y[69];
   X[712] =  2.0 * (Y[67]-Y[71]);
   X[713] = -2.0 * (Y[68]+Y[72]);
   X[714] = -2.0 * (Y[65]+Y[73]);
   X[715] =  2.0 * (Y[66]-Y[74]);
   X[716] =  2.0 * (Y[64]-Y[75]);
   X[717] = -2.0 * Y[76];
   X[718] =  2.0 * (Y[65]-Y[77]);
   X[719] =  2.0 * (Y[66]-Y[78]);
   X[720] =  2.0 * (Y[67]-Y[79]);
   X[721] =  2.0 * (Y[68]-Y[80]);
   X[722] =  2.0 * Y[86];
   X[723] =  2.0 * (Y[88]-Y[84]);
   X[724] =  2.0 * (Y[85]+Y[89]);
   X[725] =  2.0 * (Y[82]+Y[90]);
   X[726] =  2.0 * (Y[91]-Y[83]);
   X[727] =  2.0 * (Y[92]-Y[81]);
   X[728] =  2.0 * Y[93];
   X[729] =  2.0 * (Y[94]-Y[82]);
   X[730] =  2.0 * (Y[95]-Y[83]);
   X[731] =  2.0 * (Y[96]-Y[84]);
   X[732] =  2.0 * (Y[97]-Y[85]);
   X[733] =  2.0 * (Y[98]-Y[86]);
   X[734] =  2.0 * (Y[99]-Y[87]);
   X[735] = -X[15]; // (0,15) sym
   X[736] =  X[64]; // (1,15) sym
   X[737] =  X[113]; // (2,15) sym
   X[738] =  X[162]; // (3,15) sym
   X[739] = -X[211]; // (4,15) sym
   X[740] = -X[260]; // (5,15) sym
   X[741] = -X[309]; // (6,15) sym
   X[742] = -X[358]; // (7,15) sym
   X[743] = -X[407]; // (8,15) sym
   X[744] =  X[456]; // (9,15) sym
   X[745] =  X[505]; // (10,15) sym
   X[746] =  X[554]; // (11,15) sym
   X[747] =  X[603]; // (12,15) sym
   X[748] =  X[652]; // (13,15) sym
   X[749] =  X[701]; // (14,15) sym
   X[750] =  2.0 * (Y[36]+Y[47]);
   X[751] =  2.0 * Y[55];
   X[752] =  2.0 * (Y[57]-Y[53]);
   X[753] = -2.0 * (Y[52]+Y[56]);
   X[754] =  2.0 * (Y[51]+Y[59]);
   X[755] =  2.0 * (Y[50]-Y[58]);
   X[756] =  2.0 * Y[61];
   X[757] = -2.0 * (Y[49]+Y[60]);
   X[758] =  2.0 * (Y[51]+Y[63]);
   X[759] = -2.0 * (Y[50]+Y[62]);
   X[760] = -2.0 * Y[70];
   X[761] =  2.0 * (Y[68]-Y[72]);
   X[762] =  2.0 * (Y[67]+Y[71]);
   X[763] = -2.0 * (Y[66]+Y[74]);
   X[764] =  2.0 * (Y[73]-Y[65]);
   X[765] = -2.0 * Y[76];
   X[766] =  2.0 * (Y[64]+Y[75]);
   X[767] = -2.0 * (Y[66]+Y[78]);
   X[768] =  2.0 * (Y[65]+Y[77]);
   X[769] = -2.0 * (Y[68]+Y[80]);
   X[770] =  2.0 * (Y[67]+Y[79]);
   X[771] =  2.0 * Y[87];
   X[772] =  2.0 * (Y[89]-Y[85]);
   X[773] = -2.0 * (Y[84]+Y[88]);
   X[774] =  2.0 * (Y[83]+Y[91]);
   X[775] =  2.0 * (Y[82]-Y[90]);
   X[776] =  2.0 * Y[93];
   X[777] = -2.0 * (Y[81]+Y[92]);
   X[778] =  2.0 * (Y[83]+Y[95]);
   X[779] = -2.0 * (Y[82]+Y[94]);
   X[780] =  2.0 * (Y[85]+Y[97]);
   X[781] = -2.0 * (Y[84]+Y[96]);
   X[782] =  2.0 * (Y[87]+Y[99]);
   X[783] = -2.0 * (Y[86]+Y[98]);
}

void IlmIntFromIlm_IG( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_IF(Y,X);
   X[784] =  X[16]; // (0,16) sym
   X[785] = -X[65]; // (1,16) sym
   X[786] = -X[114]; // (2,16) sym
   X[787] = -X[163]; // (3,16) sym
   X[788] =  X[212]; // (4,16) sym
   X[789] =  X[261]; // (5,16) sym
   X[790] =  X[310]; // (6,16) sym
   X[791] =  X[359]; // (7,16) sym
   X[792] =  X[408]; // (8,16) sym
   X[793] = -X[457]; // (9,16) sym
   X[794] = -X[506]; // (10,16) sym
   X[795] = -X[555]; // (11,16) sym
   X[796] = -X[604]; // (12,16) sym
   X[797] = -X[653]; // (13,16) sym
   X[798] = -X[702]; // (14,16) sym
   X[799] = -X[751]; // (15,16) sym
   X[800] = -X[466]; // l+1,j-1
   X[801] = -X[467]; // l+1,j-1
   X[802] = -X[468]; // l+1,j-1
   X[803] = -X[469]; // l+1,j-1
   X[804] = -X[470]; // l+1,j-1
   X[805] = -X[471]; // l+1,j-1
   X[806] = -X[472]; // l+1,j-1
   X[807] = -X[473]; // l+1,j-1
   X[808] = -X[474]; // l+1,j-1
   X[809] = -X[477]; // l+1,j-1
   X[810] = -X[478]; // l+1,j-1
   X[811] = -X[479]; // l+1,j-1
   X[812] = -X[480]; // l+1,j-1
   X[813] = -X[481]; // l+1,j-1
   X[814] = -X[482]; // l+1,j-1
   X[815] = -X[483]; // l+1,j-1
   X[816] = -X[484]; // l+1,j-1
   X[817] = -X[485]; // l+1,j-1
   X[818] = -X[486]; // l+1,j-1
   X[819] = -X[487]; // l+1,j-1
   X[820] = Y[100];
   X[821] =  2.0 * Y[101];
   X[822] =  2.0 * Y[102];
   X[823] =  2.0 * Y[103];
   X[824] =  2.0 * Y[104];
   X[825] =  2.0 * Y[105];
   X[826] =  2.0 * Y[106];
   X[827] =  2.0 * Y[107];
   X[828] =  2.0 * Y[108];
   X[829] =  2.0 * Y[109];
   X[830] =  2.0 * Y[110];
   X[831] =  2.0 * Y[111];
   X[832] =  2.0 * Y[112];
   X[833] =  X[17]; // (0,17) sym
   X[834] = -X[66]; // (1,17) sym
   X[835] = -X[115]; // (2,17) sym
   X[836] = -X[164]; // (3,17) sym
   X[837] =  X[213]; // (4,17) sym
   X[838] =  X[262]; // (5,17) sym
   X[839] =  X[311]; // (6,17) sym
   X[840] =  X[360]; // (7,17) sym
   X[841] =  X[409]; // (8,17) sym
   X[842] = -X[458]; // (9,17) sym
   X[843] = -X[507]; // (10,17) sym
   X[844] = -X[556]; // (11,17) sym
   X[845] = -X[605]; // (12,17) sym
   X[846] = -X[654]; // (13,17) sym
   X[847] = -X[703]; // (14,17) sym
   X[848] = -X[752]; // (15,17) sym
   X[849] =  X[801]; // (16,17) sym
   X[850] = -X[516]; // l+1,j-1
   X[851] = -X[517]; // l+1,j-1
   X[852] = -X[518]; // l+1,j-1
   X[853] = -X[519]; // l+1,j-1
   X[854] = -X[520]; // l+1,j-1
   X[855] = -X[521]; // l+1,j-1
   X[856] = -X[522]; // l+1,j-1
   X[857] = -X[523]; // l+1,j-1
   X[858] = -X[526]; // l+1,j-1
   X[859] = -X[527]; // l+1,j-1
   X[860] = -X[528]; // l+1,j-1
   X[861] = -X[529]; // l+1,j-1
   X[862] = -X[530]; // l+1,j-1
   X[863] = -X[531]; // l+1,j-1
   X[864] = -X[532]; // l+1,j-1
   X[865] = -X[533]; // l+1,j-1
   X[866] = -X[534]; // l+1,j-1
   X[867] = -X[535]; // l+1,j-1
   X[868] = -X[536]; // l+1,j-1
   X[869] =  2.0 * Y[101];
   X[870] =  2.0 * (Y[103]-Y[100]);
   X[871] =  2.0 * Y[104];
   X[872] =  2.0 * (Y[105]-Y[101]);
   X[873] =  2.0 * (Y[106]-Y[102]);
   X[874] =  2.0 * (Y[107]-Y[103]);
   X[875] =  2.0 * (Y[108]-Y[104]);
   X[876] =  2.0 * (Y[109]-Y[105]);
   X[877] =  2.0 * (Y[110]-Y[106]);
   X[878] =  2.0 * (Y[111]-Y[107]);
   X[879] =  2.0 * (Y[112]-Y[108]);
   X[880] =  2.0 * (Y[113]-Y[109]);
   X[881] =  2.0 * (Y[114]-Y[110]);
   X[882] =  X[18]; // (0,18) sym
   X[883] = -X[67]; // (1,18) sym
   X[884] = -X[116]; // (2,18) sym
   X[885] = -X[165]; // (3,18) sym
   X[886] =  X[214]; // (4,18) sym
   X[887] =  X[263]; // (5,18) sym
   X[888] =  X[312]; // (6,18) sym
   X[889] =  X[361]; // (7,18) sym
   X[890] =  X[410]; // (8,18) sym
   X[891] = -X[459]; // (9,18) sym
   X[892] = -X[508]; // (10,18) sym
   X[893] = -X[557]; // (11,18) sym
   X[894] = -X[606]; // (12,18) sym
   X[895] = -X[655]; // (13,18) sym
   X[896] = -X[704]; // (14,18) sym
   X[897] = -X[753]; // (15,18) sym
   X[898] =  X[802]; // (16,18) sym
   X[899] =  X[851]; // (17,18) sym
   X[900] = -X[566]; // l+1,j-1
   X[901] = -X[567]; // l+1,j-1
   X[902] = -X[568]; // l+1,j-1
   X[903] = -X[569]; // l+1,j-1
   X[904] = -X[570]; // l+1,j-1
   X[905] = -X[571]; // l+1,j-1
   X[906] = -X[572]; // l+1,j-1
   X[907] = -X[575]; // l+1,j-1
   X[908] = -X[576]; // l+1,j-1
   X[909] = -X[577]; // l+1,j-1
   X[910] = -X[578]; // l+1,j-1
   X[911] = -X[579]; // l+1,j-1
   X[912] = -X[580]; // l+1,j-1
   X[913] = -X[581]; // l+1,j-1
   X[914] = -X[582]; // l+1,j-1
   X[915] = -X[583]; // l+1,j-1
   X[916] = -X[584]; // l+1,j-1
   X[917] = -X[585]; // l+1,j-1
   X[918] =  2.0 * Y[102];
   X[919] =  2.0 * Y[104];
   X[920] = -2.0 * (Y[100]+Y[103]);
   X[921] =  2.0 * (Y[102]+Y[106]);
   X[922] = -2.0 * (Y[101]+Y[105]);
   X[923] =  2.0 * (Y[104]+Y[108]);
   X[924] = -2.0 * (Y[103]+Y[107]);
   X[925] =  2.0 * (Y[106]+Y[110]);
   X[926] = -2.0 * (Y[105]+Y[109]);
   X[927] =  2.0 * (Y[108]+Y[112]);
   X[928] = -2.0 * (Y[107]+Y[111]);
   X[929] =  2.0 * (Y[110]+Y[114]);
   X[930] = -2.0 * (Y[109]+Y[113]);
   X[931] =  X[19]; // (0,19) sym
   X[932] = -X[68]; // (1,19) sym
   X[933] = -X[117]; // (2,19) sym
   X[934] = -X[166]; // (3,19) sym
   X[935] =  X[215]; // (4,19) sym
   X[936] =  X[264]; // (5,19) sym
   X[937] =  X[313]; // (6,19) sym
   X[938] =  X[362]; // (7,19) sym
   X[939] =  X[411]; // (8,19) sym
   X[940] = -X[460]; // (9,19) sym
   X[941] = -X[509]; // (10,19) sym
   X[942] = -X[558]; // (11,19) sym
   X[943] = -X[607]; // (12,19) sym
   X[944] = -X[656]; // (13,19) sym
   X[945] = -X[705]; // (14,19) sym
   X[946] = -X[754]; // (15,19) sym
   X[947] =  X[803]; // (16,19) sym
   X[948] =  X[852]; // (17,19) sym
   X[949] =  X[901]; // (18,19) sym
   X[950] = -X[616]; // l+1,j-1
   X[951] = -X[617]; // l+1,j-1
   X[952] = -X[618]; // l+1,j-1
   X[953] = -X[619]; // l+1,j-1
   X[954] = -X[620]; // l+1,j-1
   X[955] = -X[621]; // l+1,j-1
   X[956] = -X[624]; // l+1,j-1
   X[957] = -X[625]; // l+1,j-1
   X[958] = -X[626]; // l+1,j-1
   X[959] = -X[627]; // l+1,j-1
   X[960] = -X[628]; // l+1,j-1
   X[961] = -X[629]; // l+1,j-1
   X[962] = -X[630]; // l+1,j-1
   X[963] = -X[631]; // l+1,j-1
   X[964] = -X[632]; // l+1,j-1
   X[965] = -X[633]; // l+1,j-1
   X[966] = -X[634]; // l+1,j-1
   X[967] =  2.0 * Y[103];
   X[968] =  2.0 * (Y[105]-Y[101]);
   X[969] =  2.0 * (Y[102]+Y[106]);
   X[970] =  2.0 * (Y[100]+Y[107]);
   X[971] =  2.0 * Y[108];
   X[972] =  2.0 * (Y[101]+Y[109]);
   X[973] =  2.0 * (Y[102]+Y[110]);
   X[974] =  2.0 * (Y[103]+Y[111]);
   X[975] =  2.0 * (Y[104]+Y[112]);
   X[976] =  2.0 * (Y[105]+Y[113]);
   X[977] =  2.0 * (Y[106]+Y[114]);
   X[978] =  2.0 * (Y[107]+Y[115]);
   X[979] =  2.0 * (Y[108]+Y[116]);
   X[980] =  X[20]; // (0,20) sym
   X[981] = -X[69]; // (1,20) sym
   X[982] = -X[118]; // (2,20) sym
   X[983] = -X[167]; // (3,20) sym
   X[984] =  X[216]; // (4,20) sym
   X[985] =  X[265]; // (5,20) sym
   X[986] =  X[314]; // (6,20) sym
   X[987] =  X[363]; // (7,20) sym
   X[988] =  X[412]; // (8,20) sym
   X[989] = -X[461]; // (9,20) sym
   X[990] = -X[510]; // (10,20) sym
   X[991] = -X[559]; // (11,20) sym
   X[992] = -X[608]; // (12,20) sym
   X[993] = -X[657]; // (13,20) sym
   X[994] = -X[706]; // (14,20) sym
   X[995] = -X[755]; // (15,20) sym
   X[996] =  X[804]; // (16,20) sym
   X[997] =  X[853]; // (17,20) sym
   X[998] =  X[902]; // (18,20) sym
   X[999] =  X[951]; // (19,20) sym
   X[1000] = -X[666]; // l+1,j-1
   X[1001] = -X[667]; // l+1,j-1
   X[1002] = -X[668]; // l+1,j-1
   X[1003] = -X[669]; // l+1,j-1
   X[1004] = -X[670]; // l+1,j-1
   X[1005] = -X[673]; // l+1,j-1
   X[1006] = -X[674]; // l+1,j-1
   X[1007] = -X[675]; // l+1,j-1
   X[1008] = -X[676]; // l+1,j-1
   X[1009] = -X[677]; // l+1,j-1
   X[1010] = -X[678]; // l+1,j-1
   X[1011] = -X[679]; // l+1,j-1
   X[1012] = -X[680]; // l+1,j-1
   X[1013] = -X[681]; // l+1,j-1
   X[1014] = -X[682]; // l+1,j-1
   X[1015] = -X[683]; // l+1,j-1
   X[1016] =  2.0 * Y[104];
   X[1017] =  2.0 * (Y[106]-Y[102]);
   X[1018] = -2.0 * (Y[101]+Y[105]);
   X[1019] =  2.0 * Y[108];
   X[1020] =  2.0 * (Y[100]-Y[107]);
   X[1021] =  2.0 * (Y[110]-Y[102]);
   X[1022] =  2.0 * (Y[101]-Y[109]);
   X[1023] =  2.0 * (Y[112]-Y[104]);
   X[1024] =  2.0 * (Y[103]-Y[111]);
   X[1025] =  2.0 * (Y[114]-Y[106]);
   X[1026] =  2.0 * (Y[105]-Y[113]);
   X[1027] =  2.0 * (Y[116]-Y[108]);
   X[1028] =  2.0 * (Y[107]-Y[115]);
   X[1029] =  X[21]; // (0,21) sym
   X[1030] = -X[70]; // (1,21) sym
   X[1031] = -X[119]; // (2,21) sym
   X[1032] = -X[168]; // (3,21) sym
   X[1033] =  X[217]; // (4,21) sym
   X[1034] =  X[266]; // (5,21) sym
   X[1035] =  X[315]; // (6,21) sym
   X[1036] =  X[364]; // (7,21) sym
   X[1037] =  X[413]; // (8,21) sym
   X[1038] = -X[462]; // (9,21) sym
   X[1039] = -X[511]; // (10,21) sym
   X[1040] = -X[560]; // (11,21) sym
   X[1041] = -X[609]; // (12,21) sym
   X[1042] = -X[658]; // (13,21) sym
   X[1043] = -X[707]; // (14,21) sym
   X[1044] = -X[756]; // (15,21) sym
   X[1045] =  X[805]; // (16,21) sym
   X[1046] =  X[854]; // (17,21) sym
   X[1047] =  X[903]; // (18,21) sym
   X[1048] =  X[952]; // (19,21) sym
   X[1049] =  X[1001]; // (20,21) sym
   X[1050] = -X[716]; // l+1,j-1
   X[1051] = -X[717]; // l+1,j-1
   X[1052] = -X[718]; // l+1,j-1
   X[1053] = -X[719]; // l+1,j-1
   X[1054] = -X[722]; // l+1,j-1
   X[1055] = -X[723]; // l+1,j-1
   X[1056] = -X[724]; // l+1,j-1
   X[1057] = -X[725]; // l+1,j-1
   X[1058] = -X[726]; // l+1,j-1
   X[1059] = -X[727]; // l+1,j-1
   X[1060] = -X[728]; // l+1,j-1
   X[1061] = -X[729]; // l+1,j-1
   X[1062] = -X[730]; // l+1,j-1
   X[1063] = -X[731]; // l+1,j-1
   X[1064] = -X[732]; // l+1,j-1
   X[1065] =  2.0 * Y[105];
   X[1066] =  2.0 * (Y[107]-Y[103]);
   X[1067] =  2.0 * (Y[104]+Y[108]);
   X[1068] =  2.0 * (Y[101]+Y[109]);
   X[1069] =  2.0 * (Y[110]-Y[102]);
   X[1070] =  2.0 * (Y[111]-Y[100]);
   X[1071] =  2.0 * Y[112];
   X[1072] =  2.0 * (Y[113]-Y[101]);
   X[1073] =  2.0 * (Y[114]-Y[102]);
   X[1074] =  2.0 * (Y[115]-Y[103]);
   X[1075] =  2.0 * (Y[116]-Y[104]);
   X[1076] =  2.0 * (Y[117]-Y[105]);
   X[1077] =  2.0 * (Y[118]-Y[106]);
   X[1078] =  X[22]; // (0,22) sym
   X[1079] = -X[71]; // (1,22) sym
   X[1080] = -X[120]; // (2,22) sym
   X[1081] = -X[169]; // (3,22) sym
   X[1082] =  X[218]; // (4,22) sym
   X[1083] =  X[267]; // (5,22) sym
   X[1084] =  X[316]; // (6,22) sym
   X[1085] =  X[365]; // (7,22) sym
   X[1086] =  X[414]; // (8,22) sym
   X[1087] = -X[463]; // (9,22) sym
   X[1088] = -X[512]; // (10,22) sym
   X[1089] = -X[561]; // (11,22) sym
   X[1090] = -X[610]; // (12,22) sym
   X[1091] = -X[659]; // (13,22) sym
   X[1092] = -X[708]; // (14,22) sym
   X[1093] = -X[757]; // (15,22) sym
   X[1094] =  X[806]; // (16,22) sym
   X[1095] =  X[855]; // (17,22) sym
   X[1096] =  X[904]; // (18,22) sym
   X[1097] =  X[953]; // (19,22) sym
   X[1098] =  X[1002]; // (20,22) sym
   X[1099] =  X[1051]; // (21,22) sym
   X[1100] = -X[766]; // l+1,j-1
   X[1101] = -X[767]; // l+1,j-1
   X[1102] = -X[768]; // l+1,j-1
   X[1103] = -X[771]; // l+1,j-1
   X[1104] = -X[772]; // l+1,j-1
   X[1105] = -X[773]; // l+1,j-1
   X[1106] = -X[774]; // l+1,j-1
   X[1107] = -X[775]; // l+1,j-1
   X[1108] = -X[776]; // l+1,j-1
   X[1109] = -X[777]; // l+1,j-1
   X[1110] = -X[778]; // l+1,j-1
   X[1111] = -X[779]; // l+1,j-1
   X[1112] = -X[780]; // l+1,j-1
   X[1113] = -X[781]; // l+1,j-1
   X[1114] =  2.0 * Y[106];
   X[1115] =  2.0 * (Y[108]-Y[104]);
   X[1116] = -2.0 * (Y[103]+Y[107]);
   X[1117] =  2.0 * (Y[102]+Y[110]);
   X[1118] =  2.0 * (Y[101]-Y[109]);
   X[1119] =  2.0 * Y[112];
   X[1120] = -2.0 * (Y[100]+Y[111]);
   X[1121] =  2.0 * (Y[102]+Y[114]);
   X[1122] = -2.0 * (Y[101]+Y[113]);
   X[1123] =  2.0 * (Y[104]+Y[116]);
   X[1124] = -2.0 * (Y[103]+Y[115]);
   X[1125] =  2.0 * (Y[106]+Y[118]);
   X[1126] = -2.0 * (Y[105]+Y[117]);
   X[1127] =  X[23]; // (0,23) sym
   X[1128] = -X[72]; // (1,23) sym
   X[1129] = -X[121]; // (2,23) sym
   X[1130] = -X[170]; // (3,23) sym
   X[1131] =  X[219]; // (4,23) sym
   X[1132] =  X[268]; // (5,23) sym
   X[1133] =  X[317]; // (6,23) sym
   X[1134] =  X[366]; // (7,23) sym
   X[1135] =  X[415]; // (8,23) sym
   X[1136] = -X[464]; // (9,23) sym
   X[1137] = -X[513]; // (10,23) sym
   X[1138] = -X[562]; // (11,23) sym
   X[1139] = -X[611]; // (12,23) sym
   X[1140] = -X[660]; // (13,23) sym
   X[1141] = -X[709]; // (14,23) sym
   X[1142] = -X[758]; // (15,23) sym
   X[1143] =  X[807]; // (16,23) sym
   X[1144] =  X[856]; // (17,23) sym
   X[1145] =  X[905]; // (18,23) sym
   X[1146] =  X[954]; // (19,23) sym
   X[1147] =  X[1003]; // (20,23) sym
   X[1148] =  X[1052]; // (21,23) sym
   X[1149] =  X[1101]; // (22,23) sym
   X[1150] =  2.0 * (Y[64]+Y[79]);
   X[1151] =  2.0 * Y[80];
   X[1152] = -2.0 * Y[88];
   X[1153] =  2.0 * (Y[86]-Y[90]);
   X[1154] = -2.0 * (Y[87]+Y[91]);
   X[1155] = -2.0 * (Y[84]+Y[92]);
   X[1156] =  2.0 * (Y[85]-Y[93]);
   X[1157] =  2.0 * (Y[82]-Y[94]);
   X[1158] = -2.0 * (Y[83]+Y[95]);
   X[1159] = -2.0 * (Y[81]+Y[96]);
   X[1160] = -2.0 * Y[97];
   X[1161] = -2.0 * (Y[82]+Y[98]);
   X[1162] = -2.0 * (Y[83]+Y[99]);
   X[1163] =  2.0 * Y[107];
   X[1164] =  2.0 * (Y[109]-Y[105]);
   X[1165] =  2.0 * (Y[106]+Y[110]);
   X[1166] =  2.0 * (Y[103]+Y[111]);
   X[1167] =  2.0 * (Y[112]-Y[104]);
   X[1168] =  2.0 * (Y[113]-Y[101]);
   X[1169] =  2.0 * (Y[102]+Y[114]);
   X[1170] =  2.0 * (Y[100]+Y[115]);
   X[1171] =  2.0 * Y[116];
   X[1172] =  2.0 * (Y[101]+Y[117]);
   X[1173] =  2.0 * (Y[102]+Y[118]);
   X[1174] =  2.0 * (Y[103]+Y[119]);
   X[1175] =  2.0 * (Y[104]+Y[120]);
   X[1176] =  X[24]; // (0,24) sym
   X[1177] = -X[73]; // (1,24) sym
   X[1178] = -X[122]; // (2,24) sym
   X[1179] = -X[171]; // (3,24) sym
   X[1180] =  X[220]; // (4,24) sym
   X[1181] =  X[269]; // (5,24) sym
   X[1182] =  X[318]; // (6,24) sym
   X[1183] =  X[367]; // (7,24) sym
   X[1184] =  X[416]; // (8,24) sym
   X[1185] = -X[465]; // (9,24) sym
   X[1186] = -X[514]; // (10,24) sym
   X[1187] = -X[563]; // (11,24) sym
   X[1188] = -X[612]; // (12,24) sym
   X[1189] = -X[661]; // (13,24) sym
   X[1190] = -X[710]; // (14,24) sym
   X[1191] = -X[759]; // (15,24) sym
   X[1192] =  X[808]; // (16,24) sym
   X[1193] =  X[857]; // (17,24) sym
   X[1194] =  X[906]; // (18,24) sym
   X[1195] =  X[955]; // (19,24) sym
   X[1196] =  X[1004]; // (20,24) sym
   X[1197] =  X[1053]; // (21,24) sym
   X[1198] =  X[1102]; // (22,24) sym
   X[1199] =  X[1151]; // (23,24) sym
   X[1200] =  2.0 * (Y[64]-Y[79]);
   X[1201] = -2.0 * Y[89];
   X[1202] =  2.0 * (Y[87]-Y[91]);
   X[1203] =  2.0 * (Y[86]+Y[90]);
   X[1204] = -2.0 * (Y[85]+Y[93]);
   X[1205] =  2.0 * (Y[92]-Y[84]);
   X[1206] =  2.0 * (Y[83]-Y[95]);
   X[1207] =  2.0 * (Y[82]+Y[94]);
   X[1208] = -2.0 * Y[97];
   X[1209] =  2.0 * (Y[96]-Y[81]);
   X[1210] =  2.0 * (Y[83]-Y[99]);
   X[1211] =  2.0 * (Y[98]-Y[82]);
   X[1212] =  2.0 * Y[108];
   X[1213] =  2.0 * (Y[110]-Y[106]);
   X[1214] = -2.0 * (Y[105]+Y[109]);
   X[1215] =  2.0 * (Y[104]+Y[112]);
   X[1216] =  2.0 * (Y[103]-Y[111]);
   X[1217] =  2.0 * (Y[114]-Y[102]);
   X[1218] = -2.0 * (Y[101]+Y[113]);
   X[1219] =  2.0 * Y[116];
   X[1220] =  2.0 * (Y[100]-Y[115]);
   X[1221] =  2.0 * (Y[118]-Y[102]);
   X[1222] =  2.0 * (Y[101]-Y[117]);
   X[1223] =  2.0 * (Y[120]-Y[104]);
   X[1224] =  2.0 * (Y[103]-Y[119]);
}

void IlmIntFromIlm_IH( double const *__restrict__ Y, double *__restrict__ X )
{
   ccdl::IlmIntFromIlm_IG(Y,X);
   X[1225] = -X[25]; // (0,25) sym
   X[1226] =  X[74]; // (1,25) sym
   X[1227] =  X[123]; // (2,25) sym
   X[1228] =  X[172]; // (3,25) sym
   X[1229] = -X[221]; // (4,25) sym
   X[1230] = -X[270]; // (5,25) sym
   X[1231] = -X[319]; // (6,25) sym
   X[1232] = -X[368]; // (7,25) sym
   X[1233] = -X[417]; // (8,25) sym
   X[1234] =  X[466]; // (9,25) sym
   X[1235] =  X[515]; // (10,25) sym
   X[1236] =  X[564]; // (11,25) sym
   X[1237] =  X[613]; // (12,25) sym
   X[1238] =  X[662]; // (13,25) sym
   X[1239] =  X[711]; // (14,25) sym
   X[1240] =  X[760]; // (15,25) sym
   X[1241] = -X[809]; // (16,25) sym
   X[1242] = -X[858]; // (17,25) sym
   X[1243] = -X[907]; // (18,25) sym
   X[1244] = -X[956]; // (19,25) sym
   X[1245] = -X[1005]; // (20,25) sym
   X[1246] = -X[1054]; // (21,25) sym
   X[1247] = -X[1103]; // (22,25) sym
   X[1248] = -X[1152]; // (23,25) sym
   X[1249] = -X[1201]; // (24,25) sym
   X[1250] = -X[820]; // l+1,j-1
   X[1251] = -X[821]; // l+1,j-1
   X[1252] = -X[822]; // l+1,j-1
   X[1253] = -X[823]; // l+1,j-1
   X[1254] = -X[824]; // l+1,j-1
   X[1255] = -X[825]; // l+1,j-1
   X[1256] = -X[826]; // l+1,j-1
   X[1257] = -X[827]; // l+1,j-1
   X[1258] = -X[828]; // l+1,j-1
   X[1259] = -X[829]; // l+1,j-1
   X[1260] = -X[830]; // l+1,j-1
   X[1261] = Y[121];
   X[1262] =  2.0 * Y[122];
   X[1263] =  2.0 * Y[123];
   X[1264] =  2.0 * Y[124];
   X[1265] =  2.0 * Y[125];
   X[1266] =  2.0 * Y[126];
   X[1267] =  2.0 * Y[127];
   X[1268] =  2.0 * Y[128];
   X[1269] =  2.0 * Y[129];
   X[1270] =  2.0 * Y[130];
   X[1271] =  2.0 * Y[131];
   X[1272] =  2.0 * Y[132];
   X[1273] =  2.0 * Y[133];
   X[1274] = -X[26]; // (0,26) sym
   X[1275] =  X[75]; // (1,26) sym
   X[1276] =  X[124]; // (2,26) sym
   X[1277] =  X[173]; // (3,26) sym
   X[1278] = -X[222]; // (4,26) sym
   X[1279] = -X[271]; // (5,26) sym
   X[1280] = -X[320]; // (6,26) sym
   X[1281] = -X[369]; // (7,26) sym
   X[1282] = -X[418]; // (8,26) sym
   X[1283] =  X[467]; // (9,26) sym
   X[1284] =  X[516]; // (10,26) sym
   X[1285] =  X[565]; // (11,26) sym
   X[1286] =  X[614]; // (12,26) sym
   X[1287] =  X[663]; // (13,26) sym
   X[1288] =  X[712]; // (14,26) sym
   X[1289] =  X[761]; // (15,26) sym
   X[1290] = -X[810]; // (16,26) sym
   X[1291] = -X[859]; // (17,26) sym
   X[1292] = -X[908]; // (18,26) sym
   X[1293] = -X[957]; // (19,26) sym
   X[1294] = -X[1006]; // (20,26) sym
   X[1295] = -X[1055]; // (21,26) sym
   X[1296] = -X[1104]; // (22,26) sym
   X[1297] = -X[1153]; // (23,26) sym
   X[1298] = -X[1202]; // (24,26) sym
   X[1299] =  X[1251]; // (25,26) sym
   X[1300] = -X[870]; // l+1,j-1
   X[1301] = -X[871]; // l+1,j-1
   X[1302] = -X[872]; // l+1,j-1
   X[1303] = -X[873]; // l+1,j-1
   X[1304] = -X[874]; // l+1,j-1
   X[1305] = -X[875]; // l+1,j-1
   X[1306] = -X[876]; // l+1,j-1
   X[1307] = -X[877]; // l+1,j-1
   X[1308] = -X[878]; // l+1,j-1
   X[1309] = -X[879]; // l+1,j-1
   X[1310] =  2.0 * Y[122];
   X[1311] =  2.0 * (Y[124]-Y[121]);
   X[1312] =  2.0 * Y[125];
   X[1313] =  2.0 * (Y[126]-Y[122]);
   X[1314] =  2.0 * (Y[127]-Y[123]);
   X[1315] =  2.0 * (Y[128]-Y[124]);
   X[1316] =  2.0 * (Y[129]-Y[125]);
   X[1317] =  2.0 * (Y[130]-Y[126]);
   X[1318] =  2.0 * (Y[131]-Y[127]);
   X[1319] =  2.0 * (Y[132]-Y[128]);
   X[1320] =  2.0 * (Y[133]-Y[129]);
   X[1321] =  2.0 * (Y[134]-Y[130]);
   X[1322] =  2.0 * (Y[135]-Y[131]);
   X[1323] = -X[27]; // (0,27) sym
   X[1324] =  X[76]; // (1,27) sym
   X[1325] =  X[125]; // (2,27) sym
   X[1326] =  X[174]; // (3,27) sym
   X[1327] = -X[223]; // (4,27) sym
   X[1328] = -X[272]; // (5,27) sym
   X[1329] = -X[321]; // (6,27) sym
   X[1330] = -X[370]; // (7,27) sym
   X[1331] = -X[419]; // (8,27) sym
   X[1332] =  X[468]; // (9,27) sym
   X[1333] =  X[517]; // (10,27) sym
   X[1334] =  X[566]; // (11,27) sym
   X[1335] =  X[615]; // (12,27) sym
   X[1336] =  X[664]; // (13,27) sym
   X[1337] =  X[713]; // (14,27) sym
   X[1338] =  X[762]; // (15,27) sym
   X[1339] = -X[811]; // (16,27) sym
   X[1340] = -X[860]; // (17,27) sym
   X[1341] = -X[909]; // (18,27) sym
   X[1342] = -X[958]; // (19,27) sym
   X[1343] = -X[1007]; // (20,27) sym
   X[1344] = -X[1056]; // (21,27) sym
   X[1345] = -X[1105]; // (22,27) sym
   X[1346] = -X[1154]; // (23,27) sym
   X[1347] = -X[1203]; // (24,27) sym
   X[1348] =  X[1252]; // (25,27) sym
   X[1349] =  X[1301]; // (26,27) sym
   X[1350] = -X[920]; // l+1,j-1
   X[1351] = -X[921]; // l+1,j-1
   X[1352] = -X[922]; // l+1,j-1
   X[1353] = -X[923]; // l+1,j-1
   X[1354] = -X[924]; // l+1,j-1
   X[1355] = -X[925]; // l+1,j-1
   X[1356] = -X[926]; // l+1,j-1
   X[1357] = -X[927]; // l+1,j-1
   X[1358] = -X[928]; // l+1,j-1
   X[1359] =  2.0 * Y[123];
   X[1360] =  2.0 * Y[125];
   X[1361] = -2.0 * (Y[121]+Y[124]);
   X[1362] =  2.0 * (Y[123]+Y[127]);
   X[1363] = -2.0 * (Y[122]+Y[126]);
   X[1364] =  2.0 * (Y[125]+Y[129]);
   X[1365] = -2.0 * (Y[124]+Y[128]);
   X[1366] =  2.0 * (Y[127]+Y[131]);
   X[1367] = -2.0 * (Y[126]+Y[130]);
   X[1368] =  2.0 * (Y[129]+Y[133]);
   X[1369] = -2.0 * (Y[128]+Y[132]);
   X[1370] =  2.0 * (Y[131]+Y[135]);
   X[1371] = -2.0 * (Y[130]+Y[134]);
   X[1372] = -X[28]; // (0,28) sym
   X[1373] =  X[77]; // (1,28) sym
   X[1374] =  X[126]; // (2,28) sym
   X[1375] =  X[175]; // (3,28) sym
   X[1376] = -X[224]; // (4,28) sym
   X[1377] = -X[273]; // (5,28) sym
   X[1378] = -X[322]; // (6,28) sym
   X[1379] = -X[371]; // (7,28) sym
   X[1380] = -X[420]; // (8,28) sym
   X[1381] =  X[469]; // (9,28) sym
   X[1382] =  X[518]; // (10,28) sym
   X[1383] =  X[567]; // (11,28) sym
   X[1384] =  X[616]; // (12,28) sym
   X[1385] =  X[665]; // (13,28) sym
   X[1386] =  X[714]; // (14,28) sym
   X[1387] =  X[763]; // (15,28) sym
   X[1388] = -X[812]; // (16,28) sym
   X[1389] = -X[861]; // (17,28) sym
   X[1390] = -X[910]; // (18,28) sym
   X[1391] = -X[959]; // (19,28) sym
   X[1392] = -X[1008]; // (20,28) sym
   X[1393] = -X[1057]; // (21,28) sym
   X[1394] = -X[1106]; // (22,28) sym
   X[1395] = -X[1155]; // (23,28) sym
   X[1396] = -X[1204]; // (24,28) sym
   X[1397] =  X[1253]; // (25,28) sym
   X[1398] =  X[1302]; // (26,28) sym
   X[1399] =  X[1351]; // (27,28) sym
   X[1400] = -X[970]; // l+1,j-1
   X[1401] = -X[971]; // l+1,j-1
   X[1402] = -X[972]; // l+1,j-1
   X[1403] = -X[973]; // l+1,j-1
   X[1404] = -X[974]; // l+1,j-1
   X[1405] = -X[975]; // l+1,j-1
   X[1406] = -X[976]; // l+1,j-1
   X[1407] = -X[977]; // l+1,j-1
   X[1408] =  2.0 * Y[124];
   X[1409] =  2.0 * (Y[126]-Y[122]);
   X[1410] =  2.0 * (Y[123]+Y[127]);
   X[1411] =  2.0 * (Y[121]+Y[128]);
   X[1412] =  2.0 * Y[129];
   X[1413] =  2.0 * (Y[122]+Y[130]);
   X[1414] =  2.0 * (Y[123]+Y[131]);
   X[1415] =  2.0 * (Y[124]+Y[132]);
   X[1416] =  2.0 * (Y[125]+Y[133]);
   X[1417] =  2.0 * (Y[126]+Y[134]);
   X[1418] =  2.0 * (Y[127]+Y[135]);
   X[1419] =  2.0 * (Y[128]+Y[136]);
   X[1420] =  2.0 * (Y[129]+Y[137]);
   X[1421] = -X[29]; // (0,29) sym
   X[1422] =  X[78]; // (1,29) sym
   X[1423] =  X[127]; // (2,29) sym
   X[1424] =  X[176]; // (3,29) sym
   X[1425] = -X[225]; // (4,29) sym
   X[1426] = -X[274]; // (5,29) sym
   X[1427] = -X[323]; // (6,29) sym
   X[1428] = -X[372]; // (7,29) sym
   X[1429] = -X[421]; // (8,29) sym
   X[1430] =  X[470]; // (9,29) sym
   X[1431] =  X[519]; // (10,29) sym
   X[1432] =  X[568]; // (11,29) sym
   X[1433] =  X[617]; // (12,29) sym
   X[1434] =  X[666]; // (13,29) sym
   X[1435] =  X[715]; // (14,29) sym
   X[1436] =  X[764]; // (15,29) sym
   X[1437] = -X[813]; // (16,29) sym
   X[1438] = -X[862]; // (17,29) sym
   X[1439] = -X[911]; // (18,29) sym
   X[1440] = -X[960]; // (19,29) sym
   X[1441] = -X[1009]; // (20,29) sym
   X[1442] = -X[1058]; // (21,29) sym
   X[1443] = -X[1107]; // (22,29) sym
   X[1444] = -X[1156]; // (23,29) sym
   X[1445] = -X[1205]; // (24,29) sym
   X[1446] =  X[1254]; // (25,29) sym
   X[1447] =  X[1303]; // (26,29) sym
   X[1448] =  X[1352]; // (27,29) sym
   X[1449] =  X[1401]; // (28,29) sym
   X[1450] = -X[1020]; // l+1,j-1
   X[1451] = -X[1021]; // l+1,j-1
   X[1452] = -X[1022]; // l+1,j-1
   X[1453] = -X[1023]; // l+1,j-1
   X[1454] = -X[1024]; // l+1,j-1
   X[1455] = -X[1025]; // l+1,j-1
   X[1456] = -X[1026]; // l+1,j-1
   X[1457] =  2.0 * Y[125];
   X[1458] =  2.0 * (Y[127]-Y[123]);
   X[1459] = -2.0 * (Y[122]+Y[126]);
   X[1460] =  2.0 * Y[129];
   X[1461] =  2.0 * (Y[121]-Y[128]);
   X[1462] =  2.0 * (Y[131]-Y[123]);
   X[1463] =  2.0 * (Y[122]-Y[130]);
   X[1464] =  2.0 * (Y[133]-Y[125]);
   X[1465] =  2.0 * (Y[124]-Y[132]);
   X[1466] =  2.0 * (Y[135]-Y[127]);
   X[1467] =  2.0 * (Y[126]-Y[134]);
   X[1468] =  2.0 * (Y[137]-Y[129]);
   X[1469] =  2.0 * (Y[128]-Y[136]);
   X[1470] = -X[30]; // (0,30) sym
   X[1471] =  X[79]; // (1,30) sym
   X[1472] =  X[128]; // (2,30) sym
   X[1473] =  X[177]; // (3,30) sym
   X[1474] = -X[226]; // (4,30) sym
   X[1475] = -X[275]; // (5,30) sym
   X[1476] = -X[324]; // (6,30) sym
   X[1477] = -X[373]; // (7,30) sym
   X[1478] = -X[422]; // (8,30) sym
   X[1479] =  X[471]; // (9,30) sym
   X[1480] =  X[520]; // (10,30) sym
   X[1481] =  X[569]; // (11,30) sym
   X[1482] =  X[618]; // (12,30) sym
   X[1483] =  X[667]; // (13,30) sym
   X[1484] =  X[716]; // (14,30) sym
   X[1485] =  X[765]; // (15,30) sym
   X[1486] = -X[814]; // (16,30) sym
   X[1487] = -X[863]; // (17,30) sym
   X[1488] = -X[912]; // (18,30) sym
   X[1489] = -X[961]; // (19,30) sym
   X[1490] = -X[1010]; // (20,30) sym
   X[1491] = -X[1059]; // (21,30) sym
   X[1492] = -X[1108]; // (22,30) sym
   X[1493] = -X[1157]; // (23,30) sym
   X[1494] = -X[1206]; // (24,30) sym
   X[1495] =  X[1255]; // (25,30) sym
   X[1496] =  X[1304]; // (26,30) sym
   X[1497] =  X[1353]; // (27,30) sym
   X[1498] =  X[1402]; // (28,30) sym
   X[1499] =  X[1451]; // (29,30) sym
   X[1500] = -X[1070]; // l+1,j-1
   X[1501] = -X[1071]; // l+1,j-1
   X[1502] = -X[1072]; // l+1,j-1
   X[1503] = -X[1073]; // l+1,j-1
   X[1504] = -X[1074]; // l+1,j-1
   X[1505] = -X[1075]; // l+1,j-1
   X[1506] =  2.0 * Y[126];
   X[1507] =  2.0 * (Y[128]-Y[124]);
   X[1508] =  2.0 * (Y[125]+Y[129]);
   X[1509] =  2.0 * (Y[122]+Y[130]);
   X[1510] =  2.0 * (Y[131]-Y[123]);
   X[1511] =  2.0 * (Y[132]-Y[121]);
   X[1512] =  2.0 * Y[133];
   X[1513] =  2.0 * (Y[134]-Y[122]);
   X[1514] =  2.0 * (Y[135]-Y[123]);
   X[1515] =  2.0 * (Y[136]-Y[124]);
   X[1516] =  2.0 * (Y[137]-Y[125]);
   X[1517] =  2.0 * (Y[138]-Y[126]);
   X[1518] =  2.0 * (Y[139]-Y[127]);
   X[1519] = -X[31]; // (0,31) sym
   X[1520] =  X[80]; // (1,31) sym
   X[1521] =  X[129]; // (2,31) sym
   X[1522] =  X[178]; // (3,31) sym
   X[1523] = -X[227]; // (4,31) sym
   X[1524] = -X[276]; // (5,31) sym
   X[1525] = -X[325]; // (6,31) sym
   X[1526] = -X[374]; // (7,31) sym
   X[1527] = -X[423]; // (8,31) sym
   X[1528] =  X[472]; // (9,31) sym
   X[1529] =  X[521]; // (10,31) sym
   X[1530] =  X[570]; // (11,31) sym
   X[1531] =  X[619]; // (12,31) sym
   X[1532] =  X[668]; // (13,31) sym
   X[1533] =  X[717]; // (14,31) sym
   X[1534] =  X[766]; // (15,31) sym
   X[1535] = -X[815]; // (16,31) sym
   X[1536] = -X[864]; // (17,31) sym
   X[1537] = -X[913]; // (18,31) sym
   X[1538] = -X[962]; // (19,31) sym
   X[1539] = -X[1011]; // (20,31) sym
   X[1540] = -X[1060]; // (21,31) sym
   X[1541] = -X[1109]; // (22,31) sym
   X[1542] = -X[1158]; // (23,31) sym
   X[1543] = -X[1207]; // (24,31) sym
   X[1544] =  X[1256]; // (25,31) sym
   X[1545] =  X[1305]; // (26,31) sym
   X[1546] =  X[1354]; // (27,31) sym
   X[1547] =  X[1403]; // (28,31) sym
   X[1548] =  X[1452]; // (29,31) sym
   X[1549] =  X[1501]; // (30,31) sym
   X[1550] = -X[1120]; // l+1,j-1
   X[1551] = -X[1121]; // l+1,j-1
   X[1552] = -X[1122]; // l+1,j-1
   X[1553] = -X[1123]; // l+1,j-1
   X[1554] = -X[1124]; // l+1,j-1
   X[1555] =  2.0 * Y[127];
   X[1556] =  2.0 * (Y[129]-Y[125]);
   X[1557] = -2.0 * (Y[124]+Y[128]);
   X[1558] =  2.0 * (Y[123]+Y[131]);
   X[1559] =  2.0 * (Y[122]-Y[130]);
   X[1560] =  2.0 * Y[133];
   X[1561] = -2.0 * (Y[121]+Y[132]);
   X[1562] =  2.0 * (Y[123]+Y[135]);
   X[1563] = -2.0 * (Y[122]+Y[134]);
   X[1564] =  2.0 * (Y[125]+Y[137]);
   X[1565] = -2.0 * (Y[124]+Y[136]);
   X[1566] =  2.0 * (Y[127]+Y[139]);
   X[1567] = -2.0 * (Y[126]+Y[138]);
   X[1568] = -X[32]; // (0,32) sym
   X[1569] =  X[81]; // (1,32) sym
   X[1570] =  X[130]; // (2,32) sym
   X[1571] =  X[179]; // (3,32) sym
   X[1572] = -X[228]; // (4,32) sym
   X[1573] = -X[277]; // (5,32) sym
   X[1574] = -X[326]; // (6,32) sym
   X[1575] = -X[375]; // (7,32) sym
   X[1576] = -X[424]; // (8,32) sym
   X[1577] =  X[473]; // (9,32) sym
   X[1578] =  X[522]; // (10,32) sym
   X[1579] =  X[571]; // (11,32) sym
   X[1580] =  X[620]; // (12,32) sym
   X[1581] =  X[669]; // (13,32) sym
   X[1582] =  X[718]; // (14,32) sym
   X[1583] =  X[767]; // (15,32) sym
   X[1584] = -X[816]; // (16,32) sym
   X[1585] = -X[865]; // (17,32) sym
   X[1586] = -X[914]; // (18,32) sym
   X[1587] = -X[963]; // (19,32) sym
   X[1588] = -X[1012]; // (20,32) sym
   X[1589] = -X[1061]; // (21,32) sym
   X[1590] = -X[1110]; // (22,32) sym
   X[1591] = -X[1159]; // (23,32) sym
   X[1592] = -X[1208]; // (24,32) sym
   X[1593] =  X[1257]; // (25,32) sym
   X[1594] =  X[1306]; // (26,32) sym
   X[1595] =  X[1355]; // (27,32) sym
   X[1596] =  X[1404]; // (28,32) sym
   X[1597] =  X[1453]; // (29,32) sym
   X[1598] =  X[1502]; // (30,32) sym
   X[1599] =  X[1551]; // (31,32) sym
   X[1600] = -X[1170]; // l+1,j-1
   X[1601] = -X[1171]; // l+1,j-1
   X[1602] = -X[1172]; // l+1,j-1
   X[1603] = -X[1173]; // l+1,j-1
   X[1604] =  2.0 * Y[128];
   X[1605] =  2.0 * (Y[130]-Y[126]);
   X[1606] =  2.0 * (Y[127]+Y[131]);
   X[1607] =  2.0 * (Y[124]+Y[132]);
   X[1608] =  2.0 * (Y[133]-Y[125]);
   X[1609] =  2.0 * (Y[134]-Y[122]);
   X[1610] =  2.0 * (Y[123]+Y[135]);
   X[1611] =  2.0 * (Y[121]+Y[136]);
   X[1612] =  2.0 * Y[137];
   X[1613] =  2.0 * (Y[122]+Y[138]);
   X[1614] =  2.0 * (Y[123]+Y[139]);
   X[1615] =  2.0 * (Y[124]+Y[140]);
   X[1616] =  2.0 * (Y[125]+Y[141]);
   X[1617] = -X[33]; // (0,33) sym
   X[1618] =  X[82]; // (1,33) sym
   X[1619] =  X[131]; // (2,33) sym
   X[1620] =  X[180]; // (3,33) sym
   X[1621] = -X[229]; // (4,33) sym
   X[1622] = -X[278]; // (5,33) sym
   X[1623] = -X[327]; // (6,33) sym
   X[1624] = -X[376]; // (7,33) sym
   X[1625] = -X[425]; // (8,33) sym
   X[1626] =  X[474]; // (9,33) sym
   X[1627] =  X[523]; // (10,33) sym
   X[1628] =  X[572]; // (11,33) sym
   X[1629] =  X[621]; // (12,33) sym
   X[1630] =  X[670]; // (13,33) sym
   X[1631] =  X[719]; // (14,33) sym
   X[1632] =  X[768]; // (15,33) sym
   X[1633] = -X[817]; // (16,33) sym
   X[1634] = -X[866]; // (17,33) sym
   X[1635] = -X[915]; // (18,33) sym
   X[1636] = -X[964]; // (19,33) sym
   X[1637] = -X[1013]; // (20,33) sym
   X[1638] = -X[1062]; // (21,33) sym
   X[1639] = -X[1111]; // (22,33) sym
   X[1640] = -X[1160]; // (23,33) sym
   X[1641] = -X[1209]; // (24,33) sym
   X[1642] =  X[1258]; // (25,33) sym
   X[1643] =  X[1307]; // (26,33) sym
   X[1644] =  X[1356]; // (27,33) sym
   X[1645] =  X[1405]; // (28,33) sym
   X[1646] =  X[1454]; // (29,33) sym
   X[1647] =  X[1503]; // (30,33) sym
   X[1648] =  X[1552]; // (31,33) sym
   X[1649] =  X[1601]; // (32,33) sym
   X[1650] = -X[1220]; // l+1,j-1
   X[1651] = -X[1221]; // l+1,j-1
   X[1652] = -X[1222]; // l+1,j-1
   X[1653] =  2.0 * Y[129];
   X[1654] =  2.0 * (Y[131]-Y[127]);
   X[1655] = -2.0 * (Y[126]+Y[130]);
   X[1656] =  2.0 * (Y[125]+Y[133]);
   X[1657] =  2.0 * (Y[124]-Y[132]);
   X[1658] =  2.0 * (Y[135]-Y[123]);
   X[1659] = -2.0 * (Y[122]+Y[134]);
   X[1660] =  2.0 * Y[137];
   X[1661] =  2.0 * (Y[121]-Y[136]);
   X[1662] =  2.0 * (Y[139]-Y[123]);
   X[1663] =  2.0 * (Y[122]-Y[138]);
   X[1664] =  2.0 * (Y[141]-Y[125]);
   X[1665] =  2.0 * (Y[124]-Y[140]);
   X[1666] = -X[34]; // (0,34) sym
   X[1667] =  X[83]; // (1,34) sym
   X[1668] =  X[132]; // (2,34) sym
   X[1669] =  X[181]; // (3,34) sym
   X[1670] = -X[230]; // (4,34) sym
   X[1671] = -X[279]; // (5,34) sym
   X[1672] = -X[328]; // (6,34) sym
   X[1673] = -X[377]; // (7,34) sym
   X[1674] = -X[426]; // (8,34) sym
   X[1675] =  X[475]; // (9,34) sym
   X[1676] =  X[524]; // (10,34) sym
   X[1677] =  X[573]; // (11,34) sym
   X[1678] =  X[622]; // (12,34) sym
   X[1679] =  X[671]; // (13,34) sym
   X[1680] =  X[720]; // (14,34) sym
   X[1681] =  X[769]; // (15,34) sym
   X[1682] = -X[818]; // (16,34) sym
   X[1683] = -X[867]; // (17,34) sym
   X[1684] = -X[916]; // (18,34) sym
   X[1685] = -X[965]; // (19,34) sym
   X[1686] = -X[1014]; // (20,34) sym
   X[1687] = -X[1063]; // (21,34) sym
   X[1688] = -X[1112]; // (22,34) sym
   X[1689] = -X[1161]; // (23,34) sym
   X[1690] = -X[1210]; // (24,34) sym
   X[1691] =  X[1259]; // (25,34) sym
   X[1692] =  X[1308]; // (26,34) sym
   X[1693] =  X[1357]; // (27,34) sym
   X[1694] =  X[1406]; // (28,34) sym
   X[1695] =  X[1455]; // (29,34) sym
   X[1696] =  X[1504]; // (30,34) sym
   X[1697] =  X[1553]; // (31,34) sym
   X[1698] =  X[1602]; // (32,34) sym
   X[1699] =  X[1651]; // (33,34) sym
   X[1700] =  2.0 * (Y[100]-Y[119]);
   X[1701] = -2.0 * Y[120];
   X[1702] =  2.0 * Y[130];
   X[1703] =  2.0 * (Y[132]-Y[128]);
   X[1704] =  2.0 * (Y[129]+Y[133]);
   X[1705] =  2.0 * (Y[126]+Y[134]);
   X[1706] =  2.0 * (Y[135]-Y[127]);
   X[1707] =  2.0 * (Y[136]-Y[124]);
   X[1708] =  2.0 * (Y[125]+Y[137]);
   X[1709] =  2.0 * (Y[122]+Y[138]);
   X[1710] =  2.0 * (Y[139]-Y[123]);
   X[1711] =  2.0 * (Y[140]-Y[121]);
   X[1712] =  2.0 * Y[141];
   X[1713] =  2.0 * (Y[142]-Y[122]);
   X[1714] =  2.0 * (Y[143]-Y[123]);
   X[1715] = -X[35]; // (0,35) sym
   X[1716] =  X[84]; // (1,35) sym
   X[1717] =  X[133]; // (2,35) sym
   X[1718] =  X[182]; // (3,35) sym
   X[1719] = -X[231]; // (4,35) sym
   X[1720] = -X[280]; // (5,35) sym
   X[1721] = -X[329]; // (6,35) sym
   X[1722] = -X[378]; // (7,35) sym
   X[1723] = -X[427]; // (8,35) sym
   X[1724] =  X[476]; // (9,35) sym
   X[1725] =  X[525]; // (10,35) sym
   X[1726] =  X[574]; // (11,35) sym
   X[1727] =  X[623]; // (12,35) sym
   X[1728] =  X[672]; // (13,35) sym
   X[1729] =  X[721]; // (14,35) sym
   X[1730] =  X[770]; // (15,35) sym
   X[1731] = -X[819]; // (16,35) sym
   X[1732] = -X[868]; // (17,35) sym
   X[1733] = -X[917]; // (18,35) sym
   X[1734] = -X[966]; // (19,35) sym
   X[1735] = -X[1015]; // (20,35) sym
   X[1736] = -X[1064]; // (21,35) sym
   X[1737] = -X[1113]; // (22,35) sym
   X[1738] = -X[1162]; // (23,35) sym
   X[1739] = -X[1211]; // (24,35) sym
   X[1740] =  X[1260]; // (25,35) sym
   X[1741] =  X[1309]; // (26,35) sym
   X[1742] =  X[1358]; // (27,35) sym
   X[1743] =  X[1407]; // (28,35) sym
   X[1744] =  X[1456]; // (29,35) sym
   X[1745] =  X[1505]; // (30,35) sym
   X[1746] =  X[1554]; // (31,35) sym
   X[1747] =  X[1603]; // (32,35) sym
   X[1748] =  X[1652]; // (33,35) sym
   X[1749] =  X[1701]; // (34,35) sym
   X[1750] =  2.0 * (Y[100]+Y[119]);
   X[1751] =  2.0 * Y[131];
   X[1752] =  2.0 * (Y[133]-Y[129]);
   X[1753] = -2.0 * (Y[128]+Y[132]);
   X[1754] =  2.0 * (Y[127]+Y[135]);
   X[1755] =  2.0 * (Y[126]-Y[134]);
   X[1756] =  2.0 * (Y[137]-Y[125]);
   X[1757] = -2.0 * (Y[124]+Y[136]);
   X[1758] =  2.0 * (Y[123]+Y[139]);
   X[1759] =  2.0 * (Y[122]-Y[138]);
   X[1760] =  2.0 * Y[141];
   X[1761] = -2.0 * (Y[121]+Y[140]);
   X[1762] =  2.0 * (Y[123]+Y[143]);
   X[1763] = -2.0 * (Y[122]+Y[142]);
}




} // namespace ccdl


void ccdl::IlmInteraction_DP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[16];
   ccdl::SolidHarm_Ilm_F(crd,r2,X);
   ccdl::IlmIntFromIlm_DP(X,T);
}

void ccdl::IlmInteraction_DD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_DD(X,T);
}

void ccdl::IlmInteraction_FS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[16];
   ccdl::SolidHarm_Ilm_F(crd,r2,X);
   ccdl::IlmIntFromIlm_FS(X,T);
}

void ccdl::IlmInteraction_FP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_FP(X,T);
}

void ccdl::IlmInteraction_FD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_FD(X,T);
}

void ccdl::IlmInteraction_FF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_FF(X,T);
}

void ccdl::IlmInteraction_GS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_GS(X,T);
}

void ccdl::IlmInteraction_GP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_GP(X,T);
}

void ccdl::IlmInteraction_GD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_GD(X,T);
}

void ccdl::IlmInteraction_GF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[64];
   ccdl::SolidHarm_Ilm_J(crd,r2,X);
   ccdl::IlmIntFromIlm_GF(X,T);
}

void ccdl::IlmInteraction_GG( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[81];
   ccdl::SolidHarm_Ilm_K(crd,r2,X);
   ccdl::IlmIntFromIlm_GG(X,T);
}

void ccdl::IlmInteraction_HS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_HS(X,T);
}

void ccdl::IlmInteraction_HP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_HP(X,T);
}

void ccdl::IlmInteraction_HD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[64];
   ccdl::SolidHarm_Ilm_J(crd,r2,X);
   ccdl::IlmIntFromIlm_HD(X,T);
}

void ccdl::IlmInteraction_HF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[81];
   ccdl::SolidHarm_Ilm_K(crd,r2,X);
   ccdl::IlmIntFromIlm_HF(X,T);
}

void ccdl::IlmInteraction_HG( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[100];
   ccdl::SolidHarm_Ilm_L(crd,r2,X);
   ccdl::IlmIntFromIlm_HG(X,T);
}

void ccdl::IlmInteraction_HH( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[121];
   ccdl::SolidHarm_Ilm_M(crd,r2,X);
   ccdl::IlmIntFromIlm_HH(X,T);
}

void ccdl::PtExpInt_DP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[16];
   ccdl::SolidHarm_Ilm_F(crd,r2,X);
   ccdl::IlmIntFromIlm_DP(X,T);
   --T; for ( int j=0; j<6; ++j ) for ( int i=0; i<9; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_DD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_DD(X,T);
   --T; for ( int j=0; j<9; ++j ) for ( int i=0; i<9; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_FS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[16];
   ccdl::SolidHarm_Ilm_F(crd,r2,X);
   ccdl::IlmIntFromIlm_FS(X,T);
 for ( int i=0; i<16; ++i ) T[i] /= GlobalAlmC[i];
}

void ccdl::PtExpInt_FP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_FP(X,T);
   --T; for ( int j=0; j<8; ++j ) for ( int i=0; i<16; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_FD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_FD(X,T);
   --T; for ( int j=0; j<12; ++j ) for ( int i=0; i<16; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_FF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_FF(X,T);
   --T; for ( int j=0; j<16; ++j ) for ( int i=0; i<16; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_GS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,X);
   ccdl::IlmIntFromIlm_GS(X,T);
 for ( int i=0; i<25; ++i ) T[i] /= GlobalAlmC[i];
}

void ccdl::PtExpInt_GP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_GP(X,T);
   --T; for ( int j=0; j<10; ++j ) for ( int i=0; i<25; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_GD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_GD(X,T);
   --T; for ( int j=0; j<15; ++j ) for ( int i=0; i<25; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_GF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[64];
   ccdl::SolidHarm_Ilm_J(crd,r2,X);
   ccdl::IlmIntFromIlm_GF(X,T);
   --T; for ( int j=0; j<20; ++j ) for ( int i=0; i<25; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_GG( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[81];
   ccdl::SolidHarm_Ilm_K(crd,r2,X);
   ccdl::IlmIntFromIlm_GG(X,T);
   --T; for ( int j=0; j<25; ++j ) for ( int i=0; i<25; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_HS( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,X);
   ccdl::IlmIntFromIlm_HS(X,T);
 for ( int i=0; i<36; ++i ) T[i] /= GlobalAlmC[i];
}

void ccdl::PtExpInt_HP( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,X);
   ccdl::IlmIntFromIlm_HP(X,T);
   --T; for ( int j=0; j<12; ++j ) for ( int i=0; i<36; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_HD( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[64];
   ccdl::SolidHarm_Ilm_J(crd,r2,X);
   ccdl::IlmIntFromIlm_HD(X,T);
   --T; for ( int j=0; j<18; ++j ) for ( int i=0; i<36; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_HF( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[81];
   ccdl::SolidHarm_Ilm_K(crd,r2,X);
   ccdl::IlmIntFromIlm_HF(X,T);
   --T; for ( int j=0; j<24; ++j ) for ( int i=0; i<36; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_HG( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[100];
   ccdl::SolidHarm_Ilm_L(crd,r2,X);
   ccdl::IlmIntFromIlm_HG(X,T);
   --T; for ( int j=0; j<30; ++j ) for ( int i=0; i<36; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}

void ccdl::PtExpInt_HH( double const *__restrict__ crd, double const r2, double *__restrict__ T )
{
   double X[121];
   ccdl::SolidHarm_Ilm_M(crd,r2,X);
   ccdl::IlmIntFromIlm_HH(X,T);
   --T; for ( int j=0; j<36; ++j ) for ( int i=0; i<36; ++i ) *(++T) /= ( GlobalAlmC[i]*GlobalAlmC[j] );
}




namespace ccdl {

void IlmInteractionGrd_S( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 4 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
      }
}

void IlmInteractionGrdAcc_S( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 4 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]);
        g[1] += qb[i]*( (Y[3])*qa[0]);
        g[2] += qb[i]*( (Y[1])*qa[0]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}

void IlmInteractionGrd_P( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 9 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
         *(++dIlm) = -0.5 * Y[5];
         *(++dIlm) = -0.5 * Y[6];
         *(++dIlm) = Y[4];
         *(++dIlm) = (Y[4] -0.5*Y[7]);
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = Y[5];
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = (Y[4]+0.5*Y[7]);
         *(++dIlm) = Y[6];
      }
}

void IlmInteractionGrdAcc_P( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 9 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]+(Y[5])*qa[1]+((-2.0*Y[4]+Y[7]))*qa[2]+(Y[8])*qa[3]);
        g[1] += qb[i]*( (Y[3])*qa[0]+(Y[6])*qa[1]+(Y[8])*qa[2]+((-2.0*Y[4]-Y[7]))*qa[3]);
        g[2] += qb[i]*( (Y[1])*qa[0]+(Y[4])*qa[1]+(Y[5])*qa[2]+(Y[6])*qa[3]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}

void IlmInteractionGrd_D( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 16 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
         *(++dIlm) = -0.5 * Y[5];
         *(++dIlm) = -0.5 * Y[6];
         *(++dIlm) = Y[4];
         *(++dIlm) = (Y[4] -0.5*Y[7]);
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = Y[5];
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = (Y[4]+0.5*Y[7]);
         *(++dIlm) = Y[6];
         *(++dIlm) = -0.5 * Y[10];
         *(++dIlm) = -0.5 * Y[11];
         *(++dIlm) = Y[9];
         *(++dIlm) = (Y[9] -0.5*Y[12]);
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = Y[10];
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = (Y[9]+0.5*Y[12]);
         *(++dIlm) = Y[11];
         *(++dIlm) = 0.5 * (Y[10]-Y[14]);
         *(++dIlm) = -0.5 * (Y[11]+Y[15]);
         *(++dIlm) = Y[12];
         *(++dIlm) = 0.5 * (Y[11]-Y[15]);
         *(++dIlm) = 0.5 * (Y[10]+Y[14]);
         *(++dIlm) = Y[13];
      }
}

void IlmInteractionGrdAcc_D( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 16 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]+(Y[5])*qa[1]+((-2.0*Y[4]+Y[7]))*qa[2]+(Y[8])*qa[3]+(Y[10])*qa[4]+((-2.0*Y[9]+Y[12]))*qa[5]+(Y[13])*qa[6]+((Y[14]-Y[10]))*qa[7]+((Y[15]-Y[11]))*qa[8]);
        g[1] += qb[i]*( (Y[3])*qa[0]+(Y[6])*qa[1]+(Y[8])*qa[2]+((-2.0*Y[4]-Y[7]))*qa[3]+(Y[11])*qa[4]+(Y[13])*qa[5]+((-2.0*Y[9]-Y[12]))*qa[6]+((Y[11]+Y[15]))*qa[7]+(-(Y[10]+Y[14]))*qa[8]);
        g[2] += qb[i]*( (Y[1])*qa[0]+(Y[4])*qa[1]+(Y[5])*qa[2]+(Y[6])*qa[3]+(Y[9])*qa[4]+(Y[10])*qa[5]+(Y[11])*qa[6]+(Y[12])*qa[7]+(Y[13])*qa[8]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}

void IlmInteractionGrd_F( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 25 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
         *(++dIlm) = -0.5 * Y[5];
         *(++dIlm) = -0.5 * Y[6];
         *(++dIlm) = Y[4];
         *(++dIlm) = (Y[4] -0.5*Y[7]);
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = Y[5];
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = (Y[4]+0.5*Y[7]);
         *(++dIlm) = Y[6];
         *(++dIlm) = -0.5 * Y[10];
         *(++dIlm) = -0.5 * Y[11];
         *(++dIlm) = Y[9];
         *(++dIlm) = (Y[9] -0.5*Y[12]);
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = Y[10];
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = (Y[9]+0.5*Y[12]);
         *(++dIlm) = Y[11];
         *(++dIlm) = 0.5 * (Y[10]-Y[14]);
         *(++dIlm) = -0.5 * (Y[11]+Y[15]);
         *(++dIlm) = Y[12];
         *(++dIlm) = 0.5 * (Y[11]-Y[15]);
         *(++dIlm) = 0.5 * (Y[10]+Y[14]);
         *(++dIlm) = Y[13];
         *(++dIlm) = -0.5 * Y[17];
         *(++dIlm) = -0.5 * Y[18];
         *(++dIlm) = Y[16];
         *(++dIlm) = (Y[16] -0.5*Y[19]);
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = Y[17];
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = (Y[16]+0.5*Y[19]);
         *(++dIlm) = Y[18];
         *(++dIlm) = 0.5 * (Y[17]-Y[21]);
         *(++dIlm) = -0.5 * (Y[18]+Y[22]);
         *(++dIlm) = Y[19];
         *(++dIlm) = 0.5 * (Y[18]-Y[22]);
         *(++dIlm) = 0.5 * (Y[17]+Y[21]);
         *(++dIlm) = Y[20];
         *(++dIlm) = 0.5 * (Y[19]-Y[23]);
         *(++dIlm) = -0.5 * (Y[20]+Y[24]);
         *(++dIlm) = Y[21];
         *(++dIlm) = 0.5 * (Y[20]-Y[24]);
         *(++dIlm) = 0.5 * (Y[19]+Y[23]);
         *(++dIlm) = Y[22];
      }
}

void IlmInteractionGrdAcc_F( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 25 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]+(Y[5])*qa[1]+((-2.0*Y[4]+Y[7]))*qa[2]+(Y[8])*qa[3]+(Y[10])*qa[4]+((-2.0*Y[9]+Y[12]))*qa[5]+(Y[13])*qa[6]+((Y[14]-Y[10]))*qa[7]+((Y[15]-Y[11]))*qa[8]+(Y[17])*qa[9]+((-2.0*Y[16]+Y[19]))*qa[10]+(Y[20])*qa[11]+((Y[21]-Y[17]))*qa[12]+((Y[22]-Y[18]))*qa[13]+((Y[23]-Y[19]))*qa[14]+((Y[24]-Y[20]))*qa[15]);
        g[1] += qb[i]*( (Y[3])*qa[0]+(Y[6])*qa[1]+(Y[8])*qa[2]+((-2.0*Y[4]-Y[7]))*qa[3]+(Y[11])*qa[4]+(Y[13])*qa[5]+((-2.0*Y[9]-Y[12]))*qa[6]+((Y[11]+Y[15]))*qa[7]+(-(Y[10]+Y[14]))*qa[8]+(Y[18])*qa[9]+(Y[20])*qa[10]+((-2.0*Y[16]-Y[19]))*qa[11]+((Y[18]+Y[22]))*qa[12]+(-(Y[17]+Y[21]))*qa[13]+((Y[20]+Y[24]))*qa[14]+(-(Y[19]+Y[23]))*qa[15]);
        g[2] += qb[i]*( (Y[1])*qa[0]+(Y[4])*qa[1]+(Y[5])*qa[2]+(Y[6])*qa[3]+(Y[9])*qa[4]+(Y[10])*qa[5]+(Y[11])*qa[6]+(Y[12])*qa[7]+(Y[13])*qa[8]+(Y[16])*qa[9]+(Y[17])*qa[10]+(Y[18])*qa[11]+(Y[19])*qa[12]+(Y[20])*qa[13]+(Y[21])*qa[14]+(Y[22])*qa[15]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}

void IlmInteractionGrd_G( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 36 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
         *(++dIlm) = -0.5 * Y[5];
         *(++dIlm) = -0.5 * Y[6];
         *(++dIlm) = Y[4];
         *(++dIlm) = (Y[4] -0.5*Y[7]);
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = Y[5];
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = (Y[4]+0.5*Y[7]);
         *(++dIlm) = Y[6];
         *(++dIlm) = -0.5 * Y[10];
         *(++dIlm) = -0.5 * Y[11];
         *(++dIlm) = Y[9];
         *(++dIlm) = (Y[9] -0.5*Y[12]);
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = Y[10];
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = (Y[9]+0.5*Y[12]);
         *(++dIlm) = Y[11];
         *(++dIlm) = 0.5 * (Y[10]-Y[14]);
         *(++dIlm) = -0.5 * (Y[11]+Y[15]);
         *(++dIlm) = Y[12];
         *(++dIlm) = 0.5 * (Y[11]-Y[15]);
         *(++dIlm) = 0.5 * (Y[10]+Y[14]);
         *(++dIlm) = Y[13];
         *(++dIlm) = -0.5 * Y[17];
         *(++dIlm) = -0.5 * Y[18];
         *(++dIlm) = Y[16];
         *(++dIlm) = (Y[16] -0.5*Y[19]);
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = Y[17];
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = (Y[16]+0.5*Y[19]);
         *(++dIlm) = Y[18];
         *(++dIlm) = 0.5 * (Y[17]-Y[21]);
         *(++dIlm) = -0.5 * (Y[18]+Y[22]);
         *(++dIlm) = Y[19];
         *(++dIlm) = 0.5 * (Y[18]-Y[22]);
         *(++dIlm) = 0.5 * (Y[17]+Y[21]);
         *(++dIlm) = Y[20];
         *(++dIlm) = 0.5 * (Y[19]-Y[23]);
         *(++dIlm) = -0.5 * (Y[20]+Y[24]);
         *(++dIlm) = Y[21];
         *(++dIlm) = 0.5 * (Y[20]-Y[24]);
         *(++dIlm) = 0.5 * (Y[19]+Y[23]);
         *(++dIlm) = Y[22];
         *(++dIlm) = -0.5 * Y[26];
         *(++dIlm) = -0.5 * Y[27];
         *(++dIlm) = Y[25];
         *(++dIlm) = (Y[25] -0.5*Y[28]);
         *(++dIlm) = -0.5 * Y[29];
         *(++dIlm) = Y[26];
         *(++dIlm) = -0.5 * Y[29];
         *(++dIlm) = (Y[25]+0.5*Y[28]);
         *(++dIlm) = Y[27];
         *(++dIlm) = 0.5 * (Y[26]-Y[30]);
         *(++dIlm) = -0.5 * (Y[27]+Y[31]);
         *(++dIlm) = Y[28];
         *(++dIlm) = 0.5 * (Y[27]-Y[31]);
         *(++dIlm) = 0.5 * (Y[26]+Y[30]);
         *(++dIlm) = Y[29];
         *(++dIlm) = 0.5 * (Y[28]-Y[32]);
         *(++dIlm) = -0.5 * (Y[29]+Y[33]);
         *(++dIlm) = Y[30];
         *(++dIlm) = 0.5 * (Y[29]-Y[33]);
         *(++dIlm) = 0.5 * (Y[28]+Y[32]);
         *(++dIlm) = Y[31];
         *(++dIlm) = 0.5 * (Y[30]-Y[34]);
         *(++dIlm) = -0.5 * (Y[31]+Y[35]);
         *(++dIlm) = Y[32];
         *(++dIlm) = 0.5 * (Y[31]-Y[35]);
         *(++dIlm) = 0.5 * (Y[30]+Y[34]);
         *(++dIlm) = Y[33];
      }
}

void IlmInteractionGrdAcc_G( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 36 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]+(Y[5])*qa[1]+((-2.0*Y[4]+Y[7]))*qa[2]+(Y[8])*qa[3]+(Y[10])*qa[4]+((-2.0*Y[9]+Y[12]))*qa[5]+(Y[13])*qa[6]+((Y[14]-Y[10]))*qa[7]+((Y[15]-Y[11]))*qa[8]+(Y[17])*qa[9]+((-2.0*Y[16]+Y[19]))*qa[10]+(Y[20])*qa[11]+((Y[21]-Y[17]))*qa[12]+((Y[22]-Y[18]))*qa[13]+((Y[23]-Y[19]))*qa[14]+((Y[24]-Y[20]))*qa[15]+(Y[26])*qa[16]+((-2.0*Y[25]+Y[28]))*qa[17]+(Y[29])*qa[18]+((Y[30]-Y[26]))*qa[19]+((Y[31]-Y[27]))*qa[20]+((Y[32]-Y[28]))*qa[21]+((Y[33]-Y[29]))*qa[22]+((Y[34]-Y[30]))*qa[23]+((Y[35]-Y[31]))*qa[24]);
        g[1] += qb[i]*( (Y[3])*qa[0]+(Y[6])*qa[1]+(Y[8])*qa[2]+((-2.0*Y[4]-Y[7]))*qa[3]+(Y[11])*qa[4]+(Y[13])*qa[5]+((-2.0*Y[9]-Y[12]))*qa[6]+((Y[11]+Y[15]))*qa[7]+(-(Y[10]+Y[14]))*qa[8]+(Y[18])*qa[9]+(Y[20])*qa[10]+((-2.0*Y[16]-Y[19]))*qa[11]+((Y[18]+Y[22]))*qa[12]+(-(Y[17]+Y[21]))*qa[13]+((Y[20]+Y[24]))*qa[14]+(-(Y[19]+Y[23]))*qa[15]+(Y[27])*qa[16]+(Y[29])*qa[17]+((-2.0*Y[25]-Y[28]))*qa[18]+((Y[27]+Y[31]))*qa[19]+(-(Y[26]+Y[30]))*qa[20]+((Y[29]+Y[33]))*qa[21]+(-(Y[28]+Y[32]))*qa[22]+((Y[31]+Y[35]))*qa[23]+(-(Y[30]+Y[34]))*qa[24]);
        g[2] += qb[i]*( (Y[1])*qa[0]+(Y[4])*qa[1]+(Y[5])*qa[2]+(Y[6])*qa[3]+(Y[9])*qa[4]+(Y[10])*qa[5]+(Y[11])*qa[6]+(Y[12])*qa[7]+(Y[13])*qa[8]+(Y[16])*qa[9]+(Y[17])*qa[10]+(Y[18])*qa[11]+(Y[19])*qa[12]+(Y[20])*qa[13]+(Y[21])*qa[14]+(Y[22])*qa[15]+(Y[25])*qa[16]+(Y[26])*qa[17]+(Y[27])*qa[18]+(Y[28])*qa[19]+(Y[29])*qa[20]+(Y[30])*qa[21]+(Y[31])*qa[22]+(Y[32])*qa[23]+(Y[33])*qa[24]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}

void IlmInteractionGrd_H( int ncol, double const *__restrict__ Y, double *__restrict__ dIlm )
{
   --dIlm;
   for ( int i=0; i<ncol; ++i, Y += 49 )
      {
         *(++dIlm) = -0.5 * Y[2];
         *(++dIlm) = -0.5 * Y[3];
         *(++dIlm) = Y[1];
         *(++dIlm) = -0.5 * Y[5];
         *(++dIlm) = -0.5 * Y[6];
         *(++dIlm) = Y[4];
         *(++dIlm) = (Y[4] -0.5*Y[7]);
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = Y[5];
         *(++dIlm) = -0.5 * Y[8];
         *(++dIlm) = (Y[4]+0.5*Y[7]);
         *(++dIlm) = Y[6];
         *(++dIlm) = -0.5 * Y[10];
         *(++dIlm) = -0.5 * Y[11];
         *(++dIlm) = Y[9];
         *(++dIlm) = (Y[9] -0.5*Y[12]);
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = Y[10];
         *(++dIlm) = -0.5 * Y[13];
         *(++dIlm) = (Y[9]+0.5*Y[12]);
         *(++dIlm) = Y[11];
         *(++dIlm) = 0.5 * (Y[10]-Y[14]);
         *(++dIlm) = -0.5 * (Y[11]+Y[15]);
         *(++dIlm) = Y[12];
         *(++dIlm) = 0.5 * (Y[11]-Y[15]);
         *(++dIlm) = 0.5 * (Y[10]+Y[14]);
         *(++dIlm) = Y[13];
         *(++dIlm) = -0.5 * Y[17];
         *(++dIlm) = -0.5 * Y[18];
         *(++dIlm) = Y[16];
         *(++dIlm) = (Y[16] -0.5*Y[19]);
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = Y[17];
         *(++dIlm) = -0.5 * Y[20];
         *(++dIlm) = (Y[16]+0.5*Y[19]);
         *(++dIlm) = Y[18];
         *(++dIlm) = 0.5 * (Y[17]-Y[21]);
         *(++dIlm) = -0.5 * (Y[18]+Y[22]);
         *(++dIlm) = Y[19];
         *(++dIlm) = 0.5 * (Y[18]-Y[22]);
         *(++dIlm) = 0.5 * (Y[17]+Y[21]);
         *(++dIlm) = Y[20];
         *(++dIlm) = 0.5 * (Y[19]-Y[23]);
         *(++dIlm) = -0.5 * (Y[20]+Y[24]);
         *(++dIlm) = Y[21];
         *(++dIlm) = 0.5 * (Y[20]-Y[24]);
         *(++dIlm) = 0.5 * (Y[19]+Y[23]);
         *(++dIlm) = Y[22];
         *(++dIlm) = -0.5 * Y[26];
         *(++dIlm) = -0.5 * Y[27];
         *(++dIlm) = Y[25];
         *(++dIlm) = (Y[25] -0.5*Y[28]);
         *(++dIlm) = -0.5 * Y[29];
         *(++dIlm) = Y[26];
         *(++dIlm) = -0.5 * Y[29];
         *(++dIlm) = (Y[25]+0.5*Y[28]);
         *(++dIlm) = Y[27];
         *(++dIlm) = 0.5 * (Y[26]-Y[30]);
         *(++dIlm) = -0.5 * (Y[27]+Y[31]);
         *(++dIlm) = Y[28];
         *(++dIlm) = 0.5 * (Y[27]-Y[31]);
         *(++dIlm) = 0.5 * (Y[26]+Y[30]);
         *(++dIlm) = Y[29];
         *(++dIlm) = 0.5 * (Y[28]-Y[32]);
         *(++dIlm) = -0.5 * (Y[29]+Y[33]);
         *(++dIlm) = Y[30];
         *(++dIlm) = 0.5 * (Y[29]-Y[33]);
         *(++dIlm) = 0.5 * (Y[28]+Y[32]);
         *(++dIlm) = Y[31];
         *(++dIlm) = 0.5 * (Y[30]-Y[34]);
         *(++dIlm) = -0.5 * (Y[31]+Y[35]);
         *(++dIlm) = Y[32];
         *(++dIlm) = 0.5 * (Y[31]-Y[35]);
         *(++dIlm) = 0.5 * (Y[30]+Y[34]);
         *(++dIlm) = Y[33];
         *(++dIlm) = -0.5 * Y[37];
         *(++dIlm) = -0.5 * Y[38];
         *(++dIlm) = Y[36];
         *(++dIlm) = (Y[36] -0.5*Y[39]);
         *(++dIlm) = -0.5 * Y[40];
         *(++dIlm) = Y[37];
         *(++dIlm) = -0.5 * Y[40];
         *(++dIlm) = (Y[36]+0.5*Y[39]);
         *(++dIlm) = Y[38];
         *(++dIlm) = 0.5 * (Y[37]-Y[41]);
         *(++dIlm) = -0.5 * (Y[38]+Y[42]);
         *(++dIlm) = Y[39];
         *(++dIlm) = 0.5 * (Y[38]-Y[42]);
         *(++dIlm) = 0.5 * (Y[37]+Y[41]);
         *(++dIlm) = Y[40];
         *(++dIlm) = 0.5 * (Y[39]-Y[43]);
         *(++dIlm) = -0.5 * (Y[40]+Y[44]);
         *(++dIlm) = Y[41];
         *(++dIlm) = 0.5 * (Y[40]-Y[44]);
         *(++dIlm) = 0.5 * (Y[39]+Y[43]);
         *(++dIlm) = Y[42];
         *(++dIlm) = 0.5 * (Y[41]-Y[45]);
         *(++dIlm) = -0.5 * (Y[42]+Y[46]);
         *(++dIlm) = Y[43];
         *(++dIlm) = 0.5 * (Y[42]-Y[46]);
         *(++dIlm) = 0.5 * (Y[41]+Y[45]);
         *(++dIlm) = Y[44];
         *(++dIlm) = 0.5 * (Y[43]-Y[47]);
         *(++dIlm) = -0.5 * (Y[44]+Y[48]);
         *(++dIlm) = Y[45];
         *(++dIlm) = 0.5 * (Y[44]-Y[48]);
         *(++dIlm) = 0.5 * (Y[43]+Y[47]);
         *(++dIlm) = Y[46];
      }
}

void IlmInteractionGrdAcc_H( int ncol, double const *__restrict__ qa, double *__restrict__ qb, double const *__restrict__ Y, double *__restrict__ g )
{
   for ( int i=0; i<ncol; ++i, Y += 49 )
      {
        g[0] += qb[i]*( (Y[2])*qa[0]+(Y[5])*qa[1]+((-2.0*Y[4]+Y[7]))*qa[2]+(Y[8])*qa[3]+(Y[10])*qa[4]+((-2.0*Y[9]+Y[12]))*qa[5]+(Y[13])*qa[6]+((Y[14]-Y[10]))*qa[7]+((Y[15]-Y[11]))*qa[8]+(Y[17])*qa[9]+((-2.0*Y[16]+Y[19]))*qa[10]+(Y[20])*qa[11]+((Y[21]-Y[17]))*qa[12]+((Y[22]-Y[18]))*qa[13]+((Y[23]-Y[19]))*qa[14]+((Y[24]-Y[20]))*qa[15]+(Y[26])*qa[16]+((-2.0*Y[25]+Y[28]))*qa[17]+(Y[29])*qa[18]+((Y[30]-Y[26]))*qa[19]+((Y[31]-Y[27]))*qa[20]+((Y[32]-Y[28]))*qa[21]+((Y[33]-Y[29]))*qa[22]+((Y[34]-Y[30]))*qa[23]+((Y[35]-Y[31]))*qa[24]+(Y[37])*qa[25]+((-2.0*Y[36]+Y[39]))*qa[26]+(Y[40])*qa[27]+((Y[41]-Y[37]))*qa[28]+((Y[42]-Y[38]))*qa[29]+((Y[43]-Y[39]))*qa[30]+((Y[44]-Y[40]))*qa[31]+((Y[45]-Y[41]))*qa[32]+((Y[46]-Y[42]))*qa[33]+((Y[47]-Y[43]))*qa[34]+((Y[48]-Y[44]))*qa[35]);
        g[1] += qb[i]*( (Y[3])*qa[0]+(Y[6])*qa[1]+(Y[8])*qa[2]+((-2.0*Y[4]-Y[7]))*qa[3]+(Y[11])*qa[4]+(Y[13])*qa[5]+((-2.0*Y[9]-Y[12]))*qa[6]+((Y[11]+Y[15]))*qa[7]+(-(Y[10]+Y[14]))*qa[8]+(Y[18])*qa[9]+(Y[20])*qa[10]+((-2.0*Y[16]-Y[19]))*qa[11]+((Y[18]+Y[22]))*qa[12]+(-(Y[17]+Y[21]))*qa[13]+((Y[20]+Y[24]))*qa[14]+(-(Y[19]+Y[23]))*qa[15]+(Y[27])*qa[16]+(Y[29])*qa[17]+((-2.0*Y[25]-Y[28]))*qa[18]+((Y[27]+Y[31]))*qa[19]+(-(Y[26]+Y[30]))*qa[20]+((Y[29]+Y[33]))*qa[21]+(-(Y[28]+Y[32]))*qa[22]+((Y[31]+Y[35]))*qa[23]+(-(Y[30]+Y[34]))*qa[24]+(Y[38])*qa[25]+(Y[40])*qa[26]+((-2.0*Y[36]-Y[39]))*qa[27]+((Y[38]+Y[42]))*qa[28]+(-(Y[37]+Y[41]))*qa[29]+((Y[40]+Y[44]))*qa[30]+(-(Y[39]+Y[43]))*qa[31]+((Y[42]+Y[46]))*qa[32]+(-(Y[41]+Y[45]))*qa[33]+((Y[44]+Y[48]))*qa[34]+(-(Y[43]+Y[47]))*qa[35]);
        g[2] += qb[i]*( (Y[1])*qa[0]+(Y[4])*qa[1]+(Y[5])*qa[2]+(Y[6])*qa[3]+(Y[9])*qa[4]+(Y[10])*qa[5]+(Y[11])*qa[6]+(Y[12])*qa[7]+(Y[13])*qa[8]+(Y[16])*qa[9]+(Y[17])*qa[10]+(Y[18])*qa[11]+(Y[19])*qa[12]+(Y[20])*qa[13]+(Y[21])*qa[14]+(Y[22])*qa[15]+(Y[25])*qa[16]+(Y[26])*qa[17]+(Y[27])*qa[18]+(Y[28])*qa[19]+(Y[29])*qa[20]+(Y[30])*qa[21]+(Y[31])*qa[22]+(Y[32])*qa[23]+(Y[33])*qa[24]+(Y[36])*qa[25]+(Y[37])*qa[26]+(Y[38])*qa[27]+(Y[39])*qa[28]+(Y[40])*qa[29]+(Y[41])*qa[30]+(Y[42])*qa[31]+(Y[43])*qa[32]+(Y[44])*qa[33]+(Y[45])*qa[34]+(Y[46])*qa[35]);
      }
   g[0] *= -0.5; g[1] *= -0.5;
}




} // namespace ccdl


void ccdl::PtExpGrd_PP( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[36];
   ccdl::SolidHarm_Ilm_F(crd,r2,dT);
   ccdl::IlmIntFromIlm_DP(dT,X);
   ccdl::IlmInteractionGrd_P(4,X,dT);
   --T; --dT;
   for ( int j=0; j<4; ++j ) 
      for ( int i=0; i<4; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*9]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_DS( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[16];
   ccdl::SolidHarm_Ilm_F(crd,r2,dT);
   ccdl::IlmIntFromIlm_FS(dT,X);
   ccdl::IlmInteractionGrd_D(1,X,dT);
   --T; --dT;
   for ( int i=0; i<9; ++i ) 
      {
          *(++T)  = X[i]/GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
      };
}

void ccdl::PtExpGrd_DP( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[64];
   ccdl::SolidHarm_Ilm_G(crd,r2,dT);
   ccdl::IlmIntFromIlm_FP(dT,X);
   ccdl::IlmInteractionGrd_D(4,X,dT);
   --T; --dT;
   for ( int j=0; j<4; ++j ) 
      for ( int i=0; i<9; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*16]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_DD( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[144];
   ccdl::SolidHarm_Ilm_H(crd,r2,dT);
   ccdl::IlmIntFromIlm_FD(dT,X);
   ccdl::IlmInteractionGrd_D(9,X,dT);
   --T; --dT;
   for ( int j=0; j<9; ++j ) 
      for ( int i=0; i<9; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*16]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_FS( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[25];
   ccdl::SolidHarm_Ilm_G(crd,r2,dT);
   ccdl::IlmIntFromIlm_GS(dT,X);
   ccdl::IlmInteractionGrd_F(1,X,dT);
   --T; --dT;
   for ( int i=0; i<16; ++i ) 
      {
          *(++T)  = X[i]/GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
      };
}

void ccdl::PtExpGrd_FP( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[100];
   ccdl::SolidHarm_Ilm_H(crd,r2,dT);
   ccdl::IlmIntFromIlm_GP(dT,X);
   ccdl::IlmInteractionGrd_F(4,X,dT);
   --T; --dT;
   for ( int j=0; j<4; ++j ) 
      for ( int i=0; i<16; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*25]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_FD( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[225];
   ccdl::SolidHarm_Ilm_I(crd,r2,dT);
   ccdl::IlmIntFromIlm_GD(dT,X);
   ccdl::IlmInteractionGrd_F(9,X,dT);
   --T; --dT;
   for ( int j=0; j<9; ++j ) 
      for ( int i=0; i<16; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*25]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_FF( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[400];
   ccdl::SolidHarm_Ilm_J(crd,r2,dT);
   ccdl::IlmIntFromIlm_GF(dT,X);
   ccdl::IlmInteractionGrd_F(16,X,dT);
   --T; --dT;
   for ( int j=0; j<16; ++j ) 
      for ( int i=0; i<16; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*25]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_GS( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[36];
   ccdl::SolidHarm_Ilm_H(crd,r2,dT);
   ccdl::IlmIntFromIlm_HS(dT,X);
   ccdl::IlmInteractionGrd_G(1,X,dT);
   --T; --dT;
   for ( int i=0; i<25; ++i ) 
      {
          *(++T)  = X[i]/GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
      };
}

void ccdl::PtExpGrd_GP( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[144];
   ccdl::SolidHarm_Ilm_I(crd,r2,dT);
   ccdl::IlmIntFromIlm_HP(dT,X);
   ccdl::IlmInteractionGrd_G(4,X,dT);
   --T; --dT;
   for ( int j=0; j<4; ++j ) 
      for ( int i=0; i<25; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*36]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_GD( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[324];
   ccdl::SolidHarm_Ilm_J(crd,r2,dT);
   ccdl::IlmIntFromIlm_HD(dT,X);
   ccdl::IlmInteractionGrd_G(9,X,dT);
   --T; --dT;
   for ( int j=0; j<9; ++j ) 
      for ( int i=0; i<25; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*36]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_GF( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[576];
   ccdl::SolidHarm_Ilm_K(crd,r2,dT);
   ccdl::IlmIntFromIlm_HF(dT,X);
   ccdl::IlmInteractionGrd_G(16,X,dT);
   --T; --dT;
   for ( int j=0; j<16; ++j ) 
      for ( int i=0; i<25; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*36]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_GG( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[900];
   ccdl::SolidHarm_Ilm_L(crd,r2,dT);
   ccdl::IlmIntFromIlm_HG(dT,X);
   ccdl::IlmInteractionGrd_G(25,X,dT);
   --T; --dT;
   for ( int j=0; j<25; ++j ) 
      for ( int i=0; i<25; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*36]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_HS( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,dT);
   ccdl::IlmIntFromIlm_IS(dT,X);
   ccdl::IlmInteractionGrd_H(1,X,dT);
   --T; --dT;
   for ( int i=0; i<36; ++i ) 
      {
          *(++T)  = X[i]/GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
          *(++dT) /= GlobalAlmC[i];
      };
}

void ccdl::PtExpGrd_HP( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[196];
   ccdl::SolidHarm_Ilm_J(crd,r2,dT);
   ccdl::IlmIntFromIlm_IP(dT,X);
   ccdl::IlmInteractionGrd_H(4,X,dT);
   --T; --dT;
   for ( int j=0; j<4; ++j ) 
      for ( int i=0; i<36; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*49]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_HD( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[441];
   ccdl::SolidHarm_Ilm_K(crd,r2,dT);
   ccdl::IlmIntFromIlm_ID(dT,X);
   ccdl::IlmInteractionGrd_H(9,X,dT);
   --T; --dT;
   for ( int j=0; j<9; ++j ) 
      for ( int i=0; i<36; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*49]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_HF( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[784];
   ccdl::SolidHarm_Ilm_L(crd,r2,dT);
   ccdl::IlmIntFromIlm_IF(dT,X);
   ccdl::IlmInteractionGrd_H(16,X,dT);
   --T; --dT;
   for ( int j=0; j<16; ++j ) 
      for ( int i=0; i<36; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*49]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_HG( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[1225];
   ccdl::SolidHarm_Ilm_M(crd,r2,dT);
   ccdl::IlmIntFromIlm_IG(dT,X);
   ccdl::IlmInteractionGrd_H(25,X,dT);
   --T; --dT;
   for ( int j=0; j<25; ++j ) 
      for ( int i=0; i<36; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*49]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpGrd_HH( double const *__restrict__ crd, double const r2, double *__restrict__ T, double *__restrict__ dT )
{
   double X[1764];
   ccdl::SolidHarm_Ilm_N(crd,r2,dT);
   ccdl::IlmIntFromIlm_IH(dT,X);
   ccdl::IlmInteractionGrd_H(36,X,dT);
   --T; --dT;
   for ( int j=0; j<36; ++j ) 
      for ( int i=0; i<36; ++i )
         {
             double c = 1./( GlobalAlmC[i]*GlobalAlmC[j] );
             *(++T)   = X[i+j*49]*c;
             *(++dT) *= c;
             *(++dT) *= c;
             *(++dT) *= c;
         };
}

void ccdl::PtExpPot_DP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   ccdl::IlmInteraction_DP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<9; ++i )
        {
          double a = T[i+j*9] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_DD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[81];
   ccdl::IlmInteraction_DD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<9; ++i )
        {
          double a = T[i+j*9] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_FS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[16];
   ccdl::IlmInteraction_FS(crd,r2,T);

   for ( int i=0; i<16; ++i )
      {
        double a = T[i] / GlobalAlmC[i];
        pa[i] += a * *qb;
        *pb += a * qa[i];
      };
}
void ccdl::PtExpPot_FP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[64];
   ccdl::IlmInteraction_FP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<16; ++i )
        {
          double a = T[i+j*16] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_FD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[144];
   ccdl::IlmInteraction_FD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<16; ++i )
        {
          double a = T[i+j*16] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_FF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[256];
   ccdl::IlmInteraction_FF(crd,r2,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<16; ++i )
        {
          double a = T[i+j*16] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_GS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[25];
   ccdl::IlmInteraction_GS(crd,r2,T);

   for ( int i=0; i<25; ++i )
      {
        double a = T[i] / GlobalAlmC[i];
        pa[i] += a * *qb;
        *pb += a * qa[i];
      };
}
void ccdl::PtExpPot_GP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[100];
   ccdl::IlmInteraction_GP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<25; ++i )
        {
          double a = T[i+j*25] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_GD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[225];
   ccdl::IlmInteraction_GD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<25; ++i )
        {
          double a = T[i+j*25] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_GF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[400];
   ccdl::IlmInteraction_GF(crd,r2,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<25; ++i )
        {
          double a = T[i+j*25] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_GG( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[625];
   ccdl::IlmInteraction_GG(crd,r2,T);

  for ( int j=0; j<25; ++j )
     for ( int i=0; i<25; ++i )
        {
          double a = T[i+j*25] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_HS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[36];
   ccdl::IlmInteraction_HS(crd,r2,T);

   for ( int i=0; i<36; ++i )
      {
        double a = T[i] / GlobalAlmC[i];
        pa[i] += a * *qb;
        *pb += a * qa[i];
      };
}
void ccdl::PtExpPot_HP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[144];
   ccdl::IlmInteraction_HP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<36; ++i )
        {
          double a = T[i+j*36] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_HD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[324];
   ccdl::IlmInteraction_HD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<36; ++i )
        {
          double a = T[i+j*36] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_HF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[576];
   ccdl::IlmInteraction_HF(crd,r2,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<36; ++i )
        {
          double a = T[i+j*36] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_HG( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[900];
   ccdl::IlmInteraction_HG(crd,r2,T);

  for ( int j=0; j<25; ++j )
     for ( int i=0; i<36; ++i )
        {
          double a = T[i+j*36] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPot_HH( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   double T[1296];
   ccdl::IlmInteraction_HH(crd,r2,T);

  for ( int j=0; j<36; ++j )
     for ( int i=0; i<36; ++i )
        {
          double a = T[i+j*36] / ( GlobalAlmC[i] * GlobalAlmC[j] );
          pa[i] += a * qb[j];
          pb[j] += a * qa[i];
        };
}
void ccdl::PtExpPotGrd_PP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[4],QB[4],PA[4],PB[4],T[36];

   for ( int i=0; i<4; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      QB[i] = qb[i] / GlobalAlmC[i];
      PA[i] = 0.;
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_DP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<4; ++i )
        {
          PA[i] += T[i+j*9]  * QB[j];
          PB[j] += T[i+j*9]  * QA[i];
        };

   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_P(4,QA,QB,T,g);

   for ( int i=0; i<4; ++i )
   {
      pa[i] += PA[i] / GlobalAlmC[i];
      pb[i] += PB[i] / GlobalAlmC[i];
   }
}

void ccdl::PtExpPotGrd_DS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[9],QB[1],PA[9],PB[1],T[16];

   for ( int i=0; i<9; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   *QB = *qb;
   *PB = 0.;
   ccdl::IlmInteraction_FS(crd,r2,T);

   for ( int i=0; i<9; ++i )
      {
        PA[i] += T[i] * *QB;
        *PB   += T[i] * QA[i];
      };

   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_D(1,QA,QB,T,g);

   for ( int i=0; i<9; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   *pb += *PB;
}

void ccdl::PtExpPotGrd_DP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[9],QB[4],PA[9],PB[4],T[64];

   for ( int i=0; i<9; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<4; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_FP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<9; ++i )
        {
          PA[i] += T[i+j*16] * QB[j];
          PB[j] += T[i+j*16] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_D(4,QA,QB,T,g);

   for ( int i=0; i<9; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<4; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_DD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[9],QB[9],PA[9],PB[9],T[144];

   for ( int i=0; i<9; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      QB[i] = qb[i] / GlobalAlmC[i];
      PA[i] = 0.;
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_FD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<9; ++i )
        {
          PA[i] += T[i+j*16] * QB[j];
          PB[j] += T[i+j*16] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_D(9,QA,QB,T,g);

   for ( int i=0; i<9; ++i )
   {
      pa[i] += PA[i] / GlobalAlmC[i];
      pb[i] += PB[i] / GlobalAlmC[i];
   }
}

void ccdl::PtExpPotGrd_FS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[16],QB[1],PA[16],PB[1],T[25];

   for ( int i=0; i<16; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   *QB = *qb;
   *PB = 0.;
   ccdl::IlmInteraction_GS(crd,r2,T);

   for ( int i=0; i<16; ++i )
      {
        PA[i] += T[i] * *QB;
        *PB += T[i] * QA[i];
      };

   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_F(1,QA,QB,T,g);

   for ( int i=0; i<16; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   *pb += *PB;
}

void ccdl::PtExpPotGrd_FP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[16],QB[4],PA[16],PB[4],T[100];

   for ( int i=0; i<16; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<4; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_GP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<16; ++i )
        {
          PA[i] += T[i+j*25] * QB[j];
          PB[j] += T[i+j*25] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_F(4,QA,QB,T,g);

   for ( int i=0; i<16; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<4; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_FD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[16],QB[9],PA[16],PB[9],T[225];

   for ( int i=0; i<16; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<9; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_GD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<16; ++i )
        {
          PA[i] += T[i+j*25] * QB[j];
          PB[j] += T[i+j*25] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_F(9,QA,QB,T,g);

   for ( int i=0; i<16; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<9; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_FF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[16],QB[16],PA[16],PB[16],T[400];

   for ( int i=0; i<16; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      QB[i] = qb[i] / GlobalAlmC[i];
      PA[i] = 0.;
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_GF(crd,r2,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<16; ++i )
        {
          PA[i] += T[i+j*25] * QB[j];
          PB[j] += T[i+j*25] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_F(16,QA,QB,T,g);

   for ( int i=0; i<16; ++i )
   {
      pa[i] += PA[i] / GlobalAlmC[i];
      pb[i] += PB[i] / GlobalAlmC[i];
   }
}

void ccdl::PtExpPotGrd_GS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[25],QB[1],PA[25],PB[1],T[36];

   for ( int i=0; i<25; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   *QB = *qb;
   *PB = 0.;
   ccdl::IlmInteraction_HS(crd,r2,T);

   for ( int i=0; i<25; ++i )
      {
        PA[i] += T[i] * *QB;
        *PB += T[i] * QA[i];
      };

   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_G(1,QA,QB,T,g);

   for ( int i=0; i<25; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   *pb += *PB;
}

void ccdl::PtExpPotGrd_GP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[25],QB[4],PA[25],PB[4],T[144];

   for ( int i=0; i<25; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<4; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_HP(crd,r2,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<25; ++i )
        {
          PA[i] += T[i+j*36] * QB[j];
          PB[j] += T[i+j*36] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_G(4,QA,QB,T,g);

   for ( int i=0; i<25; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<4; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_GD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[25],QB[9],PA[25],PB[9],T[324];

   for ( int i=0; i<25; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<9; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_HD(crd,r2,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<25; ++i )
        {
          PA[i] += T[i+j*36] * QB[j];
          PB[j] += T[i+j*36] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_G(9,QA,QB,T,g);

   for ( int i=0; i<25; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<9; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_GF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[25],QB[16],PA[25],PB[16],T[576];

   for ( int i=0; i<25; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<16; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_HF(crd,r2,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<25; ++i )
        {
          PA[i] += T[i+j*36] * QB[j];
          PB[j] += T[i+j*36] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_G(16,QA,QB,T,g);

   for ( int i=0; i<25; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<16; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_GG( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[25],QB[25],PA[25],PB[25],T[900];

   for ( int i=0; i<25; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      QB[i] = qb[i] / GlobalAlmC[i];
      PA[i] = 0.;
      PB[i] = 0.;
   }
   ccdl::IlmInteraction_HG(crd,r2,T);

  for ( int j=0; j<25; ++j )
     for ( int i=0; i<25; ++i )
        {
          PA[i] += T[i+j*36] * QB[j];
          PB[j] += T[i+j*36] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_G(25,QA,QB,T,g);

   for ( int i=0; i<25; ++i )
   {
      pa[i] += PA[i] / GlobalAlmC[i];
      pb[i] += PB[i] / GlobalAlmC[i];
   }
}

void ccdl::PtExpPotGrd_HS( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[1],PA[36],PB[1],T[49];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   *QB = *qb;
   *PB = 0.;
   double Y[49];
   ccdl::SolidHarm_Ilm_I(crd,r2,Y);
   ccdl::IlmIntFromIlm_IS(Y,T);

   for ( int i=0; i<36; ++i )
      {
        PA[i] += T[i] * *QB;
        *PB += T[i] * QA[i];
      };

   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(1,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   *pb += *PB;
}

void ccdl::PtExpPotGrd_HP( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[4],PA[36],PB[4],T[196];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<4; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   double Y[64];
   ccdl::SolidHarm_Ilm_J(crd,r2,Y);
   ccdl::IlmIntFromIlm_IP(Y,T);

  for ( int j=0; j<4; ++j )
     for ( int i=0; i<36; ++i )
        {
          PA[i] += T[i+j*49] * QB[j];
          PB[j] += T[i+j*49] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(4,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<4; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_HD( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[9],PA[36],PB[9],T[441];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<9; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   double Y[81];
   ccdl::SolidHarm_Ilm_K(crd,r2,Y);
   ccdl::IlmIntFromIlm_ID(Y,T);

  for ( int j=0; j<9; ++j )
     for ( int i=0; i<36; ++i )
        {
          PA[i] += T[i+j*49] * QB[j];
          PB[j] += T[i+j*49] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(9,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<9; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_HF( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[16],PA[36],PB[16],T[784];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<16; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   double Y[100];
   ccdl::SolidHarm_Ilm_L(crd,r2,Y);
   ccdl::IlmIntFromIlm_IF(Y,T);

  for ( int j=0; j<16; ++j )
     for ( int i=0; i<36; ++i )
        {
          PA[i] += T[i+j*49] * QB[j];
          PB[j] += T[i+j*49] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(16,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<16; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_HG( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[25],PA[36],PB[25],T[1225];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      PA[i] = 0.;
   }
   for ( int i=0; i<25; ++i )
   {
      QB[i] = qb[i] / GlobalAlmC[i];
      PB[i] = 0.;
   }
   double Y[121];
   ccdl::SolidHarm_Ilm_M(crd,r2,Y);
   ccdl::IlmIntFromIlm_IG(Y,T);

  for ( int j=0; j<25; ++j )
     for ( int i=0; i<36; ++i )
        {
          PA[i] += T[i+j*49] * QB[j];
          PB[j] += T[i+j*49] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(25,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
      pa[i] += PA[i] / GlobalAlmC[i];

   for ( int i=0; i<25; ++i )
      pb[i] += PB[i] / GlobalAlmC[i];
}

void ccdl::PtExpPotGrd_HH( double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ g )
{
   double QA[36],QB[36],PA[36],PB[36],T[1764];

   for ( int i=0; i<36; ++i )
   {
      QA[i] = qa[i] / GlobalAlmC[i];
      QB[i] = qb[i] / GlobalAlmC[i];
      PA[i] = 0.;
      PB[i] = 0.;
   }
   double Y[144];
   ccdl::SolidHarm_Ilm_N(crd,r2,Y);
   ccdl::IlmIntFromIlm_IH(Y,T);

  for ( int j=0; j<36; ++j )
     for ( int i=0; i<36; ++i )
        {
          PA[i] += T[i+j*49] * QB[j];
          PB[j] += T[i+j*49] * QA[i];
        };
   g[0] = 0.; g[1] = 0.; g[2] = 0.;
   ccdl::IlmInteractionGrdAcc_H(36,QA,QB,T,g);

   for ( int i=0; i<36; ++i )
   {
      pa[i] += PA[i] / GlobalAlmC[i];
      pb[i] += PB[i] / GlobalAlmC[i];
   }
}

void ccdl::SolidHarm_Ilm_Switch( int const lmax, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   switch(lmax) {
      case (0): ccdl::SolidHarm_Ilm_S(crd,r2,X); break;
      case (1): ccdl::SolidHarm_Ilm_P(crd,r2,X); break;
      case (2): ccdl::SolidHarm_Ilm_D(crd,r2,X); break;
      case (3): ccdl::SolidHarm_Ilm_F(crd,r2,X); break;
      case (4): ccdl::SolidHarm_Ilm_G(crd,r2,X); break;
      case (5): ccdl::SolidHarm_Ilm_H(crd,r2,X); break;
      case (6): ccdl::SolidHarm_Ilm_I(crd,r2,X); break;
      case (7): ccdl::SolidHarm_Ilm_J(crd,r2,X); break;
      case (8): ccdl::SolidHarm_Ilm_K(crd,r2,X); break;
      case (9): ccdl::SolidHarm_Ilm_L(crd,r2,X); break;
      case (10): ccdl::SolidHarm_Ilm_M(crd,r2,X); break;
      case (11): ccdl::SolidHarm_Ilm_N(crd,r2,X); break;
      default: std::cerr << "ccdl::%s_Switch : Invalid lmax " << lmax << std::endl;
   }
}

void ccdl::SolidHarm_dIlm_Switch( int const lmax, double const *__restrict__ Y, double *__restrict__ dY )
{
   switch(lmax) {
      case (0): ccdl::SolidHarm_dIlm_S(Y,dY); break;
      case (1): ccdl::SolidHarm_dIlm_P(Y,dY); break;
      case (2): ccdl::SolidHarm_dIlm_D(Y,dY); break;
      case (3): ccdl::SolidHarm_dIlm_F(Y,dY); break;
      case (4): ccdl::SolidHarm_dIlm_G(Y,dY); break;
      case (5): ccdl::SolidHarm_dIlm_H(Y,dY); break;
      case (6): ccdl::SolidHarm_dIlm_I(Y,dY); break;
      case (7): ccdl::SolidHarm_dIlm_J(Y,dY); break;
      case (8): ccdl::SolidHarm_dIlm_K(Y,dY); break;
      case (9): ccdl::SolidHarm_dIlm_L(Y,dY); break;
      case (10): ccdl::SolidHarm_dIlm_M(Y,dY); break;
      default: std::cerr << "ccdl::%s_Switch : Invalid lmax " << lmax << std::endl;
   }
}

void ccdl::IlmInteraction_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   if ( la == 0 and lb == 0 ) { ccdl::IlmInteraction_SS(crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::IlmInteraction_PS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::IlmInteraction_PP(crd,r2,X); }
      else {  std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::IlmInteraction_DS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::IlmInteraction_DP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::IlmInteraction_DD(crd,r2,X); }
      else {  std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::IlmInteraction_FS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::IlmInteraction_FP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::IlmInteraction_FD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::IlmInteraction_FF(crd,r2,X); }
      else {  std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::IlmInteraction_GS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::IlmInteraction_GP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::IlmInteraction_GD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::IlmInteraction_GF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::IlmInteraction_GG(crd,r2,X); }
      else {  std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::IlmInteraction_HS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::IlmInteraction_HP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::IlmInteraction_HD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::IlmInteraction_HF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::IlmInteraction_HG(crd,r2,X); }
      else if ( lb == 5 ) { ccdl::IlmInteraction_HH(crd,r2,X); }
      else {  std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::IlmInteraction_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PtExpInt_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double *__restrict__ X )
{
   if ( la == 0 and lb == 0 ) { ccdl::PtExpInt_SS(crd,r2,X); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PtExpInt_PS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PtExpInt_PP(crd,r2,X); }
      else {  std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PtExpInt_DS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PtExpInt_DP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PtExpInt_DD(crd,r2,X); }
      else {  std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PtExpInt_FS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PtExpInt_FP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PtExpInt_FD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PtExpInt_FF(crd,r2,X); }
      else {  std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PtExpInt_GS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PtExpInt_GP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PtExpInt_GD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PtExpInt_GF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PtExpInt_GG(crd,r2,X); }
      else {  std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PtExpInt_HS(crd,r2,X); }
      else if ( lb == 1 ) { ccdl::PtExpInt_HP(crd,r2,X); }
      else if ( lb == 2 ) { ccdl::PtExpInt_HD(crd,r2,X); }
      else if ( lb == 3 ) { ccdl::PtExpInt_HF(crd,r2,X); }
      else if ( lb == 4 ) { ccdl::PtExpInt_HG(crd,r2,X); }
      else if ( lb == 5 ) { ccdl::PtExpInt_HH(crd,r2,X); }
      else {  std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PtExpInt_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PtExpGrd_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double *__restrict__ X, double *__restrict__ dX )
{
   if ( la == 0 and lb == 0 ) { ccdl::PtExpGrd_SS(crd,r2,X,dX); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PtExpGrd_PS(crd,r2,X,dX); }
      else if ( lb == 1 ) { ccdl::PtExpGrd_PP(crd,r2,X,dX); }
      else {  std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PtExpGrd_DS(crd,r2,X,dX); }
      else if ( lb == 1 ) { ccdl::PtExpGrd_DP(crd,r2,X,dX); }
      else if ( lb == 2 ) { ccdl::PtExpGrd_DD(crd,r2,X,dX); }
      else {  std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PtExpGrd_FS(crd,r2,X,dX); }
      else if ( lb == 1 ) { ccdl::PtExpGrd_FP(crd,r2,X,dX); }
      else if ( lb == 2 ) { ccdl::PtExpGrd_FD(crd,r2,X,dX); }
      else if ( lb == 3 ) { ccdl::PtExpGrd_FF(crd,r2,X,dX); }
      else {  std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PtExpGrd_GS(crd,r2,X,dX); }
      else if ( lb == 1 ) { ccdl::PtExpGrd_GP(crd,r2,X,dX); }
      else if ( lb == 2 ) { ccdl::PtExpGrd_GD(crd,r2,X,dX); }
      else if ( lb == 3 ) { ccdl::PtExpGrd_GF(crd,r2,X,dX); }
      else if ( lb == 4 ) { ccdl::PtExpGrd_GG(crd,r2,X,dX); }
      else {  std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PtExpGrd_HS(crd,r2,X,dX); }
      else if ( lb == 1 ) { ccdl::PtExpGrd_HP(crd,r2,X,dX); }
      else if ( lb == 2 ) { ccdl::PtExpGrd_HD(crd,r2,X,dX); }
      else if ( lb == 3 ) { ccdl::PtExpGrd_HF(crd,r2,X,dX); }
      else if ( lb == 4 ) { ccdl::PtExpGrd_HG(crd,r2,X,dX); }
      else if ( lb == 5 ) { ccdl::PtExpGrd_HH(crd,r2,X,dX); }
      else {  std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PtExpGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PtExpPot_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb )
{
   if ( la == 0 and lb == 0 ) { ccdl::PtExpPot_SS(crd,r2,qa,qb,pa,pb); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PtExpPot_PS(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PtExpPot_PP(crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PtExpPot_DS(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PtExpPot_DP(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PtExpPot_DD(crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PtExpPot_FS(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PtExpPot_FP(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PtExpPot_FD(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PtExpPot_FF(crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PtExpPot_GS(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PtExpPot_GP(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PtExpPot_GD(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PtExpPot_GF(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PtExpPot_GG(crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PtExpPot_HS(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 1 ) { ccdl::PtExpPot_HP(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 2 ) { ccdl::PtExpPot_HD(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 3 ) { ccdl::PtExpPot_HF(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 4 ) { ccdl::PtExpPot_HG(crd,r2,qa,qb,pa,pb); }
      else if ( lb == 5 ) { ccdl::PtExpPot_HH(crd,r2,qa,qb,pa,pb); }
      else {  std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PtExpPot_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

void ccdl::PtExpPotGrd_Switch( int const la, int const lb, double const *__restrict__ crd, double const r2, double const *__restrict__ qa, double const *__restrict__ qb, double *__restrict__ pa, double *__restrict__ pb, double *__restrict__ grd )
{
   if ( la == 0 and lb == 0 ) { ccdl::PtExpPotGrd_SS(crd,r2,qa,qb,pa,pb,grd); }
   else if ( la == 1 ) {
      if      ( lb == 0 ) { ccdl::PtExpPotGrd_PS(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PtExpPotGrd_PP(crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 2 ) {
      if      ( lb == 0 ) { ccdl::PtExpPotGrd_DS(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PtExpPotGrd_DP(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PtExpPotGrd_DD(crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 3 ) {
      if      ( lb == 0 ) { ccdl::PtExpPotGrd_FS(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PtExpPotGrd_FP(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PtExpPotGrd_FD(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PtExpPotGrd_FF(crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 4 ) {
      if      ( lb == 0 ) { ccdl::PtExpPotGrd_GS(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PtExpPotGrd_GP(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PtExpPotGrd_GD(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PtExpPotGrd_GF(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PtExpPotGrd_GG(crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
 }
   else if ( la == 5 ) {
      if      ( lb == 0 ) { ccdl::PtExpPotGrd_HS(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 1 ) { ccdl::PtExpPotGrd_HP(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 2 ) { ccdl::PtExpPotGrd_HD(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 3 ) { ccdl::PtExpPotGrd_HF(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 4 ) { ccdl::PtExpPotGrd_HG(crd,r2,qa,qb,pa,pb,grd); }
      else if ( lb == 5 ) { ccdl::PtExpPotGrd_HH(crd,r2,qa,qb,pa,pb,grd); }
      else {  std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
   } else {   std::cerr << "ccdl::PtExpPotGrd_Switch : Invalid la,lb " << la << " " << lb << std::endl; };
}

